{
  "api/Apizr.AkavacheCacheHandler.html": {
    "href": "api/Apizr.AkavacheCacheHandler.html",
    "title": "Class AkavacheCacheHandler | Apizr",
    "keywords": "Class AkavacheCacheHandler Namespace Apizr Assembly Apizr.Integrations.Akavache.dll Akavache cache handler implementation public class AkavacheCacheHandler : ICacheHandler Inheritance object AkavacheCacheHandler Implements ICacheHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AkavacheCacheHandler() Set Akavache as CacheHandler with LocalMachine blob cache and ApizrAkavacheCacheHandler name public AkavacheCacheHandler() AkavacheCacheHandler(Func<IBlobCache>) Set Akavache as CacheHandler with your blob cache and ApizrAkavacheCacheHandler name public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory) Parameters blobCacheFactory Func<IBlobCache> The blob cache factory of your choice AkavacheCacheHandler(Func<IBlobCache>, string) Set Akavache as CacheHandler with your blob cache and your provided name public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory, string applicationName) Parameters blobCacheFactory Func<IBlobCache> The blob cache factory of your choice applicationName string The application name used by Akavache AkavacheCacheHandler(string) Set Akavache as CacheHandler with LocalMachine blob cache and your provided name public AkavacheCacheHandler(string applicationName) Parameters applicationName string The application name used by Akavache Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method public Task ClearAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken An optional cancellation token Returns Task GetAsync<T>(string, CancellationToken) Map Apizr cache getting method to your cache handler method public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default) Parameters key string The key to get from cancellationToken CancellationToken An optional cancellation token Returns Task<T> Type Parameters T The expected value type RemoveAsync(string, CancellationToken) Map Apizr cache removing method to your cache handler method public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string The key to remove from cancellationToken CancellationToken An optional cancellation token Returns Task<bool> SetAsync(string, object, TimeSpan?, CancellationToken) Map Apizr cache saving method to your cache handler method public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default) Parameters key string The key to cache at value object The value to cache lifeSpan TimeSpan? The optional life span cancellationToken CancellationToken An optional cancellation token Returns Task"
  },
  "api/Apizr.AkavacheOptionsBuilderExtensions.html": {
    "href": "api/Apizr.AkavacheOptionsBuilderExtensions.html",
    "title": "Class AkavacheOptionsBuilderExtensions | Apizr",
    "keywords": "Class AkavacheOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.Akavache.dll Akavache options builder extensions public static class AkavacheOptionsBuilderExtensions Inheritance object AkavacheOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithAkavacheCacheHandler<TBuilder>(TBuilder) Set Akavache as CacheHandler with LocalMachine blob cache and ApizrAkavacheCacheHandler name public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) Set Akavache as CacheHandler with your blob cache and ApizrAkavacheCacheHandler name public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, Func<IBlobCache> blobCacheFactory) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters builder TBuilder blobCacheFactory Func<IBlobCache> The blob cache factory of your choice Returns TBuilder Type Parameters TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) Set Akavache as CacheHandler with your blob cache and your provided name public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, Func<IBlobCache> blobCacheFactory, string applicationName) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters builder TBuilder blobCacheFactory Func<IBlobCache> The blob cache factory of your choice applicationName string The application name used by Akavache Returns TBuilder Type Parameters TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, string) Set Akavache as CacheHandler with LocalMachine blob cache and your provided name public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, string applicationName) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters builder TBuilder applicationName string The application name used by Akavache Returns TBuilder Type Parameters TBuilder"
  },
  "api/Apizr.ApizrBuilder.html": {
    "href": "api/Apizr.ApizrBuilder.html",
    "title": "Class ApizrBuilder | Apizr",
    "keywords": "Class ApizrBuilder Namespace Apizr Assembly Apizr.dll The builder public class ApizrBuilder : IApizrBuilder Inheritance object ApizrBuilder Implements IApizrBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FileTransferOptionsBuilderExtensions.CreateDownloadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerWith<TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerWith<TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Properties Current Current Apizr builder instance public static IApizrBuilder Current { get; } Property Value IApizrBuilder Methods CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The object type to manage with crud api calls (class) CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} public IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public TApizrManager CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters apizrManagerFactory Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> The custom manager implementation instance factory optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns TApizrManager Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance public IApizrManager<TWebApi> CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<TWebApi> Type Parameters TWebApi The web api interface to manage CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi public TApizrManager CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters apizrManagerFactory Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> The custom manager implementation instance factory optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns TApizrManager Type Parameters TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation CreateRegistry(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options public IApizrRegistry CreateRegistry(Action<IApizrRegistryBuilder> registryBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters registryBuilder Action<IApizrRegistryBuilder> The registry builder with access to proper options commonOptionsBuilder Action<IApizrCommonOptionsBuilder> The common options shared by all managers Returns IApizrRegistry"
  },
  "api/Apizr.ApizrException-1.html": {
    "href": "api/Apizr.ApizrException-1.html",
    "title": "Class ApizrException<TResult> | Apizr",
    "keywords": "Class ApizrException<TResult> Namespace Apizr Assembly Apizr.dll An exception with optional cached TResult public class ApizrException<TResult> : ApizrException, ISerializable Type Parameters TResult Inheritance object Exception ApizrException ApizrException<TResult> Implements ISerializable Inherited Members ApizrException.Handled Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApizrException(Exception) public ApizrException(Exception innerException) Parameters innerException Exception ApizrException(Exception, TResult) public ApizrException(Exception innerException, TResult cachedResult) Parameters innerException Exception cachedResult TResult ApizrException(string) public ApizrException(string message) Parameters message string ApizrException(string, TResult) public ApizrException(string message, TResult cachedResult) Parameters message string cachedResult TResult Properties CachedResult public TResult CachedResult { get; } Property Value TResult"
  },
  "api/Apizr.ApizrException.html": {
    "href": "api/Apizr.ApizrException.html",
    "title": "Class ApizrException | Apizr",
    "keywords": "Class ApizrException Namespace Apizr Assembly Apizr.dll An exception with optional cached object public class ApizrException : Exception, ISerializable Inheritance object Exception ApizrException Implements ISerializable Derived ApizrException<TResult> Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApizrException(Exception) public ApizrException(Exception innerException) Parameters innerException Exception ApizrException(string) public ApizrException(string message) Parameters message string Properties Handled Indicates whether the exception has been handled yet by callback thanks to WithExCatching option. public bool Handled { get; } Property Value bool"
  },
  "api/Apizr.ApizrExceptionHandler-1.html": {
    "href": "api/Apizr.ApizrExceptionHandler-1.html",
    "title": "Class ApizrExceptionHandler<TResult> | Apizr",
    "keywords": "Class ApizrExceptionHandler<TResult> Namespace Apizr Assembly Apizr.dll public class ApizrExceptionHandler<TResult> : ApizrExceptionHandler, IApizrExceptionHandler Type Parameters TResult Inheritance object ApizrExceptionHandler ApizrExceptionHandler<TResult> Implements IApizrExceptionHandler Inherited Members ApizrExceptionHandler.Handler ApizrExceptionHandler.HandleAsync(ApizrException) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrExceptionHandler(Action<ApizrException<TResult>>) [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public ApizrExceptionHandler(Action<ApizrException<TResult>> handler) Parameters handler Action<ApizrException<TResult>> ApizrExceptionHandler(Func<ApizrException<TResult>, bool>) public ApizrExceptionHandler(Func<ApizrException<TResult>, bool> handler) Parameters handler Func<ApizrException<TResult>, bool> ApizrExceptionHandler(Func<ApizrException<TResult>, Task<bool>>) public ApizrExceptionHandler(Func<ApizrException<TResult>, Task<bool>> handler) Parameters handler Func<ApizrException<TResult>, Task<bool>>"
  },
  "api/Apizr.ApizrExceptionHandler.html": {
    "href": "api/Apizr.ApizrExceptionHandler.html",
    "title": "Class ApizrExceptionHandler | Apizr",
    "keywords": "Class ApizrExceptionHandler Namespace Apizr Assembly Apizr.dll public class ApizrExceptionHandler : IApizrExceptionHandler Inheritance object ApizrExceptionHandler Implements IApizrExceptionHandler Derived ApizrExceptionHandler<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrExceptionHandler(Action<ApizrException>) [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public ApizrExceptionHandler(Action<ApizrException> handler) Parameters handler Action<ApizrException> ApizrExceptionHandler(Func<ApizrException, bool>) public ApizrExceptionHandler(Func<ApizrException, bool> handler) Parameters handler Func<ApizrException, bool> ApizrExceptionHandler(Func<ApizrException, Task<bool>>) public ApizrExceptionHandler(Func<ApizrException, Task<bool>> handler) Parameters handler Func<ApizrException, Task<bool>> Fields Handler protected readonly Func<ApizrException, Task<bool>> Handler Field Value Func<ApizrException, Task<bool>> Methods HandleAsync(ApizrException) public virtual Task<bool> HandleAsync(ApizrException ex) Parameters ex ApizrException Returns Task<bool>"
  },
  "api/Apizr.ApizrHttpClient.html": {
    "href": "api/Apizr.ApizrHttpClient.html",
    "title": "Class ApizrHttpClient | Apizr",
    "keywords": "Class ApizrHttpClient Namespace Apizr Assembly Apizr.dll public class ApizrHttpClient : HttpClient, IDisposable Inheritance object HttpMessageInvoker HttpClient ApizrHttpClient Implements IDisposable Inherited Members HttpClient.CancelPendingRequests() HttpClient.DeleteAsync(string) HttpClient.DeleteAsync(string, CancellationToken) HttpClient.DeleteAsync(Uri) HttpClient.DeleteAsync(Uri, CancellationToken) HttpClient.Dispose(bool) HttpClient.GetAsync(string) HttpClient.GetAsync(string, HttpCompletionOption) HttpClient.GetAsync(string, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(string, CancellationToken) HttpClient.GetAsync(Uri) HttpClient.GetAsync(Uri, HttpCompletionOption) HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(Uri, CancellationToken) HttpClient.GetByteArrayAsync(string) HttpClient.GetByteArrayAsync(Uri) HttpClient.GetStreamAsync(string) HttpClient.GetStreamAsync(Uri) HttpClient.GetStringAsync(string) HttpClient.GetStringAsync(Uri) HttpClient.PostAsync(string, HttpContent) HttpClient.PostAsync(string, HttpContent, CancellationToken) HttpClient.PostAsync(Uri, HttpContent) HttpClient.PostAsync(Uri, HttpContent, CancellationToken) HttpClient.PutAsync(string, HttpContent) HttpClient.PutAsync(string, HttpContent, CancellationToken) HttpClient.PutAsync(Uri, HttpContent) HttpClient.PutAsync(Uri, HttpContent, CancellationToken) HttpClient.SendAsync(HttpRequestMessage) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.BaseAddress HttpClient.DefaultRequestHeaders HttpClient.MaxResponseContentBufferSize HttpClient.Timeout HttpMessageInvoker.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrHttpClient(HttpMessageHandler, bool, IApizrManagerOptionsBase) public ApizrHttpClient(HttpMessageHandler handler, bool disposeHandler, IApizrManagerOptionsBase apizrOptions) Parameters handler HttpMessageHandler disposeHandler bool apizrOptions IApizrManagerOptionsBase Methods SendAsync(HttpRequestMessage, CancellationToken) public override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task<HttpResponseMessage>"
  },
  "api/Apizr.ApizrManager-1.html": {
    "href": "api/Apizr.ApizrManager-1.html",
    "title": "Class ApizrManager<TWebApi> | Apizr",
    "keywords": "Class ApizrManager<TWebApi> Namespace Apizr Assembly Apizr.dll The manager public class ApizrManager<TWebApi> : ApizrManager, IApizrManager<TWebApi>, IApizrManager Type Parameters TWebApi Inheritance object ApizrManager ApizrManager<TWebApi> Implements IApizrManager<TWebApi> IApizrManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrManager(ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>) Apizr manager constructor public ApizrManager(ILazyFactory<TWebApi> lazyWebApi, IConnectivityHandler connectivityHandler, ICacheHandler cacheHandler, IMappingHandler mappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>> lazyResiliencePipelineRegistry, IApizrManagerOptions<TWebApi> apizrOptions) Parameters lazyWebApi ILazyFactory<TWebApi> The managed web api connectivityHandler IConnectivityHandler The connectivity handler cacheHandler ICacheHandler The cache handler mappingHandler IMappingHandler The mapping handler lazyResiliencePipelineRegistry ILazyFactory<ResiliencePipelineRegistry<string>> The resilience pipeline registry apizrOptions IApizrManagerOptions<TWebApi> The web api dedicated options Properties Api Original Refit Api without any Apizr management. You should use ExecuteAsync instead to get all the Apizr goodness :) public TWebApi Api { get; } Property Value TWebApi Options Basic Apizr options public IApizrManagerOptionsBase Options { get; } Property Value IApizrManagerOptionsBase Methods ClearCacheAsync(CancellationToken) Clear all cache public Task<bool> ClearCacheAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A cancellation token Returns Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) Clear the cache of a specific request public Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<ApiResponse<TResult>>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TResult>>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TResult The TWebApi's task result ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) Clear the cache of a specific request public Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<IApiResponse<TResult>>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TResult>>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TResult The TWebApi's task result ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) Clear the cache of a specific request public Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters executeApiMethod Expression<Func<TWebApi, Task<TResult>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TResult The TWebApi's task result ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task<IApizrResponse> ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task ExecuteAsync(Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task<IApizrResponse> ExecuteAsync(Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> ExecuteAsync(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task ExecuteAsync(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public virtual Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public virtual Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public virtual Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public virtual Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<IApizrResponse> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<IApizrResponse> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public virtual Task ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public virtual Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public virtual Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type"
  },
  "api/Apizr.ApizrManager.html": {
    "href": "api/Apizr.ApizrManager.html",
    "title": "Class ApizrManager | Apizr",
    "keywords": "Class ApizrManager Namespace Apizr Assembly Apizr.dll public abstract class ApizrManager : IApizrManager Inheritance object ApizrManager Implements IApizrManager Derived ApizrManager<TWebApi> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Apizr.ApizrResponse-1.html": {
    "href": "api/Apizr.ApizrResponse-1.html",
    "title": "Class ApizrResponse<TResult> | Apizr",
    "keywords": "Class ApizrResponse<TResult> Namespace Apizr Assembly Apizr.dll Interface used to represent an API response managed by Apizr. public class ApizrResponse<TResult> : ApizrResponse, IApizrResponse<TResult>, IApizrResponse, IDisposable Type Parameters TResult Deserialized request content as TResult Inheritance object ApizrResponse ApizrResponse<TResult> Implements IApizrResponse<TResult> IApizrResponse IDisposable Inherited Members ApizrResponse.IsSuccess ApizrResponse.ApiResponse ApizrResponse.Exception ApizrResponse.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApizrResponseExtensions.EnsureSuccessStatusCode(IApizrResponse) ApizrResponseExtensions.EnsureSuccessStatusCode<T>(IApizrResponse<T>) Constructors ApizrResponse(ApizrException<TResult>) public ApizrResponse(ApizrException<TResult> apizrException) Parameters apizrException ApizrException<TResult> ApizrResponse(IApiResponse, ApizrException<TResult>) public ApizrResponse(IApiResponse apiResponse, ApizrException<TResult> apizrException) Parameters apiResponse IApiResponse apizrException ApizrException<TResult> ApizrResponse(IApiResponse, TResult, ApizrResponseDataSource) public ApizrResponse(IApiResponse apiResponse, TResult result, ApizrResponseDataSource dataSource) Parameters apiResponse IApiResponse result TResult dataSource ApizrResponseDataSource ApizrResponse(TResult, ApizrResponseDataSource) public ApizrResponse(TResult result, ApizrResponseDataSource dataSource) Parameters result TResult dataSource ApizrResponseDataSource Properties DataSource The source of the result data (might be from the request or the cache). public ApizrResponseDataSource DataSource { get; } Property Value ApizrResponseDataSource Result Deserialized request or cache content as TResult. public TResult Result { get; } Property Value TResult"
  },
  "api/Apizr.ApizrResponse.html": {
    "href": "api/Apizr.ApizrResponse.html",
    "title": "Class ApizrResponse | Apizr",
    "keywords": "Class ApizrResponse Namespace Apizr Assembly Apizr.dll public class ApizrResponse : IApizrResponse, IDisposable Inheritance object ApizrResponse Implements IApizrResponse IDisposable Derived ApizrResponse<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApizrResponseExtensions.EnsureSuccessStatusCode(IApizrResponse) Constructors ApizrResponse() protected ApizrResponse() ApizrResponse(ApizrException) public ApizrResponse(ApizrException apiException) Parameters apiException ApizrException ApizrResponse(IApiResponse) public ApizrResponse(IApiResponse apiResponse) Parameters apiResponse IApiResponse ApizrResponse(IApiResponse, ApizrException) public ApizrResponse(IApiResponse apiResponse, ApizrException apizrException) Parameters apiResponse IApiResponse apizrException ApizrException Properties ApiResponse Base interface used to represent an API response. public IApiResponse ApiResponse { get; } Property Value IApiResponse Exception The ApizrException object in case of unsuccessful response. public ApizrException Exception { get; } Property Value ApizrException IsSuccess Indicates whether the request was successful. public bool IsSuccess { get; } Property Value bool Methods Dispose() public void Dispose()"
  },
  "api/Apizr.ApizrResponseDataSource.html": {
    "href": "api/Apizr.ApizrResponseDataSource.html",
    "title": "Enum ApizrResponseDataSource | Apizr",
    "keywords": "Enum ApizrResponseDataSource Namespace Apizr Assembly Apizr.dll public enum ApizrResponseDataSource Fields Cache = 2 None = 0 Request = 1"
  },
  "api/Apizr.ApizrResponseExtensions.html": {
    "href": "api/Apizr.ApizrResponseExtensions.html",
    "title": "Class ApizrResponseExtensions | Apizr",
    "keywords": "Class ApizrResponseExtensions Namespace Apizr Assembly Apizr.dll ApizrResponse extensions methods public static class ApizrResponseExtensions Inheritance object ApizrResponseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnsureSuccessStatusCode(IApizrResponse) Ensures the request was successful by throwing an exception in case of failure public static IApizrResponse EnsureSuccessStatusCode(this IApizrResponse apizrResponse) Parameters apizrResponse IApizrResponse Returns IApizrResponse The current IApizrResponse Exceptions ApizrException EnsureSuccessStatusCode<T>(IApizrResponse<T>) Ensures the request was successful by throwing an exception in case of failure public static IApizrResponse<T> EnsureSuccessStatusCode<T>(this IApizrResponse<T> apizrResponse) Parameters apizrResponse IApizrResponse<T> Returns IApizrResponse<T> The current IApizrResponse<TResult> with optional cached T data Type Parameters T Exceptions ApizrException"
  },
  "api/Apizr.Authenticating.AuthenticationHandler-1.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler-1.html",
    "title": "Class AuthenticationHandler<TSettingsService> | Apizr",
    "keywords": "Class AuthenticationHandler<TSettingsService> Namespace Apizr.Authenticating Assembly Apizr.dll The authentication handler implementation refreshing and saving token public class AuthenticationHandler<TSettingsService> : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Type Parameters TSettingsService The settings service type Inheritance object HttpMessageHandler DelegatingHandler AuthenticationHandlerBase AuthenticationHandler<TSettingsService> Implements IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.Logger AuthenticationHandlerBase.ApizrOptions AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthenticationHandler(ILogger, IApizrManagerOptionsBase, Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) The authentication handler constructor public AuthenticationHandler(ILogger logger, IApizrManagerOptionsBase apizrOptions, Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> settingsTokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters logger ILogger The logger apizrOptions IApizrManagerOptionsBase The Apizr options settingsServiceFactory Func<TSettingsService> The settings service factory settingsTokenProperty Expression<Func<TSettingsService, string>> The settings service's token property expression refreshTokenFactory Func<HttpRequestMessage, Task<string>> The refresh token factory Exceptions ArgumentNullException Methods GetToken() The method called to get token from settings public override string GetToken() Returns string RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters request HttpRequestMessage The request to authenticate Returns Task<string> SetToken(string) The method called to save token into settings public override void SetToken(string token) Parameters token string The token to save"
  },
  "api/Apizr.Authenticating.AuthenticationHandler-2.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler-2.html",
    "title": "Class AuthenticationHandler<TSettingsService, TTokenService> | Apizr",
    "keywords": "Class AuthenticationHandler<TSettingsService, TTokenService> Namespace Apizr.Authenticating Assembly Apizr.dll The authentication handler implementation refreshing and saving token public class AuthenticationHandler<TSettingsService, TTokenService> : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Type Parameters TSettingsService The settings service type TTokenService The refresh token service type Inheritance object HttpMessageHandler DelegatingHandler AuthenticationHandlerBase AuthenticationHandler<TSettingsService, TTokenService> Implements IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.Logger AuthenticationHandlerBase.ApizrOptions AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthenticationHandler(ILogger, IApizrManagerOptionsBase, Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) The authentication handler constructor public AuthenticationHandler(ILogger logger, IApizrManagerOptionsBase apizrOptions, Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> settingsTokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters logger ILogger The logger apizrOptions IApizrManagerOptionsBase The Apizr options settingsServiceFactory Func<TSettingsService> The settings service factory settingsTokenProperty Expression<Func<TSettingsService, string>> The settings service's token property expression tokenServiceFactory Func<TTokenService> The refresh token service factory refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The refresh token method to be called Exceptions ArgumentNullException Methods GetToken() The method called to get token from settings public override string GetToken() Returns string RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters request HttpRequestMessage The request to authenticate Returns Task<string> SetToken(string) The method called to save token into settings public override void SetToken(string token) Parameters token string The token to save"
  },
  "api/Apizr.Authenticating.AuthenticationHandler.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler.html",
    "title": "Class AuthenticationHandler | Apizr",
    "keywords": "Class AuthenticationHandler Namespace Apizr.Authenticating Assembly Apizr.dll The authentication handler implementation refreshing token public class AuthenticationHandler : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Inheritance object HttpMessageHandler DelegatingHandler AuthenticationHandlerBase AuthenticationHandler Implements IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.Logger AuthenticationHandlerBase.ApizrOptions AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthenticationHandler(ILogger, IApizrManagerOptionsBase, Func<HttpRequestMessage, Task<string>>) The authentication handler constructor public AuthenticationHandler(ILogger logger, IApizrManagerOptionsBase apizrOptions, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters logger ILogger The logger apizrOptions IApizrManagerOptionsBase The Apizr options refreshTokenFactory Func<HttpRequestMessage, Task<string>> The refresh token factory Exceptions ArgumentNullException Methods GetToken() The method called to get token from settings public override string GetToken() Returns string RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters request HttpRequestMessage The request to authenticate Returns Task<string> SetToken(string) The method called to save token into settings public override void SetToken(string token) Parameters token string The token to save"
  },
  "api/Apizr.Authenticating.AuthenticationHandlerBase.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandlerBase.html",
    "title": "Class AuthenticationHandlerBase | Apizr",
    "keywords": "Class AuthenticationHandlerBase Namespace Apizr.Authenticating Assembly Apizr.dll The authentication handler base implementation public abstract class AuthenticationHandlerBase : DelegatingHandler, IDisposable, IAuthenticationHandler Inheritance object HttpMessageHandler DelegatingHandler AuthenticationHandlerBase Implements IDisposable IAuthenticationHandler Derived AuthenticationHandler AuthenticationHandler<TSettingsService> AuthenticationHandler<TSettingsService, TTokenService> Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthenticationHandlerBase(ILogger, IApizrManagerOptionsBase) The authentication handler constructor protected AuthenticationHandlerBase(ILogger logger, IApizrManagerOptionsBase apizrOptions) Parameters logger ILogger The logger apizrOptions IApizrManagerOptionsBase The Apizr options Fields ApizrOptions protected readonly IApizrManagerOptionsBase ApizrOptions Field Value IApizrManagerOptionsBase Logger protected readonly ILogger Logger Field Value ILogger Methods CloneHttpRequestMessageAsync(HttpRequestMessage) Clone a HttpRequestMessage Credit: http://stackoverflow.com/questions/25044166/how-to-clone-a-httprequestmessage-when-the-original-request-has-content protected Task<HttpRequestMessage> CloneHttpRequestMessageAsync(HttpRequestMessage req) Parameters req HttpRequestMessage The request Returns Task<HttpRequestMessage> A copy of the request GetToken() The method called to get token from settings public abstract string GetToken() Returns string RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty public abstract Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters request HttpRequestMessage The request to authenticate Returns Task<string> SendAsync(HttpRequestMessage, CancellationToken) protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task<HttpResponseMessage> SetToken(string) The method called to save token into settings public abstract void SetToken(string token) Parameters token string The token to save"
  },
  "api/Apizr.Authenticating.IAuthenticationHandler.html": {
    "href": "api/Apizr.Authenticating.IAuthenticationHandler.html",
    "title": "Interface IAuthenticationHandler | Apizr",
    "keywords": "Interface IAuthenticationHandler Namespace Apizr.Authenticating Assembly Apizr.dll The authentication handler definition public interface IAuthenticationHandler Methods GetToken() The method called to get token from settings string GetToken() Returns string RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters request HttpRequestMessage The request to authenticate Returns Task<string> SetToken(string) The method called to save token into settings void SetToken(string token) Parameters token string The token to save"
  },
  "api/Apizr.Authenticating.html": {
    "href": "api/Apizr.Authenticating.html",
    "title": "Namespace Apizr.Authenticating | Apizr",
    "keywords": "Namespace Apizr.Authenticating Classes AuthenticationHandler The authentication handler implementation refreshing token AuthenticationHandlerBase The authentication handler base implementation AuthenticationHandler<TSettingsService> The authentication handler implementation refreshing and saving token AuthenticationHandler<TSettingsService, TTokenService> The authentication handler implementation refreshing and saving token Interfaces IAuthenticationHandler The authentication handler definition"
  },
  "api/Apizr.AutoMapperMappingHandler.html": {
    "href": "api/Apizr.AutoMapperMappingHandler.html",
    "title": "Class AutoMapperMappingHandler | Apizr",
    "keywords": "Class AutoMapperMappingHandler Namespace Apizr Assembly Apizr.Integrations.AutoMapper.dll AutoMapper mapping handler implementation public class AutoMapperMappingHandler : IMappingHandler Inheritance object AutoMapperMappingHandler Implements IMappingHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutoMapperMappingHandler(IMapper) public AutoMapperMappingHandler(IMapper mapper) Parameters mapper IMapper Methods Map(object, object, Type, Type) Execute a mapping from the source object to existing destination object with explicit Type objects public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters source object Source object to map from destination object Destination object to map into sourceType Type Source type to use destinationType Type Destination type to use Returns object Mapped destination object, same instance as the destination object Map(object, Type, Type) Execute a mapping from the source object to a new destination object with explicit Type objects public object Map(object source, Type sourceType, Type destinationType) Parameters source object Source object to map from sourceType Type Source type to use destinationType Type Destination type to create Returns object Mapped destination object Map<TDestination>(object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. public TDestination Map<TDestination>(object source) Parameters source object Source object to map from Returns TDestination Mapped destination object Type Parameters TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. public TDestination Map<TSource, TDestination>(TSource source) Parameters source TSource Source object to map from Returns TDestination Mapped destination object Type Parameters TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters source TSource Source object to map from destination TDestination Destination object to map into Returns TDestination The mapped destination object, same instance as the destination object Type Parameters TSource Source type to use TDestination Destination type"
  },
  "api/Apizr.AutoMapperOptionsBuilderExtensions.html": {
    "href": "api/Apizr.AutoMapperOptionsBuilderExtensions.html",
    "title": "Class AutoMapperOptionsBuilderExtensions | Apizr",
    "keywords": "Class AutoMapperOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.AutoMapper.dll AutoMapper options builder extensions public static class AutoMapperOptionsBuilderExtensions Inheritance object AutoMapperOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithAutoMapperMappingHandler<TBuilder>(TBuilder) Set AutoMapper as MappingHandler public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilderBase Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) Set AutoMapper as MappingHandler public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder, IConfigurationProvider configuration) where TBuilder : IApizrCommonOptionsBuilderBase Parameters builder TBuilder configuration IConfigurationProvider Returns TBuilder Type Parameters TBuilder WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) Set AutoMapper as MappingHandler public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder, IMapper mapper) where TBuilder : IApizrCommonOptionsBuilderBase Parameters builder TBuilder mapper IMapper Returns TBuilder Type Parameters TBuilder"
  },
  "api/Apizr.AutoRegisterAttribute-1.html": {
    "href": "api/Apizr.AutoRegisterAttribute-1.html",
    "title": "Class AutoRegisterAttribute<TWebApi> | Apizr",
    "keywords": "Class AutoRegisterAttribute<TWebApi> Namespace Apizr Assembly Apizr.dll public class AutoRegisterAttribute<TWebApi> : AutoRegisterAttribute Type Parameters TWebApi Inheritance object Attribute BaseAddressAttribute AutoRegisterAttribute AutoRegisterAttribute<TWebApi> Inherited Members AutoRegisterAttribute.WebApiType BaseAddressAttribute.BaseAddressOrPath Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutoRegisterAttribute(string) public AutoRegisterAttribute(string baseAddressOrPath) Parameters baseAddressOrPath string"
  },
  "api/Apizr.AutoRegisterAttribute.html": {
    "href": "api/Apizr.AutoRegisterAttribute.html",
    "title": "Class AutoRegisterAttribute | Apizr",
    "keywords": "Class AutoRegisterAttribute Namespace Apizr Assembly Apizr.dll Tells Apizr to auto register a Manager for the provided api (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface)] public class AutoRegisterAttribute : BaseAddressAttribute Inheritance object Attribute BaseAddressAttribute AutoRegisterAttribute Derived AutoRegisterAttribute<TWebApi> Inherited Members BaseAddressAttribute.BaseAddressOrPath Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutoRegisterAttribute(string) Auto register a manager for the decorated api or crud entity public AutoRegisterAttribute(string baseAddressOrPath) Parameters baseAddressOrPath string The web api base absolute address or relative path AutoRegisterAttribute(Type, string) Auto register a manager for the provided api public AutoRegisterAttribute(Type webApiType, string baseAddressOrPath) Parameters webApiType Type The web api interface type to manage baseAddressOrPath string The web api base absolute address or relative path Properties WebApiType public Type WebApiType { get; } Property Value Type"
  },
  "api/Apizr.Caching.Attributes.CacheAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheAttribute.html",
    "title": "Class CacheAttribute | Apizr",
    "keywords": "Class CacheAttribute Namespace Apizr.Caching.Attributes Assembly Apizr.dll Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface)] public class CacheAttribute : CacheAttributeBase Inheritance object Attribute CacheAttributeBase CacheAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheAttribute() Cache with no specific lifetime, default FetchOrGet mode and no invalidation on error public CacheAttribute() CacheAttribute(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode public CacheAttribute(CacheMode mode) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheAttribute(CacheMode, bool) Cache with a specific cache and invalidation on error, but no specific lifetime public CacheAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one shouldInvalidateOnError bool Should invalidate on error CacheAttribute(CacheMode, string) Cache with a specific cache and mode specific lifetime, but no invalidation on error public CacheAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string TimeSpan representation to parse CacheAttribute(CacheMode, string, bool) Cache with a specific cache mode, a specific lifetime and invalidation on error public CacheAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error CacheAttribute(bool) Cache with no specific lifetime, default FetchOrGet mode but with or without invalidation on error public CacheAttribute(bool shouldInvalidateOnError) Parameters shouldInvalidateOnError bool Should invalidate on error CacheAttribute(string) Cache with default FetchOrGet mode, no invalidation on error but with a specific lifetime public CacheAttribute(string lifeSpanRepresentation) Parameters lifeSpanRepresentation string TimeSpan representation to parse CacheAttribute(TimeSpan, bool) Cache with a specific lifetime and invalidation on error, but default FetchOrGet mode public CacheAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters lifeSpan TimeSpan This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error"
  },
  "api/Apizr.Caching.Attributes.CacheAttributeBase.html": {
    "href": "api/Apizr.Caching.Attributes.CacheAttributeBase.html",
    "title": "Class CacheAttributeBase | Apizr",
    "keywords": "Class CacheAttributeBase Namespace Apizr.Caching.Attributes Assembly Apizr.dll Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature public abstract class CacheAttributeBase : Attribute Inheritance object Attribute CacheAttributeBase Derived CacheAttribute CacheReadAllAttribute CacheReadAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheAttributeBase() Cache with no specific lifetime, default FetchOrGet mode and no invalidation on error protected CacheAttributeBase() CacheAttributeBase(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode protected CacheAttributeBase(CacheMode mode) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheAttributeBase(CacheMode, bool) Cache with a specific cache and invalidation on error, but no specific lifetime protected CacheAttributeBase(CacheMode mode, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one shouldInvalidateOnError bool Should invalidate on error CacheAttributeBase(CacheMode, TimeSpan?, bool) protected CacheAttributeBase(CacheMode mode, TimeSpan? lifeSpan, bool shouldInvalidateOnError) Parameters mode CacheMode lifeSpan TimeSpan? shouldInvalidateOnError bool CacheAttributeBase(CacheMode, string) Cache with a specific cache and mode specific lifetime, but no invalidation on error protected CacheAttributeBase(CacheMode mode, string lifeSpanRepresentation) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string TimeSpan representation to parse CacheAttributeBase(CacheMode, string, bool) Cache with a specific cache mode, a specific lifetime and invalidation on error protected CacheAttributeBase(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error CacheAttributeBase(bool) Cache with no specific lifetime, default FetchOrGet mode but with or without invalidation on error protected CacheAttributeBase(bool shouldInvalidateOnError) Parameters shouldInvalidateOnError bool Should invalidate on error CacheAttributeBase(string) Cache with default FetchOrGet mode, no invalidation on error but with a specific lifetime protected CacheAttributeBase(string lifeSpanRepresentation) Parameters lifeSpanRepresentation string TimeSpan representation to parse CacheAttributeBase(TimeSpan, bool) Cache with a specific lifetime and invalidation on error, but default FetchOrGet mode protected CacheAttributeBase(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters lifeSpan TimeSpan This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error Properties LifeSpan This specific caching lifetime public TimeSpan? LifeSpan { get; protected set; } Property Value TimeSpan? Mode Define the caching behaviour (default: FetchOrGet = api data first otherwise cache) public CacheMode Mode { get; protected set; } Property Value CacheMode ShouldInvalidateOnError Tells Apizr to remove the cache on error public bool ShouldInvalidateOnError { get; protected set; } Property Value bool"
  },
  "api/Apizr.Caching.Attributes.CacheKeyAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheKeyAttribute.html",
    "title": "Class CacheKeyAttribute | Apizr",
    "keywords": "Class CacheKeyAttribute Namespace Apizr.Caching.Attributes Assembly Apizr.dll Tells Apizr the key to cache value at [AttributeUsage(AttributeTargets.Parameter)] public class CacheKeyAttribute : Attribute Inheritance object Attribute CacheKeyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheKeyAttribute() The decorated parameter will be used as cache key (should be primitive otherwise ToString() method will be used, unless providing a property name) public CacheKeyAttribute() CacheKeyAttribute(string) If you use non primitive type (like your ModelClass object) as Cache Primary key you should provide property name of primitive primary Id, otherwise ToString() method will be used. public CacheKeyAttribute(string propertyName) Parameters propertyName string Property name. Properties PropertyName Property name of primitive primary Id public string PropertyName { get; } Property Value string"
  },
  "api/Apizr.Caching.Attributes.CacheReadAllAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheReadAllAttribute.html",
    "title": "Class CacheReadAllAttribute | Apizr",
    "keywords": "Class CacheReadAllAttribute Namespace Apizr.Caching.Attributes Assembly Apizr.dll Tells Apizr to cache ReadAll method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature [AttributeUsage(AttributeTargets.Class)] public class CacheReadAllAttribute : CacheAttributeBase Inheritance object Attribute CacheAttributeBase CacheReadAllAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheReadAllAttribute() Cache with no specific lifetime, default FetchOrGet mode and no invalidation on error public CacheReadAllAttribute() CacheReadAllAttribute(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode public CacheReadAllAttribute(CacheMode mode) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheReadAllAttribute(CacheMode, bool) Cache with a specific cache and invalidation on error, but no specific lifetime public CacheReadAllAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one shouldInvalidateOnError bool Should invalidate on error CacheReadAllAttribute(CacheMode, string) Cache with a specific cache and mode specific lifetime, but no invalidation on error public CacheReadAllAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string TimeSpan representation to parse CacheReadAllAttribute(CacheMode, string, bool) Cache with a specific cache mode, a specific lifetime and invalidation on error public CacheReadAllAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error CacheReadAllAttribute(bool) Cache with no specific lifetime, default FetchOrGet mode but with or without invalidation on error public CacheReadAllAttribute(bool shouldInvalidateOnError) Parameters shouldInvalidateOnError bool Should invalidate on error CacheReadAllAttribute(string) Cache with default FetchOrGet mode, no invalidation on error but with a specific lifetime public CacheReadAllAttribute(string lifeSpanRepresentation) Parameters lifeSpanRepresentation string TimeSpan representation to parse CacheReadAllAttribute(TimeSpan, bool) Cache with a specific lifetime and invalidation on error, but default FetchOrGet mode public CacheReadAllAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters lifeSpan TimeSpan This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error"
  },
  "api/Apizr.Caching.Attributes.CacheReadAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheReadAttribute.html",
    "title": "Class CacheReadAttribute | Apizr",
    "keywords": "Class CacheReadAttribute Namespace Apizr.Caching.Attributes Assembly Apizr.dll Tells Apizr to cache Read method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature [AttributeUsage(AttributeTargets.Class)] public class CacheReadAttribute : CacheAttributeBase Inheritance object Attribute CacheAttributeBase CacheReadAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CacheReadAttribute() Cache with no specific lifetime, default FetchOrGet mode and no invalidation on error public CacheReadAttribute() CacheReadAttribute(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode public CacheReadAttribute(CacheMode mode) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheReadAttribute(CacheMode, bool) Cache with a specific cache and invalidation on error, but no specific lifetime public CacheReadAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one shouldInvalidateOnError bool Should invalidate on error CacheReadAttribute(CacheMode, string) Cache with a specific cache and mode specific lifetime, but no invalidation on error public CacheReadAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string TimeSpan representation to parse CacheReadAttribute(CacheMode, string, bool) Cache with a specific cache mode, a specific lifetime and invalidation on error public CacheReadAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpanRepresentation string This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error CacheReadAttribute(bool) Cache with no specific lifetime, default FetchOrGet mode but with or without invalidation on error public CacheReadAttribute(bool shouldInvalidateOnError) Parameters shouldInvalidateOnError bool Should invalidate on error CacheReadAttribute(string) Cache with default FetchOrGet mode, no invalidation on error but with a specific lifetime public CacheReadAttribute(string lifeSpanRepresentation) Parameters lifeSpanRepresentation string TimeSpan representation to parse CacheReadAttribute(TimeSpan, bool) Cache with a specific lifetime and invalidation on error, but default FetchOrGet mode public CacheReadAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters lifeSpan TimeSpan This specific caching lifetime shouldInvalidateOnError bool Should invalidate on error"
  },
  "api/Apizr.Caching.Attributes.html": {
    "href": "api/Apizr.Caching.Attributes.html",
    "title": "Namespace Apizr.Caching.Attributes | Apizr",
    "keywords": "Namespace Apizr.Caching.Attributes Classes CacheAttribute Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheAttributeBase Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheKeyAttribute Tells Apizr the key to cache value at CacheReadAllAttribute Tells Apizr to cache ReadAll method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheReadAttribute Tells Apizr to cache Read method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature"
  },
  "api/Apizr.Caching.CacheMode.html": {
    "href": "api/Apizr.Caching.CacheMode.html",
    "title": "Enum CacheMode | Apizr",
    "keywords": "Enum CacheMode Namespace Apizr.Caching Assembly Apizr.dll Define the caching behaviour public enum CacheMode Fields FetchOrGet = 1 Returns fresh data when request succeed otherwise cached one if exist (api data first) GetOrFetch = 2 Returns cached data if we get some otherwise fresh one if request succeed (cache data first) None = 0 Returns fresh data when request succeed (api data only) SetByHeader = 3 Relies on one of the following response header presence, ordered by precedence (otherwise None): 1. Cache-Control (GetOrFetch): Controls how Apizr should cache the data (e.g., max-age, no-store, immutable, etc.). 2. Expires (GetOrFetch): Specifies a date after which Apizr should fetch api data again. 3. ETag (FetchOrGet): Ask Apizr to use the If-None-Match header to check if the data has been modified and handle any 304 Not Modified response. 4. Last-Modified (FetchOrGet): Ask Apizr to use the If-Modified-Since header to check if the resource has been modified and handle any 304 Not Modified response."
  },
  "api/Apizr.Caching.ICacheHandler.html": {
    "href": "api/Apizr.Caching.ICacheHandler.html",
    "title": "Interface ICacheHandler | Apizr",
    "keywords": "Interface ICacheHandler Namespace Apizr.Caching Assembly Apizr.dll The cache handler method mapping interface Implement it to provide some caching features to Apizr public interface ICacheHandler Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Task ClearAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken An optional cancellation token Returns Task GetAsync<T>(string, CancellationToken) Map Apizr cache getting method to your cache handler method Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default) Parameters key string The key to get from cancellationToken CancellationToken An optional cancellation token Returns Task<T> Type Parameters T The expected value type RemoveAsync(string, CancellationToken) Map Apizr cache removing method to your cache handler method Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string The key to remove from cancellationToken CancellationToken An optional cancellation token Returns Task<bool> SetAsync(string, object, TimeSpan?, CancellationToken) Map Apizr cache saving method to your cache handler method Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default) Parameters key string The key to cache at value object The value to cache lifeSpan TimeSpan? The optional life span cancellationToken CancellationToken An optional cancellation token Returns Task"
  },
  "api/Apizr.Caching.VoidCacheHandler.html": {
    "href": "api/Apizr.Caching.VoidCacheHandler.html",
    "title": "Class VoidCacheHandler | Apizr",
    "keywords": "Class VoidCacheHandler Namespace Apizr.Caching Assembly Apizr.dll The cache handler method mapping void implementation public class VoidCacheHandler : ICacheHandler Inheritance object VoidCacheHandler Implements ICacheHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method public Task ClearAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken An optional cancellation token Returns Task GetAsync<T>(string, CancellationToken) Map Apizr cache getting method to your cache handler method public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default) Parameters key string The key to get from cancellationToken CancellationToken An optional cancellation token Returns Task<T> Type Parameters T The expected value type RemoveAsync(string, CancellationToken) Map Apizr cache removing method to your cache handler method public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string The key to remove from cancellationToken CancellationToken An optional cancellation token Returns Task<bool> SetAsync(string, object, TimeSpan?, CancellationToken) Map Apizr cache saving method to your cache handler method public Task SetAsync(string key, object obj, TimeSpan? timeSpan = null, CancellationToken cancellationToken = default) Parameters key string The key to cache at obj object timeSpan TimeSpan? cancellationToken CancellationToken An optional cancellation token Returns Task"
  },
  "api/Apizr.Caching.html": {
    "href": "api/Apizr.Caching.html",
    "title": "Namespace Apizr.Caching | Apizr",
    "keywords": "Namespace Apizr.Caching Classes VoidCacheHandler The cache handler method mapping void implementation Interfaces ICacheHandler The cache handler method mapping interface Implement it to provide some caching features to Apizr Enums CacheMode Define the caching behaviour"
  },
  "api/Apizr.Cancelling.Attributes.Operation.CreateOperationTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Operation.CreateOperationTimeoutAttribute.html",
    "title": "Class CreateOperationTimeoutAttribute | Apizr",
    "keywords": "Class CreateOperationTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Operation Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class CreateOperationTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase CreateOperationTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateOperationTimeoutAttribute(string) Request times out after a specific duration public CreateOperationTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Operation.DeleteOperationTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Operation.DeleteOperationTimeoutAttribute.html",
    "title": "Class DeleteOperationTimeoutAttribute | Apizr",
    "keywords": "Class DeleteOperationTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Operation Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class DeleteOperationTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase DeleteOperationTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteOperationTimeoutAttribute(string) Request times out after a specific duration public DeleteOperationTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Operation.OperationTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Operation.OperationTimeoutAttribute.html",
    "title": "Class OperationTimeoutAttribute | Apizr",
    "keywords": "Class OperationTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Operation Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface)] public class OperationTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase OperationTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OperationTimeoutAttribute(string) Request times out after a specific duration public OperationTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Operation.ReadAllOperationTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Operation.ReadAllOperationTimeoutAttribute.html",
    "title": "Class ReadAllOperationTimeoutAttribute | Apizr",
    "keywords": "Class ReadAllOperationTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Operation Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class ReadAllOperationTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase ReadAllOperationTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllOperationTimeoutAttribute(string) Request times out after a specific duration public ReadAllOperationTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Operation.ReadOperationTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Operation.ReadOperationTimeoutAttribute.html",
    "title": "Class ReadOperationTimeoutAttribute | Apizr",
    "keywords": "Class ReadOperationTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Operation Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class ReadOperationTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase ReadOperationTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOperationTimeoutAttribute(string) Request times out after a specific duration public ReadOperationTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Operation.UpdateOperationTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Operation.UpdateOperationTimeoutAttribute.html",
    "title": "Class UpdateOperationTimeoutAttribute | Apizr",
    "keywords": "Class UpdateOperationTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Operation Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class UpdateOperationTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase UpdateOperationTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateOperationTimeoutAttribute(string) Request times out after a specific duration public UpdateOperationTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Operation.html": {
    "href": "api/Apizr.Cancelling.Attributes.Operation.html",
    "title": "Namespace Apizr.Cancelling.Attributes.Operation | Apizr",
    "keywords": "Namespace Apizr.Cancelling.Attributes.Operation Classes CreateOperationTimeoutAttribute Tells Apizr to set a timeout to the request DeleteOperationTimeoutAttribute Tells Apizr to set a timeout to the request OperationTimeoutAttribute Tells Apizr to set a timeout to the request ReadAllOperationTimeoutAttribute Tells Apizr to set a timeout to the request ReadOperationTimeoutAttribute Tells Apizr to set a timeout to the request UpdateOperationTimeoutAttribute Tells Apizr to set a timeout to the request"
  },
  "api/Apizr.Cancelling.Attributes.Request.CreateRequestTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Request.CreateRequestTimeoutAttribute.html",
    "title": "Class CreateRequestTimeoutAttribute | Apizr",
    "keywords": "Class CreateRequestTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Request Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class CreateRequestTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase CreateRequestTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateRequestTimeoutAttribute(string) Request times out after a specific duration public CreateRequestTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Request.DeleteRequestTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Request.DeleteRequestTimeoutAttribute.html",
    "title": "Class DeleteRequestTimeoutAttribute | Apizr",
    "keywords": "Class DeleteRequestTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Request Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class DeleteRequestTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase DeleteRequestTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteRequestTimeoutAttribute(string) Request times out after a specific duration public DeleteRequestTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Request.ReadAllRequestTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Request.ReadAllRequestTimeoutAttribute.html",
    "title": "Class ReadAllRequestTimeoutAttribute | Apizr",
    "keywords": "Class ReadAllRequestTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Request Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class ReadAllRequestTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase ReadAllRequestTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllRequestTimeoutAttribute(string) Request times out after a specific duration public ReadAllRequestTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Request.ReadRequestTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Request.ReadRequestTimeoutAttribute.html",
    "title": "Class ReadRequestTimeoutAttribute | Apizr",
    "keywords": "Class ReadRequestTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Request Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class ReadRequestTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase ReadRequestTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadRequestTimeoutAttribute(string) Request times out after a specific duration public ReadRequestTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Request.RequestTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Request.RequestTimeoutAttribute.html",
    "title": "Class RequestTimeoutAttribute | Apizr",
    "keywords": "Class RequestTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Request Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface)] public class RequestTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase RequestTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestTimeoutAttribute(string) Request times out after a specific duration public RequestTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Request.UpdateRequestTimeoutAttribute.html": {
    "href": "api/Apizr.Cancelling.Attributes.Request.UpdateRequestTimeoutAttribute.html",
    "title": "Class UpdateRequestTimeoutAttribute | Apizr",
    "keywords": "Class UpdateRequestTimeoutAttribute Namespace Apizr.Cancelling.Attributes.Request Assembly Apizr.dll Tells Apizr to set a timeout to the request [AttributeUsage(AttributeTargets.Class)] public class UpdateRequestTimeoutAttribute : TimeoutAttributeBase Inheritance object Attribute TimeoutAttributeBase UpdateRequestTimeoutAttribute Inherited Members TimeoutAttributeBase.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateRequestTimeoutAttribute(string) Request times out after a specific duration public UpdateRequestTimeoutAttribute(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse"
  },
  "api/Apizr.Cancelling.Attributes.Request.html": {
    "href": "api/Apizr.Cancelling.Attributes.Request.html",
    "title": "Namespace Apizr.Cancelling.Attributes.Request | Apizr",
    "keywords": "Namespace Apizr.Cancelling.Attributes.Request Classes CreateRequestTimeoutAttribute Tells Apizr to set a timeout to the request DeleteRequestTimeoutAttribute Tells Apizr to set a timeout to the request ReadAllRequestTimeoutAttribute Tells Apizr to set a timeout to the request ReadRequestTimeoutAttribute Tells Apizr to set a timeout to the request RequestTimeoutAttribute Tells Apizr to set a timeout to the request UpdateRequestTimeoutAttribute Tells Apizr to set a timeout to the request"
  },
  "api/Apizr.Cancelling.Attributes.TimeoutAttributeBase.html": {
    "href": "api/Apizr.Cancelling.Attributes.TimeoutAttributeBase.html",
    "title": "Class TimeoutAttributeBase | Apizr",
    "keywords": "Class TimeoutAttributeBase Namespace Apizr.Cancelling.Attributes Assembly Apizr.dll Tells Apizr to set a timeout to the request public abstract class TimeoutAttributeBase : Attribute Inheritance object Attribute TimeoutAttributeBase Derived CreateOperationTimeoutAttribute DeleteOperationTimeoutAttribute OperationTimeoutAttribute ReadAllOperationTimeoutAttribute ReadOperationTimeoutAttribute UpdateOperationTimeoutAttribute CreateRequestTimeoutAttribute DeleteRequestTimeoutAttribute ReadAllRequestTimeoutAttribute ReadRequestTimeoutAttribute RequestTimeoutAttribute UpdateRequestTimeoutAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimeoutAttributeBase(string) Request times out after a specific duration protected TimeoutAttributeBase(string timeoutRepresentation) Parameters timeoutRepresentation string TimeSpan representation to parse Properties Timeout This request timeout public TimeSpan Timeout { get; } Property Value TimeSpan"
  },
  "api/Apizr.Cancelling.Attributes.html": {
    "href": "api/Apizr.Cancelling.Attributes.html",
    "title": "Namespace Apizr.Cancelling.Attributes | Apizr",
    "keywords": "Namespace Apizr.Cancelling.Attributes Classes TimeoutAttributeBase Tells Apizr to set a timeout to the request"
  },
  "api/Apizr.Configuring.ApizrConfigurationSource.html": {
    "href": "api/Apizr.Configuring.ApizrConfigurationSource.html",
    "title": "Enum ApizrConfigurationSource | Apizr",
    "keywords": "Enum ApizrConfigurationSource Namespace Apizr.Configuring Assembly Apizr.dll public enum ApizrConfigurationSource Fields CommonAttribute = 0 CommonOption = 1 FinalConfiguration = 8 ManagerAttribute = 4 ManagerOption = 5 ProperAttribute = 2 ProperOption = 3 RequestAttribute = 6 RequestOption = 7"
  },
  "api/Apizr.Configuring.ApizrDuplicateStrategy.html": {
    "href": "api/Apizr.Configuring.ApizrDuplicateStrategy.html",
    "title": "Enum ApizrDuplicateStrategy | Apizr",
    "keywords": "Enum ApizrDuplicateStrategy Namespace Apizr.Configuring Assembly Apizr.dll Duplicate strategy about options registration public enum ApizrDuplicateStrategy Fields Add = 1 Ignore = 0 Merge = 3 Replace = 2"
  },
  "api/Apizr.Configuring.ApizrLifetimeScope.html": {
    "href": "api/Apizr.Configuring.ApizrLifetimeScope.html",
    "title": "Enum ApizrLifetimeScope | Apizr",
    "keywords": "Enum ApizrLifetimeScope Namespace Apizr.Configuring Assembly Apizr.dll public enum ApizrLifetimeScope Fields Api = 0 Set once for all api requests (static values) Request = 1 Refresh values for each api request (dynamic values)"
  },
  "api/Apizr.Configuring.ApizrRegistrationMode.html": {
    "href": "api/Apizr.Configuring.ApizrRegistrationMode.html",
    "title": "Enum ApizrRegistrationMode | Apizr",
    "keywords": "Enum ApizrRegistrationMode Namespace Apizr.Configuring Assembly Apizr.dll public enum ApizrRegistrationMode Fields Set = 0 Store = 1"
  },
  "api/Apizr.Configuring.ApizrRequestMethod.html": {
    "href": "api/Apizr.Configuring.ApizrRequestMethod.html",
    "title": "Class ApizrRequestMethod | Apizr",
    "keywords": "Class ApizrRequestMethod Namespace Apizr.Configuring Assembly Apizr.dll public class ApizrRequestMethod : IEquatable<ApizrRequestMethod> Inheritance object ApizrRequestMethod Implements IEquatable<ApizrRequestMethod> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties All public static ApizrRequestMethod All { get; } Property Value ApizrRequestMethod AllCrud public static ApizrRequestMethod AllCrud { get; } Property Value ApizrRequestMethod AllHttp public static ApizrRequestMethod AllHttp { get; } Property Value ApizrRequestMethod CrudCreate public static ApizrRequestMethod CrudCreate { get; } Property Value ApizrRequestMethod CrudDelete public static ApizrRequestMethod CrudDelete { get; } Property Value ApizrRequestMethod CrudRead public static ApizrRequestMethod CrudRead { get; } Property Value ApizrRequestMethod CrudReadAll public static ApizrRequestMethod CrudReadAll { get; } Property Value ApizrRequestMethod CrudSafeCreate public static ApizrRequestMethod CrudSafeCreate { get; } Property Value ApizrRequestMethod CrudSafeDelete public static ApizrRequestMethod CrudSafeDelete { get; } Property Value ApizrRequestMethod CrudSafeRead public static ApizrRequestMethod CrudSafeRead { get; } Property Value ApizrRequestMethod CrudSafeReadAll public static ApizrRequestMethod CrudSafeReadAll { get; } Property Value ApizrRequestMethod CrudSafeUpdate public static ApizrRequestMethod CrudSafeUpdate { get; } Property Value ApizrRequestMethod CrudUpdate public static ApizrRequestMethod CrudUpdate { get; } Property Value ApizrRequestMethod HttpDelete public static ApizrRequestMethod HttpDelete { get; } Property Value ApizrRequestMethod HttpGet public static ApizrRequestMethod HttpGet { get; } Property Value ApizrRequestMethod HttpHead public static ApizrRequestMethod HttpHead { get; } Property Value ApizrRequestMethod HttpOptions public static ApizrRequestMethod HttpOptions { get; } Property Value ApizrRequestMethod HttpPost public static ApizrRequestMethod HttpPost { get; } Property Value ApizrRequestMethod HttpPostMultipart public static ApizrRequestMethod HttpPostMultipart { get; } Property Value ApizrRequestMethod HttpPut public static ApizrRequestMethod HttpPut { get; } Property Value ApizrRequestMethod Method public string Method { get; } Property Value string MethodName public string MethodName { get; } Property Value string Methods Equals(ApizrRequestMethod) public bool Equals(ApizrRequestMethod other) Parameters other ApizrRequestMethod Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string TryParse(string, out ApizrRequestMethod) public static bool TryParse(string method, out ApizrRequestMethod requestMethod) Parameters method string requestMethod ApizrRequestMethod Returns bool Operators operator ==(ApizrRequestMethod, ApizrRequestMethod) public static bool operator ==(ApizrRequestMethod left, ApizrRequestMethod right) Parameters left ApizrRequestMethod right ApizrRequestMethod Returns bool operator >=(ApizrRequestMethod, ApizrRequestMethod) public static bool operator >=(ApizrRequestMethod left, ApizrRequestMethod right) Parameters left ApizrRequestMethod right ApizrRequestMethod Returns bool operator !=(ApizrRequestMethod, ApizrRequestMethod) public static bool operator !=(ApizrRequestMethod left, ApizrRequestMethod right) Parameters left ApizrRequestMethod right ApizrRequestMethod Returns bool operator <=(ApizrRequestMethod, ApizrRequestMethod) public static bool operator <=(ApizrRequestMethod left, ApizrRequestMethod right) Parameters left ApizrRequestMethod right ApizrRequestMethod Returns bool"
  },
  "api/Apizr.Configuring.BaseAddressAttribute.html": {
    "href": "api/Apizr.Configuring.BaseAddressAttribute.html",
    "title": "Class BaseAddressAttribute | Apizr",
    "keywords": "Class BaseAddressAttribute Namespace Apizr.Configuring Assembly Apizr.dll Set a base absolute address or relative path (could be defined with options builder) [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface)] public class BaseAddressAttribute : Attribute Inheritance object Attribute BaseAddressAttribute Derived AutoRegisterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseAddressAttribute(string) Set a base absolute address or relative path (if path, base address has to be defined fluently) public BaseAddressAttribute(string baseAddressOrPath) Parameters baseAddressOrPath string The web api base absolute address or relative path Properties BaseAddressOrPath The web api base absolute address or relative path public string BaseAddressOrPath { get; } Property Value string"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptions.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptions.html",
    "title": "Class ApizrCommonOptions | Apizr",
    "keywords": "Class ApizrCommonOptions Namespace Apizr.Configuring.Common Assembly Apizr.dll Options available at common level for static registrations public class ApizrCommonOptions : ApizrCommonOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrCommonOptionsBase ApizrCommonOptions Implements IApizrCommonOptions IApizrCommonOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptions IApizrGlobalSharedOptionsBase Inherited Members ApizrCommonOptionsBase.RefitSettings ApizrCommonOptionsBase.ApizrConfigurationSection ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrCommonOptions() The Apizr common options constructor public ApizrCommonOptions() Properties BaseAddressFactory Base address factory public Func<string> BaseAddressFactory { get; set; } Property Value Func<string> BasePathFactory Base path factory public Func<string> BasePathFactory { get; set; } Property Value Func<string> BaseUriFactory Base uri factory public Func<Uri> BaseUriFactory { get; set; } Property Value Func<Uri> CacheHandlerFactory Cache handler factory public Func<ICacheHandler> CacheHandlerFactory { get; set; } Property Value Func<ICacheHandler> ConnectivityHandlerFactory Connectivity handler factory public Func<IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Func<IConnectivityHandler> DelegatingHandlersFactories DelegatingHandler factories public IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> ExceptionHandlersFactory Exception handlers factory public Func<IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; set; } Property Value Func<IList<IApizrExceptionHandler>> HttpClientConfigurationBuilder HttpClient configuration builder public Action<HttpClient> HttpClientConfigurationBuilder { get; set; } Property Value Action<HttpClient> HttpClientHandlerFactory HttpClientHandler factory public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Func<HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory public Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; set; } Property Value Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Func<HttpTracerMode> LogLevelsFactory Log levels factory public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Func<LogLevel[]> LoggerFactoryFactory The LoggerFactory factory (I know, I know...) public Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Func<ILoggerFactory> MappingHandlerFactory Mapping handler factory public Func<IMappingHandler> MappingHandlerFactory { get; set; } Property Value Func<IMappingHandler> OperationTimeoutFactory The operation timeout factory (overall request tries) public Func<TimeSpan> OperationTimeoutFactory { get; set; } Property Value Func<TimeSpan> RefitSettingsFactory Refit settings factory public Func<RefitSettings> RefitSettingsFactory { get; set; } Property Value Func<RefitSettings> RequestTimeoutFactory The request timeout factory (each request try) public Func<TimeSpan> RequestTimeoutFactory { get; set; } Property Value Func<TimeSpan> ResiliencePipelineRegistryFactory Resilience pipeline registry factory public Func<ResiliencePipelineRegistry<string>> ResiliencePipelineRegistryFactory { get; set; } Property Value Func<ResiliencePipelineRegistry<string>> TrafficVerbosityFactory Http traffic tracing verbosity factory public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Func<HttpMessageParts>"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptionsBase.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptionsBase.html",
    "title": "Class ApizrCommonOptionsBase | Apizr",
    "keywords": "Class ApizrCommonOptionsBase Namespace Apizr.Configuring.Common Assembly Apizr.dll Options available at common level for both static and extended registrations public abstract class ApizrCommonOptionsBase : ApizrGlobalSharedRegistrationOptionsBase, IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrCommonOptionsBase Implements IApizrCommonOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Derived ApizrCommonOptions ApizrExtendedCommonOptions Inherited Members ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrCommonOptionsBase() protected ApizrCommonOptionsBase() Properties ApizrConfigurationSection Configuration section for Apizr public IConfigurationSection ApizrConfigurationSection { get; } Property Value IConfigurationSection RefitSettings Refit settings public RefitSettings RefitSettings { get; protected set; } Property Value RefitSettings"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptionsBuilder.html",
    "title": "Class ApizrCommonOptionsBuilder | Apizr",
    "keywords": "Class ApizrCommonOptionsBuilder Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for static registrations public class ApizrCommonOptionsBuilder : IApizrCommonOptionsBuilder, IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inheritance object ApizrCommonOptionsBuilder Implements IApizrCommonOptionsBuilder IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder> IApizrSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder> IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper) Fields Options The common options protected readonly ApizrCommonOptions Options Field Value ApizrCommonOptions Methods ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) Configure HttpClient public IApizrCommonOptionsBuilder ConfigureHttpClient(Action<HttpClient> configureHttpClient, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters configureHttpClient Action<HttpClient> The configuration builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns IApizrCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) Provide a method to refresh the authorization token when needed public IApizrCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters refreshTokenFactory Func<HttpRequestMessage, Task<string>> Refresh token method called when expired or empty Returns IApizrCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory public IApizrCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns IApizrCommonOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token source public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenServiceFactory Func<TTokenService> A TTokenService instance factory refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenService TTokenService A TTokenService instance refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrCommonOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrCommonOptionsBuilder WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrCommonOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrCommonOptionsBuilder WithBaseAddress(string, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrCommonOptionsBuilder WithBaseAddress(string baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress string Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrCommonOptionsBuilder WithBaseAddress(Uri, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrCommonOptionsBuilder WithBaseAddress(Uri baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress Uri Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrCommonOptionsBuilder WithBasePath(Func<string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrCommonOptionsBuilder WithBasePath(Func<string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrCommonOptionsBuilder WithBasePath(string, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrCommonOptionsBuilder WithBasePath(string basePath, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePath string Your web api base path strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data public IApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters cacheHandler ICacheHandler An ICacheHandler mapping implementation instance Returns IApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler>) Provide a cache handler to cache data public IApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters cacheHandlerFactory Func<ICacheHandler> An ICacheHandler mapping implementation instance factory Returns IApizrCommonOptionsBuilder WithCaching(CacheMode, TimeSpan?, bool) Cache data. public IApizrCommonOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns IApizrCommonOptionsBuilder WithConfiguration(IConfiguration) Set options from configuration public IApizrCommonOptionsBuilder WithConfiguration(IConfiguration configuration) Parameters configuration IConfiguration The configuration to set options from Returns IApizrCommonOptionsBuilder WithConfiguration(IConfigurationSection) Set options from a specific configuration section public IApizrCommonOptionsBuilder WithConfiguration(IConfigurationSection configurationSection) Parameters configurationSection IConfigurationSection The configuration section to set options from Returns IApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request public IApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters connectivityHandler IConnectivityHandler An IConnectivityHandler mapping implementation instance Returns IApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Provide a connectivity handler public IApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters connectivityHandlerFactory Func<IConnectivityHandler> An IConnectivityHandler mapping implementation instance factory Returns IApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool>) Provide a function to invoke while checking connectivity public IApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters connectivityCheckingFunction Func<bool> A function to invoke while checking connectivity Returns IApizrCommonOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrCommonOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrCommonOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrCommonOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrCommonOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrCommonOptionsBuilder WithDelegatingHandler<THandler>(THandler delegatingHandler, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandler THandler A delegating handler strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrCommonOptionsBuilder Type Parameters THandler WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrCommonOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrCommonOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrCommonOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrCommonOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrCommonOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder Type Parameters TResult WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrCommonOptionsBuilder WithExCatching<THandler>(Func<THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder Type Parameters THandler WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrCommonOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrCommonOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers public IApizrCommonOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns IApizrCommonOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) Add some headers to the request public IApizrCommonOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrCommonOptionsBuilder WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request public IApizrCommonOptionsBuilder WithHeaders(Func<IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IList<string>> Headers factory strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrCommonOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrCommonOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrCommonOptionsBuilder WithHeaders<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsService TSettingsService A TSettingsService instance headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler public IApizrCommonOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<HttpClientHandler> An HttpClientHandler instance factory Returns IApizrCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler public IApizrCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters httpClientHandler HttpClientHandler An HttpClientHandler instance Returns IApizrCommonOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrCommonOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A http message handler factory Returns IApizrCommonOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrCommonOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, THandler> A http message handler factory Returns IApizrCommonOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(THandler) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrCommonOptionsBuilder WithHttpMessageHandler<THandler>(THandler httpMessageHandler) where THandler : HttpMessageHandler Parameters httpMessageHandler THandler A http message handler Returns IApizrCommonOptionsBuilder Type Parameters THandler WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. public IApizrCommonOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrCommonOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. public IApizrCommonOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory) Provide a logger factory public IApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory The logger factory Returns IApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Provide a logger factory public IApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters loggerFactory Func<ILoggerFactory> The logger factory Returns IApizrCommonOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrCommonOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns IApizrCommonOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrCommonOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters httpTracerModeFactory Func<HttpTracerMode> Http traffic tracing mode trafficVerbosityFactory Func<HttpMessageParts> Http traffic tracing verbosity factory logLevelsFactory Func<LogLevel[]> Log levels factory Returns IApizrCommonOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrCommonOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns IApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities public IApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters mappingHandler IMappingHandler An IMappingHandler mapping implementation instance Returns IApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Provide a mapping handler to map entities public IApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters mappingHandlerFactory Func<IMappingHandler> An IMappingHandler mapping implementation instance factory Returns IApizrCommonOptionsBuilder WithOperationTimeout(Func<TimeSpan>) Set a timeout to the operation (overall request tries) public IApizrCommonOptionsBuilder WithOperationTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The operation timeout factory Returns IApizrCommonOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) public IApizrCommonOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns IApizrCommonOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings public IApizrCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters refitSettings RefitSettings A Refit.RefitSettings instance Returns IApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings>) Provide some Refit specific settings public IApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters refitSettingsFactory Func<RefitSettings> A Refit.RefitSettings instance factory Returns IApizrCommonOptionsBuilder WithRequestTimeout(Func<TimeSpan>) Set a timeout to the request (each request try) public IApizrCommonOptionsBuilder WithRequestTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The request timeout factory Returns IApizrCommonOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) public IApizrCommonOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns IApizrCommonOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context public IApizrCommonOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns IApizrCommonOptionsBuilder WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. public IApizrCommonOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, IEnumerable<ApizrRequestMethod> methodScope = null, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. methodScope IEnumerable<ApizrRequestMethod> Http or Crud methods to apply pipelines on (default: null = All) duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrCommonOptionsBuilder WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string>) Provide a resilience pipeline registry public IApizrCommonOptionsBuilder WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string> resiliencePipelineRegistry) Parameters resiliencePipelineRegistry ResiliencePipelineRegistry<string> A resilience pipeline registry instance Returns IApizrCommonOptionsBuilder WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>>) Provide a resilience pipeline registry public IApizrCommonOptionsBuilder WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>> resiliencePipelineRegistryFactory) Parameters resiliencePipelineRegistryFactory Func<ResiliencePipelineRegistry<string>> A resilience pipeline registry instance factory Returns IApizrCommonOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) Set some resilience properties to the resilience context public IApizrCommonOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<TValue> The resilience property's value factory Returns IApizrCommonOptionsBuilder Type Parameters TValue WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context public IApizrCommonOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue value) Parameters key ResiliencePropertyKey<TValue> The resilience property's key value TValue The resilience property's value Returns IApizrCommonOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptions.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptions.html",
    "title": "Interface IApizrCommonOptions | Apizr",
    "keywords": "Interface IApizrCommonOptions Namespace Apizr.Configuring.Common Assembly Apizr.dll Options available at common level for static registrations public interface IApizrCommonOptions : IApizrCommonOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrSharedRegistrationOptions.BaseUriFactory IApizrSharedRegistrationOptions.BaseAddressFactory IApizrSharedRegistrationOptions.BasePathFactory IApizrSharedRegistrationOptions.HttpTracerModeFactory IApizrSharedRegistrationOptions.TrafficVerbosityFactory IApizrSharedRegistrationOptions.LogLevelsFactory IApizrSharedRegistrationOptions.HttpClientHandlerFactory IApizrSharedRegistrationOptions.HttpClientConfigurationBuilder IApizrSharedRegistrationOptions.DelegatingHandlersFactories IApizrSharedRegistrationOptions.HttpMessageHandlerFactory IApizrSharedRegistrationOptions.OperationTimeoutFactory IApizrSharedRegistrationOptions.RequestTimeoutFactory IApizrSharedRegistrationOptions.ExceptionHandlersFactory IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties CacheHandlerFactory Cache handler factory Func<ICacheHandler> CacheHandlerFactory { get; } Property Value Func<ICacheHandler> ConnectivityHandlerFactory Connectivity handler factory Func<IConnectivityHandler> ConnectivityHandlerFactory { get; } Property Value Func<IConnectivityHandler> LoggerFactoryFactory The LoggerFactory factory (I know, I know...) Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Func<ILoggerFactory> MappingHandlerFactory Mapping handler factory Func<IMappingHandler> MappingHandlerFactory { get; } Property Value Func<IMappingHandler> RefitSettingsFactory Refit settings factory Func<RefitSettings> RefitSettingsFactory { get; } Property Value Func<RefitSettings> ResiliencePipelineRegistryFactory Resilience pipeline registry factory Func<ResiliencePipelineRegistry<string>> ResiliencePipelineRegistryFactory { get; } Property Value Func<ResiliencePipelineRegistry<string>>"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBase.html",
    "title": "Interface IApizrCommonOptionsBase | Apizr",
    "keywords": "Interface IApizrCommonOptionsBase Namespace Apizr.Configuring.Common Assembly Apizr.dll Options available at common level for both static and extended registrations public interface IApizrCommonOptionsBase : IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties ApizrConfigurationSection Configuration section for Apizr IConfigurationSection ApizrConfigurationSection { get; } Property Value IConfigurationSection RefitSettings Refit settings RefitSettings RefitSettings { get; } Property Value RefitSettings"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder-2.html",
    "title": "Interface IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for static registrations public interface IApizrCommonOptionsBuilder<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> Type Parameters TApizrCommonOptions TApizrCommonOptionsBuilder Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithOperationTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRequestTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper) Methods WithCacheHandler(Func<ICacheHandler>) Provide a cache handler to cache data TApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters cacheHandlerFactory Func<ICacheHandler> An ICacheHandler mapping implementation instance factory Returns TApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Provide a connectivity handler TApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters connectivityHandlerFactory Func<IConnectivityHandler> An IConnectivityHandler mapping implementation instance factory Returns TApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory) Provide a logger factory TApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory The logger factory Returns TApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Provide a logger factory TApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters loggerFactory Func<ILoggerFactory> The logger factory Returns TApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Provide a mapping handler to map entities TApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters mappingHandlerFactory Func<IMappingHandler> An IMappingHandler mapping implementation instance factory Returns TApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings>) Provide some Refit specific settings TApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters refitSettingsFactory Func<RefitSettings> A Refit.RefitSettings instance factory Returns TApizrCommonOptionsBuilder WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string>) Provide a resilience pipeline registry TApizrCommonOptionsBuilder WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string> resiliencePipelineRegistry) Parameters resiliencePipelineRegistry ResiliencePipelineRegistry<string> A resilience pipeline registry instance Returns TApizrCommonOptionsBuilder WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>>) Provide a resilience pipeline registry TApizrCommonOptionsBuilder WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>> resiliencePipelineRegistryFactory) Parameters resiliencePipelineRegistryFactory Func<ResiliencePipelineRegistry<string>> A resilience pipeline registry instance factory Returns TApizrCommonOptionsBuilder"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder.html",
    "title": "Interface IApizrCommonOptionsBuilder | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilder Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for static registrations public interface IApizrCommonOptionsBuilder : IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inherited Members IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBasePath(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithOperationTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRequestTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase-2.html",
    "title": "Interface IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for both static and extended registrations public interface IApizrCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> Type Parameters TApizrCommonOptions TApizrCommonOptionsBuilder Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase.html",
    "title": "Interface IApizrCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilderBase Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for both static and extended registrations public interface IApizrCommonOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.IApizrExtendedCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrExtendedCommonOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilderBase Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for extended registration public interface IApizrExtendedCommonOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for both static and extended registrations public interface IApizrGlobalCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> Type Parameters TApizrCommonOptions TApizrCommonOptionsBuilder Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Methods WithCacheHandler(ICacheHandler) Provide a cache handler to cache data TApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters cacheHandler ICacheHandler An ICacheHandler mapping implementation instance Returns TApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request TApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters connectivityHandler IConnectivityHandler An IConnectivityHandler mapping implementation instance Returns TApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool>) Provide a function to invoke while checking connectivity TApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters connectivityCheckingFunction Func<bool> A function to invoke while checking connectivity Returns TApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities TApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters mappingHandler IMappingHandler An IMappingHandler mapping implementation instance Returns TApizrCommonOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings TApizrCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters refitSettings RefitSettings A Refit.RefitSettings instance Returns TApizrCommonOptionsBuilder"
  },
  "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalCommonOptionsBuilderBase Namespace Apizr.Configuring.Common Assembly Apizr.dll Builder options available at common level for both static and extended registrations public interface IApizrGlobalCommonOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Common.html": {
    "href": "api/Apizr.Configuring.Common.html",
    "title": "Namespace Apizr.Configuring.Common | Apizr",
    "keywords": "Namespace Apizr.Configuring.Common Classes ApizrCommonOptions Options available at common level for static registrations ApizrCommonOptionsBase Options available at common level for both static and extended registrations ApizrCommonOptionsBuilder Builder options available at common level for static registrations Interfaces IApizrCommonOptions Options available at common level for static registrations IApizrCommonOptionsBase Options available at common level for both static and extended registrations IApizrCommonOptionsBuilder Builder options available at common level for static registrations IApizrCommonOptionsBuilderBase Builder options available at common level for both static and extended registrations IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for both static and extended registrations IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for static registrations IApizrExtendedCommonOptionsBuilderBase Builder options available at common level for extended registration IApizrGlobalCommonOptionsBuilderBase Builder options available at common level for both static and extended registrations IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for both static and extended registrations"
  },
  "api/Apizr.Configuring.CreateHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.CreateHandlerParameterAttribute.html",
    "title": "Class CreateHandlerParameterAttribute | Apizr",
    "keywords": "Class CreateHandlerParameterAttribute Namespace Apizr.Configuring Assembly Apizr.dll public abstract class CreateHandlerParameterAttribute : CrudHandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute CreateHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateHandlerParameterAttribute(string, object) protected CreateHandlerParameterAttribute(string key, object value) Parameters key string value object"
  },
  "api/Apizr.Configuring.CrudHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.CrudHandlerParameterAttribute.html",
    "title": "Class CrudHandlerParameterAttribute | Apizr",
    "keywords": "Class CrudHandlerParameterAttribute Namespace Apizr.Configuring Assembly Apizr.dll public abstract class CrudHandlerParameterAttribute : HandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute Derived CreateHandlerParameterAttribute DeleteHandlerParameterAttribute ReadAllHandlerParameterAttribute ReadHandlerParameterAttribute UpdateHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudHandlerParameterAttribute(string, object) protected CrudHandlerParameterAttribute(string key, object value) Parameters key string value object"
  },
  "api/Apizr.Configuring.DeleteHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.DeleteHandlerParameterAttribute.html",
    "title": "Class DeleteHandlerParameterAttribute | Apizr",
    "keywords": "Class DeleteHandlerParameterAttribute Namespace Apizr.Configuring Assembly Apizr.dll public abstract class DeleteHandlerParameterAttribute : CrudHandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute DeleteHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteHandlerParameterAttribute(string, object) protected DeleteHandlerParameterAttribute(string key, object value) Parameters key string value object"
  },
  "api/Apizr.Configuring.HandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.HandlerParameterAttribute.html",
    "title": "Class HandlerParameterAttribute | Apizr",
    "keywords": "Class HandlerParameterAttribute Namespace Apizr.Configuring Assembly Apizr.dll public abstract class HandlerParameterAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute Derived CrudHandlerParameterAttribute PriorityAttribute Inherited Members PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HandlerParameterAttribute(string, object) protected HandlerParameterAttribute(string key, object value) Parameters key string value object Properties Value public object Value { get; set; } Property Value object"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptions-1.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptions-1.html",
    "title": "Class ApizrManagerOptions<TWebApi> | Apizr",
    "keywords": "Class ApizrManagerOptions<TWebApi> Namespace Apizr.Configuring.Manager Assembly Apizr.dll Options available for static registrations public class ApizrManagerOptions<TWebApi> : IApizrManagerOptions<TWebApi>, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters TWebApi Inheritance object ApizrManagerOptions<TWebApi> Implements IApizrManagerOptions<TWebApi> IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Derived ApizrExtendedManagerOptions<TWebApi> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrManagerOptions(IApizrManagerOptionsBase) The options constructor public ApizrManagerOptions(IApizrManagerOptionsBase apizrOptions) Parameters apizrOptions IApizrManagerOptionsBase The base options Fields Options The options protected readonly IApizrManagerOptionsBase Options Field Value IApizrManagerOptionsBase Properties ApizrConfigurationSection Configuration section for Apizr public IConfigurationSection ApizrConfigurationSection { get; } Property Value IConfigurationSection BaseAddress Base address public string BaseAddress { get; } Property Value string BasePath Base path public string BasePath { get; } Property Value string BaseUri Base address public Uri BaseUri { get; } Property Value Uri CacheOptions The caching options to apply public IDictionary<ApizrConfigurationSource, CacheAttributeBase> CacheOptions { get; } Property Value IDictionary<ApizrConfigurationSource, CacheAttributeBase> CrudApiEntityType Crud api entity type if any public Type CrudApiEntityType { get; } Property Value Type ExceptionHandlers Catching potential exception if defined public IList<IApizrExceptionHandler> ExceptionHandlers { get; } Property Value IList<IApizrExceptionHandler> HandlersParameters Parameters passed through delegating handlers public IDictionary<string, object> HandlersParameters { get; } Property Value IDictionary<string, object> Headers Headers to add to the request public IDictionary<ApizrRegistrationMode, IList<string>> Headers { get; } Property Value IDictionary<ApizrRegistrationMode, IList<string>> HeadersFactories Headers factories public IDictionary<(ApizrRegistrationMode Mode, ApizrLifetimeScope Scope), Func<IList<string>>> HeadersFactories { get; } Property Value IDictionary<(ApizrRegistrationMode Mode, ApizrLifetimeScope Scope), Func<IList<string>>> HttpTracerMode Http traffic tracing mode public HttpTracerMode HttpTracerMode { get; } Property Value HttpTracerMode IsCrudApi True if it's a CRUD api public bool IsCrudApi { get; } Property Value bool LetThrowOnHandledException Let throw potential exception even if it's handled (default: true) public bool LetThrowOnHandledException { get; } Property Value bool LogLevels Log levels while writing public LogLevel[] LogLevels { get; } Property Value LogLevel[] Logger The logger instance public ILogger Logger { get; } Property Value ILogger OperationTimeout The operation timeout (overall request tries) public TimeSpan? OperationTimeout { get; } Property Value TimeSpan? PrimaryHandlerFactory The primary Http message handler factory (set internally) public Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler> PrimaryHandlerFactory { get; } Property Value Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler> RefitSettings Refit settings public RefitSettings RefitSettings { get; } Property Value RefitSettings RequestNames Web api request names public IReadOnlyList<string> RequestNames { get; } Property Value IReadOnlyList<string> RequestOptionsBuilders The request options builders public IDictionary<string, Action<IApizrRequestOptionsBuilder>> RequestOptionsBuilders { get; } Property Value IDictionary<string, Action<IApizrRequestOptionsBuilder>> RequestTimeout The request timeout (each request try) public TimeSpan? RequestTimeout { get; } Property Value TimeSpan? ResiliencePipelineOptions Resilience pipeline keys from the registry public IDictionary<ApizrConfigurationSource, ResiliencePipelineAttributeBase[]> ResiliencePipelineOptions { get; } Property Value IDictionary<ApizrConfigurationSource, ResiliencePipelineAttributeBase[]> ShouldRedactHeaderValue The Func<T, TResult> which determines whether to redact the HTTP header value before logging. public Func<string, bool> ShouldRedactHeaderValue { get; } Property Value Func<string, bool> TrafficVerbosity Http traffic tracing verbosity public HttpMessageParts TrafficVerbosity { get; } Property Value HttpMessageParts TypeInfo Web api interface or Crud api entity class type info public TypeInfo TypeInfo { get; } Property Value TypeInfo WebApiType Web api interface type public Type WebApiType { get; } Property Value Type"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptions.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptions.html",
    "title": "Class ApizrManagerOptions | Apizr",
    "keywords": "Class ApizrManagerOptions Namespace Apizr.Configuring.Manager Assembly Apizr.dll Options available for static registrations public class ApizrManagerOptions : ApizrManagerOptionsBase, IApizrManagerOptions, IApizrManagerOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase ApizrManagerOptions Implements IApizrManagerOptions IApizrManagerOptionsBase IApizrCommonOptions IApizrCommonOptionsBase IApizrProperOptions IApizrProperOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptions IApizrGlobalSharedOptionsBase Inherited Members ApizrManagerOptionsBase.WebApiType ApizrManagerOptionsBase.CrudApiEntityType ApizrManagerOptionsBase.TypeInfo ApizrManagerOptionsBase.RequestNames ApizrManagerOptionsBase.IsCrudApi ApizrManagerOptionsBase.Logger ApizrManagerOptionsBase.RequestOptionsBuilders ApizrManagerOptionsBase.RefitSettings ApizrManagerOptionsBase.ApizrConfigurationSection ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrManagerOptions(IApizrCommonOptions, IApizrProperOptions) The options constructor public ApizrManagerOptions(IApizrCommonOptions commonOptions, IApizrProperOptions properOptions) Parameters commonOptions IApizrCommonOptions The common options properOptions IApizrProperOptions The proper options Properties BaseAddressFactory Base address factory public Func<string> BaseAddressFactory { get; set; } Property Value Func<string> BasePathFactory Base path factory public Func<string> BasePathFactory { get; set; } Property Value Func<string> BaseUriFactory Base uri factory public Func<Uri> BaseUriFactory { get; set; } Property Value Func<Uri> CacheHandlerFactory Cache handler factory public Func<ICacheHandler> CacheHandlerFactory { get; set; } Property Value Func<ICacheHandler> ConnectivityHandlerFactory Connectivity handler factory public Func<IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Func<IConnectivityHandler> DelegatingHandlersFactories DelegatingHandler factories public IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> ExceptionHandlersFactory Exception handlers factory public Func<IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; set; } Property Value Func<IList<IApizrExceptionHandler>> HttpClientConfigurationBuilder HttpClient configuration builder public Action<HttpClient> HttpClientConfigurationBuilder { get; set; } Property Value Action<HttpClient> HttpClientHandlerFactory HttpClientHandler factory public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Func<HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory public Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; set; } Property Value Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Func<HttpTracerMode> LogLevelsFactory Log levels factory public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Func<LogLevel[]> LoggerFactory The Logger factory public Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Func<ILoggerFactory, string, ILogger> LoggerFactoryFactory The LoggerFactory factory (I know, I know...) public Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Func<ILoggerFactory> MappingHandlerFactory Mapping handler factory public Func<IMappingHandler> MappingHandlerFactory { get; set; } Property Value Func<IMappingHandler> OperationTimeoutFactory The operation timeout factory (overall request tries) public Func<TimeSpan> OperationTimeoutFactory { get; set; } Property Value Func<TimeSpan> RefitSettingsFactory Refit settings factory public Func<RefitSettings> RefitSettingsFactory { get; set; } Property Value Func<RefitSettings> RequestTimeoutFactory The request timeout factory (each request try) public Func<TimeSpan> RequestTimeoutFactory { get; set; } Property Value Func<TimeSpan> ResiliencePipelineRegistryFactory Resilience pipeline registry factory public Func<ResiliencePipelineRegistry<string>> ResiliencePipelineRegistryFactory { get; set; } Property Value Func<ResiliencePipelineRegistry<string>> TrafficVerbosityFactory Http traffic tracing verbosity factory public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Func<HttpMessageParts>"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptionsBase.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptionsBase.html",
    "title": "Class ApizrManagerOptionsBase | Apizr",
    "keywords": "Class ApizrManagerOptionsBase Namespace Apizr.Configuring.Manager Assembly Apizr.dll Options available for both static and extended registrations public abstract class ApizrManagerOptionsBase : ApizrGlobalSharedRegistrationOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase Implements IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Derived ApizrManagerOptions ApizrExtendedManagerOptionsBase Inherited Members ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrManagerOptionsBase(IApizrCommonOptionsBase, IApizrProperOptionsBase) The options constructor protected ApizrManagerOptionsBase(IApizrCommonOptionsBase commonOptions, IApizrProperOptionsBase properOptions) Parameters commonOptions IApizrCommonOptionsBase The common options properOptions IApizrProperOptionsBase The proper options Properties ApizrConfigurationSection Configuration section for Apizr public IConfigurationSection ApizrConfigurationSection { get; } Property Value IConfigurationSection CrudApiEntityType Crud api entity type if any public Type CrudApiEntityType { get; } Property Value Type IsCrudApi True if it's a CRUD api public bool IsCrudApi { get; } Property Value bool Logger The logger instance public ILogger Logger { get; protected set; } Property Value ILogger RefitSettings Refit settings public RefitSettings RefitSettings { get; protected set; } Property Value RefitSettings RequestNames Web api request names public IReadOnlyList<string> RequestNames { get; } Property Value IReadOnlyList<string> RequestOptionsBuilders The request options builders public IDictionary<string, Action<IApizrRequestOptionsBuilder>> RequestOptionsBuilders { get; } Property Value IDictionary<string, Action<IApizrRequestOptionsBuilder>> TypeInfo Web api interface or Crud api entity class type info public TypeInfo TypeInfo { get; } Property Value TypeInfo WebApiType Web api interface type public Type WebApiType { get; } Property Value Type"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.html",
    "title": "Class ApizrManagerOptionsBuilder | Apizr",
    "keywords": "Class ApizrManagerOptionsBuilder Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for static registrations public class ApizrManagerOptionsBuilder : IApizrManagerOptionsBuilder, IApizrManagerOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inheritance object ApizrManagerOptionsBuilder Implements IApizrManagerOptionsBuilder IApizrManagerOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrGlobalManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrManagerOptionsBuilderBase IApizrGlobalManagerOptionsBuilderBase IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrProperOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrGlobalProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder> IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper) Fields Options The options protected readonly ApizrManagerOptions Options Field Value ApizrManagerOptions Methods ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) Configure HttpClient public IApizrManagerOptionsBuilder ConfigureHttpClient(Action<HttpClient> configureHttpClient, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters configureHttpClient Action<HttpClient> The configuration builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns IApizrManagerOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) Provide a method to refresh the authorization token when needed public IApizrManagerOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters refreshTokenFactory Func<HttpRequestMessage, Task<string>> Refresh token method called when expired or empty Returns IApizrManagerOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory public IApizrManagerOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns IApizrManagerOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token source public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenServiceFactory Func<TTokenService> A TTokenService instance factory refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenService TTokenService A TTokenService instance refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrManagerOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrManagerOptionsBuilder WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrManagerOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrManagerOptionsBuilder WithBaseAddress(string, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrManagerOptionsBuilder WithBaseAddress(string baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress string Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrManagerOptionsBuilder WithBaseAddress(Uri, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrManagerOptionsBuilder WithBaseAddress(Uri baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress Uri Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrManagerOptionsBuilder WithBasePath(Func<string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrManagerOptionsBuilder WithBasePath(Func<string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrManagerOptionsBuilder WithBasePath(string, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrManagerOptionsBuilder WithBasePath(string basePath, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePath string Your web api base path strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrManagerOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data public IApizrManagerOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters cacheHandler ICacheHandler An ICacheHandler mapping implementation instance Returns IApizrManagerOptionsBuilder WithCacheHandler(Func<ICacheHandler>) Provide a cache handler to cache data public IApizrManagerOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters cacheHandlerFactory Func<ICacheHandler> An ICacheHandler mapping implementation instance factory Returns IApizrManagerOptionsBuilder WithCaching(CacheMode, TimeSpan?, bool) Cache data. public IApizrManagerOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns IApizrManagerOptionsBuilder WithConfiguration(IConfiguration) Set options from configuration public IApizrManagerOptionsBuilder WithConfiguration(IConfiguration configuration) Parameters configuration IConfiguration The configuration to set options from Returns IApizrManagerOptionsBuilder WithConfiguration(IConfigurationSection) Set options from a specific configuration section public IApizrManagerOptionsBuilder WithConfiguration(IConfigurationSection configurationSection) Parameters configurationSection IConfigurationSection The configuration section to set options from Returns IApizrManagerOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request public IApizrManagerOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters connectivityHandler IConnectivityHandler An IConnectivityHandler mapping implementation instance Returns IApizrManagerOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Provide a connectivity handler public IApizrManagerOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters connectivityHandlerFactory Func<IConnectivityHandler> An IConnectivityHandler mapping implementation instance factory Returns IApizrManagerOptionsBuilder WithConnectivityHandler(Func<bool>) Provide a function to invoke while checking connectivity public IApizrManagerOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters connectivityCheckingFunction Func<bool> A function to invoke while checking connectivity Returns IApizrManagerOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrManagerOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrManagerOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrManagerOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrManagerOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrManagerOptionsBuilder WithDelegatingHandler<THandler>(THandler delegatingHandler, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandler THandler A delegating handler strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrManagerOptionsBuilder Type Parameters THandler WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrManagerOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrManagerOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrManagerOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrManagerOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrManagerOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder Type Parameters TResult WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrManagerOptionsBuilder WithExCatching<THandler>(Func<THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder Type Parameters THandler WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrManagerOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrManagerOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers public IApizrManagerOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns IApizrManagerOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) Add some headers to the request public IApizrManagerOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrManagerOptionsBuilder WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request public IApizrManagerOptionsBuilder WithHeaders(Func<IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IList<string>> Headers factory strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrManagerOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrManagerOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrManagerOptionsBuilder WithHeaders<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsService TSettingsService A TSettingsService instance headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler public IApizrManagerOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<HttpClientHandler> An HttpClientHandler instance factory Returns IApizrManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler public IApizrManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters httpClientHandler HttpClientHandler An HttpClientHandler instance Returns IApizrManagerOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrManagerOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A http message handler factory Returns IApizrManagerOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrManagerOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, THandler> A http message handler factory Returns IApizrManagerOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(THandler) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrManagerOptionsBuilder WithHttpMessageHandler<THandler>(THandler httpMessageHandler) where THandler : HttpMessageHandler Parameters httpMessageHandler THandler A http message handler Returns IApizrManagerOptionsBuilder Type Parameters THandler WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. public IApizrManagerOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrManagerOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. public IApizrManagerOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrManagerOptionsBuilder WithLoggerFactory(ILoggerFactory) Provide a logger factory public IApizrManagerOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters loggerFactory ILoggerFactory The logger factory Returns IApizrManagerOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Provide a logger factory public IApizrManagerOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters loggerFactory Func<ILoggerFactory> The logger factory Returns IApizrManagerOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrManagerOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns IApizrManagerOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrManagerOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters httpTracerModeFactory Func<HttpTracerMode> Http traffic tracing mode trafficVerbosityFactory Func<HttpMessageParts> Http traffic tracing verbosity factory logLevelsFactory Func<LogLevel[]> Log levels factory Returns IApizrManagerOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrManagerOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns IApizrManagerOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities public IApizrManagerOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters mappingHandler IMappingHandler An IMappingHandler mapping implementation instance Returns IApizrManagerOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Provide a mapping handler to map entities public IApizrManagerOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters mappingHandlerFactory Func<IMappingHandler> An IMappingHandler mapping implementation instance factory Returns IApizrManagerOptionsBuilder WithOperationTimeout(Func<TimeSpan>) Set a timeout to the operation (overall request tries) public IApizrManagerOptionsBuilder WithOperationTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The operation timeout factory Returns IApizrManagerOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) public IApizrManagerOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns IApizrManagerOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings public IApizrManagerOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters refitSettings RefitSettings A Refit.RefitSettings instance Returns IApizrManagerOptionsBuilder WithRefitSettings(Func<RefitSettings>) Provide some Refit specific settings public IApizrManagerOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters refitSettingsFactory Func<RefitSettings> A Refit.RefitSettings instance factory Returns IApizrManagerOptionsBuilder WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrManagerOptionsBuilder WithRequestOptions(string requestName, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestName string The name of the request to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrManagerOptionsBuilder WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrManagerOptionsBuilder WithRequestOptions(string[] requestNames, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestNames string[] The name of the requests to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrManagerOptionsBuilder WithRequestTimeout(Func<TimeSpan>) Set a timeout to the request (each request try) public IApizrManagerOptionsBuilder WithRequestTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The request timeout factory Returns IApizrManagerOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) public IApizrManagerOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns IApizrManagerOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context public IApizrManagerOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns IApizrManagerOptionsBuilder WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. public IApizrManagerOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, IEnumerable<ApizrRequestMethod> methodScope = null, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. methodScope IEnumerable<ApizrRequestMethod> Http or Crud methods to apply pipelines on (default: null = All) duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrManagerOptionsBuilder WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string>) Provide a resilience pipeline registry public IApizrManagerOptionsBuilder WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string> resiliencePipelineRegistry) Parameters resiliencePipelineRegistry ResiliencePipelineRegistry<string> A resilience pipeline registry instance Returns IApizrManagerOptionsBuilder WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>>) Provide a resilience pipeline registry public IApizrManagerOptionsBuilder WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>> resiliencePipelineRegistryFactory) Parameters resiliencePipelineRegistryFactory Func<ResiliencePipelineRegistry<string>> A resilience pipeline registry instance factory Returns IApizrManagerOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) Set some resilience properties to the resilience context public IApizrManagerOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<TValue> The resilience property's value factory Returns IApizrManagerOptionsBuilder Type Parameters TValue WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context public IApizrManagerOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue value) Parameters key ResiliencePropertyKey<TValue> The resilience property's key value TValue The resilience property's value Returns IApizrManagerOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilderBase Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for extended registration public interface IApizrExtendedManagerOptionsBuilderBase : IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for both static and extended registrations public interface IApizrGlobalManagerOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrManagerOptionsBase where TApizrOptionsBuilder : IApizrGlobalManagerOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalManagerOptionsBuilderBase Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for both static and extended registrations public interface IApizrGlobalManagerOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptions-1.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptions-1.html",
    "title": "Interface IApizrManagerOptions<TWebApi> | Apizr",
    "keywords": "Interface IApizrManagerOptions<TWebApi> Namespace Apizr.Configuring.Manager Assembly Apizr.dll Options available for static registrations public interface IApizrManagerOptions<TWebApi> : IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters TWebApi Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptions.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptions.html",
    "title": "Interface IApizrManagerOptions | Apizr",
    "keywords": "Interface IApizrManagerOptions Namespace Apizr.Configuring.Manager Assembly Apizr.dll Options available for static registrations public interface IApizrManagerOptions : IApizrManagerOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inherited Members IApizrCommonOptions.LoggerFactoryFactory IApizrCommonOptions.ResiliencePipelineRegistryFactory IApizrCommonOptions.RefitSettingsFactory IApizrCommonOptions.ConnectivityHandlerFactory IApizrCommonOptions.CacheHandlerFactory IApizrCommonOptions.MappingHandlerFactory IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrProperOptions.LoggerFactory IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrSharedRegistrationOptions.BaseUriFactory IApizrSharedRegistrationOptions.BaseAddressFactory IApizrSharedRegistrationOptions.BasePathFactory IApizrSharedRegistrationOptions.HttpTracerModeFactory IApizrSharedRegistrationOptions.TrafficVerbosityFactory IApizrSharedRegistrationOptions.LogLevelsFactory IApizrSharedRegistrationOptions.HttpClientHandlerFactory IApizrSharedRegistrationOptions.HttpClientConfigurationBuilder IApizrSharedRegistrationOptions.DelegatingHandlersFactories IApizrSharedRegistrationOptions.HttpMessageHandlerFactory IApizrSharedRegistrationOptions.OperationTimeoutFactory IApizrSharedRegistrationOptions.RequestTimeoutFactory IApizrSharedRegistrationOptions.ExceptionHandlersFactory IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBase.html",
    "title": "Interface IApizrManagerOptionsBase | Apizr",
    "keywords": "Interface IApizrManagerOptionsBase Namespace Apizr.Configuring.Manager Assembly Apizr.dll Options available for both static and extended registrations public interface IApizrManagerOptionsBase : IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder-2.html",
    "title": "Interface IApizrManagerOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for static registrations public interface IApizrManagerOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> : IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrManagerOptionsBase where TApizrOptionsBuilder : IApizrManagerOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder.html",
    "title": "Interface IApizrManagerOptionsBuilder | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilder Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for static registrations public interface IApizrManagerOptionsBuilder : IApizrManagerOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inherited Members IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithResiliencePipelineRegistry(ResiliencePipelineRegistry<string>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithResiliencePipelineRegistry(Func<ResiliencePipelineRegistry<string>>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBasePath(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithOperationTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRequestTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase-2.html",
    "title": "Interface IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for both static and extended registrations public interface IApizrManagerOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrCommonOptionsBuilderBase, IApizrProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrManagerOptionsBase where TApizrOptionsBuilder : IApizrManagerOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase.html",
    "title": "Interface IApizrManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilderBase Namespace Apizr.Configuring.Manager Assembly Apizr.dll Builder options available for both static and extended registrations public interface IApizrManagerOptionsBuilderBase : IApizrCommonOptionsBuilderBase, IApizrProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.html": {
    "href": "api/Apizr.Configuring.Manager.html",
    "title": "Namespace Apizr.Configuring.Manager | Apizr",
    "keywords": "Namespace Apizr.Configuring.Manager Classes ApizrManagerOptions Options available for static registrations ApizrManagerOptionsBase Options available for both static and extended registrations ApizrManagerOptionsBuilder Builder options available for static registrations ApizrManagerOptions<TWebApi> Options available for static registrations Interfaces IApizrExtendedManagerOptionsBuilderBase Builder options available for extended registration IApizrGlobalManagerOptionsBuilderBase Builder options available for both static and extended registrations IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available for both static and extended registrations IApizrManagerOptions Options available for static registrations IApizrManagerOptionsBase Options available for both static and extended registrations IApizrManagerOptionsBuilder Builder options available for static registrations IApizrManagerOptionsBuilderBase Builder options available for both static and extended registrations IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available for both static and extended registrations IApizrManagerOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Builder options available for static registrations IApizrManagerOptions<TWebApi> Options available for static registrations"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptions.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptions.html",
    "title": "Class ApizrProperOptions | Apizr",
    "keywords": "Class ApizrProperOptions Namespace Apizr.Configuring.Proper Assembly Apizr.dll Options available at proper level for static registrations public class ApizrProperOptions : ApizrProperOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrProperOptionsBase ApizrProperOptions Implements IApizrProperOptions IApizrProperOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptions IApizrGlobalSharedOptionsBase Inherited Members ApizrProperOptionsBase.WebApiType ApizrProperOptionsBase.CrudApiEntityType ApizrProperOptionsBase.TypeInfo ApizrProperOptionsBase.RequestNames ApizrProperOptionsBase.IsCrudApi ApizrProperOptionsBase.Logger ApizrProperOptionsBase.RequestOptionsBuilders ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrProperOptions(IApizrSharedRegistrationOptions, Type, Type, TypeInfo, string, string, IDictionary<string, object>, HttpTracerMode?, HttpMessageParts?, TimeSpan?, TimeSpan?, ResiliencePipelineAttributeBase[], ResiliencePipelineAttributeBase[], CacheAttribute, CacheAttribute, Func<string, bool>, params LogLevel[]) The proper options constructor public ApizrProperOptions(IApizrSharedRegistrationOptions sharedOptions, Type webApiType, Type crudApiEntityType, TypeInfo typeInfo, string baseAddress, string basePath, IDictionary<string, object> handlersParameters, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, TimeSpan? operationTimeout, TimeSpan? requestTimeout, ResiliencePipelineAttributeBase[] commonResiliencePipelineAttributes, ResiliencePipelineAttributeBase[] properResiliencePipelineAttributes, CacheAttribute commonCacheAttribute, CacheAttribute properCacheAttribute, Func<string, bool> shouldRedactHeaderValue = null, params LogLevel[] logLevels) Parameters sharedOptions IApizrSharedRegistrationOptions The shared options webApiType Type The web api type crudApiEntityType Type The crud api entity type if any typeInfo TypeInfo The type info baseAddress string The web api base address basePath string The web api base path handlersParameters IDictionary<string, object> Some handlers parameters httpTracerMode HttpTracerMode? The http tracer mode trafficVerbosity HttpMessageParts? The traffic verbosity operationTimeout TimeSpan? The operation timeout requestTimeout TimeSpan? The request timeout commonResiliencePipelineAttributes ResiliencePipelineAttributeBase[] Global resilience pipelines properResiliencePipelineAttributes ResiliencePipelineAttributeBase[] Specific resilience pipeline commonCacheAttribute CacheAttribute Global caching options properCacheAttribute CacheAttribute Specific caching options shouldRedactHeaderValue Func<string, bool> Headers to redact value logLevels LogLevel[] The log levels Properties BaseAddressFactory Base address factory public Func<string> BaseAddressFactory { get; set; } Property Value Func<string> BasePathFactory Base path factory public Func<string> BasePathFactory { get; set; } Property Value Func<string> BaseUriFactory Base uri factory public Func<Uri> BaseUriFactory { get; set; } Property Value Func<Uri> DelegatingHandlersFactories DelegatingHandler factories public IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> ExceptionHandlersFactory Exception handlers factory public Func<IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; set; } Property Value Func<IList<IApizrExceptionHandler>> HttpClientConfigurationBuilder HttpClient configuration builder public Action<HttpClient> HttpClientConfigurationBuilder { get; set; } Property Value Action<HttpClient> HttpClientHandlerFactory HttpClientHandler factory public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Func<HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory public Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; set; } Property Value Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Func<HttpTracerMode> LogLevelsFactory Log levels factory public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Func<LogLevel[]> LoggerFactory The Logger factory public Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Func<ILoggerFactory, string, ILogger> OperationTimeoutFactory The operation timeout factory (overall request tries) public Func<TimeSpan> OperationTimeoutFactory { get; set; } Property Value Func<TimeSpan> RequestTimeoutFactory The request timeout factory (each request try) public Func<TimeSpan> RequestTimeoutFactory { get; set; } Property Value Func<TimeSpan> TrafficVerbosityFactory Http traffic tracing verbosity factory public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Func<HttpMessageParts>"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptionsBase.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptionsBase.html",
    "title": "Class ApizrProperOptionsBase | Apizr",
    "keywords": "Class ApizrProperOptionsBase Namespace Apizr.Configuring.Proper Assembly Apizr.dll Options available at proper level for both static and extended registrations public abstract class ApizrProperOptionsBase : ApizrGlobalSharedRegistrationOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrProperOptionsBase Implements IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Derived ApizrProperOptions ApizrExtendedProperOptions Inherited Members ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrProperOptionsBase(IApizrGlobalSharedRegistrationOptionsBase, Type, Type, TypeInfo, ResiliencePipelineAttributeBase[], ResiliencePipelineAttributeBase[], CacheAttribute, CacheAttribute, Func<string, bool>) The proper options constructor protected ApizrProperOptionsBase(IApizrGlobalSharedRegistrationOptionsBase sharedOptions, Type webApiType, Type crudApiEntityType, TypeInfo typeInfo, ResiliencePipelineAttributeBase[] commonResiliencePipelineAttributes, ResiliencePipelineAttributeBase[] properResiliencePipelineAttributes, CacheAttribute commonCacheAttribute, CacheAttribute properCacheAttribute, Func<string, bool> shouldRedactHeaderValue = null) Parameters sharedOptions IApizrGlobalSharedRegistrationOptionsBase The shared options webApiType Type The web api type crudApiEntityType Type The crud api entity type if any typeInfo TypeInfo The type info commonResiliencePipelineAttributes ResiliencePipelineAttributeBase[] Global resilience pipelines properResiliencePipelineAttributes ResiliencePipelineAttributeBase[] Specific resilience pipelines commonCacheAttribute CacheAttribute Global caching options properCacheAttribute CacheAttribute Specific caching options shouldRedactHeaderValue Func<string, bool> Headers to redact value Properties CrudApiEntityType Crud api entity type if any public Type CrudApiEntityType { get; } Property Value Type IsCrudApi True if it's a CRUD api public bool IsCrudApi { get; } Property Value bool Logger The logger instance public ILogger Logger { get; protected set; } Property Value ILogger RequestNames Web api request names public IReadOnlyList<string> RequestNames { get; } Property Value IReadOnlyList<string> RequestOptionsBuilders The request options builders public IDictionary<string, Action<IApizrRequestOptionsBuilder>> RequestOptionsBuilders { get; } Property Value IDictionary<string, Action<IApizrRequestOptionsBuilder>> TypeInfo Web api interface or Crud api entity class type info public TypeInfo TypeInfo { get; } Property Value TypeInfo WebApiType Web api interface type public Type WebApiType { get; } Property Value Type"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptionsBuilder.html",
    "title": "Class ApizrProperOptionsBuilder | Apizr",
    "keywords": "Class ApizrProperOptionsBuilder Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for static registrations public class ApizrProperOptionsBuilder : IApizrProperOptionsBuilder, IApizrProperOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inheritance object ApizrProperOptionsBuilder Implements IApizrProperOptionsBuilder IApizrProperOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder> IApizrSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder> IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Fields Options The proper options protected readonly ApizrProperOptions Options Field Value ApizrProperOptions Methods ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) Configure HttpClient public IApizrProperOptionsBuilder ConfigureHttpClient(Action<HttpClient> configureHttpClient, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters configureHttpClient Action<HttpClient> The configuration builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns IApizrProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) Provide a method to refresh the authorization token when needed public IApizrProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters refreshTokenFactory Func<HttpRequestMessage, Task<string>> Refresh token method called when expired or empty Returns IApizrProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory public IApizrProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns IApizrProperOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token source public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenServiceFactory Func<TTokenService> A TTokenService instance factory refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenService TTokenService A TTokenService instance refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrProperOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrProperOptionsBuilder WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrProperOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrProperOptionsBuilder WithBaseAddress(string, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrProperOptionsBuilder WithBaseAddress(string baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress string Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrProperOptionsBuilder WithBaseAddress(Uri, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrProperOptionsBuilder WithBaseAddress(Uri baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress Uri Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrProperOptionsBuilder WithBasePath(Func<string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrProperOptionsBuilder WithBasePath(Func<string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrProperOptionsBuilder WithBasePath(string, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrProperOptionsBuilder WithBasePath(string basePath, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePath string Your web api base path strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrProperOptionsBuilder WithCaching(CacheMode, TimeSpan?, bool) Cache data. public IApizrProperOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns IApizrProperOptionsBuilder WithConfiguration(IConfiguration) Set options from configuration public IApizrProperOptionsBuilder WithConfiguration(IConfiguration configuration) Parameters configuration IConfiguration The configuration to set options from Returns IApizrProperOptionsBuilder WithConfiguration(IConfigurationSection) Set options from a specific configuration section public IApizrProperOptionsBuilder WithConfiguration(IConfigurationSection configurationSection) Parameters configurationSection IConfigurationSection The configuration section to set options from Returns IApizrProperOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrProperOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrProperOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrProperOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrProperOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrProperOptionsBuilder WithDelegatingHandler<THandler>(THandler delegatingHandler, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandler THandler A delegating handler strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrProperOptionsBuilder Type Parameters THandler WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrProperOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrProperOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrProperOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrProperOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrProperOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder Type Parameters TResult WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrProperOptionsBuilder WithExCatching<THandler>(Func<THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder Type Parameters THandler WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrProperOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrProperOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers public IApizrProperOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns IApizrProperOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) Add some headers to the request public IApizrProperOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrProperOptionsBuilder WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request public IApizrProperOptionsBuilder WithHeaders(Func<IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IList<string>> Headers factory strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrProperOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrProperOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrProperOptionsBuilder WithHeaders<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsService TSettingsService A TSettingsService instance headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrProperOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler public IApizrProperOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<HttpClientHandler> An HttpClientHandler instance factory Returns IApizrProperOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler public IApizrProperOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters httpClientHandler HttpClientHandler An HttpClientHandler instance Returns IApizrProperOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrProperOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A http message handler factory Returns IApizrProperOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrProperOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, THandler> A http message handler factory Returns IApizrProperOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(THandler) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrProperOptionsBuilder WithHttpMessageHandler<THandler>(THandler httpMessageHandler) where THandler : HttpMessageHandler Parameters httpMessageHandler THandler A http message handler Returns IApizrProperOptionsBuilder Type Parameters THandler WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. public IApizrProperOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrProperOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. public IApizrProperOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrProperOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrProperOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns IApizrProperOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrProperOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters httpTracerModeFactory Func<HttpTracerMode> Http traffic tracing mode trafficVerbosityFactory Func<HttpMessageParts> Http traffic tracing verbosity factory logLevelsFactory Func<LogLevel[]> Log levels factory Returns IApizrProperOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrProperOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns IApizrProperOptionsBuilder WithOperationTimeout(Func<TimeSpan>) Set a timeout to the operation (overall request tries) public IApizrProperOptionsBuilder WithOperationTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The operation timeout factory Returns IApizrProperOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) public IApizrProperOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns IApizrProperOptionsBuilder WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrProperOptionsBuilder WithRequestOptions(string requestName, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestName string The name of the request to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrProperOptionsBuilder WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrProperOptionsBuilder WithRequestOptions(string[] requestNames, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestNames string[] The name of the requests to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrProperOptionsBuilder WithRequestTimeout(Func<TimeSpan>) Set a timeout to the request (each request try) public IApizrProperOptionsBuilder WithRequestTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The request timeout factory Returns IApizrProperOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) public IApizrProperOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns IApizrProperOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context public IApizrProperOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns IApizrProperOptionsBuilder WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. public IApizrProperOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, IEnumerable<ApizrRequestMethod> methodScope = null, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. methodScope IEnumerable<ApizrRequestMethod> Http or Crud methods to apply pipelines on (default: null = All) duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrProperOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) Set some resilience properties to the resilience context public IApizrProperOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<TValue> The resilience property's value factory Returns IApizrProperOptionsBuilder Type Parameters TValue WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context public IApizrProperOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue value) Parameters key ResiliencePropertyKey<TValue> The resilience property's key value TValue The resilience property's value Returns IApizrProperOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Configuring.Proper.IApizrExtendedProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrExtendedProperOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilderBase Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for extended registration public interface IApizrExtendedProperOptionsBuilderBase : IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for both static and extended registrations public interface IApizrGlobalProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> Type Parameters TApizrProperOptions TApizrProperOptionsBuilder Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Methods WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests TApizrProperOptionsBuilder WithRequestOptions(string requestName, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestName string The name of the request to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrProperOptionsBuilder WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests TApizrProperOptionsBuilder WithRequestOptions(string[] requestNames, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestNames string[] The name of the requests to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrProperOptionsBuilder"
  },
  "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalProperOptionsBuilderBase Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for both static and extended registrations public interface IApizrGlobalProperOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptions.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptions.html",
    "title": "Interface IApizrProperOptions | Apizr",
    "keywords": "Interface IApizrProperOptions Namespace Apizr.Configuring.Proper Assembly Apizr.dll Options available at proper level for static registrations public interface IApizrProperOptions : IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrSharedRegistrationOptions.BaseUriFactory IApizrSharedRegistrationOptions.BaseAddressFactory IApizrSharedRegistrationOptions.BasePathFactory IApizrSharedRegistrationOptions.HttpTracerModeFactory IApizrSharedRegistrationOptions.TrafficVerbosityFactory IApizrSharedRegistrationOptions.LogLevelsFactory IApizrSharedRegistrationOptions.HttpClientHandlerFactory IApizrSharedRegistrationOptions.HttpClientConfigurationBuilder IApizrSharedRegistrationOptions.DelegatingHandlersFactories IApizrSharedRegistrationOptions.HttpMessageHandlerFactory IApizrSharedRegistrationOptions.OperationTimeoutFactory IApizrSharedRegistrationOptions.RequestTimeoutFactory IApizrSharedRegistrationOptions.ExceptionHandlersFactory IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties LoggerFactory The Logger factory Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Func<ILoggerFactory, string, ILogger>"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBase.html",
    "title": "Interface IApizrProperOptionsBase | Apizr",
    "keywords": "Interface IApizrProperOptionsBase Namespace Apizr.Configuring.Proper Assembly Apizr.dll Options available at proper level for both static and extended registrations public interface IApizrProperOptionsBase : IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties CrudApiEntityType Crud api entity type if any Type CrudApiEntityType { get; } Property Value Type IsCrudApi True if it's a CRUD api bool IsCrudApi { get; } Property Value bool Logger The logger instance ILogger Logger { get; } Property Value ILogger RequestNames Web api request names IReadOnlyList<string> RequestNames { get; } Property Value IReadOnlyList<string> RequestOptionsBuilders The request options builders IDictionary<string, Action<IApizrRequestOptionsBuilder>> RequestOptionsBuilders { get; } Property Value IDictionary<string, Action<IApizrRequestOptionsBuilder>> TypeInfo Web api interface or Crud api entity class type info TypeInfo TypeInfo { get; } Property Value TypeInfo WebApiType Web api interface type Type WebApiType { get; } Property Value Type"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder-2.html",
    "title": "Interface IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for static registrations public interface IApizrProperOptionsBuilder<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> Type Parameters TApizrProperOptions TApizrProperOptionsBuilder Inherited Members IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithOperationTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder.html",
    "title": "Interface IApizrProperOptionsBuilder | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilder Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for static registrations public interface IApizrProperOptionsBuilder : IApizrProperOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inherited Members IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBasePath(Func<string>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithOperationTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithRequestTimeout(Func<TimeSpan>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase-2.html",
    "title": "Interface IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for both static and extended registrations public interface IApizrProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> Type Parameters TApizrProperOptions TApizrProperOptionsBuilder Inherited Members IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase.html",
    "title": "Interface IApizrProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilderBase Namespace Apizr.Configuring.Proper Assembly Apizr.dll Builder options available at proper level for both static and extended registrations public interface IApizrProperOptionsBuilderBase : IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Proper.html": {
    "href": "api/Apizr.Configuring.Proper.html",
    "title": "Namespace Apizr.Configuring.Proper | Apizr",
    "keywords": "Namespace Apizr.Configuring.Proper Classes ApizrProperOptions Options available at proper level for static registrations ApizrProperOptionsBase Options available at proper level for both static and extended registrations ApizrProperOptionsBuilder Builder options available at proper level for static registrations Interfaces IApizrExtendedProperOptionsBuilderBase Builder options available at proper level for extended registration IApizrGlobalProperOptionsBuilderBase Builder options available at proper level for both static and extended registrations IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for both static and extended registrations IApizrProperOptions Options available at proper level for static registrations IApizrProperOptionsBase Options available at proper level for both static and extended registrations IApizrProperOptionsBuilder Builder options available at proper level for static registrations IApizrProperOptionsBuilderBase Builder options available at proper level for both static and extended registrations IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for both static and extended registrations IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for static registrations"
  },
  "api/Apizr.Configuring.ReadAllHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.ReadAllHandlerParameterAttribute.html",
    "title": "Class ReadAllHandlerParameterAttribute | Apizr",
    "keywords": "Class ReadAllHandlerParameterAttribute Namespace Apizr.Configuring Assembly Apizr.dll public abstract class ReadAllHandlerParameterAttribute : CrudHandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadAllHandlerParameterAttribute Derived ReadAllPriorityAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllHandlerParameterAttribute(string, object) protected ReadAllHandlerParameterAttribute(string key, object value) Parameters key string value object"
  },
  "api/Apizr.Configuring.ReadHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.ReadHandlerParameterAttribute.html",
    "title": "Class ReadHandlerParameterAttribute | Apizr",
    "keywords": "Class ReadHandlerParameterAttribute Namespace Apizr.Configuring Assembly Apizr.dll public abstract class ReadHandlerParameterAttribute : CrudHandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadHandlerParameterAttribute Derived ReadPriorityAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadHandlerParameterAttribute(string, object) protected ReadHandlerParameterAttribute(string key, object value) Parameters key string value object"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistry.html",
    "title": "Class ApizrRegistry | Apizr",
    "keywords": "Class ApizrRegistry Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry options available for static registrations public class ApizrRegistry : ApizrRegistryBase, IApizrRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Inheritance object ApizrRegistryBase ApizrRegistry Implements IApizrRegistry IApizrEnumerableRegistry IEnumerable<KeyValuePair<Type, Func<IApizrManager>>> IEnumerable Inherited Members ApizrRegistryBase.GetEnumerator() ApizrRegistryBase.GetCrudManagerFor<T>() ApizrRegistryBase.GetCrudManagerFor<T, TKey>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.GetManagerFor<TWebApi>() ApizrRegistryBase.TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) ApizrRegistryBase.TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) ApizrRegistryBase.Count ApizrRegistryBase.ContainsCrudManagerFor<T>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.ContainsManagerFor<TWebApi>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Methods AddOrUpdateManager(Type, Func<IApizrManager>) public void AddOrUpdateManager(Type webApiType, Func<IApizrManager> managerFactory) Parameters webApiType Type managerFactory Func<IApizrManager> AddOrUpdateManagerFor<TWebApi>(Func<IApizrManager<TWebApi>>) public void AddOrUpdateManagerFor<TWebApi>(Func<IApizrManager<TWebApi>> managerFactory) Parameters managerFactory Func<IApizrManager<TWebApi>> Type Parameters TWebApi Populate(Action<Type, Func<object>>) Populate all registered types and its factories public void Populate(Action<Type, Func<object>> populateAction) Parameters populateAction Action<Type, Func<object>> The action to execute when populating"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistryBase.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistryBase.html",
    "title": "Class ApizrRegistryBase | Apizr",
    "keywords": "Class ApizrRegistryBase Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry options available for both static and extended registrations public abstract class ApizrRegistryBase : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Inheritance object ApizrRegistryBase Implements IApizrEnumerableRegistry IEnumerable<KeyValuePair<Type, Func<IApizrManager>>> IEnumerable Derived ApizrRegistry ApizrExtendedRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Properties Count Managers count public int Count { get; } Property Value int Methods ContainsCrudManagerFor<T>() Check if registry contains a manager for T entity type public bool ContainsCrudManagerFor<T>() where T : class Returns bool Type Parameters T The entity type to manage ContainsCrudManagerFor<T, TKey>() Check if registry contains a manager for T entity type with TKey key type public bool ContainsCrudManagerFor<T, TKey>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type ContainsCrudManagerFor<T, TKey, TReadAllResult>() Check if registry contains a manager for T entity type with TKey key type and TReadAllResult ReadAll result type public bool ContainsCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a manager for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type public bool ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsManagerFor<TWebApi>() Check if registry contains a manager for TWebApi api type public bool ContainsManagerFor<TWebApi>() Returns bool Type Parameters TWebApi The api type GetCrudManagerFor<T>() Get a Crud manager instance for an entity type public IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T>() where T : class Returns IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The managed entity type GetCrudManagerFor<T, TKey>() Get a Crud manager instance for an entity type with a specific key type public IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T, TKey>() where T : class Returns IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The managed entity type TKey The entity's key type GetCrudManagerFor<T, TKey, TReadAllResult>() Get a Crud manager instance for an entity type with a specific key type and ReadAll result type public IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> GetCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type public IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetEnumerator() Get factory enumerator public IEnumerator<KeyValuePair<Type, Func<IApizrManager>>> GetEnumerator() Returns IEnumerator<KeyValuePair<Type, Func<IApizrManager>>> GetManagerFor<TWebApi>() Get an api manager instance public IApizrManager<TWebApi> GetManagerFor<TWebApi>() Returns IApizrManager<TWebApi> Type Parameters TWebApi The managed api type TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>>) Try to get a Crud manager instance for an entity type public bool TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> Returns bool Type Parameters T The managed entity type TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>>) Try to get a Crud manager instance for an entity type with a specific key type public bool TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>>) Try to get a Crud manager instance for an entity type with a specific key type and ReadAll result type public bool TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) Try to get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type public bool TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) Try to get an api manager instance public bool TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi> manager) Parameters manager IApizrManager<TWebApi> Returns bool Type Parameters TWebApi The managed api type"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistryBuilder.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistryBuilder.html",
    "title": "Class ApizrRegistryBuilder | Apizr",
    "keywords": "Class ApizrRegistryBuilder Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry builder options available for static registrations public class ApizrRegistryBuilder : IApizrRegistryBuilder, IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase Inheritance object ApizrRegistryBuilder Implements IApizrRegistryBuilder IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder> IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder> IApizrRegistryBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FileTransferOptionsBuilderExtensions.AddDownloadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerWith<TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Fields CommonOptions The common options protected readonly IApizrCommonOptions CommonOptions Field Value IApizrCommonOptions Registry The registry protected readonly ApizrRegistry Registry Field Value ApizrRegistry Properties ApizrRegistry Apizr registry public IApizrRegistry ApizrRegistry { get; } Property Value IApizrRegistry Methods AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public IApizrRegistryBuilder AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some api proper options Returns IApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public IApizrRegistryBuilder AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters properOptionsBuilder Action<IApizrProperOptionsBuilder> Returns IApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters properOptionsBuilder Action<IApizrProperOptionsBuilder> Returns IApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters properOptionsBuilder Action<IApizrProperOptionsBuilder> Returns IApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters apizrManagerFactory Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> The custom manager implementation instance factory properOptionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some api proper options Returns IApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddGroup(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Group registrations sharing specific common options public IApizrRegistryBuilder AddGroup(Action<IApizrRegistryBuilder> registryGroupBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters registryGroupBuilder Action<IApizrRegistryBuilder> The registry group commonOptionsBuilder Action<IApizrCommonOptionsBuilder> The group common options Returns IApizrRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance public IApizrRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) Parameters properOptionsBuilder Action<IApizrProperOptionsBuilder> Returns IApizrRegistryBuilder Type Parameters TWebApi The web api interface to manage AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi public IApizrRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters apizrManagerFactory Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> The custom manager implementation instance factory properOptionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some api proper options Returns IApizrRegistryBuilder Type Parameters TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Configuring.Registry.IApizrEnumerableRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrEnumerableRegistry.html",
    "title": "Interface IApizrEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrEnumerableRegistry Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry options available for both static and extended registrations public interface IApizrEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Inherited Members IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>.GetEnumerator() IEnumerable.GetEnumerator() Extension Methods ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Properties Count Managers count int Count { get; } Property Value int Methods ContainsCrudManagerFor<T>() Check if registry contains a manager for T entity type bool ContainsCrudManagerFor<T>() where T : class Returns bool Type Parameters T The entity type to manage ContainsCrudManagerFor<T, TKey>() Check if registry contains a manager for T entity type with TKey key type bool ContainsCrudManagerFor<T, TKey>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type ContainsCrudManagerFor<T, TKey, TReadAllResult>() Check if registry contains a manager for T entity type with TKey key type and TReadAllResult ReadAll result type bool ContainsCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a manager for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type bool ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsManagerFor<TWebApi>() Check if registry contains a manager for TWebApi api type bool ContainsManagerFor<TWebApi>() Returns bool Type Parameters TWebApi The api type GetCrudManagerFor<T>() Get a Crud manager instance for an entity type IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T>() where T : class Returns IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The managed entity type GetCrudManagerFor<T, TKey>() Get a Crud manager instance for an entity type with a specific key type IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T, TKey>() where T : class Returns IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The managed entity type TKey The entity's key type GetCrudManagerFor<T, TKey, TReadAllResult>() Get a Crud manager instance for an entity type with a specific key type and ReadAll result type IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> GetCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetManagerFor<TWebApi>() Get an api manager instance IApizrManager<TWebApi> GetManagerFor<TWebApi>() Returns IApizrManager<TWebApi> Type Parameters TWebApi The managed api type TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>>) Try to get a Crud manager instance for an entity type bool TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> Returns bool Type Parameters T The managed entity type TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>>) Try to get a Crud manager instance for an entity type with a specific key type bool TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>>) Try to get a Crud manager instance for an entity type with a specific key type and ReadAll result type bool TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) Try to get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type bool TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> manager) where T : class Parameters manager IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) Try to get an api manager instance bool TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi> manager) Parameters manager IApizrManager<TWebApi> Returns bool Type Parameters TWebApi The managed api type"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistry.html",
    "title": "Interface IApizrRegistry | Apizr",
    "keywords": "Interface IApizrRegistry Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry options available for static registrations public interface IApizrRegistry : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>.GetEnumerator() IEnumerable.GetEnumerator() Extension Methods ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Methods Populate(Action<Type, Func<object>>) Populate all registered types and its factories void Populate(Action<Type, Func<object>> populateAction) Parameters populateAction Action<Type, Func<object>> The action to execute when populating"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilder-4.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilder-4.html",
    "title": "Interface IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry builder options available for static registrations public interface IApizrRegistryBuilder<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> : IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase where TApizrRegistry : IApizrEnumerableRegistry where TApizrRegistryBuilder : IApizrRegistryBuilderBase<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase Type Parameters TApizrRegistry TApizrRegistryBuilder TApizrProperOptionsBuilder TApizrCommonOptionsBuilder Inherited Members IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddGroup(Action<TApizrRegistryBuilder>, Action<TApizrCommonOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder>) Methods AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<TApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<out TApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters apizrManagerFactory Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> The custom manager implementation instance factory properOptionsBuilder Action<TApizrProperOptionsBuilder> The builder defining some api proper options Returns TApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<TApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi TApizrRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<out TApizrProperOptionsBuilder> properOptionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters apizrManagerFactory Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> The custom manager implementation instance factory properOptionsBuilder Action<TApizrProperOptionsBuilder> The builder defining some api proper options Returns TApizrRegistryBuilder Type Parameters TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilder.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilder.html",
    "title": "Interface IApizrRegistryBuilder | Apizr",
    "keywords": "Interface IApizrRegistryBuilder Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry builder options available for static registrations public interface IApizrRegistryBuilder : IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase Inherited Members IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddGroup(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder>) Extension Methods FileTransferOptionsBuilderExtensions.AddDownloadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerWith<TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase-4.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase-4.html",
    "title": "Interface IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry builder options available for both static and extended registrations public interface IApizrRegistryBuilderBase<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> : IApizrRegistryBuilderBase where TApizrRegistry : IApizrEnumerableRegistry where TApizrRegistryBuilder : IApizrRegistryBuilderBase<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> where TApizrProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase where TApizrCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase Type Parameters TApizrRegistry TApizrRegistryBuilder TApizrProperOptionsBuilder TApizrCommonOptionsBuilder Properties ApizrRegistry Apizr registry TApizrRegistry ApizrRegistry { get; } Property Value TApizrRegistry Methods AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} TApizrRegistryBuilder AddCrudManagerFor<T>(Action<out TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<TApizrProperOptionsBuilder> The builder defining some api proper options Returns TApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} TApizrRegistryBuilder AddCrudManagerFor<T, TKey>(Action<out TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<TApizrProperOptionsBuilder> The builder defining some api proper options Returns TApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<out TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<TApizrProperOptionsBuilder> The builder defining some api proper options Returns TApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<out TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<TApizrProperOptionsBuilder> The builder defining some api proper options Returns TApizrRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddGroup(Action<TApizrRegistryBuilder>, Action<TApizrCommonOptionsBuilder>) Group registrations sharing specific common options TApizrRegistryBuilder AddGroup(Action<out TApizrRegistryBuilder> registryGroupBuilder, Action<out TApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters registryGroupBuilder Action<TApizrRegistryBuilder> The registry group commonOptionsBuilder Action<TApizrCommonOptionsBuilder> The group common options Returns TApizrRegistryBuilder AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance TApizrRegistryBuilder AddManagerFor<TWebApi>(Action<out TApizrProperOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrProperOptionsBuilder> The builder defining some api proper options Returns TApizrRegistryBuilder Type Parameters TWebApi The web api interface to manage"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase.html",
    "title": "Interface IApizrRegistryBuilderBase | Apizr",
    "keywords": "Interface IApizrRegistryBuilderBase Namespace Apizr.Configuring.Registry Assembly Apizr.dll Registry builder options available for both static and extended registrations public interface IApizrRegistryBuilderBase"
  },
  "api/Apizr.Configuring.Registry.html": {
    "href": "api/Apizr.Configuring.Registry.html",
    "title": "Namespace Apizr.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Configuring.Registry Classes ApizrRegistry Registry options available for static registrations ApizrRegistryBase Registry options available for both static and extended registrations ApizrRegistryBuilder Registry builder options available for static registrations Interfaces IApizrEnumerableRegistry Registry options available for both static and extended registrations IApizrRegistry Registry options available for static registrations IApizrRegistryBuilder Registry builder options available for static registrations IApizrRegistryBuilderBase Registry builder options available for both static and extended registrations IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Registry builder options available for both static and extended registrations IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Registry builder options available for static registrations"
  },
  "api/Apizr.Configuring.Request.ApizrRequestOptions.html": {
    "href": "api/Apizr.Configuring.Request.ApizrRequestOptions.html",
    "title": "Class ApizrRequestOptions | Apizr",
    "keywords": "Class ApizrRequestOptions Namespace Apizr.Configuring.Request Assembly Apizr.dll Options available at request levels and for all (static and extended) registration types public class ApizrRequestOptions : ApizrRequestOptionsBase, IApizrRequestOptions, IApizrRequestOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrRequestOptionsBase ApizrRequestOptions Implements IApizrRequestOptions IApizrRequestOptionsBase IApizrGlobalSharedOptions IApizrGlobalSharedOptionsBase Inherited Members ApizrRequestOptionsBase.ResilienceContext ApizrRequestOptionsBase.RequestMethod ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrRequestOptions(IApizrGlobalSharedRegistrationOptionsBase, IDictionary<string, object>, HttpTracerMode?, HttpMessageParts?, TimeSpan?, TimeSpan?, ResiliencePipelineAttributeBase, CacheAttributeBase, ApizrRequestMethod, params LogLevel[]) public ApizrRequestOptions(IApizrGlobalSharedRegistrationOptionsBase sharedOptions, IDictionary<string, object> handlersParameters, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, TimeSpan? operationTimeout, TimeSpan? requestTimeout, ResiliencePipelineAttributeBase requestResiliencePipelineAttribute, CacheAttributeBase requestCacheAttribute, ApizrRequestMethod requestMethod, params LogLevel[] logLevels) Parameters sharedOptions IApizrGlobalSharedRegistrationOptionsBase handlersParameters IDictionary<string, object> httpTracerMode HttpTracerMode? trafficVerbosity HttpMessageParts? operationTimeout TimeSpan? requestTimeout TimeSpan? requestResiliencePipelineAttribute ResiliencePipelineAttributeBase requestCacheAttribute CacheAttributeBase requestMethod ApizrRequestMethod logLevels LogLevel[] Properties CancellationToken A cancellation token to pass through it all public CancellationToken CancellationToken { get; } Property Value CancellationToken ClearCache Clear request cache before executing (default: false) public bool ClearCache { get; } Property Value bool Headers Headers to add to the request public IList<string> Headers { get; } Property Value IList<string> ResilienceContextOptions Options set to resilience context public IApizrResilienceContextOptions ResilienceContextOptions { get; } Property Value IApizrResilienceContextOptions"
  },
  "api/Apizr.Configuring.Request.ApizrRequestOptionsBase.html": {
    "href": "api/Apizr.Configuring.Request.ApizrRequestOptionsBase.html",
    "title": "Class ApizrRequestOptionsBase | Apizr",
    "keywords": "Class ApizrRequestOptionsBase Namespace Apizr.Configuring.Request Assembly Apizr.dll Options available at request levels and for all (static and extended) registration types public abstract class ApizrRequestOptionsBase : ApizrGlobalSharedOptionsBase, IApizrRequestOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrRequestOptionsBase Implements IApizrRequestOptionsBase IApizrGlobalSharedOptionsBase Derived ApizrRequestOptions Inherited Members ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrRequestOptionsBase(IApizrGlobalSharedRegistrationOptionsBase, HttpTracerMode?, HttpMessageParts?, TimeSpan?, TimeSpan?, ResiliencePipelineAttributeBase, CacheAttributeBase, ApizrRequestMethod, params LogLevel[]) protected ApizrRequestOptionsBase(IApizrGlobalSharedRegistrationOptionsBase sharedOptions, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, TimeSpan? operationTimeout, TimeSpan? requestTimeout, ResiliencePipelineAttributeBase requestResiliencePipelineAttribute, CacheAttributeBase requestCacheAttribute, ApizrRequestMethod requestMethod, params LogLevel[] logLevels) Parameters sharedOptions IApizrGlobalSharedRegistrationOptionsBase httpTracerMode HttpTracerMode? trafficVerbosity HttpMessageParts? operationTimeout TimeSpan? requestTimeout TimeSpan? requestResiliencePipelineAttribute ResiliencePipelineAttributeBase requestCacheAttribute CacheAttributeBase requestMethod ApizrRequestMethod logLevels LogLevel[] Properties RequestMethod The Apizr request method public ApizrRequestMethod RequestMethod { get; } Property Value ApizrRequestMethod ResilienceContext The Polly resilience context to pass through it all public ResilienceContext ResilienceContext { get; } Property Value ResilienceContext"
  },
  "api/Apizr.Configuring.Request.ApizrRequestOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Request.ApizrRequestOptionsBuilder.html",
    "title": "Class ApizrRequestOptionsBuilder | Apizr",
    "keywords": "Class ApizrRequestOptionsBuilder Namespace Apizr.Configuring.Request Assembly Apizr.dll Builder options available at request level public class ApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder, IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inheritance object ApizrRequestOptionsBuilder Implements IApizrRequestOptionsBuilder IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder> IApizrRequestOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> IApizrRequestOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Constructors ApizrRequestOptionsBuilder(ApizrRequestOptions) public ApizrRequestOptionsBuilder(ApizrRequestOptions options) Parameters options ApizrRequestOptions Fields Options protected readonly ApizrRequestOptions Options Field Value ApizrRequestOptions Methods WithCacheClearing(bool) Tells if you want to clear the potential cached data before requesting public IApizrRequestOptionsBuilder WithCacheClearing(bool clearCache) Parameters clearCache bool Clear cache or not Returns IApizrRequestOptionsBuilder WithCaching(CacheMode, TimeSpan?, bool) Cache data. public IApizrRequestOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns IApizrRequestOptionsBuilder WithCancellation(CancellationToken) Set the cancellation token public IApizrRequestOptionsBuilder WithCancellation(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token Returns IApizrRequestOptionsBuilder WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrRequestOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrRequestOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrRequestOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrRequestOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrRequestOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrRequestOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrRequestOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrRequestOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrRequestOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrRequestOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrRequestOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrRequestOptionsBuilder Type Parameters TResult WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrRequestOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrRequestOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers public IApizrRequestOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns IApizrRequestOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy) Add some headers to the request public IApizrRequestOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrRequestOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. public IApizrRequestOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrRequestOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. public IApizrRequestOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrRequestOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrRequestOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns IApizrRequestOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) public IApizrRequestOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns IApizrRequestOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) public IApizrRequestOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns IApizrRequestOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context public IApizrRequestOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns IApizrRequestOptionsBuilder WithResiliencePipelineKeys(string[], ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. public IApizrRequestOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrRequestOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context public IApizrRequestOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory TValue Returns IApizrRequestOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptions.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptions.html",
    "title": "Interface IApizrRequestOptions | Apizr",
    "keywords": "Interface IApizrRequestOptions Namespace Apizr.Configuring.Request Assembly Apizr.dll Options available at request levels and for all (static and extended) registration types public interface IApizrRequestOptions : IApizrRequestOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inherited Members IApizrRequestOptionsBase.ResilienceContext IApizrRequestOptionsBase.RequestMethod IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties CancellationToken A cancellation token to pass through it all CancellationToken CancellationToken { get; } Property Value CancellationToken ClearCache Clear request cache before executing (default: false) bool ClearCache { get; } Property Value bool Headers Headers to add to the request IList<string> Headers { get; } Property Value IList<string> ResilienceContextOptions Options set to resilience context IApizrResilienceContextOptions ResilienceContextOptions { get; } Property Value IApizrResilienceContextOptions"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBase.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBase.html",
    "title": "Interface IApizrRequestOptionsBase | Apizr",
    "keywords": "Interface IApizrRequestOptionsBase Namespace Apizr.Configuring.Request Assembly Apizr.dll Options available at request levels and for all (static and extended) registration types public interface IApizrRequestOptionsBase : IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties RequestMethod The Apizr request method ApizrRequestMethod RequestMethod { get; } Property Value ApizrRequestMethod ResilienceContext The Polly resilience context to pass through it all ResilienceContext ResilienceContext { get; } Property Value ResilienceContext"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder-2.html",
    "title": "Interface IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Request Assembly Apizr.dll Builder options available at request level public interface IApizrRequestOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> : IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrRequestOptions where TApizrOptionsBuilder : IApizrRequestOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Methods WithCacheClearing(bool) Tells if you want to clear the potential cached data before requesting TApizrOptionsBuilder WithCacheClearing(bool clearCache) Parameters clearCache bool Clear cache or not Returns TApizrOptionsBuilder WithCancellation(CancellationToken) Set the cancellation token TApizrOptionsBuilder WithCancellation(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token Returns TApizrOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy) Add some headers to the request TApizrOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrOptionsBuilder WithResiliencePipelineKeys(string[], ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. TApizrOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns TApizrOptionsBuilder"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder.html",
    "title": "Interface IApizrRequestOptionsBuilder | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilder Namespace Apizr.Configuring.Request Assembly Apizr.dll Builder options available at request level public interface IApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inherited Members IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithCancellation(CancellationToken) IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithCacheClearing(bool) IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy) IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithResiliencePipelineKeys(string[], ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase-2.html",
    "title": "Interface IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Request Assembly Apizr.dll Builder options available at request level public interface IApizrRequestOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrRequestOptionsBase where TApizrOptionsBuilder : IApizrRequestOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase.html",
    "title": "Interface IApizrRequestOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilderBase Namespace Apizr.Configuring.Request Assembly Apizr.dll public interface IApizrRequestOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Request.RequestOptionsAttribute.html": {
    "href": "api/Apizr.Configuring.Request.RequestOptionsAttribute.html",
    "title": "Class RequestOptionsAttribute | Apizr",
    "keywords": "Class RequestOptionsAttribute Namespace Apizr.Configuring.Request Assembly Apizr.dll The Apizr request options property attribute public class RequestOptionsAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute RequestOptionsAttribute Inherited Members PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestOptionsAttribute() Create some Apizr request options public RequestOptionsAttribute()"
  },
  "api/Apizr.Configuring.Request.html": {
    "href": "api/Apizr.Configuring.Request.html",
    "title": "Namespace Apizr.Configuring.Request | Apizr",
    "keywords": "Namespace Apizr.Configuring.Request Classes ApizrRequestOptions Options available at request levels and for all (static and extended) registration types ApizrRequestOptionsBase Options available at request levels and for all (static and extended) registration types ApizrRequestOptionsBuilder Builder options available at request level RequestOptionsAttribute The Apizr request options property attribute Interfaces IApizrRequestOptions Options available at request levels and for all (static and extended) registration types IApizrRequestOptionsBase Options available at request levels and for all (static and extended) registration types IApizrRequestOptionsBuilder Builder options available at request level IApizrRequestOptionsBuilderBase IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available at request level IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Builder options available at request level"
  },
  "api/Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.html",
    "title": "Class ApizrGlobalSharedOptionsBase | Apizr",
    "keywords": "Class ApizrGlobalSharedOptionsBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Options available at every level for both static and extended registrations public abstract class ApizrGlobalSharedOptionsBase : IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase Implements IApizrGlobalSharedOptionsBase Derived ApizrRequestOptionsBase ApizrGlobalSharedRegistrationOptionsBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrGlobalSharedOptionsBase(IApizrGlobalSharedOptionsBase) protected ApizrGlobalSharedOptionsBase(IApizrGlobalSharedOptionsBase sharedOptions = null) Parameters sharedOptions IApizrGlobalSharedOptionsBase Properties CacheOptions The caching options to apply public IDictionary<ApizrConfigurationSource, CacheAttributeBase> CacheOptions { get; } Property Value IDictionary<ApizrConfigurationSource, CacheAttributeBase> ExceptionHandlers Catching potential exception if defined public IList<IApizrExceptionHandler> ExceptionHandlers { get; protected set; } Property Value IList<IApizrExceptionHandler> HandlersParameters Parameters passed through delegating handlers public IDictionary<string, object> HandlersParameters { get; protected set; } Property Value IDictionary<string, object> HttpTracerMode Http traffic tracing mode public HttpTracerMode HttpTracerMode { get; } Property Value HttpTracerMode LetThrowOnHandledException Let throw potential exception even if it's handled (default: true) public bool LetThrowOnHandledException { get; } Property Value bool LogLevels Log levels while writing public LogLevel[] LogLevels { get; } Property Value LogLevel[] OnException public Func<ApizrException, Task<bool>> OnException { get; } Property Value Func<ApizrException, Task<bool>> OperationTimeout The operation timeout (overall request tries) public TimeSpan? OperationTimeout { get; } Property Value TimeSpan? RequestTimeout The request timeout (each request try) public TimeSpan? RequestTimeout { get; } Property Value TimeSpan? ResiliencePipelineOptions Resilience pipeline keys from the registry public IDictionary<ApizrConfigurationSource, ResiliencePipelineAttributeBase[]> ResiliencePipelineOptions { get; } Property Value IDictionary<ApizrConfigurationSource, ResiliencePipelineAttributeBase[]> ShouldRedactHeaderValue The Func<T, TResult> which determines whether to redact the HTTP header value before logging. public Func<string, bool> ShouldRedactHeaderValue { get; } Property Value Func<string, bool> TrafficVerbosity Http traffic tracing verbosity public HttpMessageParts TrafficVerbosity { get; } Property Value HttpMessageParts"
  },
  "api/Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.html",
    "title": "Class ApizrGlobalSharedRegistrationOptionsBase | Apizr",
    "keywords": "Class ApizrGlobalSharedRegistrationOptionsBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Options available at both common and proper level for both static and extended registrations public abstract class ApizrGlobalSharedRegistrationOptionsBase : ApizrGlobalSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase Implements IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Derived ApizrCommonOptionsBase ApizrManagerOptionsBase ApizrProperOptionsBase Inherited Members ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrGlobalSharedRegistrationOptionsBase(IApizrGlobalSharedRegistrationOptionsBase) protected ApizrGlobalSharedRegistrationOptionsBase(IApizrGlobalSharedRegistrationOptionsBase sharedOptions = null) Parameters sharedOptions IApizrGlobalSharedRegistrationOptionsBase Properties BaseAddress Base address public string BaseAddress { get; protected set; } Property Value string BasePath Base path public string BasePath { get; protected set; } Property Value string BaseUri Base address public Uri BaseUri { get; protected set; } Property Value Uri Headers Headers to add to the request public IDictionary<ApizrRegistrationMode, IList<string>> Headers { get; } Property Value IDictionary<ApizrRegistrationMode, IList<string>> HeadersFactories Headers factories public IDictionary<(ApizrRegistrationMode Mode, ApizrLifetimeScope Scope), Func<IList<string>>> HeadersFactories { get; } Property Value IDictionary<(ApizrRegistrationMode Mode, ApizrLifetimeScope Scope), Func<IList<string>>> PrimaryHandlerFactory The primary Http message handler factory (set internally) public Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler> PrimaryHandlerFactory { get; } Property Value Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler>"
  },
  "api/Apizr.Configuring.Shared.Context.ApizrResilienceContextOptions.html": {
    "href": "api/Apizr.Configuring.Shared.Context.ApizrResilienceContextOptions.html",
    "title": "Class ApizrResilienceContextOptions | Apizr",
    "keywords": "Class ApizrResilienceContextOptions Namespace Apizr.Configuring.Shared.Context Assembly Apizr.dll public class ApizrResilienceContextOptions : IApizrResilienceContextOptions Inheritance object ApizrResilienceContextOptions Implements IApizrResilienceContextOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrResilienceContextOptions(IApizrResilienceContextOptions) public ApizrResilienceContextOptions(IApizrResilienceContextOptions options = null) Parameters options IApizrResilienceContextOptions Properties ContinueOnCapturedContext Gets the value indicating whether to continue on captured context, if any. public bool? ContinueOnCapturedContext { get; } Property Value bool? ReturnToPoolOnComplete Gets the value indicating whether to return the context to the pool, when request completes. public bool? ReturnToPoolOnComplete { get; } Property Value bool?"
  },
  "api/Apizr.Configuring.Shared.Context.ApizrResilienceContextOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Shared.Context.ApizrResilienceContextOptionsBuilder.html",
    "title": "Class ApizrResilienceContextOptionsBuilder | Apizr",
    "keywords": "Class ApizrResilienceContextOptionsBuilder Namespace Apizr.Configuring.Shared.Context Assembly Apizr.dll public class ApizrResilienceContextOptionsBuilder : IApizrResilienceContextOptionsBuilder Inheritance object ApizrResilienceContextOptionsBuilder Implements IApizrResilienceContextOptionsBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Options The common options protected readonly ApizrResilienceContextOptions Options Field Value ApizrResilienceContextOptions Methods ContinueOnCapturedContext(bool) public IApizrResilienceContextOptionsBuilder ContinueOnCapturedContext(bool continueOnCapturedContext) Parameters continueOnCapturedContext bool Returns IApizrResilienceContextOptionsBuilder ReturnToPoolOnComplete(bool) public IApizrResilienceContextOptionsBuilder ReturnToPoolOnComplete(bool returnToPoolOnComplete) Parameters returnToPoolOnComplete bool Returns IApizrResilienceContextOptionsBuilder"
  },
  "api/Apizr.Configuring.Shared.Context.IApizrResilienceContextOptions.html": {
    "href": "api/Apizr.Configuring.Shared.Context.IApizrResilienceContextOptions.html",
    "title": "Interface IApizrResilienceContextOptions | Apizr",
    "keywords": "Interface IApizrResilienceContextOptions Namespace Apizr.Configuring.Shared.Context Assembly Apizr.dll public interface IApizrResilienceContextOptions Properties ContinueOnCapturedContext Gets the value indicating whether to continue on captured context, if any. bool? ContinueOnCapturedContext { get; } Property Value bool? ReturnToPoolOnComplete Gets the value indicating whether to return the context to the pool, when request completes. bool? ReturnToPoolOnComplete { get; } Property Value bool?"
  },
  "api/Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder.html",
    "title": "Interface IApizrResilienceContextOptionsBuilder | Apizr",
    "keywords": "Interface IApizrResilienceContextOptionsBuilder Namespace Apizr.Configuring.Shared.Context Assembly Apizr.dll public interface IApizrResilienceContextOptionsBuilder Methods ContinueOnCapturedContext(bool) IApizrResilienceContextOptionsBuilder ContinueOnCapturedContext(bool continueOnCapturedContext) Parameters continueOnCapturedContext bool Returns IApizrResilienceContextOptionsBuilder ReturnToPoolOnComplete(bool) IApizrResilienceContextOptionsBuilder ReturnToPoolOnComplete(bool returnToPoolOnComplete) Parameters returnToPoolOnComplete bool Returns IApizrResilienceContextOptionsBuilder"
  },
  "api/Apizr.Configuring.Shared.Context.html": {
    "href": "api/Apizr.Configuring.Shared.Context.html",
    "title": "Namespace Apizr.Configuring.Shared.Context | Apizr",
    "keywords": "Namespace Apizr.Configuring.Shared.Context Classes ApizrResilienceContextOptions ApizrResilienceContextOptionsBuilder Interfaces IApizrResilienceContextOptions IApizrResilienceContextOptionsBuilder"
  },
  "api/Apizr.Configuring.Shared.IApizrExtendedSharedRegistrationOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrExtendedSharedRegistrationOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedSharedRegistrationOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedSharedRegistrationOptionsBuilderBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at both common and proper level for extended registration public interface IApizrExtendedSharedRegistrationOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptions.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptions.html",
    "title": "Interface IApizrGlobalSharedOptions | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptions Namespace Apizr.Configuring.Shared Assembly Apizr.dll Options available at all (common, proper and request) levels and for static registration type public interface IApizrGlobalSharedOptions : IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.html",
    "title": "Interface IApizrGlobalSharedOptionsBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Options available at all (common, proper and request) levels and for all (static and extended) registration types public interface IApizrGlobalSharedOptionsBase Properties CacheOptions The caching options to apply IDictionary<ApizrConfigurationSource, CacheAttributeBase> CacheOptions { get; } Property Value IDictionary<ApizrConfigurationSource, CacheAttributeBase> ExceptionHandlers Catching potential exception if defined IList<IApizrExceptionHandler> ExceptionHandlers { get; } Property Value IList<IApizrExceptionHandler> HandlersParameters Parameters passed through delegating handlers IDictionary<string, object> HandlersParameters { get; } Property Value IDictionary<string, object> HttpTracerMode Http traffic tracing mode HttpTracerMode HttpTracerMode { get; } Property Value HttpTracerMode LetThrowOnHandledException Let throw potential exception even if it's handled (default: true) bool LetThrowOnHandledException { get; } Property Value bool LogLevels Log levels while writing LogLevel[] LogLevels { get; } Property Value LogLevel[] OperationTimeout The operation timeout (overall request tries) TimeSpan? OperationTimeout { get; } Property Value TimeSpan? RequestTimeout The request timeout (each request try) TimeSpan? RequestTimeout { get; } Property Value TimeSpan? ResiliencePipelineOptions Resilience pipeline keys from the registry IDictionary<ApizrConfigurationSource, ResiliencePipelineAttributeBase[]> ResiliencePipelineOptions { get; } Property Value IDictionary<ApizrConfigurationSource, ResiliencePipelineAttributeBase[]> ShouldRedactHeaderValue The Func<T, TResult> which determines whether to redact the HTTP header value before logging. Func<string, bool> ShouldRedactHeaderValue { get; } Property Value Func<string, bool> TrafficVerbosity Http traffic tracing verbosity HttpMessageParts TrafficVerbosity { get; } Property Value HttpMessageParts"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at all (common, proper and request) levels and for all (static and extended) registration types public interface IApizrGlobalSharedOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrGlobalSharedOptionsBase where TApizrOptionsBuilder : IApizrGlobalSharedOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Methods WithCaching(CacheMode, TimeSpan?, bool) Cache data. TApizrOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns TApizrOptionsBuilder WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] TApizrOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] TApizrOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder Type Parameters TResult WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers TApizrOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns TApizrOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. TApizrOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns TApizrOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. TApizrOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns TApizrOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) TApizrOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns TApizrOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) TApizrOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns TApizrOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) TApizrOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns TApizrOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context TApizrOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns TApizrOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context TApizrOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue value) Parameters key ResiliencePropertyKey<TValue> The resilience property's key value TValue The resilience property's value Returns TApizrOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalSharedOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBuilderBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at all (common, proper and request) levels and for all (static and extended) registration types public interface IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.html",
    "title": "Interface IApizrGlobalSharedRegistrationOptionsBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedRegistrationOptionsBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Options available at both common and proper level (not request) and for all (static and extended) registration types public interface IApizrGlobalSharedRegistrationOptionsBase : IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties BaseAddress Base address string BaseAddress { get; } Property Value string BasePath Base path string BasePath { get; } Property Value string BaseUri Base address Uri BaseUri { get; } Property Value Uri Headers Headers to add to the request IDictionary<ApizrRegistrationMode, IList<string>> Headers { get; } Property Value IDictionary<ApizrRegistrationMode, IList<string>> HeadersFactories Headers factories IDictionary<(ApizrRegistrationMode Mode, ApizrLifetimeScope Scope), Func<IList<string>>> HeadersFactories { get; } Property Value IDictionary<(ApizrRegistrationMode Mode, ApizrLifetimeScope Scope), Func<IList<string>>> PrimaryHandlerFactory The primary Http message handler factory (set internally) Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler> PrimaryHandlerFactory { get; } Property Value Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler>"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at both common and proper level for both static and extended registrations public interface IApizrGlobalSharedRegistrationOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrGlobalSharedRegistrationOptionsBase where TApizrOptionsBuilder : IApizrGlobalSharedRegistrationOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Methods WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) Provide a method to refresh the authorization token when needed TApizrOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters refreshTokenFactory Func<HttpRequestMessage, Task<string>> Refresh token method called when expired or empty Returns TApizrOptionsBuilder WithBaseAddress(string, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) TApizrOptionsBuilder WithBaseAddress(string baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress string Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrOptionsBuilder WithBaseAddress(Uri, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) TApizrOptionsBuilder WithBaseAddress(Uri baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress Uri Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrOptionsBuilder WithBasePath(string, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) TApizrOptionsBuilder WithBasePath(string basePath, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePath string Your web api base path strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrOptionsBuilder WithConfiguration(IConfiguration) Set options from configuration TApizrOptionsBuilder WithConfiguration(IConfiguration configuration) Parameters configuration IConfiguration The configuration to set options from Returns TApizrOptionsBuilder WithConfiguration(IConfigurationSection) Set options from a specific configuration section TApizrOptionsBuilder WithConfiguration(IConfigurationSection configurationSection) Parameters configurationSection IConfigurationSection The configuration section to set options from Returns TApizrOptionsBuilder WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) TApizrOptionsBuilder WithDelegatingHandler<THandler>(THandler delegatingHandler, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandler THandler A delegating handler strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrOptionsBuilder Type Parameters THandler WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) Add some headers to the request TApizrOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns TApizrOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler TApizrOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters httpClientHandler HttpClientHandler An HttpClientHandler instance Returns TApizrOptionsBuilder WithHttpMessageHandler<THandler>(THandler) Add a custom http message handler inheriting from HttpMessageHandler (last call) TApizrOptionsBuilder WithHttpMessageHandler<THandler>(THandler httpMessageHandler) where THandler : HttpMessageHandler Parameters httpMessageHandler THandler A http message handler Returns TApizrOptionsBuilder Type Parameters THandler WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. TApizrOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, IEnumerable<ApizrRequestMethod> methodScope = null, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. methodScope IEnumerable<ApizrRequestMethod> Http or Crud methods to apply pipelines on (default: null = All) duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns TApizrOptionsBuilder"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at both common and proper level for both static and extended registrations public interface IApizrGlobalSharedRegistrationOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.html",
    "title": "Interface IApizrSharedRegistrationOptions | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptions Namespace Apizr.Configuring.Shared Assembly Apizr.dll Options available at both common and proper level for static registrations public interface IApizrSharedRegistrationOptions : IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptions, IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties BaseAddressFactory Base address factory Func<string> BaseAddressFactory { get; } Property Value Func<string> BasePathFactory Base path factory Func<string> BasePathFactory { get; } Property Value Func<string> BaseUriFactory Base uri factory Func<Uri> BaseUriFactory { get; } Property Value Func<Uri> DelegatingHandlersFactories DelegatingHandler factories IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> ExceptionHandlersFactory Exception handlers factory Func<IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; } Property Value Func<IList<IApizrExceptionHandler>> HttpClientConfigurationBuilder HttpClient configuration builder Action<HttpClient> HttpClientConfigurationBuilder { get; } Property Value Action<HttpClient> HttpClientHandlerFactory HttpClientHandler factory Func<HttpClientHandler> HttpClientHandlerFactory { get; } Property Value Func<HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; } Property Value Func<ILogger, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory Func<HttpTracerMode> HttpTracerModeFactory { get; } Property Value Func<HttpTracerMode> LogLevelsFactory Log levels factory Func<LogLevel[]> LogLevelsFactory { get; } Property Value Func<LogLevel[]> OperationTimeoutFactory The operation timeout factory (overall request tries) Func<TimeSpan> OperationTimeoutFactory { get; } Property Value Func<TimeSpan> RequestTimeoutFactory The request timeout factory (each request try) Func<TimeSpan> RequestTimeoutFactory { get; } Property Value Func<TimeSpan> TrafficVerbosityFactory Http traffic tracing verbosity factory Func<HttpMessageParts> TrafficVerbosityFactory { get; } Property Value Func<HttpMessageParts>"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBase.html",
    "title": "Interface IApizrSharedRegistrationOptionsBase | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Options available at both common and proper level for both static and extended registrations public interface IApizrSharedRegistrationOptionsBase : IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder-2.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at both common and proper level for static registrations public interface IApizrSharedRegistrationOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> : IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrSharedRegistrationOptionsBase where TApizrOptionsBuilder : IApizrSharedRegistrationOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Methods ConfigureHttpClient(Action<HttpClient>, ApizrDuplicateStrategy) Configure HttpClient TApizrOptionsBuilder ConfigureHttpClient(Action<HttpClient> configureHttpClient, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters configureHttpClient Action<HttpClient> The configuration builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns TApizrOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory TApizrOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns TApizrOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token source TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenServiceFactory Func<TTokenService> A TTokenService instance factory refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, string>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters settingsService TSettingsService A TSettingsService instance tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving tokenService TTokenService A TTokenService instance refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) TApizrOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrOptionsBuilder WithBaseAddress(Func<Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) TApizrOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrOptionsBuilder WithBasePath(Func<string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) TApizrOptionsBuilder WithBasePath(Func<string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) TApizrOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<ILogger, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) TApizrOptionsBuilder WithDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<ILogger, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrOptionsBuilder Type Parameters THandler WithExCatching<THandler>(Func<THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrOptionsBuilder WithExCatching<THandler>(Func<THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrOptionsBuilder Type Parameters THandler WithHeaders(Func<IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request TApizrOptionsBuilder WithHeaders(Func<IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IList<string>> Headers factory strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns TApizrOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties TApizrOptionsBuilder WithHeaders<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsServiceFactory Func<TSettingsService> A TSettingsService instance factory headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHeaders<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties TApizrOptionsBuilder WithHeaders<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters settingsService TSettingsService A TSettingsService instance headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns TApizrOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler TApizrOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<HttpClientHandler> An HttpClientHandler instance factory Returns TApizrOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) TApizrOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, IApizrManagerOptionsBase, THandler> A http message handler factory Returns TApizrOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<ILogger, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) TApizrOptionsBuilder WithHttpMessageHandler<THandler>(Func<ILogger, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<ILogger, THandler> A http message handler factory Returns TApizrOptionsBuilder Type Parameters THandler WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) TApizrOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters httpTracerModeFactory Func<HttpTracerMode> Http traffic tracing mode trafficVerbosityFactory Func<HttpMessageParts> Http traffic tracing verbosity factory logLevelsFactory Func<LogLevel[]> Log levels factory Returns TApizrOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) TApizrOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns TApizrOptionsBuilder WithOperationTimeout(Func<TimeSpan>) Set a timeout to the operation (overall request tries) TApizrOptionsBuilder WithOperationTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The operation timeout factory Returns TApizrOptionsBuilder WithRequestTimeout(Func<TimeSpan>) Set a timeout to the request (each request try) TApizrOptionsBuilder WithRequestTimeout(Func<TimeSpan> timeoutFactory) Parameters timeoutFactory Func<TimeSpan> The request timeout factory Returns TApizrOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<TValue>) Set some resilience properties to the resilience context TApizrOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<TValue> The resilience property's value factory Returns TApizrOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilder | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilder Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at both common and proper level for static registrations public interface IApizrSharedRegistrationOptionsBuilder : IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase-2.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at both common and proper level for both static and extended registrations public interface IApizrSharedRegistrationOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrSharedRegistrationOptionsBase where TApizrOptionsBuilder : IApizrSharedRegistrationOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> Type Parameters TApizrOptions TApizrOptionsBuilder Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilderBase Namespace Apizr.Configuring.Shared Assembly Apizr.dll Builder options available at both common and proper level for both static and extended registrations public interface IApizrSharedRegistrationOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Configuring.Shared.html": {
    "href": "api/Apizr.Configuring.Shared.html",
    "title": "Namespace Apizr.Configuring.Shared | Apizr",
    "keywords": "Namespace Apizr.Configuring.Shared Classes ApizrGlobalSharedOptionsBase Options available at every level for both static and extended registrations ApizrGlobalSharedRegistrationOptionsBase Options available at both common and proper level for both static and extended registrations Interfaces IApizrExtendedSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for extended registration IApizrGlobalSharedOptions Options available at all (common, proper and request) levels and for static registration type IApizrGlobalSharedOptionsBase Options available at all (common, proper and request) levels and for all (static and extended) registration types IApizrGlobalSharedOptionsBuilderBase Builder options available at all (common, proper and request) levels and for all (static and extended) registration types IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available at all (common, proper and request) levels and for all (static and extended) registration types IApizrGlobalSharedRegistrationOptionsBase Options available at both common and proper level (not request) and for all (static and extended) registration types IApizrGlobalSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for both static and extended registrations IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available at both common and proper level for both static and extended registrations IApizrSharedRegistrationOptions Options available at both common and proper level for static registrations IApizrSharedRegistrationOptionsBase Options available at both common and proper level for both static and extended registrations IApizrSharedRegistrationOptionsBuilder Builder options available at both common and proper level for static registrations IApizrSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for both static and extended registrations IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available at both common and proper level for both static and extended registrations IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Builder options available at both common and proper level for static registrations"
  },
  "api/Apizr.Configuring.UpdateHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.UpdateHandlerParameterAttribute.html",
    "title": "Class UpdateHandlerParameterAttribute | Apizr",
    "keywords": "Class UpdateHandlerParameterAttribute Namespace Apizr.Configuring Assembly Apizr.dll public abstract class UpdateHandlerParameterAttribute : CrudHandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute UpdateHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateHandlerParameterAttribute(string, object) protected UpdateHandlerParameterAttribute(string key, object value) Parameters key string value object"
  },
  "api/Apizr.Configuring.html": {
    "href": "api/Apizr.Configuring.html",
    "title": "Namespace Apizr.Configuring | Apizr",
    "keywords": "Namespace Apizr.Configuring Classes ApizrRequestMethod BaseAddressAttribute Set a base absolute address or relative path (could be defined with options builder) CreateHandlerParameterAttribute CrudHandlerParameterAttribute DeleteHandlerParameterAttribute HandlerParameterAttribute ReadAllHandlerParameterAttribute ReadHandlerParameterAttribute UpdateHandlerParameterAttribute Enums ApizrConfigurationSource ApizrDuplicateStrategy Duplicate strategy about options registration ApizrLifetimeScope ApizrRegistrationMode"
  },
  "api/Apizr.Connecting.DefaultConnectivityHandler.html": {
    "href": "api/Apizr.Connecting.DefaultConnectivityHandler.html",
    "title": "Class DefaultConnectivityHandler | Apizr",
    "keywords": "Class DefaultConnectivityHandler Namespace Apizr.Connecting Assembly Apizr.dll The connectivity handler method mapping default implementation public class DefaultConnectivityHandler : IConnectivityHandler Inheritance object DefaultConnectivityHandler Implements IConnectivityHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultConnectivityHandler(Func<bool>) The connectivity handler constructor public DefaultConnectivityHandler(Func<bool> connectivityChecker) Parameters connectivityChecker Func<bool> Methods IsConnected() Map Apizr connectivity check to your connectivity handler public bool IsConnected() Returns bool"
  },
  "api/Apizr.Connecting.IConnectivityHandler.html": {
    "href": "api/Apizr.Connecting.IConnectivityHandler.html",
    "title": "Interface IConnectivityHandler | Apizr",
    "keywords": "Interface IConnectivityHandler Namespace Apizr.Connecting Assembly Apizr.dll The connectivity handler method mapping interface Implement it to provide some connectivity features to Apizr public interface IConnectivityHandler Methods IsConnected() Map Apizr connectivity check to your connectivity handler bool IsConnected() Returns bool"
  },
  "api/Apizr.Connecting.html": {
    "href": "api/Apizr.Connecting.html",
    "title": "Namespace Apizr.Connecting | Apizr",
    "keywords": "Namespace Apizr.Connecting Classes DefaultConnectivityHandler The connectivity handler method mapping default implementation Interfaces IConnectivityHandler The connectivity handler method mapping interface Implement it to provide some connectivity features to Apizr"
  },
  "api/Apizr.DistributedCacheHandler-1.html": {
    "href": "api/Apizr.DistributedCacheHandler-1.html",
    "title": "Class DistributedCacheHandler<TCache> | Apizr",
    "keywords": "Class DistributedCacheHandler<TCache> Namespace Apizr Assembly Apizr.Extensions.Microsoft.Caching.dll Distributed cache handler implementation public class DistributedCacheHandler<TCache> : ICacheHandler Type Parameters TCache Inheritance object DistributedCacheHandler<TCache> Implements ICacheHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DistributedCacheHandler(IDistributedCache, IHttpContentSerializer) public DistributedCacheHandler(IDistributedCache distributedCache, IHttpContentSerializer contentSerializer) Parameters distributedCache IDistributedCache contentSerializer IHttpContentSerializer Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method public Task ClearAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken An optional cancellation token Returns Task GetAsync<TData>(string, CancellationToken) Map Apizr cache getting method to your cache handler method public Task<TData> GetAsync<TData>(string key, CancellationToken cancellationToken = default) Parameters key string The key to get from cancellationToken CancellationToken An optional cancellation token Returns Task<TData> Type Parameters TData RemoveAsync(string, CancellationToken) Map Apizr cache removing method to your cache handler method public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string The key to remove from cancellationToken CancellationToken An optional cancellation token Returns Task<bool> SetAsync(string, object, TimeSpan?, CancellationToken) Map Apizr cache saving method to your cache handler method public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default) Parameters key string The key to cache at value object The value to cache lifeSpan TimeSpan? The optional life span cancellationToken CancellationToken An optional cancellation token Returns Task"
  },
  "api/Apizr.Extending.ApizrRegistryExtensions.html": {
    "href": "api/Apizr.Extending.ApizrRegistryExtensions.html",
    "title": "Class ApizrRegistryExtensions | Apizr",
    "keywords": "Class ApizrRegistryExtensions Namespace Apizr.Extending Assembly Apizr.dll public static class ApizrRegistryExtensions Inheritance object ApizrRegistryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) Clear all cache public static Task<bool> ClearCacheAsync<TWebApi>(this IApizrEnumerableRegistry registry, CancellationToken cancellationToken = default) Parameters registry IApizrEnumerableRegistry The registry cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TWebApi The web api to manage ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) Clear the cache of a specific request public static Task<bool> ClearCacheAsync<TWebApi, TResult>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TResult>>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TWebApi The web api to manage TResult The TWebApi's task result ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) Clear the cache of a specific request public static Task<bool> ClearCacheAsync<TWebApi, TResult>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TResult>>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TWebApi The web api to manage TResult The TWebApi's task result ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) Clear the cache of a specific request public static Task<bool> ClearCacheAsync<TWebApi, TResult>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<TResult>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TWebApi The web api to manage TResult The TWebApi's task result CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a Create request public static Task<TApiEntity> CreateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> Type Parameters TApiEntity The api entity type CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Create request, returning a mapped result public static Task<TModelEntity> CreateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) Send an Delete request public static Task DeleteAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send an Delete request public static Task DeleteAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task<IApizrResponse> ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api to manage ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task<IApizrResponse> ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public static Task<IApizrResponse<TApiData>> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api to manage TApiData The TWebApi's task result ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public static Task<IApizrResponse<TApiData>> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api to manage TApiData The TWebApi's task result ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TWebApi The web api to manage TApiData The TWebApi's task result ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public static Task<IApizrResponse<TApiData>> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api to manage TApiData The TWebApi's task result ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result public static Task<IApizrResponse<TApiData>> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api to manage TApiData The TWebApi's task result ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TWebApi The web api to manage TApiData The TWebApi's task result ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<IApizrResponse> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelData>> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<IApizrResponse> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelResultData>> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelResultData>> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelResultData>> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result public static Task<IApizrResponse<TModelResultData>> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request public static Task<TReadAllResult> ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> Type Parameters TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TReadAllResult The \"ReadAll\" query result type ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request, returning mapped result public static Task<TModelReadAllResult> ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult The model result type to map to TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TApiReadAllResult The api result type to map from ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request with some parameters public static Task<TReadAllResult> ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> Type Parameters TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TReadAllResult The api result type TReadAllParams The ReadAll parameters type ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request with some parameters, returning mapped result public static Task<TModelReadAllResult> ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult The model result type to map to TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) Send a Read request public static Task<TApiEntity> ReadAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> Type Parameters TApiEntity The api entity type ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) Send a Read request, returning mapped result public static Task<TModelEntity> ReadAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a Read request public static Task<TApiEntity> ReadAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a Read request, returning mapped result public static Task<TModelEntity> ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a Create request public static Task<IApizrResponse<TApiEntity>> SafeCreateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> Type Parameters TApiEntity The api entity type SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Create request, returning a mapped result public static Task<IApizrResponse<TModelEntity>> SafeCreateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) Send an Delete request public static Task<IApizrResponse> SafeDeleteAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send an Delete request public static Task<IApizrResponse> SafeDeleteAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request public static Task<IApizrResponse<TReadAllResult>> SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> Type Parameters TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TReadAllResult The \"ReadAll\" query result type SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request, returning mapped result public static Task<IApizrResponse<TModelReadAllResult>> SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelReadAllResult>> Type Parameters TModelReadAllResult The model result type to map to TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TApiReadAllResult The api result type to map from SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request with some parameters public static Task<IApizrResponse<TReadAllResult>> SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> Type Parameters TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TReadAllResult The api result type TReadAllParams The ReadAll parameters type SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request with some parameters, returning mapped result public static Task<IApizrResponse<TModelReadAllResult>> SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelReadAllResult>> Type Parameters TModelReadAllResult The model result type to map to TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) Send a Read request public static Task<IApizrResponse<TApiEntity>> SafeReadAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> Type Parameters TApiEntity The api entity type SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) Send a Read request, returning mapped result public static Task<IApizrResponse<TModelEntity>> SafeReadAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a Read request public static Task<IApizrResponse<TApiEntity>> SafeReadAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a Read request, returning mapped result public static Task<IApizrResponse<TModelEntity>> SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send an Update request public static Task<IApizrResponse> SafeUpdateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Update request, returning mapped result public static Task<IApizrResponse> SafeUpdateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send an Update request public static Task<IApizrResponse> SafeUpdateAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Update request, returning mapped result public static Task<IApizrResponse> SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send an Update request public static Task UpdateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Update request, returning mapped result public static Task UpdateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key int The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send an Update request public static Task UpdateAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Update request, returning mapped result public static Task UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters registry IApizrEnumerableRegistry The registry key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.html",
    "title": "Class ApizrExtendedCommonOptions | Apizr",
    "keywords": "Class ApizrExtendedCommonOptions Namespace Apizr.Extending.Configuring.Common Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at common level for extended registrations public class ApizrExtendedCommonOptions : ApizrCommonOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrCommonOptionsBase ApizrExtendedCommonOptions Implements IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrCommonOptionsBase.RefitSettings ApizrCommonOptionsBase.ApizrConfigurationSection ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrExtendedCommonOptions() public ApizrExtendedCommonOptions() Properties BaseAddressFactory Base address factory public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Func<IServiceProvider, string> BasePathFactory Base path factory public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Func<IServiceProvider, string> BaseUriFactory Base Uri factory public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Func<IServiceProvider, Uri> CacheHandlerFactory Cache handler factory public Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; set; } Property Value Func<IServiceProvider, ICacheHandler> CacheHandlerType Type of the cache handler public Type CacheHandlerType { get; set; } Property Value Type ConnectivityHandlerFactory Connectivity handler factory public Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerType Type of the connectivity handler public Type ConnectivityHandlerType { get; set; } Property Value Type DelegatingHandlersExtendedFactories Delegating handlers factories public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> ExceptionHandlersFactory Exception handlers factory public Func<IServiceProvider, IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; set; } Property Value Func<IServiceProvider, IList<IApizrExceptionHandler>> HeadersExtendedFactories Headers factories public IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HeadersExtendedFactories { get; } Property Value IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HttpClientBuilder HttpClient builder public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Action<IHttpClientBuilder> HttpClientHandlerFactory HttpClientHandler factory public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Func<IServiceProvider, HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory public Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; set; } Property Value Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Func<IServiceProvider, HttpTracerMode> LogLevelsFactory Log levels factory public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Func<IServiceProvider, LogLevel[]> MappingHandlerFactory Mapping handler factory public Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; set; } Property Value Func<IServiceProvider, IMappingHandler> MappingHandlerType Type of the mapping handler public Type MappingHandlerType { get; set; } Property Value Type ObjectMappings Mappings between api request object and model object used for classic auto registration public IDictionary<Assembly, MappedWithAttribute[]> ObjectMappings { get; } Property Value IDictionary<Assembly, MappedWithAttribute[]> OperationTimeoutFactory The operation timeout factory (overall request tries) public Func<IServiceProvider, TimeSpan> OperationTimeoutFactory { get; set; } Property Value Func<IServiceProvider, TimeSpan> PostRegistrationActions Post registration actions public IList<Action<IApizrExtendedManagerOptions, IServiceCollection>> PostRegistrationActions { get; } Property Value IList<Action<IApizrExtendedManagerOptions, IServiceCollection>> PostRegistries Other registries plugged during post registration actions public IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value IDictionary<Type, IApizrExtendedConcurrentRegistryBase> RefitSettingsFactory Refit settings factory public Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; set; } Property Value Func<IServiceProvider, RefitSettings> RequestTimeoutFactory The request timeout factory (each request try) public Func<IServiceProvider, TimeSpan> RequestTimeoutFactory { get; set; } Property Value Func<IServiceProvider, TimeSpan> TrafficVerbosityFactory Http traffic tracing verbosity factory public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Func<IServiceProvider, HttpMessageParts> WebApis Web apis auto registered with IApizrManager<TWebApi> public IDictionary<Type, BaseAddressAttribute> WebApis { get; } Property Value IDictionary<Type, BaseAddressAttribute>"
  },
  "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.html",
    "title": "Class ApizrExtendedCommonOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedCommonOptionsBuilder Namespace Apizr.Extending.Configuring.Common Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available at common level for extended registration public class ApizrExtendedCommonOptionsBuilder : IApizrExtendedCommonOptionsBuilder, IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inheritance object ApizrExtendedCommonOptionsBuilder Implements IApizrExtendedCommonOptionsBuilder IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder> IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder> IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedCommonOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedCommonOptionsBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedCommonOptionsBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) Fields Options protected readonly ApizrExtendedCommonOptions Options Field Value ApizrExtendedCommonOptions Methods ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) Adjust some HttpClient settings public IApizrExtendedCommonOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters httpClientBuilder Action<IHttpClientBuilder> The HttpClient builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) Provide a method to refresh the authorization token when needed public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters refreshTokenFactory Func<HttpRequestMessage, Task<string>> Refresh token method called when expired or empty Returns IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns IApizrExtendedCommonOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrExtendedCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrExtendedCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrExtendedCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithBaseAddress(string, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedCommonOptionsBuilder WithBaseAddress(string baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress string Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithBaseAddress(Uri, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Uri baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress Uri Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrExtendedCommonOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<IServiceProvider, string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithBasePath(string, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrExtendedCommonOptionsBuilder WithBasePath(string basePath, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePath string Your web api base path strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data public IApizrExtendedCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters cacheHandler ICacheHandler An ICacheHandler mapping implementation instance Returns IApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Provide a cache handler to cache data public IApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters cacheHandlerFactory Func<IServiceProvider, ICacheHandler> A ICacheHandler mapping implementation factory Returns IApizrExtendedCommonOptionsBuilder WithCacheHandler(Type) Provide a cache handler to cache data public IApizrExtendedCommonOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters cacheHandlerType Type Type of your ICacheHandler mapping implementation Returns IApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() Provide a cache handler to cache data public IApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns IApizrExtendedCommonOptionsBuilder Type Parameters TCacheHandler Your ICacheHandler mapping implementation WithCaching(CacheMode, TimeSpan?, bool) Cache data. public IApizrExtendedCommonOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns IApizrExtendedCommonOptionsBuilder WithConfiguration(IConfiguration) Set options from configuration public IApizrExtendedCommonOptionsBuilder WithConfiguration(IConfiguration configuration) Parameters configuration IConfiguration The configuration to set options from Returns IApizrExtendedCommonOptionsBuilder WithConfiguration(IConfigurationSection) Set options from a specific configuration section public IApizrExtendedCommonOptionsBuilder WithConfiguration(IConfigurationSection configurationSection) Parameters configurationSection IConfigurationSection The configuration section to set options from Returns IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters connectivityHandler IConnectivityHandler An IConnectivityHandler mapping implementation instance Returns IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<bool>) Provide a function to invoke while checking connectivity public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters connectivityCheckingFunction Func<bool> A function to invoke while checking connectivity Returns IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters connectivityHandlerFactory Func<IServiceProvider, IConnectivityHandler> A IConnectivityHandler mapping implementation factory Returns IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters connectivityHandlerType Type Type of your IConnectivityHandler mapping implementation Returns IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns IApizrExtendedCommonOptionsBuilder Type Parameters TConnectivityHandler Your IConnectivityHandler mapping implementation WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>>) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> factory) Parameters factory Expression<Func<TConnectivityHandler, bool>> Returns IApizrExtendedCommonOptionsBuilder Type Parameters TConnectivityHandler Your connectivity checking service WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedCommonOptionsBuilder WithDelegatingHandler<THandler>(ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedCommonOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedCommonOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedCommonOptionsBuilder WithDelegatingHandler<THandler>(THandler delegatingHandler, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandler THandler A delegating handler strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrExtendedCommonOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters TResult WithExCatching<THandler>(bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching<THandler>(bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters TResult WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching<THandler>(Func<IServiceProvider, THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<IServiceProvider, THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedCommonOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers public IApizrExtendedCommonOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns IApizrExtendedCommonOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) Add some headers to the request public IApizrExtendedCommonOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedCommonOptionsBuilder WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request public IApizrExtendedCommonOptionsBuilder WithHeaders(Func<IServiceProvider, IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IServiceProvider, IList<string>> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedCommonOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrExtendedCommonOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedCommonOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler public IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<IServiceProvider, HttpClientHandler> An HttpClientHandler instance factory Returns IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler public IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters httpClientHandler HttpClientHandler An HttpClientHandler instance Returns IApizrExtendedCommonOptionsBuilder WithHttpMessageHandler<THandler>() Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedCommonOptionsBuilder WithHttpMessageHandler<THandler>() where THandler : HttpMessageHandler Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedCommonOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A http message handler factory Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedCommonOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, THandler> A http message handler factory Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(THandler) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedCommonOptionsBuilder WithHttpMessageHandler<THandler>(THandler httpMessageHandler) where THandler : HttpMessageHandler Parameters httpMessageHandler THandler A http message handler Returns IApizrExtendedCommonOptionsBuilder Type Parameters THandler WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. public IApizrExtendedCommonOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedCommonOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. public IApizrExtendedCommonOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedCommonOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedCommonOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters httpTracerModeFactory Func<IServiceProvider, HttpTracerMode> Http traffic tracing mode factory trafficVerbosityFactory Func<IServiceProvider, HttpMessageParts> Http traffic tracing verbosity factory logLevelsFactory Func<IServiceProvider, LogLevel[]> Log levels factory Returns IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns IApizrExtendedCommonOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities public IApizrExtendedCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters mappingHandler IMappingHandler An IMappingHandler mapping implementation instance Returns IApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Provide a mapping handler to auto map entities during mediation public IApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters mappingHandlerFactory Func<IServiceProvider, IMappingHandler> A IMappingHandler mapping implementation factory Returns IApizrExtendedCommonOptionsBuilder WithMappingHandler(Type) Provide a mapping handler to auto map entities during mediation public IApizrExtendedCommonOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters mappingHandlerType Type Type of your IMappingHandler mapping implementation Returns IApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() Provide a mapping handler to auto map entities during mediation public IApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns IApizrExtendedCommonOptionsBuilder Type Parameters TMappingHandler Your IMappingHandler mapping implementation WithOperationTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the operation (overall request tries) public IApizrExtendedCommonOptionsBuilder WithOperationTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The operation timeout factory Returns IApizrExtendedCommonOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) public IApizrExtendedCommonOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns IApizrExtendedCommonOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings public IApizrExtendedCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters refitSettings RefitSettings A Refit.RefitSettings instance Returns IApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings>) Provide some Refit specific settings public IApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters refitSettingsFactory Func<IServiceProvider, RefitSettings> A Refit.RefitSettings instance factory Returns IApizrExtendedCommonOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the request (each request try) public IApizrExtendedCommonOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The request timeout factory Returns IApizrExtendedCommonOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) public IApizrExtendedCommonOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns IApizrExtendedCommonOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context public IApizrExtendedCommonOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns IApizrExtendedCommonOptionsBuilder WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. public IApizrExtendedCommonOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, IEnumerable<ApizrRequestMethod> methodScope = null, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. methodScope IEnumerable<ApizrRequestMethod> Http or Crud methods to apply pipelines on (default: null = All) duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedCommonOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) Set some resilience properties to the resilience context public IApizrExtendedCommonOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<IServiceProvider, TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<IServiceProvider, TValue> The resilience property's value factory Returns IApizrExtendedCommonOptionsBuilder Type Parameters TValue WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context public IApizrExtendedCommonOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue value) Parameters key ResiliencePropertyKey<TValue> The resilience property's key value TValue The resilience property's value Returns IApizrExtendedCommonOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.html",
    "title": "Interface IApizrExtendedCommonOptions | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptions Namespace Apizr.Extending.Configuring.Common Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at common level for extended registrations public interface IApizrExtendedCommonOptions : IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpMessageHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptions.OperationTimeoutFactory IApizrExtendedSharedOptions.RequestTimeoutFactory IApizrExtendedSharedOptions.HeadersExtendedFactories IApizrExtendedSharedOptions.ExceptionHandlersFactory IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties CacheHandlerFactory Cache handler factory Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; } Property Value Func<IServiceProvider, ICacheHandler> CacheHandlerType Type of the cache handler Type CacheHandlerType { get; } Property Value Type ConnectivityHandlerFactory Connectivity handler factory Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; } Property Value Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerType Type of the connectivity handler Type ConnectivityHandlerType { get; } Property Value Type MappingHandlerFactory Mapping handler factory Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; } Property Value Func<IServiceProvider, IMappingHandler> MappingHandlerType Type of the mapping handler Type MappingHandlerType { get; } Property Value Type ObjectMappings Mappings between api request object and model object used for classic auto registration IDictionary<Assembly, MappedWithAttribute[]> ObjectMappings { get; } Property Value IDictionary<Assembly, MappedWithAttribute[]> PostRegistrationActions Post registration actions IList<Action<IApizrExtendedManagerOptions, IServiceCollection>> PostRegistrationActions { get; } Property Value IList<Action<IApizrExtendedManagerOptions, IServiceCollection>> PostRegistries Other registries plugged during post registration actions IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value IDictionary<Type, IApizrExtendedConcurrentRegistryBase> RefitSettingsFactory Refit settings factory Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; } Property Value Func<IServiceProvider, RefitSettings> WebApis Web apis auto registered with IApizrManager<TWebApi> IDictionary<Type, BaseAddressAttribute> WebApis { get; } Property Value IDictionary<Type, BaseAddressAttribute>"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBase.html",
    "title": "Interface IApizrExtendedCommonOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBase Namespace Apizr.Extending.Configuring.Common Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at common level for extended registrations public interface IApizrExtendedCommonOptionsBase : IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> Namespace Apizr.Extending.Configuring.Common Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available at common level for extended registration public interface IApizrExtendedCommonOptionsBuilder<out TApizrExtendedCommonOptions, out TApizrExtendedCommonOptionsBuilder> : IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedCommonOptions : IApizrCommonOptionsBase where TApizrExtendedCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase<out TApizrExtendedCommonOptions, out TApizrExtendedCommonOptionsBuilder> Type Parameters TApizrExtendedCommonOptions TApizrExtendedCommonOptionsBuilder Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>() IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithOperationTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithRequestTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<THandler>(bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) Methods WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Provide a cache handler to cache data TApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters cacheHandlerFactory Func<IServiceProvider, ICacheHandler> A ICacheHandler mapping implementation factory Returns TApizrExtendedCommonOptionsBuilder WithCacheHandler(Type) Provide a cache handler to cache data TApizrExtendedCommonOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters cacheHandlerType Type Type of your ICacheHandler mapping implementation Returns TApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() Provide a cache handler to cache data TApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns TApizrExtendedCommonOptionsBuilder Type Parameters TCacheHandler Your ICacheHandler mapping implementation WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Provide a connectivity handler to check connectivity before sending a request TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters connectivityHandlerFactory Func<IServiceProvider, IConnectivityHandler> A IConnectivityHandler mapping implementation factory Returns TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type) Provide a connectivity handler to check connectivity before sending a request TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters connectivityHandlerType Type Type of your IConnectivityHandler mapping implementation Returns TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Provide a connectivity handler to check connectivity before sending a request TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns TApizrExtendedCommonOptionsBuilder Type Parameters TConnectivityHandler Your IConnectivityHandler mapping implementation WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>>) Provide a connectivity handler to check connectivity before sending a request TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> connectivityProperty) Parameters connectivityProperty Expression<Func<TConnectivityHandler, bool>> Returns TApizrExtendedCommonOptionsBuilder Type Parameters TConnectivityHandler Your connectivity checking service WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Provide a mapping handler to auto map entities during mediation TApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters mappingHandlerFactory Func<IServiceProvider, IMappingHandler> A IMappingHandler mapping implementation factory Returns TApizrExtendedCommonOptionsBuilder WithMappingHandler(Type) Provide a mapping handler to auto map entities during mediation TApizrExtendedCommonOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters mappingHandlerType Type Type of your IMappingHandler mapping implementation Returns TApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() Provide a mapping handler to auto map entities during mediation TApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns TApizrExtendedCommonOptionsBuilder Type Parameters TMappingHandler Your IMappingHandler mapping implementation WithRefitSettings(Func<IServiceProvider, RefitSettings>) Provide some Refit specific settings TApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters refitSettingsFactory Func<IServiceProvider, RefitSettings> A Refit.RefitSettings instance factory Returns TApizrExtendedCommonOptionsBuilder"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilder Namespace Apizr.Extending.Configuring.Common Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available at common level for extended registration public interface IApizrExtendedCommonOptionsBuilder : IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inherited Members IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>() IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithOperationTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRequestTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<THandler>(bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedCommonOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedCommonOptionsBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedCommonOptionsBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedCommonOptionsBuilder)"
  },
  "api/Apizr.Extending.Configuring.Common.html": {
    "href": "api/Apizr.Extending.Configuring.Common.html",
    "title": "Namespace Apizr.Extending.Configuring.Common | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Common Classes ApizrExtendedCommonOptions Options available at common level for extended registrations ApizrExtendedCommonOptionsBuilder Builder options available at common level for extended registration Interfaces IApizrExtendedCommonOptions Options available at common level for extended registrations IApizrExtendedCommonOptionsBase Options available at common level for extended registrations IApizrExtendedCommonOptionsBuilder Builder options available at common level for extended registration IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> Builder options available at common level for extended registration"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions-1.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions-1.html",
    "title": "Class ApizrExtendedManagerOptions<TWebApi> | Apizr",
    "keywords": "Class ApizrExtendedManagerOptions<TWebApi> Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available for both static and extended registrations public class ApizrExtendedManagerOptions<TWebApi> : ApizrManagerOptions<TWebApi>, IApizrManagerOptions<TWebApi>, IApizrExtendedManagerOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters TWebApi Inheritance object ApizrManagerOptions<TWebApi> ApizrExtendedManagerOptions<TWebApi> Implements IApizrManagerOptions<TWebApi> IApizrExtendedManagerOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrManagerOptions<TWebApi>.Options ApizrManagerOptions<TWebApi>.WebApiType ApizrManagerOptions<TWebApi>.CrudApiEntityType ApizrManagerOptions<TWebApi>.TypeInfo ApizrManagerOptions<TWebApi>.RequestNames ApizrManagerOptions<TWebApi>.IsCrudApi ApizrManagerOptions<TWebApi>.BaseUri ApizrManagerOptions<TWebApi>.BaseAddress ApizrManagerOptions<TWebApi>.BasePath ApizrManagerOptions<TWebApi>.PrimaryHandlerFactory ApizrManagerOptions<TWebApi>.HttpTracerMode ApizrManagerOptions<TWebApi>.TrafficVerbosity ApizrManagerOptions<TWebApi>.LogLevels ApizrManagerOptions<TWebApi>.ExceptionHandlers ApizrManagerOptions<TWebApi>.LetThrowOnHandledException ApizrManagerOptions<TWebApi>.HandlersParameters ApizrManagerOptions<TWebApi>.Headers ApizrManagerOptions<TWebApi>.HeadersFactories ApizrManagerOptions<TWebApi>.OperationTimeout ApizrManagerOptions<TWebApi>.RequestTimeout ApizrManagerOptions<TWebApi>.ShouldRedactHeaderValue ApizrManagerOptions<TWebApi>.ResiliencePipelineOptions ApizrManagerOptions<TWebApi>.CacheOptions ApizrManagerOptions<TWebApi>.Logger ApizrManagerOptions<TWebApi>.RequestOptionsBuilders ApizrManagerOptions<TWebApi>.RefitSettings ApizrManagerOptions<TWebApi>.ApizrConfigurationSection object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrExtendedManagerOptions(IApizrExtendedManagerOptionsBase) public ApizrExtendedManagerOptions(IApizrExtendedManagerOptionsBase apizrOptions) Parameters apizrOptions IApizrExtendedManagerOptionsBase Properties DelegatingHandlersExtendedFactories Delegating handlers factories public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> HttpClientHandler public HttpClientHandler HttpClientHandler { get; } Property Value HttpClientHandler"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.html",
    "title": "Class ApizrExtendedManagerOptions | Apizr",
    "keywords": "Class ApizrExtendedManagerOptions Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available for extended registrations public class ApizrExtendedManagerOptions : ApizrExtendedManagerOptionsBase, IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBase, IApizrManagerOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase ApizrExtendedManagerOptionsBase ApizrExtendedManagerOptions Implements IApizrExtendedManagerOptions IApizrExtendedManagerOptionsBase IApizrManagerOptionsBase IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrExtendedManagerOptionsBase.HttpClientHandler ApizrExtendedManagerOptionsBase.DelegatingHandlersExtendedFactories ApizrManagerOptionsBase.WebApiType ApizrManagerOptionsBase.CrudApiEntityType ApizrManagerOptionsBase.TypeInfo ApizrManagerOptionsBase.RequestNames ApizrManagerOptionsBase.IsCrudApi ApizrManagerOptionsBase.Logger ApizrManagerOptionsBase.RequestOptionsBuilders ApizrManagerOptionsBase.RefitSettings ApizrManagerOptionsBase.ApizrConfigurationSection ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrExtendedManagerOptions(IApizrExtendedCommonOptions, IApizrExtendedProperOptions) The options constructor public ApizrExtendedManagerOptions(IApizrExtendedCommonOptions commonOptions, IApizrExtendedProperOptions properOptions) Parameters commonOptions IApizrExtendedCommonOptions The common options properOptions IApizrExtendedProperOptions The proper options Properties ApizrManagerImplementationType Type of the implemented manager public Type ApizrManagerImplementationType { get; } Property Value Type BaseAddressFactory Base address factory public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Func<IServiceProvider, string> BasePathFactory Base path factory public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Func<IServiceProvider, string> BaseUriFactory Base Uri factory public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Func<IServiceProvider, Uri> CacheHandlerFactory Cache handler factory public Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; set; } Property Value Func<IServiceProvider, ICacheHandler> CacheHandlerType Type of the cache handler public Type CacheHandlerType { get; set; } Property Value Type ConnectivityHandlerFactory Connectivity handler factory public Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerType Type of the connectivity handler public Type ConnectivityHandlerType { get; set; } Property Value Type CrudApiEntityKeyType Type of the crud api entity key if any public Type CrudApiEntityKeyType { get; } Property Value Type CrudApiReadAllParamsType Type of the crud api read all parameters if any public Type CrudApiReadAllParamsType { get; } Property Value Type CrudApiReadAllResultType Type of the crud api read all result if any public Type CrudApiReadAllResultType { get; } Property Value Type ExceptionHandlersFactory Exception handlers factory public Func<IServiceProvider, IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; set; } Property Value Func<IServiceProvider, IList<IApizrExceptionHandler>> HeadersExtendedFactories Headers factories public IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HeadersExtendedFactories { get; } Property Value IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HttpClientBuilder HttpClient builder public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Action<IHttpClientBuilder> HttpClientHandlerFactory HttpClientHandler factory public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Func<IServiceProvider, HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory public Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; set; } Property Value Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Func<IServiceProvider, HttpTracerMode> LogLevelsFactory Log levels factory public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Func<IServiceProvider, LogLevel[]> LoggerFactory The Logger factory public Func<IServiceProvider, string, ILogger> LoggerFactory { get; protected set; } Property Value Func<IServiceProvider, string, ILogger> MappingHandlerFactory Mapping handler factory public Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; set; } Property Value Func<IServiceProvider, IMappingHandler> MappingHandlerType Type of the mapping handler public Type MappingHandlerType { get; set; } Property Value Type ObjectMappings Mappings between api request object and model object used for classic auto registration public IDictionary<Assembly, MappedWithAttribute[]> ObjectMappings { get; } Property Value IDictionary<Assembly, MappedWithAttribute[]> OperationTimeoutFactory The operation timeout factory (overall request tries) public Func<IServiceProvider, TimeSpan> OperationTimeoutFactory { get; set; } Property Value Func<IServiceProvider, TimeSpan> PostRegistrationActions Post registration actions public IList<Action<IApizrExtendedManagerOptions, IServiceCollection>> PostRegistrationActions { get; } Property Value IList<Action<IApizrExtendedManagerOptions, IServiceCollection>> PostRegistries Other registries plugged during post registration actions public IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value IDictionary<Type, IApizrExtendedConcurrentRegistryBase> RefitSettingsFactory Refit settings factory public Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; set; } Property Value Func<IServiceProvider, RefitSettings> RequestTimeoutFactory The request timeout factory (each request try) public Func<IServiceProvider, TimeSpan> RequestTimeoutFactory { get; set; } Property Value Func<IServiceProvider, TimeSpan> TrafficVerbosityFactory Http traffic tracing verbosity factory public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Func<IServiceProvider, HttpMessageParts> WebApis Web apis auto registered with IApizrManager<TWebApi> public IDictionary<Type, BaseAddressAttribute> WebApis { get; } Property Value IDictionary<Type, BaseAddressAttribute>"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBase.html",
    "title": "Class ApizrExtendedManagerOptionsBase | Apizr",
    "keywords": "Class ApizrExtendedManagerOptionsBase Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available for both static and extended registrations public class ApizrExtendedManagerOptionsBase : ApizrManagerOptionsBase, IApizrExtendedManagerOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase ApizrExtendedManagerOptionsBase Implements IApizrExtendedManagerOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Derived ApizrExtendedManagerOptions Inherited Members ApizrManagerOptionsBase.WebApiType ApizrManagerOptionsBase.CrudApiEntityType ApizrManagerOptionsBase.TypeInfo ApizrManagerOptionsBase.RequestNames ApizrManagerOptionsBase.IsCrudApi ApizrManagerOptionsBase.Logger ApizrManagerOptionsBase.RequestOptionsBuilders ApizrManagerOptionsBase.RefitSettings ApizrManagerOptionsBase.ApizrConfigurationSection ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrExtendedManagerOptionsBase(IApizrCommonOptionsBase, IApizrProperOptionsBase) public ApizrExtendedManagerOptionsBase(IApizrCommonOptionsBase commonOptions, IApizrProperOptionsBase properOptions) Parameters commonOptions IApizrCommonOptionsBase properOptions IApizrProperOptionsBase Properties DelegatingHandlersExtendedFactories Delegating handlers factories public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; protected set; } Property Value IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> HttpClientHandler public HttpClientHandler HttpClientHandler { get; protected set; } Property Value HttpClientHandler"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.html",
    "title": "Class ApizrExtendedManagerOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedManagerOptionsBuilder Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available for extended registrations public class ApizrExtendedManagerOptionsBuilder : IApizrExtendedManagerOptionsBuilder, IApizrExtendedManagerOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inheritance object ApizrExtendedManagerOptionsBuilder Implements IApizrExtendedManagerOptionsBuilder IApizrExtendedManagerOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrExtendedManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrGlobalManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrExtendedManagerOptionsBuilderBase IApizrGlobalManagerOptionsBuilderBase IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase IApizrExtendedProperOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedManagerOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedManagerOptionsBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedManagerOptionsBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedManagerOptionsBuilder) Constructors ApizrExtendedManagerOptionsBuilder(ApizrExtendedManagerOptions) public ApizrExtendedManagerOptionsBuilder(ApizrExtendedManagerOptions apizrOptions) Parameters apizrOptions ApizrExtendedManagerOptions Fields Options protected readonly ApizrExtendedManagerOptions Options Field Value ApizrExtendedManagerOptions Methods ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) Adjust some HttpClient settings public IApizrExtendedManagerOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters httpClientBuilder Action<IHttpClientBuilder> The HttpClient builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) Provide a method to refresh the authorization token when needed public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters refreshTokenFactory Func<HttpRequestMessage, Task<string>> Refresh token method called when expired or empty Returns IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns IApizrExtendedManagerOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrExtendedManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrExtendedManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrExtendedManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedManagerOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedManagerOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithBaseAddress(string, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedManagerOptionsBuilder WithBaseAddress(string baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress string Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithBaseAddress(Uri, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedManagerOptionsBuilder WithBaseAddress(Uri baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress Uri Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrExtendedManagerOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<IServiceProvider, string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithBasePath(string, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrExtendedManagerOptionsBuilder WithBasePath(string basePath, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePath string Your web api base path strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data public IApizrExtendedManagerOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters cacheHandler ICacheHandler An ICacheHandler mapping implementation instance Returns IApizrExtendedManagerOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Provide a cache handler to cache data public IApizrExtendedManagerOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters cacheHandlerFactory Func<IServiceProvider, ICacheHandler> A ICacheHandler mapping implementation factory Returns IApizrExtendedManagerOptionsBuilder WithCacheHandler(Type) Provide a cache handler to cache data public IApizrExtendedManagerOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters cacheHandlerType Type Type of your ICacheHandler mapping implementation Returns IApizrExtendedManagerOptionsBuilder WithCacheHandler<TCacheHandler>() Provide a cache handler to cache data public IApizrExtendedManagerOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns IApizrExtendedManagerOptionsBuilder Type Parameters TCacheHandler Your ICacheHandler mapping implementation WithCaching(CacheMode, TimeSpan?, bool) Cache data. public IApizrExtendedManagerOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns IApizrExtendedManagerOptionsBuilder WithConfiguration(IConfiguration) Set options from configuration public IApizrExtendedManagerOptionsBuilder WithConfiguration(IConfiguration configuration) Parameters configuration IConfiguration The configuration to set options from Returns IApizrExtendedManagerOptionsBuilder WithConfiguration(IConfigurationSection) Set options from a specific configuration section public IApizrExtendedManagerOptionsBuilder WithConfiguration(IConfigurationSection configurationSection) Parameters configurationSection IConfigurationSection The configuration section to set options from Returns IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters connectivityHandler IConnectivityHandler An IConnectivityHandler mapping implementation instance Returns IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<bool>) Provide a function to invoke while checking connectivity public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters connectivityCheckingFunction Func<bool> A function to invoke while checking connectivity Returns IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters connectivityHandlerFactory Func<IServiceProvider, IConnectivityHandler> A IConnectivityHandler mapping implementation factory Returns IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Type) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters connectivityHandlerType Type Type of your IConnectivityHandler mapping implementation Returns IApizrExtendedManagerOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns IApizrExtendedManagerOptionsBuilder Type Parameters TConnectivityHandler Your IConnectivityHandler mapping implementation WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>>) Provide a connectivity handler to check connectivity before sending a request public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> factory) Parameters factory Expression<Func<TConnectivityHandler, bool>> Returns IApizrExtendedManagerOptionsBuilder Type Parameters TConnectivityHandler Your connectivity checking service WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedManagerOptionsBuilder WithDelegatingHandler<THandler>(ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedManagerOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedManagerOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedManagerOptionsBuilder WithDelegatingHandler<THandler>(THandler delegatingHandler, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandler THandler A delegating handler strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrExtendedManagerOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters TResult WithExCatching<THandler>(bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching<THandler>(bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters TResult WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching<THandler>(Func<IServiceProvider, THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<IServiceProvider, THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedManagerOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers public IApizrExtendedManagerOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns IApizrExtendedManagerOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) Add some headers to the request public IApizrExtendedManagerOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedManagerOptionsBuilder WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request public IApizrExtendedManagerOptionsBuilder WithHeaders(Func<IServiceProvider, IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IServiceProvider, IList<string>> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedManagerOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrExtendedManagerOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedManagerOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler public IApizrExtendedManagerOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<IServiceProvider, HttpClientHandler> An HttpClientHandler instance factory Returns IApizrExtendedManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler public IApizrExtendedManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters httpClientHandler HttpClientHandler An HttpClientHandler instance Returns IApizrExtendedManagerOptionsBuilder WithHttpMessageHandler<THandler>() Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedManagerOptionsBuilder WithHttpMessageHandler<THandler>() where THandler : HttpMessageHandler Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedManagerOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A http message handler factory Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedManagerOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, THandler> A http message handler factory Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(THandler) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedManagerOptionsBuilder WithHttpMessageHandler<THandler>(THandler httpMessageHandler) where THandler : HttpMessageHandler Parameters httpMessageHandler THandler A http message handler Returns IApizrExtendedManagerOptionsBuilder Type Parameters THandler WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. public IApizrExtendedManagerOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedManagerOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. public IApizrExtendedManagerOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedManagerOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedManagerOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelFactory) Parameters httpTracerModeFactory Func<IServiceProvider, HttpTracerMode> Http traffic tracing mode factory trafficVerbosityFactory Func<IServiceProvider, HttpMessageParts> Http traffic tracing verbosity factory logLevelFactory Func<IServiceProvider, LogLevel[]> Returns IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns IApizrExtendedManagerOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities public IApizrExtendedManagerOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters mappingHandler IMappingHandler An IMappingHandler mapping implementation instance Returns IApizrExtendedManagerOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Provide a mapping handler to auto map entities during mediation public IApizrExtendedManagerOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters mappingHandlerFactory Func<IServiceProvider, IMappingHandler> A IMappingHandler mapping implementation factory Returns IApizrExtendedManagerOptionsBuilder WithMappingHandler(Type) Provide a mapping handler to auto map entities during mediation public IApizrExtendedManagerOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters mappingHandlerType Type Type of your IMappingHandler mapping implementation Returns IApizrExtendedManagerOptionsBuilder WithMappingHandler<TMappingHandler>() Provide a mapping handler to auto map entities during mediation public IApizrExtendedManagerOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns IApizrExtendedManagerOptionsBuilder Type Parameters TMappingHandler Your IMappingHandler mapping implementation WithOperationTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the operation (overall request tries) public IApizrExtendedManagerOptionsBuilder WithOperationTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The operation timeout factory Returns IApizrExtendedManagerOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) public IApizrExtendedManagerOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns IApizrExtendedManagerOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings public IApizrExtendedManagerOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters refitSettings RefitSettings A Refit.RefitSettings instance Returns IApizrExtendedManagerOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings>) Provide some Refit specific settings public IApizrExtendedManagerOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters refitSettingsFactory Func<IServiceProvider, RefitSettings> A Refit.RefitSettings instance factory Returns IApizrExtendedManagerOptionsBuilder WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrExtendedManagerOptionsBuilder WithRequestOptions(string requestName, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestName string The name of the request to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedManagerOptionsBuilder WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrExtendedManagerOptionsBuilder WithRequestOptions(string[] requestNames, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestNames string[] The name of the requests to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedManagerOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the request (each request try) public IApizrExtendedManagerOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The request timeout factory Returns IApizrExtendedManagerOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) public IApizrExtendedManagerOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns IApizrExtendedManagerOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context public IApizrExtendedManagerOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns IApizrExtendedManagerOptionsBuilder WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. public IApizrExtendedManagerOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, IEnumerable<ApizrRequestMethod> methodScope = null, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. methodScope IEnumerable<ApizrRequestMethod> Http or Crud methods to apply pipelines on (default: null = All) duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedManagerOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) Set some resilience properties to the resilience context public IApizrExtendedManagerOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<IServiceProvider, TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<IServiceProvider, TValue> The resilience property's value factory Returns IApizrExtendedManagerOptionsBuilder Type Parameters TValue WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context public IApizrExtendedManagerOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue value) Parameters key ResiliencePropertyKey<TValue> The resilience property's key value TValue The resilience property's value Returns IApizrExtendedManagerOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions-1.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions-1.html",
    "title": "Interface IApizrExtendedManagerOptions<TWebApi> | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptions<TWebApi> Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available for extended registrations public interface IApizrExtendedManagerOptions<TWebApi> : IApizrManagerOptions<TWebApi>, IApizrExtendedManagerOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters TWebApi Inherited Members IApizrExtendedManagerOptionsBase.HttpClientHandler IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions.html",
    "title": "Interface IApizrExtendedManagerOptions | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptions Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available for extended registrations public interface IApizrExtendedManagerOptions : IApizrExtendedManagerOptionsBase, IApizrManagerOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrExtendedManagerOptionsBase.HttpClientHandler IApizrExtendedCommonOptions.ConnectivityHandlerType IApizrExtendedCommonOptions.CacheHandlerType IApizrExtendedCommonOptions.MappingHandlerType IApizrExtendedCommonOptions.RefitSettingsFactory IApizrExtendedCommonOptions.ConnectivityHandlerFactory IApizrExtendedCommonOptions.CacheHandlerFactory IApizrExtendedCommonOptions.MappingHandlerFactory IApizrExtendedCommonOptions.WebApis IApizrExtendedCommonOptions.ObjectMappings IApizrExtendedCommonOptions.PostRegistries IApizrExtendedCommonOptions.PostRegistrationActions IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrExtendedProperOptions.CrudApiEntityKeyType IApizrExtendedProperOptions.CrudApiReadAllResultType IApizrExtendedProperOptions.CrudApiReadAllParamsType IApizrExtendedProperOptions.ApizrManagerImplementationType IApizrExtendedProperOptions.LoggerFactory IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpMessageHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptions.OperationTimeoutFactory IApizrExtendedSharedOptions.RequestTimeoutFactory IApizrExtendedSharedOptions.HeadersExtendedFactories IApizrExtendedSharedOptions.ExceptionHandlersFactory IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBase.html",
    "title": "Interface IApizrExtendedManagerOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBase Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available for both static and extended registrations public interface IApizrExtendedManagerOptionsBase : IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrCommonOptionsBase.RefitSettings IApizrCommonOptionsBase.ApizrConfigurationSection IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties HttpClientHandler HttpClientHandler HttpClientHandler { get; } Property Value HttpClientHandler"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available for extended registrations public interface IApizrExtendedManagerOptionsBuilder<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> : IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedOptions : IApizrExtendedManagerOptionsBase where TApizrExtendedOptionsBuilder : IApizrExtendedManagerOptionsBuilderBase<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> Type Parameters TApizrExtendedOptions TApizrExtendedOptionsBuilder Inherited Members IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpMessageHandler<THandler>() IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithOperationTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRequestTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<THandler>(bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilder Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available for extended registrations public interface IApizrExtendedManagerOptionsBuilder : IApizrExtendedManagerOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inherited Members IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalProperOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpMessageHandler<THandler>() IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithOperationTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRequestTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<THandler>(bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedManagerOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedManagerOptionsBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedManagerOptionsBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedManagerOptionsBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase-2.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available for extended registrations public interface IApizrExtendedManagerOptionsBuilderBase<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> : IApizrGlobalManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedOptions : IApizrExtendedManagerOptionsBase where TApizrExtendedOptionsBuilder : IApizrExtendedManagerOptionsBuilderBase<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> Type Parameters TApizrExtendedOptions TApizrExtendedOptionsBuilder Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<bool>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilderBase Namespace Apizr.Extending.Configuring.Manager Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available for extended registrations public interface IApizrExtendedManagerOptionsBuilderBase : IApizrExtendedCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, string) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, string) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.html",
    "title": "Namespace Apizr.Extending.Configuring.Manager | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Manager Classes ApizrExtendedManagerOptions Options available for extended registrations ApizrExtendedManagerOptionsBase Options available for both static and extended registrations ApizrExtendedManagerOptionsBuilder Builder options available for extended registrations ApizrExtendedManagerOptions<TWebApi> Options available for both static and extended registrations Interfaces IApizrExtendedManagerOptions Options available for extended registrations IApizrExtendedManagerOptionsBase Options available for both static and extended registrations IApizrExtendedManagerOptionsBuilder Builder options available for extended registrations IApizrExtendedManagerOptionsBuilderBase Builder options available for extended registrations IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Builder options available for extended registrations IApizrExtendedManagerOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Builder options available for extended registrations IApizrExtendedManagerOptions<TWebApi> Options available for extended registrations"
  },
  "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.html",
    "title": "Class ApizrExtendedProperOptions | Apizr",
    "keywords": "Class ApizrExtendedProperOptions Namespace Apizr.Extending.Configuring.Proper Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at proper level for extended registrations public class ApizrExtendedProperOptions : ApizrProperOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inheritance object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrProperOptionsBase ApizrExtendedProperOptions Implements IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrProperOptionsBase.WebApiType ApizrProperOptionsBase.CrudApiEntityType ApizrProperOptionsBase.TypeInfo ApizrProperOptionsBase.RequestNames ApizrProperOptionsBase.IsCrudApi ApizrProperOptionsBase.Logger ApizrProperOptionsBase.RequestOptionsBuilders ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories ApizrGlobalSharedRegistrationOptionsBase.Headers ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.ExceptionHandlers ApizrGlobalSharedOptionsBase.LetThrowOnHandledException ApizrGlobalSharedOptionsBase.HandlersParameters ApizrGlobalSharedOptionsBase.OperationTimeout ApizrGlobalSharedOptionsBase.RequestTimeout ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions ApizrGlobalSharedOptionsBase.CacheOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrExtendedProperOptions(IApizrExtendedSharedOptions, Type, Type, Type, Type, Type, TypeInfo, Type, string, string, IDictionary<string, object>, HttpTracerMode?, HttpMessageParts?, TimeSpan?, TimeSpan?, ResiliencePipelineAttributeBase[], ResiliencePipelineAttributeBase[], CacheAttribute, CacheAttribute, Func<string, bool>, params LogLevel[]) The proper options constructor public ApizrExtendedProperOptions(IApizrExtendedSharedOptions sharedOptions, Type webApiType, Type crudApiEntityType, Type crudApiEntityKeyType, Type crudApiReadAllResultType, Type crudApiReadAllParamsType, TypeInfo typeInfo, Type apizrManagerType, string baseAddress, string basePath, IDictionary<string, object> handlersParameters, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, TimeSpan? operationTimeout, TimeSpan? requestTimeout, ResiliencePipelineAttributeBase[] commonResiliencePipelineAttributes, ResiliencePipelineAttributeBase[] properResiliencePipelineAttributes, CacheAttribute commonCacheAttribute, CacheAttribute properCacheAttribute, Func<string, bool> shouldRedactHeaderValue = null, params LogLevel[] logLevels) Parameters sharedOptions IApizrExtendedSharedOptions The shared options webApiType Type The web api type crudApiEntityType Type The crud api entity type if any crudApiEntityKeyType Type The crud api entity key type if any crudApiReadAllResultType Type The crud api read all result type if any crudApiReadAllParamsType Type The crud api read all params type if any typeInfo TypeInfo The type info apizrManagerType Type The manager type baseAddress string The web api base address basePath string The web api base path handlersParameters IDictionary<string, object> Some handlers parameters httpTracerMode HttpTracerMode? The http tracer mode trafficVerbosity HttpMessageParts? The traffic verbosity operationTimeout TimeSpan? The operation timeout requestTimeout TimeSpan? The request timeout commonResiliencePipelineAttributes ResiliencePipelineAttributeBase[] Global resilience pipelines properResiliencePipelineAttributes ResiliencePipelineAttributeBase[] Specific resilience pipeline commonCacheAttribute CacheAttribute Global caching options properCacheAttribute CacheAttribute Specific caching options shouldRedactHeaderValue Func<string, bool> Headers to redact value logLevels LogLevel[] The log levels Properties ApizrManagerImplementationType Type of the implemented manager public Type ApizrManagerImplementationType { get; } Property Value Type BaseAddressFactory Base address factory public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Func<IServiceProvider, string> BasePathFactory Base path factory public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Func<IServiceProvider, string> BaseUriFactory Base Uri factory public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Func<IServiceProvider, Uri> CrudApiEntityKeyType Type of the crud api entity key if any public Type CrudApiEntityKeyType { get; } Property Value Type CrudApiReadAllParamsType Type of the crud api read all parameters if any public Type CrudApiReadAllParamsType { get; } Property Value Type CrudApiReadAllResultType Type of the crud api read all result if any public Type CrudApiReadAllResultType { get; } Property Value Type DelegatingHandlersExtendedFactories Delegating handlers factories public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> ExceptionHandlersFactory Exception handlers factory public Func<IServiceProvider, IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; set; } Property Value Func<IServiceProvider, IList<IApizrExceptionHandler>> HeadersExtendedFactories Headers factories public IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HeadersExtendedFactories { get; } Property Value IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HttpClientBuilder HttpClient builder public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Action<IHttpClientBuilder> HttpClientHandlerFactory HttpClientHandler factory public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Func<IServiceProvider, HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory public Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; set; } Property Value Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Func<IServiceProvider, HttpTracerMode> LogLevelsFactory Log levels factory public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Func<IServiceProvider, LogLevel[]> LoggerFactory The Logger factory public Func<IServiceProvider, string, ILogger> LoggerFactory { get; protected set; } Property Value Func<IServiceProvider, string, ILogger> OperationTimeoutFactory The operation timeout factory (overall request tries) public Func<IServiceProvider, TimeSpan> OperationTimeoutFactory { get; set; } Property Value Func<IServiceProvider, TimeSpan> RequestTimeoutFactory The request timeout factory (each request try) public Func<IServiceProvider, TimeSpan> RequestTimeoutFactory { get; set; } Property Value Func<IServiceProvider, TimeSpan> TrafficVerbosityFactory Http traffic tracing verbosity factory public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Func<IServiceProvider, HttpMessageParts>"
  },
  "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.html",
    "title": "Class ApizrExtendedProperOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedProperOptionsBuilder Namespace Apizr.Extending.Configuring.Proper Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available at proper level for extended registrations public class ApizrExtendedProperOptionsBuilder : IApizrExtendedProperOptionsBuilder, IApizrExtendedProperOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inheritance object ApizrExtendedProperOptionsBuilder Implements IApizrExtendedProperOptionsBuilder IApizrExtendedProperOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder> IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder> IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Fields Options protected readonly ApizrExtendedProperOptions Options Field Value ApizrExtendedProperOptions Methods ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) Adjust some HttpClient settings public IApizrExtendedProperOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters httpClientBuilder Action<IHttpClientBuilder> The HttpClient builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns IApizrExtendedProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) Provide a method to refresh the authorization token when needed public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters refreshTokenFactory Func<HttpRequestMessage, Task<string>> Refresh token method called when expired or empty Returns IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns IApizrExtendedProperOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns IApizrExtendedProperOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns IApizrExtendedProperOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns IApizrExtendedProperOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithBaseAddress(string, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedProperOptionsBuilder WithBaseAddress(string baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress string Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithBaseAddress(Uri, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) public IApizrExtendedProperOptionsBuilder WithBaseAddress(Uri baseAddress, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddress Uri Your web api base address strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrExtendedProperOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<IServiceProvider, string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithBasePath(string, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) public IApizrExtendedProperOptionsBuilder WithBasePath(string basePath, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePath string Your web api base path strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithCaching(CacheMode, TimeSpan?, bool) Cache data. public IApizrExtendedProperOptionsBuilder WithCaching(CacheMode mode = CacheMode.FetchOrGet, TimeSpan? lifeSpan = null, bool shouldInvalidateOnError = false) Parameters mode CacheMode FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one lifeSpan TimeSpan? This specific caching lifetime (Default: null = cache handler lifetime shouldInvalidateOnError bool Should invalidate on error (Default: false) Returns IApizrExtendedProperOptionsBuilder WithConfiguration(IConfiguration) Set options from configuration public IApizrExtendedProperOptionsBuilder WithConfiguration(IConfiguration configuration) Parameters configuration IConfiguration The configuration to set options from Returns IApizrExtendedProperOptionsBuilder WithConfiguration(IConfigurationSection) Set options from a specific configuration section public IApizrExtendedProperOptionsBuilder WithConfiguration(IConfigurationSection configurationSection) Parameters configurationSection IConfigurationSection The configuration section to set options from Returns IApizrExtendedProperOptionsBuilder WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedProperOptionsBuilder WithDelegatingHandler<THandler>(ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedProperOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedProperOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) public IApizrExtendedProperOptionsBuilder WithDelegatingHandler<THandler>(THandler delegatingHandler, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandler THandler A delegating handler strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrExtendedProperOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching(Func<ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching(Func<ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException, Task<bool>> The exception callback returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) Catch potential exceptions [Obsolete(\"Catching an exception by an Action is now replaced by a Func returning a handled boolean flag\")] public IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Action<ApizrException<TResult>> The exception callback letThrowOnException bool Let throw potential exception (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters TResult WithExCatching<THandler>(bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching<THandler>(bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters TResult WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching<THandler>(Func<IServiceProvider, THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<IServiceProvider, THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) Catch potential exceptions public IApizrExtendedProperOptionsBuilder WithExCatching<THandler>(THandler exceptionHandler, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandler THandler The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithHandlerParameter(string, object) Set some parameters passed through all delegating handlers public IApizrExtendedProperOptionsBuilder WithHandlerParameter(string key, object value) Parameters key string The parameter's key value object The parameter's value Returns IApizrExtendedProperOptionsBuilder WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) Add some headers to the request public IApizrExtendedProperOptionsBuilder WithHeaders(IList<string> headers, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrRegistrationMode behavior = ApizrRegistrationMode.Set) Parameters headers IList<string> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) behavior ApizrRegistrationMode Returns IApizrExtendedProperOptionsBuilder WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request public IApizrExtendedProperOptionsBuilder WithHeaders(Func<IServiceProvider, IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IServiceProvider, IList<string>> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedProperOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties public IApizrExtendedProperOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns IApizrExtendedProperOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler public IApizrExtendedProperOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<IServiceProvider, HttpClientHandler> An HttpClientHandler instance factory Returns IApizrExtendedProperOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler public IApizrExtendedProperOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters httpClientHandler HttpClientHandler An HttpClientHandler instance Returns IApizrExtendedProperOptionsBuilder WithHttpMessageHandler<THandler>() Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedProperOptionsBuilder WithHttpMessageHandler<THandler>() where THandler : HttpMessageHandler Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedProperOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A http message handler factory Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedProperOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, THandler> A http message handler factory Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(THandler) Add a custom http message handler inheriting from HttpMessageHandler (last call) public IApizrExtendedProperOptionsBuilder WithHttpMessageHandler<THandler>(THandler httpMessageHandler) where THandler : HttpMessageHandler Parameters httpMessageHandler THandler A http message handler Returns IApizrExtendedProperOptionsBuilder Type Parameters THandler WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) Sets the collection of HTTP headers names for which values should be redacted before logging. public IApizrExtendedProperOptionsBuilder WithLoggedHeadersRedactionNames(IEnumerable<string> redactedLoggedHeaderNames, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters redactedLoggedHeaderNames IEnumerable<string> The collection of HTTP headers names for which values should be redacted before logging. strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedProperOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) Sets the Func<T, TResult> which determines whether to redact the HTTP header value before logging. public IApizrExtendedProperOptionsBuilder WithLoggedHeadersRedactionRule(Func<string, bool> shouldRedactHeaderValue, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) Parameters shouldRedactHeaderValue Func<string, bool> The Func<T, TResult> which determines whether to redact the HTTP header value before logging strategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedProperOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedProperOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: All) logLevels LogLevel[] Log levels to apply while writing (default: Information) Returns IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters httpTracerModeFactory Func<IServiceProvider, HttpTracerMode> Http traffic tracing mode factory trafficVerbosityFactory Func<IServiceProvider, HttpMessageParts> Http traffic tracing verbosity factory logLevelsFactory Func<IServiceProvider, LogLevel[]> Log levels factory Returns IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) public IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns IApizrExtendedProperOptionsBuilder WithOperationTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the operation (overall request tries) public IApizrExtendedProperOptionsBuilder WithOperationTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The operation timeout factory Returns IApizrExtendedProperOptionsBuilder WithOperationTimeout(TimeSpan) Set a timeout to the operation (overall request tries) public IApizrExtendedProperOptionsBuilder WithOperationTimeout(TimeSpan timeout) Parameters timeout TimeSpan The operation timeout Returns IApizrExtendedProperOptionsBuilder WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrExtendedProperOptionsBuilder WithRequestOptions(string requestName, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestName string The name of the request to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedProperOptionsBuilder WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) Configure options for specific requests public IApizrExtendedProperOptionsBuilder WithRequestOptions(string[] requestNames, Action<IApizrRequestOptionsBuilder> optionsBuilder, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters requestNames string[] The name of the requests to configure optionsBuilder Action<IApizrRequestOptionsBuilder> The configuration builder duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns IApizrExtendedProperOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the request (each request try) public IApizrExtendedProperOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The request timeout factory Returns IApizrExtendedProperOptionsBuilder WithRequestTimeout(TimeSpan) Set a timeout to the request (each request try) public IApizrExtendedProperOptionsBuilder WithRequestTimeout(TimeSpan timeout) Parameters timeout TimeSpan The request timeout Returns IApizrExtendedProperOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) Set some options to the resilience context public IApizrExtendedProperOptionsBuilder WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder> contextOptionsBuilder) Parameters contextOptionsBuilder Action<IApizrResilienceContextOptionsBuilder> The resilience context options builder Returns IApizrExtendedProperOptionsBuilder WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) Apply some resilience strategies by getting pipelines from registry with key matching. public IApizrExtendedProperOptionsBuilder WithResiliencePipelineKeys(string[] resiliencePipelineKeys, IEnumerable<ApizrRequestMethod> methodScope = null, ApizrDuplicateStrategy duplicateStrategy = ApizrDuplicateStrategy.Add) Parameters resiliencePipelineKeys string[] Resilience pipeline keys from the registry. methodScope IEnumerable<ApizrRequestMethod> Http or Crud methods to apply pipelines on (default: null = All) duplicateStrategy ApizrDuplicateStrategy The duplicate strategy if there's any other names already (default: Add) Returns IApizrExtendedProperOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) Set some resilience properties to the resilience context public IApizrExtendedProperOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<IServiceProvider, TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<IServiceProvider, TValue> The resilience property's value factory Returns IApizrExtendedProperOptionsBuilder Type Parameters TValue WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) Set some resilience properties to the resilience context public IApizrExtendedProperOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, TValue value) Parameters key ResiliencePropertyKey<TValue> The resilience property's key value TValue The resilience property's value Returns IApizrExtendedProperOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.html",
    "title": "Interface IApizrExtendedProperOptions | Apizr",
    "keywords": "Interface IApizrExtendedProperOptions Namespace Apizr.Extending.Configuring.Proper Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at proper level for extended registrations public interface IApizrExtendedProperOptions : IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpMessageHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptions.OperationTimeoutFactory IApizrExtendedSharedOptions.RequestTimeoutFactory IApizrExtendedSharedOptions.HeadersExtendedFactories IApizrExtendedSharedOptions.ExceptionHandlersFactory IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties ApizrManagerImplementationType Type of the implemented manager Type ApizrManagerImplementationType { get; } Property Value Type CrudApiEntityKeyType Type of the crud api entity key if any Type CrudApiEntityKeyType { get; } Property Value Type CrudApiReadAllParamsType Type of the crud api read all parameters if any Type CrudApiReadAllParamsType { get; } Property Value Type CrudApiReadAllResultType Type of the crud api read all result if any Type CrudApiReadAllResultType { get; } Property Value Type LoggerFactory The Logger factory Func<IServiceProvider, string, ILogger> LoggerFactory { get; } Property Value Func<IServiceProvider, string, ILogger>"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBase.html",
    "title": "Interface IApizrExtendedProperOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBase Namespace Apizr.Extending.Configuring.Proper Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at proper level for extended registrations public interface IApizrExtendedProperOptionsBase : IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.CrudApiEntityType IApizrProperOptionsBase.TypeInfo IApizrProperOptionsBase.RequestNames IApizrProperOptionsBase.IsCrudApi IApizrProperOptionsBase.Logger IApizrProperOptionsBase.RequestOptionsBuilders IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> Namespace Apizr.Extending.Configuring.Proper Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available at proper level for extended registrations public interface IApizrExtendedProperOptionsBuilder<out TApizrExtendedProperOptions, out TApizrExtendedProperOptionsBuilder> : IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedProperOptions : IApizrProperOptionsBase where TApizrExtendedProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase<out TApizrExtendedProperOptions, out TApizrExtendedProperOptionsBuilder> Type Parameters TApizrExtendedProperOptions TApizrExtendedProperOptionsBuilder Inherited Members IApizrGlobalProperOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>() IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithOperationTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithRequestTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<THandler>(bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder.html",
    "title": "Interface IApizrExtendedProperOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilder Namespace Apizr.Extending.Configuring.Proper Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available at proper level for extended registrations public interface IApizrExtendedProperOptionsBuilder : IApizrExtendedProperOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Inherited Members IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithRequestOptions(string, Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithRequestOptions(string[], Action<IApizrRequestOptionsBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>() IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithOperationTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithRequestTimeout(Func<IServiceProvider, TimeSpan>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<THandler>(bool, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts)"
  },
  "api/Apizr.Extending.Configuring.Proper.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.html",
    "title": "Namespace Apizr.Extending.Configuring.Proper | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Proper Classes ApizrExtendedProperOptions Options available at proper level for extended registrations ApizrExtendedProperOptionsBuilder Builder options available at proper level for extended registrations Interfaces IApizrExtendedProperOptions Options available at proper level for extended registrations IApizrExtendedProperOptionsBase Options available at proper level for extended registrations IApizrExtendedProperOptionsBuilder Builder options available at proper level for extended registrations IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> Builder options available at proper level for extended registrations"
  },
  "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry.html",
    "title": "Class ApizrExtendedRegistry | Apizr",
    "keywords": "Class ApizrExtendedRegistry Namespace Apizr.Extending.Configuring.Registry Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Registry options available for extended registrations public class ApizrExtendedRegistry : ApizrRegistryBase, IApizrExtendedConcurrentRegistry, IApizrExtendedRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Inheritance object ApizrRegistryBase ApizrExtendedRegistry Implements IApizrExtendedConcurrentRegistry IApizrExtendedRegistry IApizrEnumerableRegistry IEnumerable<KeyValuePair<Type, Func<IApizrManager>>> IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrRegistryBase.GetEnumerator() ApizrRegistryBase.GetCrudManagerFor<T>() ApizrRegistryBase.GetCrudManagerFor<T, TKey>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.GetManagerFor<TWebApi>() ApizrRegistryBase.TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) ApizrRegistryBase.TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) ApizrRegistryBase.Count ApizrRegistryBase.ContainsCrudManagerFor<T>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.ContainsManagerFor<TWebApi>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Methods AddOrUpdateManager(Type) public void AddOrUpdateManager(Type managerType) Parameters managerType Type"
  },
  "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.html",
    "title": "Class ApizrExtendedRegistryBuilder | Apizr",
    "keywords": "Class ApizrExtendedRegistryBuilder Namespace Apizr.Extending.Configuring.Registry Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Registry builder options available for extended registrations public class ApizrExtendedRegistryBuilder : IApizrExtendedRegistryBuilder, IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase Inheritance object ApizrExtendedRegistryBuilder Implements IApizrExtendedRegistryBuilder IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder> IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder> IApizrRegistryBuilderBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FileTransferExtendedOptionsBuilderExtensions.AddDownloadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerWith<TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Fields CommonOptions protected readonly IApizrExtendedCommonOptions CommonOptions Field Value IApizrExtendedCommonOptions Registry protected readonly ApizrExtendedRegistry Registry Field Value ApizrExtendedRegistry Services protected readonly IServiceCollection Services Field Value IServiceCollection Properties ApizrRegistry Apizr registry public IApizrExtendedRegistry ApizrRegistry { get; } Property Value IApizrExtendedRegistry Methods AddCrudManagerFor(Assembly[], Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public IApizrExtendedRegistryBuilder AddCrudManagerFor(Assembly[] assemblies, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder) Parameters assemblies Assembly[] Any assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Assembly[], Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerImplementationType, Assembly[] assemblies, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblies Assembly[] Any assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type IEnumerable<T> public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type (primitive) optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type (primitive) apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Type apiEntityReadAllParamsType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type (primitive) apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) apiEntityReadAllParamsType Type ReadAll query parameters type optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Type apiEntityReadAllParamsType, Type apizrManagerImplementationType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls apiEntityKeyType Type The object key type apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) apiEntityReadAllParamsType Type ReadAll query parameters type apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type[], Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerImplementationType, Type[] assemblyMarkerTypes, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblyMarkerTypes Type[] Any type contained in assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor(Type[], Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type[] assemblyMarkerTypes, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder) Parameters assemblyMarkerTypes Type[] Any type contained in assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public IApizrExtendedRegistryBuilder AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some api proper options Returns IApizrExtendedRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some api proper options Returns IApizrExtendedRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some api proper options Returns IApizrExtendedRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some api proper options Returns IApizrExtendedRegistryBuilder Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder Type Parameters T The object type to manage with crud api calls TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddGroup(Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) Group registrations sharing specific common options public IApizrExtendedRegistryBuilder AddGroup(Action<IApizrExtendedRegistryBuilder> registryGroupBuilder, Action<IApizrExtendedCommonOptionsBuilder> commonOptionsBuilder = null) Parameters registryGroupBuilder Action<IApizrExtendedRegistryBuilder> The registry group commonOptionsBuilder Action<IApizrExtendedCommonOptionsBuilder> The group common options Returns IApizrExtendedRegistryBuilder AddManagerFor(Assembly[], Action<IApizrExtendedProperOptionsBuilder>) Register a IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public IApizrExtendedRegistryBuilder AddManagerFor(Assembly[] assemblies, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters assemblies Assembly[] Any assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> public IApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters webApiType Type The web api interface type to manage optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddManagerFor(Type, Assembly[], Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public IApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerImplementationType, Assembly[] assemblies, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblies Assembly[] Any assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> public IApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Type apizrManagerImplementationType, Action<IApizrExtendedProperOptionsBuilder> properOptionsBuilder = null) Parameters webApiType Type The web api interface type to manage apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type properOptionsBuilder Action<IApizrExtendedProperOptionsBuilder> Returns IApizrExtendedRegistryBuilder AddManagerFor(Type, Type[], Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public IApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerImplementationType, Type[] assemblyMarkerTypes, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblyMarkerTypes Type[] Any type contained in assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddManagerFor(Type[], Action<IApizrExtendedProperOptionsBuilder>) Register a IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public IApizrExtendedRegistryBuilder AddManagerFor(Type[] assemblyMarkerTypes, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters assemblyMarkerTypes Type[] Any type contained in assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance public IApizrExtendedRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some api proper options Returns IApizrExtendedRegistryBuilder Type Parameters TWebApi The web api interface to manage AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> public IApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns IApizrExtendedRegistryBuilder Type Parameters TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistry.html",
    "title": "Interface IApizrExtendedConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrExtendedConcurrentRegistry Namespace Apizr.Extending.Configuring.Registry Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Registry options available for extended registrations public interface IApizrExtendedConcurrentRegistry : IApizrExtendedRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>.GetEnumerator() IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdateManager(Type) Extension Methods ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistryBase.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistryBase.html",
    "title": "Interface IApizrExtendedConcurrentRegistryBase | Apizr",
    "keywords": "Interface IApizrExtendedConcurrentRegistryBase Namespace Apizr.Extending.Configuring.Registry Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Registry options available for extended registrations public interface IApizrExtendedConcurrentRegistryBase Methods AddOrUpdateManager(Type) void AddOrUpdateManager(Type managerType) Parameters managerType Type"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistry.html",
    "title": "Interface IApizrExtendedRegistry | Apizr",
    "keywords": "Interface IApizrExtendedRegistry Namespace Apizr.Extending.Configuring.Registry Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Registry options available for extended registrations public interface IApizrExtendedRegistry : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>.GetEnumerator() IEnumerable.GetEnumerator() Extension Methods ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeCreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeDeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.SafeUpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, int, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, int, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder-4.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder-4.html",
    "title": "Interface IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> Namespace Apizr.Extending.Configuring.Registry Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Registry builder options available for extended registrations public interface IApizrExtendedRegistryBuilder<out TApizrExtendedRegistry, out TApizrExtendedRegistryBuilder, out TApizrExtendedProperOptionsBuilder, out TApizrExtendedCommonOptionsBuilder> : IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase where TApizrExtendedRegistry : IApizrEnumerableRegistry where TApizrExtendedRegistryBuilder : IApizrRegistryBuilderBase<out TApizrExtendedRegistry, out TApizrExtendedRegistryBuilder, out TApizrExtendedProperOptionsBuilder, out TApizrExtendedCommonOptionsBuilder> where TApizrExtendedProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase where TApizrExtendedCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase Type Parameters TApizrExtendedRegistry TApizrExtendedRegistryBuilder TApizrExtendedProperOptionsBuilder TApizrExtendedCommonOptionsBuilder Inherited Members IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddGroup(Action<TApizrExtendedRegistryBuilder>, Action<TApizrExtendedCommonOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<TApizrExtendedProperOptionsBuilder>) Methods AddCrudManagerFor(Assembly[], Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes TApizrExtendedRegistryBuilder AddCrudManagerFor(Assembly[] assemblies, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters assemblies Assembly[] Any assembly to scan for CrudEntityAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Assembly[], Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerImplementationType, Assembly[] assemblies, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblies Assembly[] Any assembly to scan for CrudEntityAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type IEnumerable<T> TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type (primitive) optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type (primitive) apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Type apiEntityReadAllParamsType, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type (primitive) apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) apiEntityReadAllParamsType Type ReadAll query parameters type optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType (primitive) and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Type apiEntityReadAllParamsType, Type apizrManagerImplementationType, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apiEntityType Type The object type to manage with crud api calls apiEntityKeyType Type The object key type apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) apiEntityReadAllParamsType Type ReadAll query parameters type apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type[], Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerImplementationType, Type[] assemblyMarkerTypes, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblyMarkerTypes Type[] Any type contained in assembly to scan for CrudEntityAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor(Type[], Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes TApizrExtendedRegistryBuilder AddCrudManagerFor(Type[] assemblyMarkerTypes, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters assemblyMarkerTypes Type[] Any type contained in assembly to scan for CrudEntityAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) TApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder Type Parameters T The object type to manage with crud api calls TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddManagerFor(Assembly[], Action<TApizrExtendedProperOptionsBuilder>) Register a IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces TApizrExtendedRegistryBuilder AddManagerFor(Assembly[] assemblies, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters assemblies Assembly[] Any assembly to scan for BaseAddressAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> TApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters webApiType Type The web api interface type to manage optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddManagerFor(Type, Assembly[], Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces TApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerImplementationType, Assembly[] assemblies, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblies Assembly[] Any assembly to scan for BaseAddressAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddManagerFor(Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> TApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Type apizrManagerImplementationType, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters webApiType Type The web api interface type to manage apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddManagerFor(Type, Type[], Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces TApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerImplementationType, Type[] assemblyMarkerTypes, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblyMarkerTypes Type[] Any type contained in assembly to scan for BaseAddressAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddManagerFor(Type[], Action<TApizrExtendedProperOptionsBuilder>) Register a IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces TApizrExtendedRegistryBuilder AddManagerFor(Type[] assemblyMarkerTypes, Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters assemblyMarkerTypes Type[] Any type contained in assembly to scan for BaseAddressAttribute optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> TApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<out TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrExtendedProperOptionsBuilder> The builder defining specific Apizr options Returns TApizrExtendedRegistryBuilder Type Parameters TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html",
    "title": "Interface IApizrExtendedRegistryBuilder | Apizr",
    "keywords": "Interface IApizrExtendedRegistryBuilder Namespace Apizr.Extending.Configuring.Registry Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Registry builder options available for extended registrations public interface IApizrExtendedRegistryBuilder : IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase Inherited Members IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Assembly[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Assembly[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Assembly[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Type[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Assembly[], Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddGroup(Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder>) Extension Methods FileTransferExtendedOptionsBuilderExtensions.AddDownloadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerWith<TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.html",
    "title": "Namespace Apizr.Extending.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Registry Classes ApizrExtendedRegistry Registry options available for extended registrations ApizrExtendedRegistryBuilder Registry builder options available for extended registrations Interfaces IApizrExtendedConcurrentRegistry Registry options available for extended registrations IApizrExtendedConcurrentRegistryBase Registry options available for extended registrations IApizrExtendedRegistry Registry options available for extended registrations IApizrExtendedRegistryBuilder Registry builder options available for extended registrations IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> Registry builder options available for extended registrations"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.html",
    "title": "Interface IApizrExtendedSharedOptions | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptions Namespace Apizr.Extending.Configuring.Shared Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at both common and proper level for extended registrations public interface IApizrExtendedSharedOptions : IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties BaseAddressFactory Base address factory Func<IServiceProvider, string> BaseAddressFactory { get; } Property Value Func<IServiceProvider, string> BasePathFactory Base path factory Func<IServiceProvider, string> BasePathFactory { get; } Property Value Func<IServiceProvider, string> BaseUriFactory Base Uri factory Func<IServiceProvider, Uri> BaseUriFactory { get; } Property Value Func<IServiceProvider, Uri> ExceptionHandlersFactory Exception handlers factory Func<IServiceProvider, IList<IApizrExceptionHandler>> ExceptionHandlersFactory { get; } Property Value Func<IServiceProvider, IList<IApizrExceptionHandler>> HeadersExtendedFactories Headers factories IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HeadersExtendedFactories { get; } Property Value IDictionary<(ApizrRegistrationMode, ApizrLifetimeScope), Func<IServiceProvider, Func<IList<string>>>> HttpClientBuilder HttpClient builder Action<IHttpClientBuilder> HttpClientBuilder { get; } Property Value Action<IHttpClientBuilder> HttpClientHandlerFactory HttpClientHandler factory Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; } Property Value Func<IServiceProvider, HttpClientHandler> HttpMessageHandlerFactory HttpMessageHandler factory Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpMessageHandlerFactory { get; } Property Value Func<IServiceProvider, IApizrManagerOptionsBase, HttpMessageHandler> HttpTracerModeFactory Http traffic tracing mode factory Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; } Property Value Func<IServiceProvider, HttpTracerMode> LogLevelsFactory Log levels factory Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; } Property Value Func<IServiceProvider, LogLevel[]> OperationTimeoutFactory The operation timeout factory (overall request tries) Func<IServiceProvider, TimeSpan> OperationTimeoutFactory { get; } Property Value Func<IServiceProvider, TimeSpan> RequestTimeoutFactory The request timeout factory (each request try) Func<IServiceProvider, TimeSpan> RequestTimeoutFactory { get; } Property Value Func<IServiceProvider, TimeSpan> TrafficVerbosityFactory Http traffic tracing verbosity factory Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; } Property Value Func<IServiceProvider, HttpMessageParts>"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.html",
    "title": "Interface IApizrExtendedSharedOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptionsBase Namespace Apizr.Extending.Configuring.Shared Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Options available at both common and proper level for extended registrations public interface IApizrExtendedSharedOptionsBase : IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories IApizrGlobalSharedRegistrationOptionsBase.Headers IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.ExceptionHandlers IApizrGlobalSharedOptionsBase.LetThrowOnHandledException IApizrGlobalSharedOptionsBase.HandlersParameters IApizrGlobalSharedOptionsBase.OperationTimeout IApizrGlobalSharedOptionsBase.RequestTimeout IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions IApizrGlobalSharedOptionsBase.CacheOptions Properties DelegatingHandlersExtendedFactories Delegating handlers factories IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>>"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> Namespace Apizr.Extending.Configuring.Shared Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Builder options available at both common and proper level for extended registrations public interface IApizrExtendedSharedOptionsBuilder<out TApizrExtendedSharedOptions, out TApizrExtendedSharedOptionsBuilder> : IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedSharedOptions : IApizrSharedRegistrationOptionsBase where TApizrExtendedSharedOptionsBuilder : IApizrGlobalSharedRegistrationOptionsBuilderBase<out TApizrExtendedSharedOptions, out TApizrExtendedSharedOptionsBuilder> Type Parameters TApizrExtendedSharedOptions TApizrExtendedSharedOptionsBuilder Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithConfiguration(IConfiguration) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithConfiguration(IConfigurationSection) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBaseAddress(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBaseAddress(Uri, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBasePath(string, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithDelegatingHandler<THandler>(THandler, ApizrDuplicateStrategy) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithHttpMessageHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithHeaders(IList<string>, ApizrDuplicateStrategy, ApizrRegistrationMode) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithResiliencePipelineKeys(string[], IEnumerable<ApizrRequestMethod>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching(Action<ApizrException>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching(Func<ApizrException, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching(Func<ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching<TResult>(Func<ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching<THandler>(THandler, bool, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithHandlerParameter(string, object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, TValue) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, params LogLevel[]) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithOperationTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithRequestTimeout(TimeSpan) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithResilienceContextOptions(Action<IApizrResilienceContextOptionsBuilder>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithLoggedHeadersRedactionNames(IEnumerable<string>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithLoggedHeadersRedactionRule(Func<string, bool>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithCaching(CacheMode, TimeSpan?, bool) Extension Methods FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, int) HttpMessagePartsExtensions.IgnoreMessageParts<T>(T, HttpMessageParts) Methods ConfigureHttpClientBuilder(Action<IHttpClientBuilder>, ApizrDuplicateStrategy) Adjust some HttpClient settings TApizrExtendedSharedOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters httpClientBuilder Action<IHttpClientBuilder> The HttpClient builder strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Merge) Returns TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters authenticationHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> A TAuthenticationHandler instance factory Returns TApizrExtendedSharedOptionsBuilder Type Parameters TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>) Provide your own settings management service with its token property TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property to get from Returns TApizrExtendedSharedOptionsBuilder Type Parameters TSettingsService Your settings management service (getting token) WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>>, Func<HttpRequestMessage, Task<string>>) Provide your own settings management service and a method to refresh the token TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenFactory Func<HttpRequestMessage, Task<string>> The method factory called to refresh the token Returns TApizrExtendedSharedOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>>, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>>) Provide your own settings management and token management services TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters tokenProperty Expression<Func<TSettingsService, string>> The token property used for saving refreshTokenMethod Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> The method called to refresh the token Returns TApizrExtendedSharedOptionsBuilder Type Parameters TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, string> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>, ApizrDuplicateStrategy) Define your web api base address (could be defined with WebApiAttribute) TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters baseAddressFactory Func<IServiceProvider, Uri> Your web api base address factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder WithBasePath(Func<IServiceProvider, string>, ApizrDuplicateStrategy) Define your web api base path (could be defined with WebApiAttribute) TApizrExtendedSharedOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters basePathFactory Func<IServiceProvider, string> Your web api base path factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder WithDelegatingHandler<THandler>(ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) TApizrExtendedSharedOptionsBuilder WithDelegatingHandler<THandler>(ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) TApizrExtendedSharedOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler>, ApizrDuplicateStrategy) Add a custom delegating handler inheriting from DelegatingHandler (serial call) TApizrExtendedSharedOptionsBuilder WithDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add) where THandler : DelegatingHandler Parameters delegatingHandlerFactory Func<IServiceProvider, THandler> A delegating handler factory strategy ApizrDuplicateStrategy The duplicate strategy if there's any other already (default: Add) Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithExCatching(Func<IServiceProvider, ApizrException, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrExtendedSharedOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrExtendedSharedOptionsBuilder WithExCatching(Func<IServiceProvider, ApizrException, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder WithExCatching<THandler>(bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrExtendedSharedOptionsBuilder WithExCatching<THandler>(bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrExtendedSharedOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, bool> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, bool> The exception callback returning handled boolean flag letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder Type Parameters TResult WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrExtendedSharedOptionsBuilder WithExCatching<TResult>(Func<IServiceProvider, ApizrException<TResult>, Task<bool>> onException, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters onException Func<IServiceProvider, ApizrException<TResult>, Task<bool>> The exception callback returning a handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder Type Parameters TResult WithExCatching<THandler>(Func<IServiceProvider, THandler>, bool, ApizrDuplicateStrategy) Catch potential exceptions TApizrExtendedSharedOptionsBuilder WithExCatching<THandler>(Func<IServiceProvider, THandler> exceptionHandlerFactory, bool letThrowOnHandledException = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) where THandler : IApizrExceptionHandler Parameters exceptionHandlerFactory Func<IServiceProvider, THandler> The exception handler called back and returning handled boolean flag Task letThrowOnHandledException bool Let throw potential exception even if it's handled (default: true) strategy ApizrDuplicateStrategy The duplicate strategy if there's another callback already (default: Replace) Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithHeaders(Func<IServiceProvider, IList<string>>, ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request TApizrExtendedSharedOptionsBuilder WithHeaders(Func<IServiceProvider, IList<string>> headersFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headersFactory Func<IServiceProvider, IList<string>> Headers to add to the request strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns TApizrExtendedSharedOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[], ApizrDuplicateStrategy, ApizrLifetimeScope, ApizrRegistrationMode) Add some headers to the request loaded from service properties TApizrExtendedSharedOptionsBuilder WithHeaders<TSettingsService>(Expression<Func<TSettingsService, string>>[] headerProperties, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Add, ApizrLifetimeScope scope = ApizrLifetimeScope.Api, ApizrRegistrationMode mode = ApizrRegistrationMode.Set) Parameters headerProperties Expression<Func<TSettingsService, string>>[] The header properties to get from strategy ApizrDuplicateStrategy The duplicate strategy if there's another one already (default: Add) scope ApizrLifetimeScope Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh) mode ApizrRegistrationMode Set headers right the way or store it for further attribute key match use (default: Set) Returns TApizrExtendedSharedOptionsBuilder Type Parameters TSettingsService Your settings management service (getting headers) WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler TApizrExtendedSharedOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters httpClientHandlerFactory Func<IServiceProvider, HttpClientHandler> An HttpClientHandler instance factory Returns TApizrExtendedSharedOptionsBuilder WithHttpMessageHandler<THandler>() Add a custom http message handler inheriting from HttpMessageHandler (last call) TApizrExtendedSharedOptionsBuilder WithHttpMessageHandler<THandler>() where THandler : HttpMessageHandler Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) TApizrExtendedSharedOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, IApizrManagerOptionsBase, THandler> A http message handler factory Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom http message handler inheriting from HttpMessageHandler (last call) TApizrExtendedSharedOptionsBuilder WithHttpMessageHandler<THandler>(Func<IServiceProvider, THandler> httpMessageHandlerFactory) where THandler : HttpMessageHandler Parameters httpMessageHandlerFactory Func<IServiceProvider, THandler> A http message handler factory Returns TApizrExtendedSharedOptionsBuilder Type Parameters THandler WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters httpTracerModeFactory Func<IServiceProvider, HttpTracerMode> Http traffic tracing mode factory trafficVerbosityFactory Func<IServiceProvider, HttpMessageParts> Http traffic tracing verbosity factory logLevelsFactory Func<IServiceProvider, LogLevel[]> Log levels factory Returns TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters loggingConfigurationFactory Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> Logging configuration factory Returns TApizrExtendedSharedOptionsBuilder WithOperationTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the operation (overall request tries) TApizrExtendedSharedOptionsBuilder WithOperationTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The operation timeout factory Returns TApizrExtendedSharedOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan>) Set a timeout to the request (each request try) TApizrExtendedSharedOptionsBuilder WithRequestTimeout(Func<IServiceProvider, TimeSpan> timeoutFactory) Parameters timeoutFactory Func<IServiceProvider, TimeSpan> The request timeout factory Returns TApizrExtendedSharedOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue>, Func<IServiceProvider, TValue>) Set some resilience properties to the resilience context TApizrExtendedSharedOptionsBuilder WithResilienceProperty<TValue>(ResiliencePropertyKey<TValue> key, Func<IServiceProvider, TValue> valueFactory) Parameters key ResiliencePropertyKey<TValue> The resilience property's key valueFactory Func<IServiceProvider, TValue> The resilience property's value factory Returns TApizrExtendedSharedOptionsBuilder Type Parameters TValue"
  },
  "api/Apizr.Extending.Configuring.Shared.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.html",
    "title": "Namespace Apizr.Extending.Configuring.Shared | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Shared Interfaces IApizrExtendedSharedOptions Options available at both common and proper level for extended registrations IApizrExtendedSharedOptionsBase Options available at both common and proper level for extended registrations IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> Builder options available at both common and proper level for extended registrations"
  },
  "api/Apizr.Extending.EnumerableExtensions.html": {
    "href": "api/Apizr.Extending.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Apizr",
    "keywords": "Class EnumerableExtensions Namespace Apizr.Extending Assembly Apizr.dll Some enumerable extensions public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods High(IEnumerable<LogLevel>) Return the highest value public static LogLevel High(this IEnumerable<LogLevel> enumerable) Parameters enumerable IEnumerable<LogLevel> The source enumerable Returns LogLevel Low(IEnumerable<LogLevel>) Return the lowest value public static LogLevel Low(this IEnumerable<LogLevel> enumerable) Parameters enumerable IEnumerable<LogLevel> The source enumerable Returns LogLevel Medium(IEnumerable<LogLevel>) Return the closest value to the middle public static LogLevel Medium(this IEnumerable<LogLevel> enumerable) Parameters enumerable IEnumerable<LogLevel> The source enumerable Returns LogLevel"
  },
  "api/Apizr.Extending.FileTransferRegistryExtensions.html": {
    "href": "api/Apizr.Extending.FileTransferRegistryExtensions.html",
    "title": "Class FileTransferRegistryExtensions | Apizr",
    "keywords": "Class FileTransferRegistryExtensions Namespace Apizr.Extending Assembly Apizr.Integrations.FileTransfer.dll public static class FileTransferRegistryExtensions Inheritance object FileTransferRegistryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsDownloadManager(IApizrEnumerableRegistry) Check if registry contains a manager for the default IDownloadApi api type public static bool ContainsDownloadManager(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) Check if registry contains a manager for TDownloadApi api type public static bool ContainsDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TDownloadApi The download api interface to manage ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) Check if registry contains a manager for TDownloadApi api type public static bool ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TDownloadApi The download api interface to manage TDownloadParams The download query parameters type ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) Check if registry contains a manager for IDownloadApi<TDownloadParams> api type public static bool ContainsDownloadManagerWith<TDownloadParams>(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TDownloadParams The download query parameters type ContainsTransferManager(IApizrEnumerableRegistry) Check if registry contains a manager for the default ITransferApi api type public static bool ContainsTransferManager(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) Check if registry contains a manager for TTransferApi api type public static bool ContainsTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TTransferApi The Transfer api interface to manage ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) Check if registry contains a manager for TTransferApi api type public static bool ContainsTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for TTransferApi api type public static bool ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for ITransferApi<TDownloadParams, TUploadApiResultData> api type public static bool ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TDownloadParams The download query parameters type TUploadApiResultData The upload api return type ContainsUploadManager(IApizrEnumerableRegistry) Check if registry contains a manager for the default IUploadApi api type public static bool ContainsUploadManager(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) Check if registry contains a manager for TUploadApi api type public static bool ContainsUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TUploadApi The upload api interface to manage ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for TUploadApi api type public static bool ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for IUploadApi<TApiResultData> api type public static bool ContainsUploadManagerWith<TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns bool Type Parameters TUploadApiResultData The upload api return type DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file public static Task<FileInfo> DownloadAsync(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters public static Task<FileInfo> DownloadAsync(this IApizrEnumerableRegistry registry, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file public static Task<FileInfo> DownloadAsync<TDownloadApi>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type to manage DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters public static Task<FileInfo> DownloadAsync<TDownloadApi>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type to manage DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file public static Task<FileInfo> DownloadAsync<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type to manage TDownloadParams The query parameters type DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters public static Task<FileInfo> DownloadAsync<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type to manage TDownloadParams The query parameters type DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file public static Task<FileInfo> DownloadWithAsync<TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadParams The query parameters type DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters public static Task<FileInfo> DownloadWithAsync<TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadParams The query parameters type GetDownloadManager(IApizrEnumerableRegistry) Get a download manager instance public static IApizrDownloadManager GetDownloadManager(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrDownloadManager GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) Get a download manager instance public static IApizrDownloadManager<TDownloadApi> GetDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrDownloadManager<TDownloadApi> Type Parameters TDownloadApi The download api interface to manage GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) Get a download manager instance public static IApizrDownloadManager<TDownloadApi, TDownloadParams> GetDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrDownloadManager<TDownloadApi, TDownloadParams> Type Parameters TDownloadApi The download api interface to manage TDownloadParams The download query parameters type GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) Get a download manager instance public static IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> GetDownloadManagerWith<TDownloadParams>(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> Type Parameters TDownloadParams The download query parameters type GetTransferManager(IApizrEnumerableRegistry) Get a transfer manager instance public static IApizrTransferManager GetTransferManager(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrTransferManager GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) Get a transfer manager instance public static IApizrTransferManager<TTransferApi> GetTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrTransferManager<TTransferApi> Type Parameters TTransferApi The Transfer api interface to manage GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) Get a transfer manager instance public static IApizrTransferManager<TTransferApi, TDownloadParams> GetTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrTransferManager<TTransferApi, TDownloadParams> Type Parameters TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Get a transfer manager instance public static IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> Type Parameters TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Get a transfer manager instance public static IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> Type Parameters TDownloadParams The download query parameters type TUploadApiResultData The upload api return type GetUploadManager(IApizrEnumerableRegistry) Get an upload manager instance public static IApizrUploadManager GetUploadManager(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrUploadManager GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) Get an upload manager instance public static IApizrUploadManager<TUploadApi> GetUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrUploadManager<TUploadApi> Type Parameters TUploadApi The upload api interface to manage GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) Get an upload manager instance public static IApizrUploadManager<TUploadApi, TUploadApiResultData> GetUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrUploadManager<TUploadApi, TUploadApiResultData> Type Parameters TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) Get an upload manager instance public static IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> GetUploadManagerWith<TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters registry IApizrEnumerableRegistry The registry to get the manager from Returns IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> Type Parameters TUploadApiResultData The upload api return type TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) Get a download manager instance public static bool TryGetDownloadManager(this IApizrEnumerableRegistry registry, out IApizrDownloadManager manager) Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrDownloadManager The download manager instance Returns bool TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) Get a download manager instance public static bool TryGetDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<TDownloadApi> manager) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrDownloadManager<TDownloadApi> The download manager instance Returns bool Type Parameters TDownloadApi The download api interface to manage TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) Get a download manager instance public static bool TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<TDownloadApi, TDownloadParams> manager) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrDownloadManager<TDownloadApi, TDownloadParams> The download manager instance Returns bool Type Parameters TDownloadApi The download api interface to manage TDownloadParams The download query parameters type TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) Get a download manager instance public static bool TryGetDownloadManagerWith<TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> manager) Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> The download manager instance Returns bool Type Parameters TDownloadParams The download query parameters type TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) Get a transfer manager instance public static bool TryGetTransferManager(this IApizrEnumerableRegistry registry, out IApizrTransferManager manager) Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrTransferManager The transfer manager instance Returns bool TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) Get a transfer manager instance public static bool TryGetTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi> manager) where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrTransferManager<TTransferApi> The transfer manager instance Returns bool Type Parameters TTransferApi The Transfer api interface to manage TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) Get a transfer manager instance public static bool TryGetTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi, TDownloadParams> manager) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrTransferManager<TTransferApi, TDownloadParams> The transfer manager instance Returns bool Type Parameters TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) Get a transfer manager instance public static bool TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> manager) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> The transfer manager instance Returns bool Type Parameters TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) Get a transfer manager instance public static bool TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> manager) Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> The transfer manager instance Returns bool Type Parameters TDownloadParams The download query parameters type TUploadApiResultData The upload api return type TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) Get an upload manager instance public static bool TryGetUploadManager(this IApizrEnumerableRegistry registry, out IApizrUploadManager manager) Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrUploadManager The upload manager instance Returns bool TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) Get an upload manager instance public static bool TryGetUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry, out IApizrUploadManager<TUploadApi> manager) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrUploadManager<TUploadApi> The upload manager instance Returns bool Type Parameters TUploadApi The upload api interface to manage TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) Get an upload manager instance public static bool TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrUploadManager<TUploadApi, TUploadApiResultData> manager) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrUploadManager<TUploadApi, TUploadApiResultData> The upload manager instance Returns bool Type Parameters TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) Get an upload manager instance public static bool TryGetUploadManagerWith<TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> manager) Parameters registry IApizrEnumerableRegistry The registry to get the manager from manager IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> The upload manager instance Returns bool Type Parameters TUploadApiResultData The upload api return type UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public static Task<HttpResponseMessage> UploadAsync(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public static Task<HttpResponseMessage> UploadAsync(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public static Task<HttpResponseMessage> UploadAsync(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public static Task<HttpResponseMessage> UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> Type Parameters TUploadApi The upload api type to manage UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public static Task<HttpResponseMessage> UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> Type Parameters TUploadApi The upload api type to manage UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public static Task<HttpResponseMessage> UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters registry IApizrEnumerableRegistry The registry streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> Type Parameters TUploadApi The upload api type to manage UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public static Task<TUploadApiResultData> UploadAsync<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApi The upload api type to manage TUploadApiResultData The upload api return type UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public static Task<TUploadApiResultData> UploadAsync<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApi The upload api type to manage TUploadApiResultData The upload api return type UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public static Task<TUploadApiResultData> UploadAsync<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters registry IApizrEnumerableRegistry The registry streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApi The upload api type to manage TUploadApiResultData The upload api return type UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public static Task<TUploadApiResultData> UploadWithAsync<TUploadApiResultData>(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApiResultData The upload api return type UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public static Task<TUploadApiResultData> UploadWithAsync<TUploadApiResultData>(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApiResultData The upload api return type UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public static Task<TUploadApiResultData> UploadWithAsync<TUploadApiResultData>(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters registry IApizrEnumerableRegistry The registry streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApiResultData The upload api return type"
  },
  "api/Apizr.Extending.HttpRequestMessageExtensions.html": {
    "href": "api/Apizr.Extending.HttpRequestMessageExtensions.html",
    "title": "Class HttpRequestMessageExtensions | Apizr",
    "keywords": "Class HttpRequestMessageExtensions Namespace Apizr.Extending Assembly Apizr.Integrations.FileTransfer.dll public static class HttpRequestMessageExtensions Inheritance object HttpRequestMessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsApizrProgress(HttpRequestMessage) public static bool ContainsApizrProgress(this HttpRequestMessage request) Parameters request HttpRequestMessage Returns bool GetApizrProgress(HttpRequestMessage) public static IApizrProgress GetApizrProgress(this HttpRequestMessage request) Parameters request HttpRequestMessage Returns IApizrProgress TryGetApizrProgress(HttpRequestMessage, out IApizrProgress) public static bool TryGetApizrProgress(this HttpRequestMessage request, out IApizrProgress apizrProgress) Parameters request HttpRequestMessage apizrProgress IApizrProgress Returns bool"
  },
  "api/Apizr.Extending.TypeExtensions.html": {
    "href": "api/Apizr.Extending.TypeExtensions.html",
    "title": "Class TypeExtensions | Apizr",
    "keywords": "Class TypeExtensions Namespace Apizr.Extending Assembly Apizr.dll Some Type extensions public static class TypeExtensions Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFriendlyName(Type) Returns a more friendly readable type name public static string GetFriendlyName(this Type type) Parameters type Type The type to get friendly name of Returns string IsAssignableFromGenericType(Type, Type) Checks if the generic type is assignable from the given type public static bool IsAssignableFromGenericType(this Type genericType, Type givenType) Parameters genericType Type The generic type givenType Type The given type Returns bool IsOpenGeneric(Type) Checks if the type is open generic public static bool IsOpenGeneric(this Type type) Parameters type Type Returns bool MakeGenericTypeIfNeeded(Type, params Type[]) Returns a closed generic type based on provided type arguments public static Type MakeGenericTypeIfNeeded(this Type type, params Type[] typeArguments) Parameters type Type The open generic type typeArguments Type[] The type arguments Returns Type"
  },
  "api/Apizr.Extending.html": {
    "href": "api/Apizr.Extending.html",
    "title": "Namespace Apizr.Extending | Apizr",
    "keywords": "Namespace Apizr.Extending Classes ApizrRegistryExtensions EnumerableExtensions Some enumerable extensions FileTransferRegistryExtensions HttpRequestMessageExtensions TypeExtensions Some Type extensions"
  },
  "api/Apizr.FileTransferExtendedOptionsBuilderExtensions.html": {
    "href": "api/Apizr.FileTransferExtendedOptionsBuilderExtensions.html",
    "title": "Class FileTransferExtendedOptionsBuilderExtensions | Apizr",
    "keywords": "Class FileTransferExtendedOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Extensions.Microsoft.FileTransfer.dll File transfer options builder extensions public static class FileTransferExtendedOptionsBuilderExtensions Inheritance object FileTransferExtendedOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddApizrDownloadManager(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for IDownloadApi (you must at least provide a base url thanks to the options builder) public static IServiceCollection AddApizrDownloadManager(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection AddApizrDownloadManagerFor<TDownloadApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi public static IServiceCollection AddApizrDownloadManagerFor<TDownloadApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TDownloadApi The download api interface to manage AddApizrDownloadManagerFor<TDownloadApi, TDownloadParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} public static IServiceCollection AddApizrDownloadManagerFor<TDownloadApi, TDownloadParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TDownloadApi The download api interface to manage TDownloadParams The download query parameters type AddApizrDownloadManagerWith<TDownloadParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} public static IServiceCollection AddApizrDownloadManagerWith<TDownloadParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TDownloadParams The download query parameters type AddApizrTransferManager(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for ITransferApi (you must at least provide a base url thanks to the options builder) public static IServiceCollection AddApizrTransferManager(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection AddApizrTransferManagerFor<TTransferApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi public static IServiceCollection AddApizrTransferManagerFor<TTransferApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TTransferApi The transfer api interface to manage AddApizrTransferManagerFor<TTransferApi, TDownloadParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IServiceCollection AddApizrTransferManagerFor<TTransferApi, TDownloadParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type AddApizrTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IServiceCollection AddApizrTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddApizrTransferManagerWith<TDownloadParams, TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager with shortcuts public static IServiceCollection AddApizrTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddApizrUploadManager(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for IUploadApi (you must at least provide a base url thanks to the options builder) public static IServiceCollection AddApizrUploadManager(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder) Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection AddApizrUploadManagerFor<TUploadApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi public static IServiceCollection AddApizrUploadManagerFor<TUploadApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TUploadApi The upload api interface to manage AddApizrUploadManagerFor<TUploadApi, TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi public static IServiceCollection AddApizrUploadManagerFor<TUploadApi, TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type AddApizrUploadManagerWith<TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi public static IServiceCollection AddApizrUploadManagerWith<TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection where to add the manager optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining some options Returns IServiceCollection Type Parameters TUploadApiResultData The upload api return type AddDownloadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager for IDownloadApi public static IApizrExtendedRegistryBuilder AddDownloadManager(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder AddDownloadManagerFor<TDownloadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi public static IApizrExtendedRegistryBuilder AddDownloadManagerFor<TDownloadApi>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TDownloadApi The download api interface to manage AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} public static IApizrExtendedRegistryBuilder AddDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TDownloadApi The download api interface to manage TDownloadParams The download query parameters type AddDownloadManagerWith<TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager with parameter shortcut public static IApizrExtendedRegistryBuilder AddDownloadManagerWith<TDownloadParams>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TDownloadParams The download query parameters type AddTransferManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for ITransferApi public static IApizrExtendedRegistryBuilder AddTransferManager(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi public static IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TTransferApi The transfer api interface to manage AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IApizrExtendedRegistryBuilder AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddUploadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager for IUploadApi public static IApizrExtendedRegistryBuilder AddUploadManager(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder AddUploadManagerFor<TUploadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi public static IApizrExtendedRegistryBuilder AddUploadManagerFor<TUploadApi>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TUploadApi The upload api interface to manage AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi public static IApizrExtendedRegistryBuilder AddUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type AddUploadManagerWith<TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager with result shortcut public static IApizrExtendedRegistryBuilder AddUploadManagerWith<TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrExtendedRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrExtendedProperOptionsBuilder> The builder defining some options Returns IApizrExtendedRegistryBuilder Type Parameters TUploadApiResultData The upload api return type"
  },
  "api/Apizr.FileTransferOptionsBuilderExtensions.html": {
    "href": "api/Apizr.FileTransferOptionsBuilderExtensions.html",
    "title": "Class FileTransferOptionsBuilderExtensions | Apizr",
    "keywords": "Class FileTransferOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.FileTransfer.dll File transfer builder extensions public static class FileTransferOptionsBuilderExtensions Inheritance object FileTransferOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDownloadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for IDownloadApi public static IApizrRegistryBuilder AddDownloadManager(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder AddDownloadManagerFor<TDownloadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi public static IApizrRegistryBuilder AddDownloadManagerFor<TDownloadApi>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TDownloadApi The download api interface to manage AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} public static IApizrRegistryBuilder AddDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TDownloadApi The download api interface to manage TDownloadParams The download query parameters type AddDownloadManagerWith<TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for the built-in download api with TDownloadParams public static IApizrRegistryBuilder AddDownloadManagerWith<TDownloadParams>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TDownloadParams The download query parameters type AddTransferManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for ITransferApi public static IApizrRegistryBuilder AddTransferManager(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder AddTransferManagerFor<TTransferApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi public static IApizrRegistryBuilder AddTransferManagerFor<TTransferApi>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TTransferApi The transfer api interface to manage AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IApizrRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage> Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IApizrRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the built-in transfer api with TDownloadParams and TUploadApiResultData public static IApizrRegistryBuilder AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddUploadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for IUploadApi public static IApizrRegistryBuilder AddUploadManager(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder AddUploadManagerFor<TUploadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi public static IApizrRegistryBuilder AddUploadManagerFor<TUploadApi>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TUploadApi The upload api interface to manage AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi public static IApizrRegistryBuilder AddUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type AddUploadManagerWith<TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for the built-in upload api with TUploadApiResultData public static IApizrRegistryBuilder AddUploadManagerWith<TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters builder IApizrRegistryBuilder The builder to create the manager from optionsBuilder Action<IApizrProperOptionsBuilder> The builder defining some options Returns IApizrRegistryBuilder Type Parameters TUploadApiResultData The upload api return type CreateDownloadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for IDownloadApi (you must at least provide a base url thanks to the options builder) public static IApizrDownloadManager CreateDownloadManager(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrDownloadManager CreateDownloadManagerFor<TDownloadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for the provided download api derived from IDownloadApi public static IApizrDownloadManager<TDownloadApi> CreateDownloadManagerFor<TDownloadApi>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<IDictionary<string, object>> Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrDownloadManager<TDownloadApi> Type Parameters TDownloadApi The download api interface to manage CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for the provided download api derived from IDownloadApi{TDownloadParams} public static IApizrDownloadManager<TDownloadApi, TDownloadParams> CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrDownloadManager<TDownloadApi, TDownloadParams> Type Parameters TDownloadApi The download api interface to manage TDownloadParams The download query parameters type CreateDownloadManagerWith<TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for the built-in download api with TDownloadParams public static IApizrDownloadManagerWith<TDownloadParams> CreateDownloadManagerWith<TDownloadParams>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrDownloadManagerWith<TDownloadParams> Type Parameters TDownloadParams The download query parameters type CreateTransferManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for ITransferApi (you must at least provide a base url thanks to the options builder) public static IApizrTransferManager CreateTransferManager(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrTransferManager CreateTransferManagerFor<TTransferApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the provided transfer api derived from ITransferApi public static IApizrTransferManager<TTransferApi> CreateTransferManagerFor<TTransferApi>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrTransferManager<TTransferApi> Type Parameters TTransferApi The transfer api interface to manage CreateTransferManagerFor<TTransferApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IApizrTransferManager<TTransferApi, TDownloadParams> CreateTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage> Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrTransferManager<TTransferApi, TDownloadParams> Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} public static IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> Type Parameters TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api result type CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the built-in transfer api with TDownloadParams and TUploadApiResultData public static IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> Type Parameters TDownloadParams The download query parameters type TUploadApiResultData The upload api result type CreateUploadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for IUploadApi (you must at least provide a base url thanks to the options builder) public static IApizrUploadManager CreateUploadManager(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder) Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrUploadManager CreateUploadManagerFor<TUploadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for the provided upload api derived from IUploadApi public static IApizrUploadManager<TUploadApi> CreateUploadManagerFor<TUploadApi>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<HttpResponseMessage> Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrUploadManager<TUploadApi> Type Parameters TUploadApi The upload api interface to manage CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for the provided upload api derived from IUploadApi public static IApizrUploadManager<TUploadApi, TUploadApiResultData> CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrUploadManager<TUploadApi, TUploadApiResultData> Type Parameters TUploadApi The upload api interface to manage TUploadApiResultData The upload api result type CreateUploadManagerWith<TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for the built-in upload api with TUploadApiResultData public static IApizrUploadManagerWith<TUploadApiResultData> CreateUploadManagerWith<TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters builder IApizrBuilder The builder to create the manager from optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrUploadManagerWith<TUploadApiResultData> Type Parameters TUploadApiResultData The upload api result type WithDynamicPath<T>(T, string) Tells Apizr to set the ending of the request uri with the provided path public static T WithDynamicPath<T>(this T builder, string dynamicPath) where T : IApizrRequestOptionsBuilderBase Parameters builder T dynamicPath string The path ending the request uri Returns T Type Parameters T WithProgress<TBuilder>(TBuilder) Enables transfer progress reporting with Apizr (you should provide a progress callback or reporter at request time) public static TBuilder WithProgress<TBuilder>(this TBuilder builder) where TBuilder : IApizrGlobalSharedOptionsBuilderBase Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder WithProgress<TBuilder>(TBuilder, IApizrProgress) Tells Apizr to report any transfer progress public static TBuilder WithProgress<TBuilder>(this TBuilder builder, IApizrProgress progress) where TBuilder : IApizrGlobalSharedOptionsBuilderBase Parameters builder TBuilder progress IApizrProgress The progress reporter Returns TBuilder Type Parameters TBuilder WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) Tells Apizr to report any transfer progress public static TBuilder WithProgress<TBuilder>(this TBuilder builder, Action<ApizrProgressEventArgs> onProgress) where TBuilder : IApizrGlobalSharedOptionsBuilderBase Parameters builder TBuilder onProgress Action<ApizrProgressEventArgs> The action called back on any progress Returns TBuilder Type Parameters TBuilder"
  },
  "api/Apizr.FusilladeOptionsBuilderExtensions.html": {
    "href": "api/Apizr.FusilladeOptionsBuilderExtensions.html",
    "title": "Class FusilladeOptionsBuilderExtensions | Apizr",
    "keywords": "Class FusilladeOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.Fusillade.dll Fusillade options builder extensions public static class FusilladeOptionsBuilderExtensions Inheritance object FusilladeOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithPriority<T>(T) Enables priority management with Apizr public static T WithPriority<T>(this T builder) where T : IApizrGlobalSharedRegistrationOptionsBuilderBase Parameters builder T Returns T Type Parameters T WithPriority<T>(T, Priority) Tells Apizr to manage request with a priority public static T WithPriority<T>(this T builder, Priority priority) where T : IApizrGlobalSharedOptionsBuilderBase Parameters builder T priority Priority The priority to manage the request with Returns T Type Parameters T WithPriority<T>(T, int) Tells Apizr to manage request with a priority public static T WithPriority<T>(this T builder, int priority) where T : IApizrGlobalSharedOptionsBuilderBase Parameters builder T priority int The priority to manage the request with Returns T Type Parameters T"
  },
  "api/Apizr.Helping.UrlHelper.html": {
    "href": "api/Apizr.Helping.UrlHelper.html",
    "title": "Class UrlHelper | Apizr",
    "keywords": "Class UrlHelper Namespace Apizr.Helping Assembly Apizr.dll Some url helpers public static class UrlHelper Inheritance object UrlHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Combine(string, string) Combines the url base and the relative url into one, consolidating the '/' between them public static string Combine(string baseUrl, string relativePath) Parameters baseUrl string Base url that will be combined relativePath string The relative path to combine Returns string The merged url Combine(string, params string[]) Combines the url base and the array of relatives urls into one, consolidating the '/' between them public static string Combine(string baseUrl, params string[] relativePaths) Parameters baseUrl string Base url that will be combined relativePaths string[] The array of relative paths to combine Returns string The merged url"
  },
  "api/Apizr.Helping.html": {
    "href": "api/Apizr.Helping.html",
    "title": "Namespace Apizr.Helping | Apizr",
    "keywords": "Namespace Apizr.Helping Classes UrlHelper Some url helpers"
  },
  "api/Apizr.IApizrBuilder.html": {
    "href": "api/Apizr.IApizrBuilder.html",
    "title": "Interface IApizrBuilder | Apizr",
    "keywords": "Interface IApizrBuilder Namespace Apizr Assembly Apizr.dll The builder public interface IApizrBuilder Extension Methods FileTransferOptionsBuilderExtensions.CreateDownloadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerWith<TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerWith<TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Methods CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The object type to manage with crud api calls (class) CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) TApizrManager CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters apizrManagerFactory Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> The custom manager implementation instance factory optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns TApizrManager Type Parameters T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance IApizrManager<TWebApi> CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns IApizrManager<TWebApi> Type Parameters TWebApi The web api interface to manage CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi TApizrManager CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters apizrManagerFactory Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, ILazyFactory<ResiliencePipelineRegistry<string>>, IApizrManagerOptions<TWebApi>, TApizrManager> The custom manager implementation instance factory optionsBuilder Action<IApizrManagerOptionsBuilder> The builder defining some options Returns TApizrManager Type Parameters TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation CreateRegistry(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options IApizrRegistry CreateRegistry(Action<IApizrRegistryBuilder> registryBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters registryBuilder Action<IApizrRegistryBuilder> The registry builder with access to proper options commonOptionsBuilder Action<IApizrCommonOptionsBuilder> The common options shared by all managers Returns IApizrRegistry"
  },
  "api/Apizr.IApizrExceptionHandler.html": {
    "href": "api/Apizr.IApizrExceptionHandler.html",
    "title": "Interface IApizrExceptionHandler | Apizr",
    "keywords": "Interface IApizrExceptionHandler Namespace Apizr Assembly Apizr.dll public interface IApizrExceptionHandler Methods HandleAsync(ApizrException) Task<bool> HandleAsync(ApizrException ex) Parameters ex ApizrException Returns Task<bool>"
  },
  "api/Apizr.IApizrManager-1.html": {
    "href": "api/Apizr.IApizrManager-1.html",
    "title": "Interface IApizrManager<TWebApi> | Apizr",
    "keywords": "Interface IApizrManager<TWebApi> Namespace Apizr Assembly Apizr.dll The manager encapsulating TWebApi's task public interface IApizrManager<TWebApi> : IApizrManager Type Parameters TWebApi The web api interface to manage Properties Api Original Refit Api without any Apizr management. You should use ExecuteAsync instead to get all the Apizr goodness :) TWebApi Api { get; } Property Value TWebApi Options Basic Apizr options IApizrManagerOptionsBase Options { get; } Property Value IApizrManagerOptionsBase Methods ClearCacheAsync(CancellationToken) Clear all cache Task<bool> ClearCacheAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A cancellation token Returns Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<ApiResponse<TResult>>>>, CancellationToken) Clear the cache of a specific request Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<ApiResponse<TResult>>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TResult>>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TResult The TWebApi's task result ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<IApiResponse<TResult>>>>, CancellationToken) Clear the cache of a specific request Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<IApiResponse<TResult>>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TResult>>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TResult The TWebApi's task result ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>>, CancellationToken) Clear the cache of a specific request Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default) Parameters executeApiMethod Expression<Func<TWebApi, Task<TResult>>> The specific TWebApi's task to clear cache for cancellationToken CancellationToken A cancellation token Returns Task<bool> Type Parameters TResult The TWebApi's task result ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task<IApizrResponse> ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task ExecuteAsync(Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task<IApizrResponse> ExecuteAsync(Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> ExecuteAsync(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task ExecuteAsync(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a response result Task<IApizrResponse<TApiData>> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi's task to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The TWebApi's task result ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<IApizrResponse> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelData>> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<IApizrResponse> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task Task ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model data type TApiData The api data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped response result Task<IApizrResponse<TModelResultData>> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi's task returning a mapped result Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type"
  },
  "api/Apizr.IApizrManager.html": {
    "href": "api/Apizr.IApizrManager.html",
    "title": "Interface IApizrManager | Apizr",
    "keywords": "Interface IApizrManager Namespace Apizr Assembly Apizr.dll The manager definition public interface IApizrManager"
  },
  "api/Apizr.IApizrResponse-1.html": {
    "href": "api/Apizr.IApizrResponse-1.html",
    "title": "Interface IApizrResponse<TResult> | Apizr",
    "keywords": "Interface IApizrResponse<TResult> Namespace Apizr Assembly Apizr.dll Interface used to represent an API response managed by Apizr. public interface IApizrResponse<out TResult> : IApizrResponse, IDisposable Type Parameters TResult Deserialized request content as TResult Inherited Members IApizrResponse.IsSuccess IApizrResponse.ApiResponse IApizrResponse.Exception IDisposable.Dispose() Extension Methods ApizrResponseExtensions.EnsureSuccessStatusCode(IApizrResponse) ApizrResponseExtensions.EnsureSuccessStatusCode<T>(IApizrResponse<T>) Properties DataSource The source of the result data (might be from the request or the cache). ApizrResponseDataSource DataSource { get; } Property Value ApizrResponseDataSource Result Deserialized request or cache content as TResult. TResult Result { get; } Property Value TResult"
  },
  "api/Apizr.IApizrResponse.html": {
    "href": "api/Apizr.IApizrResponse.html",
    "title": "Interface IApizrResponse | Apizr",
    "keywords": "Interface IApizrResponse Namespace Apizr Assembly Apizr.dll Base interface used to represent an API response managed by Apizr. public interface IApizrResponse : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ApizrResponseExtensions.EnsureSuccessStatusCode(IApizrResponse) Properties ApiResponse Base interface used to represent an API response. IApiResponse ApiResponse { get; } Property Value IApiResponse Exception The ApizrException object in case of unsuccessful response. ApizrException Exception { get; } Property Value ApizrException IsSuccess Indicates whether the request was successful. bool IsSuccess { get; } Property Value bool"
  },
  "api/Apizr.ILazyFactory-1.html": {
    "href": "api/Apizr.ILazyFactory-1.html",
    "title": "Interface ILazyFactory<TInstance> | Apizr",
    "keywords": "Interface ILazyFactory<TInstance> Namespace Apizr Assembly Apizr.dll A lazy instance public interface ILazyFactory<out TInstance> Type Parameters TInstance Type of your instance Properties Value The lazy instance TInstance Value { get; } Property Value TInstance"
  },
  "api/Apizr.InMemoryCacheHandler.html": {
    "href": "api/Apizr.InMemoryCacheHandler.html",
    "title": "Class InMemoryCacheHandler | Apizr",
    "keywords": "Class InMemoryCacheHandler Namespace Apizr Assembly Apizr.Extensions.Microsoft.Caching.dll InMemory cache handler implementation public class InMemoryCacheHandler : ICacheHandler Inheritance object InMemoryCacheHandler Implements ICacheHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InMemoryCacheHandler(IMemoryCache) public InMemoryCacheHandler(IMemoryCache memoryCache) Parameters memoryCache IMemoryCache Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method public Task ClearAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken An optional cancellation token Returns Task GetAsync<T>(string, CancellationToken) Map Apizr cache getting method to your cache handler method public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default) Parameters key string The key to get from cancellationToken CancellationToken An optional cancellation token Returns Task<T> Type Parameters T The expected value type RemoveAsync(string, CancellationToken) Map Apizr cache removing method to your cache handler method public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string The key to remove from cancellationToken CancellationToken An optional cancellation token Returns Task<bool> SetAsync(string, object, TimeSpan?, CancellationToken) Map Apizr cache saving method to your cache handler method public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default) Parameters key string The key to cache at value object The value to cache lifeSpan TimeSpan? The optional life span cancellationToken CancellationToken An optional cancellation token Returns Task"
  },
  "api/Apizr.LazyFactory-1.html": {
    "href": "api/Apizr.LazyFactory-1.html",
    "title": "Class LazyFactory<TInstance> | Apizr",
    "keywords": "Class LazyFactory<TInstance> Namespace Apizr Assembly Apizr.dll A lazy instance public class LazyFactory<TInstance> : Lazy<TInstance>, ILazyFactory<TInstance> Type Parameters TInstance Type of your instance Inheritance object Lazy<TInstance> LazyFactory<TInstance> Implements ILazyFactory<TInstance> Inherited Members Lazy<TInstance>.ToString() Lazy<TInstance>.IsValueCreated Lazy<TInstance>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LazyFactory(Func<object>) Lazy factory constructor public LazyFactory(Func<object> instanceFactory) Parameters instanceFactory Func<object> The factory to be lazy LazyFactory(Func<TInstance>) Lazy factory constructor public LazyFactory(Func<TInstance> instanceFactory) Parameters instanceFactory Func<TInstance> The factory to be lazy"
  },
  "api/Apizr.Logging.Attributes.LogAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogAttribute.html",
    "title": "Class LogAttribute | Apizr",
    "keywords": "Class LogAttribute Namespace Apizr.Logging.Attributes Assembly Apizr.dll Tells Apizr to trace and log HTTP(s) traffic [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface)] public class LogAttribute : LogAttributeBase Inheritance object Attribute LogAttributeBase LogAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogAttribute() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogAttribute() LogAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogAttribute(HttpMessageParts trafficVerbosity) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) LogAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogAttribute(HttpMessageParts, HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttribute(HttpMessageParts, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogAttribute(HttpTracerMode httpTracerMode) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogAttribute(HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttribute(params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogAttribute(params LogLevel[] logLevels) Parameters logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogAttributeBase.html": {
    "href": "api/Apizr.Logging.Attributes.LogAttributeBase.html",
    "title": "Class LogAttributeBase | Apizr",
    "keywords": "Class LogAttributeBase Namespace Apizr.Logging.Attributes Assembly Apizr.dll Tells Apizr to trace and log HTTP(s) traffic public abstract class LogAttributeBase : Attribute Inheritance object Attribute LogAttributeBase Derived LogAttribute LogCreateAttribute LogDeleteAttribute LogReadAllAttribute LogReadAttribute LogUpdateAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogAttributeBase() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) protected LogAttributeBase() LogAttributeBase(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) protected LogAttributeBase(HttpMessageParts trafficVerbosity) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) LogAttributeBase(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) protected LogAttributeBase(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogAttributeBase(HttpMessageParts, HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels protected LogAttributeBase(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(HttpMessageParts, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels protected LogAttributeBase(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) protected LogAttributeBase(HttpTracerMode httpTracerMode) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogAttributeBase(HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels protected LogAttributeBase(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels protected LogAttributeBase(params LogLevel[] logLevels) Parameters logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) Properties HttpTracerMode Http traffic tracing mode (default: Everything) public HttpTracerMode HttpTracerMode { get; set; } Property Value HttpTracerMode LogLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) public LogLevel[] LogLevels { get; } Property Value LogLevel[] TrafficVerbosity Http traffic tracing verbosity (default: All) public HttpMessageParts TrafficVerbosity { get; } Property Value HttpMessageParts"
  },
  "api/Apizr.Logging.Attributes.LogCreateAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogCreateAttribute.html",
    "title": "Class LogCreateAttribute | Apizr",
    "keywords": "Class LogCreateAttribute Namespace Apizr.Logging.Attributes Assembly Apizr.dll Tells Apizr to trace and log HTTP(s) traffic on Create method [AttributeUsage(AttributeTargets.Class)] public class LogCreateAttribute : LogAttributeBase Inheritance object Attribute LogAttributeBase LogCreateAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogCreateAttribute() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogCreateAttribute() LogCreateAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogCreateAttribute(HttpMessageParts trafficVerbosity) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) LogCreateAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogCreateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogCreateAttribute(HttpMessageParts, HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogCreateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogCreateAttribute(HttpMessageParts, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogCreateAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogCreateAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogCreateAttribute(HttpTracerMode httpTracerMode) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogCreateAttribute(HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogCreateAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogCreateAttribute(params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogCreateAttribute(params LogLevel[] logLevels) Parameters logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogDeleteAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogDeleteAttribute.html",
    "title": "Class LogDeleteAttribute | Apizr",
    "keywords": "Class LogDeleteAttribute Namespace Apizr.Logging.Attributes Assembly Apizr.dll Tells Apizr to trace and log HTTP(s) traffic on Delete method [AttributeUsage(AttributeTargets.Class)] public class LogDeleteAttribute : LogAttributeBase Inheritance object Attribute LogAttributeBase LogDeleteAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogDeleteAttribute() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogDeleteAttribute() LogDeleteAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogDeleteAttribute(HttpMessageParts trafficVerbosity) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) LogDeleteAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogDeleteAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogDeleteAttribute(HttpMessageParts, HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogDeleteAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogDeleteAttribute(HttpMessageParts, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogDeleteAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogDeleteAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogDeleteAttribute(HttpTracerMode httpTracerMode) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogDeleteAttribute(HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogDeleteAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogDeleteAttribute(params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogDeleteAttribute(params LogLevel[] logLevels) Parameters logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogReadAllAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogReadAllAttribute.html",
    "title": "Class LogReadAllAttribute | Apizr",
    "keywords": "Class LogReadAllAttribute Namespace Apizr.Logging.Attributes Assembly Apizr.dll Tells Apizr to trace and log HTTP(s) traffic on ReadAll method [AttributeUsage(AttributeTargets.Class)] public class LogReadAllAttribute : LogAttributeBase Inheritance object Attribute LogAttributeBase LogReadAllAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogReadAllAttribute() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAllAttribute() LogReadAllAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAllAttribute(HttpMessageParts trafficVerbosity) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) LogReadAllAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAllAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogReadAllAttribute(HttpMessageParts, HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAllAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAllAttribute(HttpMessageParts, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAllAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAllAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAllAttribute(HttpTracerMode httpTracerMode) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogReadAllAttribute(HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAllAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAllAttribute(params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAllAttribute(params LogLevel[] logLevels) Parameters logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogReadAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogReadAttribute.html",
    "title": "Class LogReadAttribute | Apizr",
    "keywords": "Class LogReadAttribute Namespace Apizr.Logging.Attributes Assembly Apizr.dll Tells Apizr to trace and log HTTP(s) traffic on Read method [AttributeUsage(AttributeTargets.Class)] public class LogReadAttribute : LogAttributeBase Inheritance object Attribute LogAttributeBase LogReadAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogReadAttribute() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAttribute() LogReadAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAttribute(HttpMessageParts trafficVerbosity) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) LogReadAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogReadAttribute(HttpMessageParts, HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAttribute(HttpMessageParts, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogReadAttribute(HttpTracerMode httpTracerMode) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogReadAttribute(HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAttribute(params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogReadAttribute(params LogLevel[] logLevels) Parameters logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogUpdateAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogUpdateAttribute.html",
    "title": "Class LogUpdateAttribute | Apizr",
    "keywords": "Class LogUpdateAttribute Namespace Apizr.Logging.Attributes Assembly Apizr.dll Tells Apizr to trace and log HTTP(s) traffic on Update method [AttributeUsage(AttributeTargets.Class)] public class LogUpdateAttribute : LogAttributeBase Inheritance object Attribute LogAttributeBase LogUpdateAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogUpdateAttribute() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogUpdateAttribute() LogUpdateAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogUpdateAttribute(HttpMessageParts trafficVerbosity) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) LogUpdateAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogUpdateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogUpdateAttribute(HttpMessageParts, HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogUpdateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogUpdateAttribute(HttpMessageParts, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogUpdateAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters trafficVerbosity HttpMessageParts Http traffic tracing verbosity (default: all) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogUpdateAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) public LogUpdateAttribute(HttpTracerMode httpTracerMode) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) LogUpdateAttribute(HttpTracerMode, params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogUpdateAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters httpTracerMode HttpTracerMode Http traffic tracing mode (default: Everything) logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogUpdateAttribute(params LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels public LogUpdateAttribute(params LogLevel[] logLevels) Parameters logLevels LogLevel[] Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.html": {
    "href": "api/Apizr.Logging.Attributes.html",
    "title": "Namespace Apizr.Logging.Attributes | Apizr",
    "keywords": "Namespace Apizr.Logging.Attributes Classes LogAttribute Tells Apizr to trace and log HTTP(s) traffic LogAttributeBase Tells Apizr to trace and log HTTP(s) traffic LogCreateAttribute Tells Apizr to trace and log HTTP(s) traffic on Create method LogDeleteAttribute Tells Apizr to trace and log HTTP(s) traffic on Delete method LogReadAllAttribute Tells Apizr to trace and log HTTP(s) traffic on ReadAll method LogReadAttribute Tells Apizr to trace and log HTTP(s) traffic on Read method LogUpdateAttribute Tells Apizr to trace and log HTTP(s) traffic on Update method"
  },
  "api/Apizr.Logging.ExtendedHttpHandlerBuilder.html": {
    "href": "api/Apizr.Logging.ExtendedHttpHandlerBuilder.html",
    "title": "Class ExtendedHttpHandlerBuilder | Apizr",
    "keywords": "Class ExtendedHttpHandlerBuilder Namespace Apizr.Logging Assembly Apizr.dll HttpHandler builder public class ExtendedHttpHandlerBuilder Inheritance object ExtendedHttpHandlerBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExtendedHttpHandlerBuilder(IApizrManagerOptionsBase) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. public ExtendedHttpHandlerBuilder(IApizrManagerOptionsBase apizrOptions) Parameters apizrOptions IApizrManagerOptionsBase ExtendedHttpHandlerBuilder(ExtendedHttpTracerHandler) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. public ExtendedHttpHandlerBuilder(ExtendedHttpTracerHandler tracerHandler) Parameters tracerHandler ExtendedHttpTracerHandler Tracer handler. ExtendedHttpHandlerBuilder(HttpClientHandler, IApizrManagerOptionsBase) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. public ExtendedHttpHandlerBuilder(HttpClientHandler innerHandler, IApizrManagerOptionsBase apizrOptions) Parameters innerHandler HttpClientHandler HttpClientHandler. apizrOptions IApizrManagerOptionsBase Properties HttpTracerHandler Underlying instance of the T:HttpTracer.HttpHandlerBuilder:HttpTracer.HttpHandlerBuilder class. public ExtendedHttpTracerHandler HttpTracerHandler { get; } Property Value ExtendedHttpTracerHandler Methods AddHandler(HttpMessageHandler) Adds a HttpMessageHandler to the chain of handlers. public ExtendedHttpHandlerBuilder AddHandler(HttpMessageHandler handler) Parameters handler HttpMessageHandler Returns ExtendedHttpHandlerBuilder Build() Adds DelegatingHandler as the last link of the chain. public DelegatingHandler Build() Returns DelegatingHandler"
  },
  "api/Apizr.Logging.ExtendedHttpTracerHandler.html": {
    "href": "api/Apizr.Logging.ExtendedHttpTracerHandler.html",
    "title": "Class ExtendedHttpTracerHandler | Apizr",
    "keywords": "Class ExtendedHttpTracerHandler Namespace Apizr.Logging Assembly Apizr.dll The Http tracer delegating handler public class ExtendedHttpTracerHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler ExtendedHttpTracerHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExtendedHttpTracerHandler(IApizrManagerOptionsBase) Constructs the ExtendedHttpTracerHandler with a custom ILogger and a custom HttpMessageHandler public ExtendedHttpTracerHandler(IApizrManagerOptionsBase apizrOptions) Parameters apizrOptions IApizrManagerOptionsBase Apizr options ExtendedHttpTracerHandler(HttpMessageHandler, IApizrManagerOptionsBase) Constructs the ExtendedHttpTracerHandler with a custom ILogger and a custom HttpMessageHandler public ExtendedHttpTracerHandler(HttpMessageHandler handler, IApizrManagerOptionsBase apizrOptions) Parameters handler HttpMessageHandler User defined HttpMessageHandler apizrOptions IApizrManagerOptionsBase Apizr options Fields LogMessageIndicatorPrefix public static string LogMessageIndicatorPrefix Field Value string LogMessageIndicatorSuffix public static string LogMessageIndicatorSuffix Field Value string Properties DefaultDurationFormat Duration string format. Defaults to \"Duration: {0:ss\\:fffffff}\" public static string DefaultDurationFormat { get; set; } Property Value string Remarks Receives a TimeSpan at the [0] index. See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings for more details on TimeSpan formatting. Methods GetRequestBody(HttpRequestMessage) Get the request body protected Task<string> GetRequestBody(HttpRequestMessage request) Parameters request HttpRequestMessage The request Returns Task<string> GetResponseBody(HttpResponseMessage) Get the response body protected Task<string> GetResponseBody(HttpResponseMessage response) Parameters response HttpResponseMessage The response Returns Task<string> LogHttpException(HttpRequestMessage, Exception, ILogger, LogLevel[]) Logs Http exceptions protected void LogHttpException(HttpRequestMessage request, Exception ex, ILogger logger, LogLevel[] logLevels) Parameters request HttpRequestMessage The request ex Exception The exception logger ILogger The logger logLevels LogLevel[] The log levels LogHttpRequest(HttpRequestMessage, ILogger, LogLevel[], HttpMessageParts, Func<string, bool>) Logs Http request protected virtual Task LogHttpRequest(HttpRequestMessage request, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity, Func<string, bool> shouldRedactHeaderValue) Parameters request HttpRequestMessage The request logger ILogger The logger logLevels LogLevel[] The log levels verbosity HttpMessageParts The verbosity shouldRedactHeaderValue Func<string, bool> Header values redaction rules Returns Task LogHttpResponse(HttpResponseMessage, TimeSpan, ILogger, LogLevel[], HttpMessageParts, Func<string, bool>) Logs Http response protected virtual Task LogHttpResponse(HttpResponseMessage response, TimeSpan duration, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity, Func<string, bool> shouldRedactHeaderValue) Parameters response HttpResponseMessage The response duration TimeSpan The duration logger ILogger The logger logLevels LogLevel[] The log levels verbosity HttpMessageParts The verbosity shouldRedactHeaderValue Func<string, bool> Header values redaction rules Returns Task SendAsync(HttpRequestMessage, CancellationToken) protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task<HttpResponseMessage>"
  },
  "api/Apizr.Logging.HttpMessageParts.html": {
    "href": "api/Apizr.Logging.HttpMessageParts.html",
    "title": "Enum HttpMessageParts | Apizr",
    "keywords": "Enum HttpMessageParts Namespace Apizr.Logging Assembly Apizr.dll Http message parts to log [Flags] public enum HttpMessageParts Extension Methods HttpMessagePartsExtensions.HasRequestFlags(HttpMessageParts) HttpMessagePartsExtensions.HasResponseFlags(HttpMessageParts) HttpMessagePartsExtensions.IgnoreMessageParts(HttpMessageParts, HttpMessageParts) Fields All = RequestBody | AllButRequestBody Logs all parts AllButBodies = ResponseHeaders | RequestAllButBody Logs all parts but bodies AllButRequestBody = ResponseBody | AllButBodies Logs all parts but request body AllButResponseBody = RequestBody | AllButBodies Logs all parts but response body HeadersOnly = RequestHeaders | ResponseHeaders Logs response body and headers only None = 2 Logs no parts RequestAll = RequestBody | RequestAllButBody Logs request body, headers and cookies only RequestAllButBody = RequestHeaders | RequestCookies Logs request headers and cookies only RequestBody = 4 Logs request body only RequestCookies = 64 Logs request cookies only RequestHeaders = 8 Logs request headers only ResponseAll = ResponseBody | ResponseHeaders Logs response body and headers only ResponseBody = 16 Logs response body only ResponseHeaders = 32 Logs response headers only Unspecified = 1 Unspecified"
  },
  "api/Apizr.Logging.HttpMessagePartsExtensions.html": {
    "href": "api/Apizr.Logging.HttpMessagePartsExtensions.html",
    "title": "Class HttpMessagePartsExtensions | Apizr",
    "keywords": "Class HttpMessagePartsExtensions Namespace Apizr.Logging Assembly Apizr.dll public static class HttpMessagePartsExtensions Inheritance object HttpMessagePartsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasRequestFlags(HttpMessageParts) public static bool HasRequestFlags(this HttpMessageParts parts) Parameters parts HttpMessageParts Returns bool HasResponseFlags(HttpMessageParts) public static bool HasResponseFlags(this HttpMessageParts parts) Parameters parts HttpMessageParts Returns bool IgnoreMessageParts(HttpMessageParts, HttpMessageParts) public static HttpMessageParts IgnoreMessageParts(this HttpMessageParts messageParts, HttpMessageParts partsToIgnore) Parameters messageParts HttpMessageParts partsToIgnore HttpMessageParts Returns HttpMessageParts IgnoreMessageParts<T>(Action<T>, HttpMessageParts) public static Action<T> IgnoreMessageParts<T>(this Action<T> optionsBuilder, HttpMessageParts messageParts) where T : IApizrGlobalSharedOptionsBuilderBase Parameters optionsBuilder Action<T> messageParts HttpMessageParts Returns Action<T> Type Parameters T IgnoreMessageParts<T>(T, HttpMessageParts) public static T IgnoreMessageParts<T>(this T optionsBuilder, HttpMessageParts messageParts) where T : IApizrGlobalSharedOptionsBuilderBase Parameters optionsBuilder T messageParts HttpMessageParts Returns T Type Parameters T"
  },
  "api/Apizr.Logging.HttpTracerMode.html": {
    "href": "api/Apizr.Logging.HttpTracerMode.html",
    "title": "Enum HttpTracerMode | Apizr",
    "keywords": "Enum HttpTracerMode Namespace Apizr.Logging Assembly Apizr.dll The Http tracer logging mode public enum HttpTracerMode Fields ErrorsAndExceptionsOnly = 2 Logs given parts only when an exception or an error occurs Everything = 3 Logs given parts anytime ExceptionsOnly = 1 Logs given parts only when an exception occurs Unspecified = 0"
  },
  "api/Apizr.Logging.html": {
    "href": "api/Apizr.Logging.html",
    "title": "Namespace Apizr.Logging | Apizr",
    "keywords": "Namespace Apizr.Logging Classes ExtendedHttpHandlerBuilder HttpHandler builder ExtendedHttpTracerHandler The Http tracer delegating handler HttpMessagePartsExtensions Enums HttpMessageParts Http message parts to log HttpTracerMode The Http tracer logging mode"
  },
  "api/Apizr.Mapping.IMappingHandler.html": {
    "href": "api/Apizr.Mapping.IMappingHandler.html",
    "title": "Interface IMappingHandler | Apizr",
    "keywords": "Interface IMappingHandler Namespace Apizr.Mapping Assembly Apizr.dll The mapping handler definition public interface IMappingHandler Methods Map(object, object, Type, Type) Execute a mapping from the source object to existing destination object with explicit Type objects object Map(object source, object destination, Type sourceType, Type destinationType) Parameters source object Source object to map from destination object Destination object to map into sourceType Type Source type to use destinationType Type Destination type to use Returns object Mapped destination object, same instance as the destination object Map(object, Type, Type) Execute a mapping from the source object to a new destination object with explicit Type objects object Map(object source, Type sourceType, Type destinationType) Parameters source object Source object to map from sourceType Type Source type to use destinationType Type Destination type to create Returns object Mapped destination object Map<TDestination>(object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. TDestination Map<TDestination>(object source) Parameters source object Source object to map from Returns TDestination Mapped destination object Type Parameters TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. TDestination Map<TSource, TDestination>(TSource source) Parameters source TSource Source object to map from Returns TDestination Mapped destination object Type Parameters TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters source TSource Source object to map from destination TDestination Destination object to map into Returns TDestination The mapped destination object, same instance as the destination object Type Parameters TSource Source type to use TDestination Destination type"
  },
  "api/Apizr.Mapping.MappedCrudEntityAttribute-1.html": {
    "href": "api/Apizr.Mapping.MappedCrudEntityAttribute-1.html",
    "title": "Class MappedCrudEntityAttribute<TApiEntity> | Apizr",
    "keywords": "Class MappedCrudEntityAttribute<TApiEntity> Namespace Apizr.Mapping Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class MappedCrudEntityAttribute<TApiEntity> : MappedCrudEntityAttribute Type Parameters TApiEntity The mapped api entity type Inheritance object Attribute CrudEntityAttribute MappedCrudEntityAttribute MappedCrudEntityAttribute<TApiEntity> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedCrudEntityAttribute(string) public MappedCrudEntityAttribute(string apiEntityBaseUri) Parameters apiEntityBaseUri string"
  },
  "api/Apizr.Mapping.MappedCrudEntityAttribute-2.html": {
    "href": "api/Apizr.Mapping.MappedCrudEntityAttribute-2.html",
    "title": "Class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey> | Apizr",
    "keywords": "Class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey> Namespace Apizr.Mapping Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey> : MappedCrudEntityAttribute Type Parameters TApiEntity The mapped api entity type TApiEntityKey The mapped api entity's crud key type (default: null = typeof(int)) Inheritance object Attribute CrudEntityAttribute MappedCrudEntityAttribute MappedCrudEntityAttribute<TApiEntity, TApiEntityKey> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedCrudEntityAttribute(string) public MappedCrudEntityAttribute(string apiEntityBaseUri) Parameters apiEntityBaseUri string"
  },
  "api/Apizr.Mapping.MappedCrudEntityAttribute-3.html": {
    "href": "api/Apizr.Mapping.MappedCrudEntityAttribute-3.html",
    "title": "Class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult> | Apizr",
    "keywords": "Class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult> Namespace Apizr.Mapping Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult> : MappedCrudEntityAttribute Type Parameters TApiEntity The mapped api entity type TApiEntityKey The mapped api entity's crud key type (default: null = typeof(int)) TApiEntityReadAllResult The mapped api entity \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) Inheritance object Attribute CrudEntityAttribute MappedCrudEntityAttribute MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedCrudEntityAttribute(string) public MappedCrudEntityAttribute(string apiEntityBaseUri) Parameters apiEntityBaseUri string"
  },
  "api/Apizr.Mapping.MappedCrudEntityAttribute-4.html": {
    "href": "api/Apizr.Mapping.MappedCrudEntityAttribute-4.html",
    "title": "Class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TApiEntityReadAllParams> | Apizr",
    "keywords": "Class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TApiEntityReadAllParams> Namespace Apizr.Mapping Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TApiEntityReadAllParams> : MappedCrudEntityAttribute Type Parameters TApiEntity The mapped api entity type TApiEntityKey The mapped api entity's crud key type (default: null = typeof(int)) TApiEntityReadAllResult The mapped api entity \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) TApiEntityReadAllParams The mapped api entity ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) Inheritance object Attribute CrudEntityAttribute MappedCrudEntityAttribute MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TApiEntityReadAllParams> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedCrudEntityAttribute(string) public MappedCrudEntityAttribute(string apiEntityBaseUri) Parameters apiEntityBaseUri string"
  },
  "api/Apizr.Mapping.MappedCrudEntityAttribute.html": {
    "href": "api/Apizr.Mapping.MappedCrudEntityAttribute.html",
    "title": "Class MappedCrudEntityAttribute | Apizr",
    "keywords": "Class MappedCrudEntityAttribute Namespace Apizr.Mapping Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class MappedCrudEntityAttribute : CrudEntityAttribute Inheritance object Attribute CrudEntityAttribute MappedCrudEntityAttribute Derived MappedCrudEntityAttribute<TApiEntity> MappedCrudEntityAttribute<TApiEntity, TApiEntityKey> MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult> MappedCrudEntityAttribute<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TApiEntityReadAllParams> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedCrudEntityAttribute(string, Type, Type, Type, Type) Define some crud api settings from this mapped model entity public MappedCrudEntityAttribute(string apiEntityBaseUri, Type apiEntityType, Type apiEntityKeyType = null, Type apiEntityReadAllResultType = null, Type apiEntityReadAllParamsType = null) Parameters apiEntityBaseUri string The mapped api entity's base crud uri apiEntityType Type The mapped api entity type apiEntityKeyType Type The mapped api entity's crud key type (default: null = typeof(int)) apiEntityReadAllResultType Type The mapped api entity \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) apiEntityReadAllParamsType Type The mapped api entity ReadAll query parameters type (default: null = typeof(IDictionary{string, object}))"
  },
  "api/Apizr.Mapping.MappedEntity-2.html": {
    "href": "api/Apizr.Mapping.MappedEntity-2.html",
    "title": "Class MappedEntity<TModelEntity, TApiEntity> | Apizr",
    "keywords": "Class MappedEntity<TModelEntity, TApiEntity> Namespace Apizr.Mapping Assembly Apizr.dll [AutoMapper integration required] Tells Apizr that Api entity is mapped with a model entity public class MappedEntity<TModelEntity, TApiEntity> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The friendly model entity to play with TApiEntity The real api entity used for requesting Inheritance object MappedEntity<TModelEntity, TApiEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Apizr.Mapping.MappedWithAttribute-1.html": {
    "href": "api/Apizr.Mapping.MappedWithAttribute-1.html",
    "title": "Class MappedWithAttribute<TSecondEntityType> | Apizr",
    "keywords": "Class MappedWithAttribute<TSecondEntityType> Namespace Apizr.Mapping Assembly Apizr.dll Tells Apizr to map api request object with model object public class MappedWithAttribute<TSecondEntityType> : MappedWithAttribute Type Parameters TSecondEntityType Inheritance object Attribute MappedWithAttribute MappedWithAttribute<TSecondEntityType> Inherited Members MappedWithAttribute.SecondEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedWithAttribute() public MappedWithAttribute()"
  },
  "api/Apizr.Mapping.MappedWithAttribute.html": {
    "href": "api/Apizr.Mapping.MappedWithAttribute.html",
    "title": "Class MappedWithAttribute | Apizr",
    "keywords": "Class MappedWithAttribute Namespace Apizr.Mapping Assembly Apizr.dll Tells Apizr to map api request object with model object [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Parameter)] public class MappedWithAttribute : Attribute Inheritance object Attribute MappedWithAttribute Derived MappedWithAttribute<TSecondEntityType> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MappedWithAttribute(Type) Tells Apizr to map api response to a model response public MappedWithAttribute(Type secondEntityType) Parameters secondEntityType Type Properties SecondEntityType The model object to map with public Type SecondEntityType { get; } Property Value Type"
  },
  "api/Apizr.Mapping.VoidMappingHandler.html": {
    "href": "api/Apizr.Mapping.VoidMappingHandler.html",
    "title": "Class VoidMappingHandler | Apizr",
    "keywords": "Class VoidMappingHandler Namespace Apizr.Mapping Assembly Apizr.dll Void mapping should never be used and will just be ignored public class VoidMappingHandler : IMappingHandler Inheritance object VoidMappingHandler Implements IMappingHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Map(object, object, Type, Type) Execute a mapping from the source object to existing destination object with explicit Type objects public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters source object Source object to map from destination object Destination object to map into sourceType Type Source type to use destinationType Type Destination type to use Returns object Mapped destination object, same instance as the destination object Map(object, Type, Type) Execute a mapping from the source object to a new destination object with explicit Type objects public object Map(object source, Type sourceType, Type destinationType) Parameters source object Source object to map from sourceType Type Source type to use destinationType Type Destination type to create Returns object Mapped destination object Map<TDestination>(object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. public TDestination Map<TDestination>(object source) Parameters source object Source object to map from Returns TDestination Mapped destination object Type Parameters TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. public TDestination Map<TSource, TDestination>(TSource source) Parameters source TSource Source object to map from Returns TDestination Mapped destination object Type Parameters TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters source TSource Source object to map from destination TDestination Destination object to map into Returns TDestination The mapped destination object, same instance as the destination object Type Parameters TSource Source type to use TDestination Destination type"
  },
  "api/Apizr.Mapping.html": {
    "href": "api/Apizr.Mapping.html",
    "title": "Namespace Apizr.Mapping | Apizr",
    "keywords": "Namespace Apizr.Mapping Classes MappedWithAttribute Tells Apizr to map api request object with model object MappedWithAttribute<TSecondEntityType> Tells Apizr to map api request object with model object VoidMappingHandler Void mapping should never be used and will just be ignored Interfaces IMappingHandler The mapping handler definition"
  },
  "api/Apizr.MapsterMappingHandler.html": {
    "href": "api/Apizr.MapsterMappingHandler.html",
    "title": "Class MapsterMappingHandler | Apizr",
    "keywords": "Class MapsterMappingHandler Namespace Apizr Assembly Apizr.Integrations.Mapster.dll Mapster mapping handler implementation public class MapsterMappingHandler : IMappingHandler Inheritance object MapsterMappingHandler Implements IMappingHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapsterMappingHandler(IMapper) public MapsterMappingHandler(IMapper mapper) Parameters mapper IMapper Methods Map(object, object, Type, Type) Execute a mapping from the source object to existing destination object with explicit Type objects public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters source object Source object to map from destination object Destination object to map into sourceType Type Source type to use destinationType Type Destination type to use Returns object Mapped destination object, same instance as the destination object Map(object, Type, Type) Execute a mapping from the source object to a new destination object with explicit Type objects public object Map(object source, Type sourceType, Type destinationType) Parameters source object Source object to map from sourceType Type Source type to use destinationType Type Destination type to create Returns object Mapped destination object Map<TDestination>(object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. public TDestination Map<TDestination>(object source) Parameters source object Source object to map from Returns TDestination Mapped destination object Type Parameters TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. public TDestination Map<TSource, TDestination>(TSource source) Parameters source TSource Source object to map from Returns TDestination Mapped destination object Type Parameters TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters source TSource Source object to map from destination TDestination Destination object to map into Returns TDestination The mapped destination object, same instance as the destination object Type Parameters TSource Source type to use TDestination Destination type"
  },
  "api/Apizr.MapsterOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MapsterOptionsBuilderExtensions.html",
    "title": "Class MapsterOptionsBuilderExtensions | Apizr",
    "keywords": "Class MapsterOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.Mapster.dll Mapster options builder extensions public static class MapsterOptionsBuilderExtensions Inheritance object MapsterOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithMapsterMappingHandler<TBuilder>(TBuilder) Set Mapster as MappingHandler public static TBuilder WithMapsterMappingHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilderBase Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper) Set Mapster as MappingHandler public static TBuilder WithMapsterMappingHandler<TBuilder>(this TBuilder builder, IMapper mapper) where TBuilder : IApizrCommonOptionsBuilderBase Parameters builder TBuilder mapper IMapper Returns TBuilder Type Parameters TBuilder"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-1.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-1.html",
    "title": "Interface IMediationCommand<TRequestData> | Apizr",
    "keywords": "Interface IMediationCommand<TRequestData> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll A mediation command sending a request public interface IMediationCommand<out TRequestData> : IRequest<Unit>, IBaseRequest Type Parameters TRequestData The api request type"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-2.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-2.html",
    "title": "Interface IMediationCommand<TRequestData, TResultData> | Apizr",
    "keywords": "Interface IMediationCommand<TRequestData, TResultData> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll A mediation command sending a request and returning a result public interface IMediationCommand<out TRequestData, out TResultData> : IRequest<TResultData>, IBaseRequest Type Parameters TRequestData The api request type TResultData The api result type"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-4.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-4.html",
    "title": "Interface IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Interface IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll A mediation command sending mapped request and returning a mapped result public interface IMediationCommand<out TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : IRequest<TModelResultData>, IBaseRequest Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand.html",
    "title": "Interface IMediationCommand | Apizr",
    "keywords": "Interface IMediationCommand Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll A mediation command public interface IMediationCommand : IRequest<Unit>, IBaseRequest"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommandHandler-1.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommandHandler-1.html",
    "title": "Interface IMediationCommandHandler<TCommand> | Apizr",
    "keywords": "Interface IMediationCommandHandler<TCommand> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll The mediation command handler public interface IMediationCommandHandler<in TCommand> : IMediationCommandHandler<TCommand, Unit>, IRequestHandler<TCommand, Unit> where TCommand : IRequest<Unit> Type Parameters TCommand The handled command type Inherited Members IRequestHandler<TCommand, Unit>.Handle(TCommand, CancellationToken)"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommandHandler-2.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommandHandler-2.html",
    "title": "Interface IMediationCommandHandler<TCommand, TResponse> | Apizr",
    "keywords": "Interface IMediationCommandHandler<TCommand, TResponse> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll The mediation command handler public interface IMediationCommandHandler<in TCommand, TResponse> : IRequestHandler<TCommand, TResponse> where TCommand : IRequest<TResponse> Type Parameters TCommand The handled command type TResponse The response type Inherited Members IRequestHandler<TCommand, TResponse>.Handle(TCommand, CancellationToken)"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-2.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-2.html",
    "title": "Class MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll The top level base mediation command public abstract class MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand IRequest<Unit> IBaseRequest Inherited Members RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) The base request constructor protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-3.html",
    "title": "Class MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll The top level base mediation command public abstract class MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TRequestData The api request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TRequestData> IRequest<Unit> IBaseRequest Inherited Members RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) The base request constructor protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-4.html",
    "title": "Class MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll The top level base mediation command public abstract class MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TRequestData The api request type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TRequestData, TResultData> IRequest<TResultData> IBaseRequest Derived CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UploadCommand<TUploadApi, TUploadApiResultData> UploadOptionalCommand<TUploadApi, TUploadApiResultData> Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) The base request constructor protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-6.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-6.html",
    "title": "Class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Commanding Assembly Apizr.Integrations.MediatR.dll The top level base mediation command public abstract class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IRequest<TModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> IRequest<TModelResultData> IBaseRequest Inherited Members RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) The base request constructor protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Commanding.html": {
    "href": "api/Apizr.Mediation.Commanding.html",
    "title": "Namespace Apizr.Mediation.Commanding | Apizr",
    "keywords": "Namespace Apizr.Mediation.Commanding Classes MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command Interfaces IMediationCommand A mediation command IMediationCommandHandler<TCommand> The mediation command handler IMediationCommandHandler<TCommand, TResponse> The mediation command handler IMediationCommand<TRequestData> A mediation command sending a request IMediationCommand<TRequestData, TResultData> A mediation command sending a request and returning a result IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> A mediation command sending mapped request and returning a mapped result"
  },
  "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry.html",
    "title": "Class ApizrMediationRegistry | Apizr",
    "keywords": "Class ApizrMediationRegistry Namespace Apizr.Mediation.Configuring.Registry Assembly Apizr.Integrations.MediatR.dll Registry options available for extended registrations with mediation public class ApizrMediationRegistry : ApizrMediationRegistryBase, IApizrMediationConcurrentRegistry, IApizrMediationRegistry, IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Inheritance object ApizrMediationRegistryBase ApizrMediationRegistry Implements IApizrMediationConcurrentRegistry IApizrMediationRegistry IApizrMediationEnumerableRegistry IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>> IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrMediationRegistryBase.ConcurrentRegistry ApizrMediationRegistryBase.GetEnumerator() ApizrMediationRegistryBase.GetCrudMediatorFor<T>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey, TReadAllResult>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrMediationRegistryBase.GetMediatorFor<TWebApi>() ApizrMediationRegistryBase.TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) ApizrMediationRegistryBase.TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) ApizrMediationRegistryBase.Count ApizrMediationRegistryBase.ContainsCrudMediatorFor<T>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrMediationRegistryBase.ContainsMediatorFor<TWebApi>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOrUpdateManager(Type) public void AddOrUpdateManager(Type managerType) Parameters managerType Type"
  },
  "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.html",
    "title": "Class ApizrMediationRegistryBase | Apizr",
    "keywords": "Class ApizrMediationRegistryBase Namespace Apizr.Mediation.Configuring.Registry Assembly Apizr.Integrations.MediatR.dll Registry options available for extended registrations with mediation public abstract class ApizrMediationRegistryBase : IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Inheritance object ApizrMediationRegistryBase Implements IApizrMediationEnumerableRegistry IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>> IEnumerable Derived ApizrMediationRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrMediationRegistryBase() protected ApizrMediationRegistryBase() Fields ConcurrentRegistry protected readonly IDictionary<Type, Func<IApizrMediatorBase>> ConcurrentRegistry Field Value IDictionary<Type, Func<IApizrMediatorBase>> Properties Count Mediators count public int Count { get; } Property Value int Methods ContainsCrudMediatorFor<T>() Check if registry contains a mediator for T entity type public bool ContainsCrudMediatorFor<T>() where T : class Returns bool Type Parameters T The entity type to manage ContainsCrudMediatorFor<T, TKey>() Check if registry contains a mediator for T entity type with TKey key type public bool ContainsCrudMediatorFor<T, TKey>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type ContainsCrudMediatorFor<T, TKey, TReadAllResult>() Check if registry contains a mediator for T entity type with TKey key type and TReadAllResult ReadAll result type public bool ContainsCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type public bool ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsMediatorFor<TWebApi>() Check if registry contains a mediator for TWebApi api type public bool ContainsMediatorFor<TWebApi>() Returns bool Type Parameters TWebApi The api type GetCrudMediatorFor<T>() Get a Crud mediator instance for an entity type public IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T>() where T : class Returns IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type GetCrudMediatorFor<T, TKey>() Get a Crud mediator instance for an entity type with a specific key type public IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T, TKey>() where T : class Returns IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type GetCrudMediatorFor<T, TKey, TReadAllResult>() Get a Crud mediator instance for an entity type with a specific key type and ReadAll result type public IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type public IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetEnumerator() Get factory enumerator public IEnumerator<KeyValuePair<Type, Func<IApizrMediatorBase>>> GetEnumerator() Returns IEnumerator<KeyValuePair<Type, Func<IApizrMediatorBase>>> GetMediatorFor<TWebApi>() Get an api mediator instance public IApizrMediator<TWebApi> GetMediatorFor<TWebApi>() Returns IApizrMediator<TWebApi> Type Parameters TWebApi The managed api type TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud mediator instance for an entity type public bool TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud mediator instance for an entity type with a specific key type public bool TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) Try to get a Crud mediator instance for an entity type with a specific key type and ReadAll result type public bool TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type public bool TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters mediator IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) Try to get an api mediator instance public bool TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi> mediator) Parameters mediator IApizrMediator<TWebApi> Returns bool Type Parameters TWebApi The managed api type"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationConcurrentRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationConcurrentRegistry.html",
    "title": "Interface IApizrMediationConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrMediationConcurrentRegistry Namespace Apizr.Mediation.Configuring.Registry Assembly Apizr.Integrations.MediatR.dll Registry options available for extended registrations with mediation public interface IApizrMediationConcurrentRegistry : IApizrMediationRegistry, IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Inherited Members IApizrMediationEnumerableRegistry.Count IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.ContainsMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.GetMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrMediationEnumerableRegistry.TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>.GetEnumerator() IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdateManager(Type)"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.html",
    "title": "Interface IApizrMediationEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrMediationEnumerableRegistry Namespace Apizr.Mediation.Configuring.Registry Assembly Apizr.Integrations.MediatR.dll Registry options available for extended registrations with mediation public interface IApizrMediationEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Inherited Members IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>.GetEnumerator() IEnumerable.GetEnumerator() Properties Count Mediators count int Count { get; } Property Value int Methods ContainsCrudMediatorFor<T>() Check if registry contains a mediator for T entity type bool ContainsCrudMediatorFor<T>() where T : class Returns bool Type Parameters T The entity type to manage ContainsCrudMediatorFor<T, TKey>() Check if registry contains a mediator for T entity type with TKey key type bool ContainsCrudMediatorFor<T, TKey>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type ContainsCrudMediatorFor<T, TKey, TReadAllResult>() Check if registry contains a mediator for T entity type with TKey key type and TReadAllResult ReadAll result type bool ContainsCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type bool ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsMediatorFor<TWebApi>() Check if registry contains a mediator for TWebApi api type bool ContainsMediatorFor<TWebApi>() Returns bool Type Parameters TWebApi The api type GetCrudMediatorFor<T>() Get a Crud mediator instance for an entity type IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T>() where T : class Returns IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type GetCrudMediatorFor<T, TKey>() Get a Crud mediator instance for an entity type with a specific key type IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T, TKey>() where T : class Returns IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type GetCrudMediatorFor<T, TKey, TReadAllResult>() Get a Crud mediator instance for an entity type with a specific key type and ReadAll result type IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetMediatorFor<TWebApi>() Get an api mediator instance IApizrMediator<TWebApi> GetMediatorFor<TWebApi>() Returns IApizrMediator<TWebApi> Type Parameters TWebApi The managed api type TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud mediator instance for an entity type bool TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud mediator instance for an entity type with a specific key type bool TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) Try to get a Crud mediator instance for an entity type with a specific key type and ReadAll result type bool TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type bool TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters mediator IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) Try to get an api mediator instance bool TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi> mediator) Parameters mediator IApizrMediator<TWebApi> Returns bool Type Parameters TWebApi The managed api type"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry.html",
    "title": "Interface IApizrMediationRegistry | Apizr",
    "keywords": "Interface IApizrMediationRegistry Namespace Apizr.Mediation.Configuring.Registry Assembly Apizr.Integrations.MediatR.dll Registry options available for extended registrations with mediation public interface IApizrMediationRegistry : IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Inherited Members IApizrMediationEnumerableRegistry.Count IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.ContainsMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.GetMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrMediationEnumerableRegistry.TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>.GetEnumerator() IEnumerable.GetEnumerator()"
  },
  "api/Apizr.Mediation.Configuring.Registry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.html",
    "title": "Namespace Apizr.Mediation.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Mediation.Configuring.Registry Classes ApizrMediationRegistry Registry options available for extended registrations with mediation ApizrMediationRegistryBase Registry options available for extended registrations with mediation Interfaces IApizrMediationConcurrentRegistry Registry options available for extended registrations with mediation IApizrMediationEnumerableRegistry Registry options available for extended registrations with mediation IApizrMediationRegistry Registry options available for extended registrations with mediation"
  },
  "api/Apizr.Mediation.Cruding.Base.CreateCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.CreateCommandBase-4.html",
    "title": "Class CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Create command public abstract class CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TRequestData The api request type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TRequestData, TResultData> IRequest<TResultData> IBaseRequest Derived CreateCommand<TModelData> SafeCreateCommand<TModelData> CreateOptionalCommand<TModelData> Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateCommandBase(TRequestData, Action<TApizrRequestOptionsBuilder>) protected CreateCommandBase(TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters requestData TRequestData The api request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties RequestData The request data to send public TRequestData RequestData { get; } Property Value TRequestData"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-3.html",
    "title": "Class DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Delete command public abstract class DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> : DeleteCommandBase<T, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<int, Unit>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters T The api entity type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<int, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, int, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<int, Unit> IRequest<Unit> IBaseRequest Derived DeleteCommand<T> Inherited Members DeleteCommandBase<T, int, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommandBase(int, Action<TApizrRequestOptionsBuilder>) The top level base mediation Delete command constructor protected DeleteCommandBase(int key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-4.html",
    "title": "Class DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Delete command public abstract class DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : DeleteCommandBase<T, int, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<int, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters T The api entity type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<int, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, int, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<int, TResultData> IRequest<TResultData> IBaseRequest Derived DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> SafeDeleteCommand<T> DeleteOptionalCommand<T> Inherited Members DeleteCommandBase<T, int, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommandBase(int, Action<TApizrRequestOptionsBuilder>) The top level base mediation Delete command constructor protected DeleteCommandBase(int key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-5.html",
    "title": "Class DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Delete command public abstract class DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationCommandBase<TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TKey, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters T The api entity type TKey The entity's crud key type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TKey, TResultData> IRequest<TResultData> IBaseRequest Derived DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommand<T, TKey> SafeDeleteCommand<T, TKey> DeleteOptionalCommand<T, TKey> Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommandBase(TKey, Action<TApizrRequestOptionsBuilder>) The top level base mediation Delete command constructor protected DeleteCommandBase(TKey key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties Key The entity's crud key public TKey Key { get; } Property Value TKey"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-3.html",
    "title": "Class ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation ReadAll query public abstract class ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ReadAllQueryBase<IDictionary<string, object>, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TReadAllResult The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase<IDictionary<string, object>, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQuery<TReadAllResult> IRequest<TReadAllResult> IBaseRequest Derived ReadAllQuery<TReadAllResult> SafeReadAllQuery<TReadAllResult> ReadAllOptionalQuery<TReadAllResult> Inherited Members ReadAllQueryBase<IDictionary<string, object>, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Parameters RequestBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQueryBase(IDictionary<string, object>, Action<TApizrRequestOptionsBuilder>) The top level base mediation ReadAll query constructor protected ReadAllQueryBase(IDictionary<string, object> parameters, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters IDictionary<string, object> The query parameters to send optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-4.html",
    "title": "Class ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation ReadAll query public abstract class ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TReadAllParams The ReadAll parameters type TReadAllResult The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQuery<TReadAllResult> IRequest<TReadAllResult> IBaseRequest Derived ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQuery<TReadAllParams, TReadAllResult> SafeReadAllQuery<TReadAllParams, TReadAllResult> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Inherited Members RequestBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQueryBase(TReadAllParams, Action<TApizrRequestOptionsBuilder>) The top level base mediation ReadAll query constructor protected ReadAllQueryBase(TReadAllParams parameters, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters TReadAllParams The query parameters to send optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties Parameters The query parameters to send public TReadAllParams Parameters { get; } Property Value TReadAllParams"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-3.html",
    "title": "Class ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Read query public abstract class ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ReadQueryBase<TResponse, int, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TResponse>, IRequest<TResponse>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TResponse The result entity type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, int, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQuery<TResponse> IRequest<TResponse> IBaseRequest Derived ReadQuery<TResultData> SafeReadQuery<TResultData> ReadOptionalQuery<TResultData> Inherited Members ReadQueryBase<TResponse, int, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key RequestBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQueryBase(int, Action<TApizrRequestOptionsBuilder>) The top level base mediation Read query protected ReadQueryBase(int key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-4.html",
    "title": "Class ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Read query public abstract class ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TResponse>, IRequest<TResponse>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TResponse The result entity type TKey The entity's crud key type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQuery<TResponse> IRequest<TResponse> IBaseRequest Derived ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQuery<TResultData, TKey> SafeReadQuery<TResultData, TKey> ReadOptionalQuery<TResultData, TKey> Inherited Members RequestBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQueryBase(TKey, Action<TApizrRequestOptionsBuilder>) The top level base mediation Read query protected ReadQueryBase(TKey key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties Key The entity's crud key public TKey Key { get; } Property Value TKey"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-3.html",
    "title": "Class UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Update command public abstract class UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : UpdateCommandBase<TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TRequestData The request data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<int, TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TRequestData, Unit> IRequest<Unit> IBaseRequest Derived UpdateCommand<TRequestData> Inherited Members UpdateCommandBase<int, TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key UpdateCommandBase<int, TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.RequestData RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandBase(int, TRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation Update command constructor protected UpdateCommandBase(int key, TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-4.html",
    "title": "Class UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Update command public abstract class UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : UpdateCommandBase<int, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TRequestData The request data type TResultData The result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<int, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TRequestData, TResultData> IRequest<TResultData> IBaseRequest Derived UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> SafeUpdateCommand<TRequestData> UpdateOptionalCommand<TRequestData> Inherited Members UpdateCommandBase<int, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key UpdateCommandBase<int, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.RequestData RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandBase(int, TRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation Update command constructor protected UpdateCommandBase(int key, TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-5.html",
    "title": "Class UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation Update command public abstract class UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TKey The entity's crud key type TRequestData The request data type TResultData The result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand<TRequestData, TResultData> IRequest<TResultData> IBaseRequest Derived UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> SafeUpdateCommand<TKey, TRequestData> UpdateCommand<TKey, TRequestData> UpdateOptionalCommand<TKey, TRequestData> Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandBase(TKey, TRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation Update command constructor protected UpdateCommandBase(TKey key, TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties Key The entity's crud key public TKey Key { get; } Property Value TKey RequestData The request data to send public TRequestData RequestData { get; } Property Value TRequestData"
  },
  "api/Apizr.Mediation.Cruding.Base.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.html",
    "title": "Namespace Apizr.Mediation.Cruding.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Base Classes CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Create command DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation ReadAll query ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation ReadAll query ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Read query ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Read query UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command"
  },
  "api/Apizr.Mediation.Cruding.CreateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.CreateCommand-1.html",
    "title": "Class CreateCommand<TModelData> | Apizr",
    "keywords": "Class CreateCommand<TModelData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Create command public class CreateCommand<TModelData> : CreateCommandBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TModelData, TModelData>, IRequest<TModelData>, IBaseRequest Type Parameters TModelData The data type Inheritance object RequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommandBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommand<TModelData> Implements IMediationCommand<TModelData, TModelData> IRequest<TModelData> IBaseRequest Inherited Members CreateCommandBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateCommand(TModelData, Action<IApizrRequestOptionsBuilder>) The mediation Create command constructor public CreateCommand(TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters modelData TModelData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.DeleteCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.DeleteCommand-1.html",
    "title": "Class DeleteCommand<T> | Apizr",
    "keywords": "Class DeleteCommand<T> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Delete command public class DeleteCommand<T> : DeleteCommandBase<T, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<int, Unit>, IRequest<Unit>, IBaseRequest Type Parameters T The api entity type Inheritance object RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<int, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, int, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommand<T> Implements IMediationCommand<int, Unit> IRequest<Unit> IBaseRequest Inherited Members DeleteCommandBase<T, int, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommand(int, Action<IApizrRequestOptionsBuilder>) The mediation Delete command constructor public DeleteCommand(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.DeleteCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.DeleteCommand-2.html",
    "title": "Class DeleteCommand<T, TKey> | Apizr",
    "keywords": "Class DeleteCommand<T, TKey> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Delete command public class DeleteCommand<T, TKey> : DeleteCommandBase<T, TKey, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TKey, Unit>, IRequest<Unit>, IBaseRequest Type Parameters T The api entity type TKey The entity's crud key type Inheritance object RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TKey, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, TKey, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommand<T, TKey> Implements IMediationCommand<TKey, Unit> IRequest<Unit> IBaseRequest Inherited Members DeleteCommandBase<T, TKey, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommand(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Delete command constructor public DeleteCommand(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase-9.html",
    "title": "Class CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Create command handler public abstract class CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : CreateCommandBase<TModelEntity, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params TCommand The command to handle TCommandResult The command result to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommandHandler<TCommand, TCommandResult> IRequestHandler<TCommand, TCommandResult> Derived CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> SafeCreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) protected CreateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(TCommand, CancellationToken) Handling the Create command public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters request TCommand The Create command cancellationToken CancellationToken A cancellation token Returns Task<TCommandResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.CrudRequestHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.CrudRequestHandlerBase-6.html",
    "title": "Class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base CRUD request handler public abstract class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApiEntity : class where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> Derived CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudRequestHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) protected CrudRequestHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Fields CrudApiManager protected readonly IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> CrudApiManager Field Value IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-8.html",
    "title": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Delete command handler public abstract class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : DeleteCommandBase<TModelEntity, int, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params TCommand The command to handle TCommandResult The command result to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommandHandler<TCommand, TCommandResult> IRequestHandler<TCommand, TCommandResult> Derived DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> SafeDeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) protected DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(TCommand, CancellationToken) Handling the Delete command public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters request TCommand The Delete command cancellationToken CancellationToken A cancellation token Returns Task<TCommandResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-9.html",
    "title": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Delete command handler public abstract class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : DeleteCommandBase<TModelEntity, TApiEntityKey, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TCommandResult The command result type to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommandHandler<TCommand, TCommandResult> IRequestHandler<TCommand, TCommandResult> Derived DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> SafeDeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) protected DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(TCommand, CancellationToken) Handling the Delete command public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters request TCommand The Delete command cancellationToken CancellationToken A cancellation token Returns Task<TCommandResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-8.html",
    "title": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base ReadAll query handler public abstract class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadAllQueryBase<TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQueryHandler<TQuery, TQueryResult> IRequestHandler<TQuery, TQueryResult> Derived ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>>) protected ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> Methods Handle(TQuery, CancellationToken) Handling the ReadAll query public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters request TQuery The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<TQueryResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-9.html",
    "title": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base ReadAll query handler public abstract class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadAllQueryBase<TReadAllParams, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type TReadAllParams The query parameters type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQueryHandler<TQuery, TQueryResult> IRequestHandler<TQuery, TQueryResult> Derived ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>>) protected ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> Methods Handle(TQuery, CancellationToken) Handling the ReadAll query public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters request TQuery The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<TQueryResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-8.html",
    "title": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Read query handler public abstract class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadQueryBase<TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQueryHandler<TQuery, TQueryResult> IRequestHandler<TQuery, TQueryResult> Derived ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> SafeReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) protected ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(TQuery, CancellationToken) Handling the Read query public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters request TQuery The Read query cancellationToken CancellationToken A cancellation token Returns Task<TQueryResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-9.html",
    "title": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Read query handler public abstract class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TModelEntity : class where TApiEntity : class where TQuery : ReadQueryBase<TQueryResult, TApiEntityKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQueryHandler<TQuery, TQueryResult> IRequestHandler<TQuery, TQueryResult> Derived ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> SafeReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) protected ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(TQuery, CancellationToken) Handling the Read query public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters request TQuery The Read query cancellationToken CancellationToken A cancellation token Returns Task<TQueryResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-7.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Update command handler public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, Unit>, IRequestHandler<TCommand, Unit> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<int, TModelEntity, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommandHandler<TCommand, Unit> IRequestHandler<TCommand, Unit> Derived UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(TCommand, CancellationToken) Handling the Update command public abstract Task<Unit> Handle(TCommand request, CancellationToken cancellationToken) Parameters request TCommand The Update command cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-8.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Update command handler public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<int, TModelEntity, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TCommandResult The command result type to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommandHandler<TCommand, TCommandResult> IRequestHandler<TCommand, TCommandResult> Derived SafeUpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(TCommand, CancellationToken) Handling the Update command public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters request TCommand The Update command cancellationToken CancellationToken A cancellation token Returns Task<TCommandResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-9.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Cruding.Handling.Base Assembly Apizr.Integrations.MediatR.dll The base Update command handler public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<TApiEntityKey, TModelEntity, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TCommandResult The command result type to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommandHandler<TCommand, TCommandResult> IRequestHandler<TCommand, TCommandResult> Derived SafeUpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(TCommand, CancellationToken) Handling the Update command public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters request TCommand The Update command cancellationToken CancellationToken A cancellation token Returns Task<TCommandResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.html",
    "title": "Namespace Apizr.Mediation.Cruding.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Handling.Base Classes CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Create command handler CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base CRUD request handler DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Delete command handler DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Delete command handler ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base ReadAll query handler ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base ReadAll query handler ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Read query handler ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Read query handler UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler"
  },
  "api/Apizr.Mediation.Cruding.Handling.CreateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.CreateCommandHandler-5.html",
    "title": "Class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Create command handler public class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<CreateCommand<TModelEntity>, TModelEntity>, IRequestHandler<CreateCommand<TModelEntity>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<CreateCommand<TModelEntity>, TModelEntity> IRequestHandler<CreateCommand<TModelEntity>, TModelEntity> Inherited Members CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(CreateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public CreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(CreateCommand<TModelEntity>, CancellationToken) Handling the Create command public override Task<TModelEntity> Handle(CreateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request CreateCommand<TModelEntity> The Create command cancellationToken CancellationToken A cancellation token Returns Task<TModelEntity>"
  },
  "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-4.html",
    "title": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Delete command handler public class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteCommand<TModelEntity>, Unit>, IRequestHandler<DeleteCommand<TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<DeleteCommand<TModelEntity>, Unit> IRequestHandler<DeleteCommand<TModelEntity>, Unit> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(DeleteCommand<TModelEntity>, CancellationToken) Handling the Delete command public override Task<Unit> Handle(DeleteCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request DeleteCommand<TModelEntity> The Delete command cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-5.html",
    "title": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Delete command handler public class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity, TApiEntityKey>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit>, IRequestHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity, TApiEntityKey>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit> IRequestHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity, TApiEntityKey>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(DeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Delete command public override Task<Unit> Handle(DeleteCommand<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters request DeleteCommand<TModelEntity, TApiEntityKey> The Delete command cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-4.html",
    "title": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> | Apizr",
    "keywords": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The ReadAll query handler public class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery<TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult>, IRequestHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult> where TApiEntity : class Type Parameters TApiEntity TApiEntityKey The api entity type TModelReadAllResult The returned model result type TApiReadAllResult The received api result type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery<TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> Implements IMediationQueryHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult> IRequestHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery<TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllQuery<TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>>) public ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>> Methods Handle(ReadAllQuery<TModelReadAllResult>, CancellationToken) Handling the ReadAll query public override Task<TModelReadAllResult> Handle(ReadAllQuery<TModelReadAllResult> request, CancellationToken cancellationToken) Parameters request ReadAllQuery<TModelReadAllResult> The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<TModelReadAllResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-5.html",
    "title": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The ReadAll query handler public class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult>, IRequestHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult> where TApiEntity : class Type Parameters TApiEntity TApiEntityKey The api entity type TModelReadAllResult The returned model result type TApiReadAllResult The received api result type TReadAllParams The query parameters type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> Implements IMediationQueryHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult> IRequestHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>>) public ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> Methods Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) Handling the ReadAll query public override Task<TModelReadAllResult> Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult> request, CancellationToken cancellationToken) Parameters request ReadAllQuery<TReadAllParams, TModelReadAllResult> The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<TModelReadAllResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-4.html",
    "title": "Class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Read query handler public class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadQuery<TModelEntity>, TModelEntity>, IRequestHandler<ReadQuery<TModelEntity>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler<ReadQuery<TModelEntity>, TModelEntity> IRequestHandler<ReadQuery<TModelEntity>, TModelEntity> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadQuery<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(ReadQuery<TModelEntity>, CancellationToken) Handling the Read query public override Task<TModelEntity> Handle(ReadQuery<TModelEntity> request, CancellationToken cancellationToken) Parameters request ReadQuery<TModelEntity> The Read query cancellationToken CancellationToken A cancellation token Returns Task<TModelEntity>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-5.html",
    "title": "Class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Read query handler public class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity>, IRequestHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity> IRequestHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(ReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Read query public override Task<TModelEntity> Handle(ReadQuery<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters request ReadQuery<TModelEntity, TApiEntityKey> The Read query cancellationToken CancellationToken A cancellation token Returns Task<TModelEntity>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeCreateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeCreateCommandHandler-5.html",
    "title": "Class SafeCreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeCreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Create command handler public class SafeCreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeCreateCommand<TModelEntity>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<SafeCreateCommand<TModelEntity>, IApizrResponse<TModelEntity>>, IRequestHandler<SafeCreateCommand<TModelEntity>, IApizrResponse<TModelEntity>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeCreateCommand<TModelEntity>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeCreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<SafeCreateCommand<TModelEntity>, IApizrResponse<TModelEntity>> IRequestHandler<SafeCreateCommand<TModelEntity>, IApizrResponse<TModelEntity>> Inherited Members CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeCreateCommand<TModelEntity>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeCreateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeCreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public SafeCreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(SafeCreateCommand<TModelEntity>, CancellationToken) Handling the Create command public override Task<IApizrResponse<TModelEntity>> Handle(SafeCreateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request SafeCreateCommand<TModelEntity> The Create command cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TModelEntity>>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeDeleteCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeDeleteCommandHandler-4.html",
    "title": "Class SafeDeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeDeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Delete command handler public class SafeDeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeDeleteCommand<TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<SafeDeleteCommand<TModelEntity>, IApizrResponse>, IRequestHandler<SafeDeleteCommand<TModelEntity>, IApizrResponse> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeDeleteCommand<TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeDeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<SafeDeleteCommand<TModelEntity>, IApizrResponse> IRequestHandler<SafeDeleteCommand<TModelEntity>, IApizrResponse> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeDeleteCommand<TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeDeleteCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeDeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public SafeDeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(SafeDeleteCommand<TModelEntity>, CancellationToken) Handling the Delete command public override Task<IApizrResponse> Handle(SafeDeleteCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request SafeDeleteCommand<TModelEntity> The Delete command cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeDeleteCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeDeleteCommandHandler-5.html",
    "title": "Class SafeDeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeDeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Delete command handler public class SafeDeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeDeleteCommand<TModelEntity, TApiEntityKey>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<SafeDeleteCommand<TModelEntity, TApiEntityKey>, IApizrResponse>, IRequestHandler<SafeDeleteCommand<TModelEntity, TApiEntityKey>, IApizrResponse> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeDeleteCommand<TModelEntity, TApiEntityKey>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeDeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<SafeDeleteCommand<TModelEntity, TApiEntityKey>, IApizrResponse> IRequestHandler<SafeDeleteCommand<TModelEntity, TApiEntityKey>, IApizrResponse> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeDeleteCommand<TModelEntity, TApiEntityKey>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeDeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeDeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public SafeDeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(SafeDeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Delete command public override Task<IApizrResponse> Handle(SafeDeleteCommand<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters request SafeDeleteCommand<TModelEntity, TApiEntityKey> The Delete command cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeReadAllQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeReadAllQueryHandler-4.html",
    "title": "Class SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> | Apizr",
    "keywords": "Class SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The ReadAll query handler public class SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, SafeReadAllQuery<TModelReadAllResult>, IApizrResponse<TModelReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<SafeReadAllQuery<TModelReadAllResult>, IApizrResponse<TModelReadAllResult>>, IRequestHandler<SafeReadAllQuery<TModelReadAllResult>, IApizrResponse<TModelReadAllResult>> where TApiEntity : class Type Parameters TApiEntity TApiEntityKey The api entity type TModelReadAllResult The returned model result type TApiReadAllResult The received api result type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, SafeReadAllQuery<TModelReadAllResult>, IApizrResponse<TModelReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> Implements IMediationQueryHandler<SafeReadAllQuery<TModelReadAllResult>, IApizrResponse<TModelReadAllResult>> IRequestHandler<SafeReadAllQuery<TModelReadAllResult>, IApizrResponse<TModelReadAllResult>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, SafeReadAllQuery<TModelReadAllResult>, IApizrResponse<TModelReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeReadAllQuery<TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>>) public SafeReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>> Methods Handle(SafeReadAllQuery<TModelReadAllResult>, CancellationToken) Handling the ReadAll query public override Task<IApizrResponse<TModelReadAllResult>> Handle(SafeReadAllQuery<TModelReadAllResult> request, CancellationToken cancellationToken) Parameters request SafeReadAllQuery<TModelReadAllResult> The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TModelReadAllResult>>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeReadAllQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeReadAllQueryHandler-5.html",
    "title": "Class SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The ReadAll query handler public class SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, IApizrResponse<TModelReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, IApizrResponse<TModelReadAllResult>>, IRequestHandler<SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, IApizrResponse<TModelReadAllResult>> where TApiEntity : class Type Parameters TApiEntity TApiEntityKey The api entity type TModelReadAllResult The returned model result type TApiReadAllResult The received api result type TReadAllParams The query parameters type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, IApizrResponse<TModelReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> Implements IMediationQueryHandler<SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, IApizrResponse<TModelReadAllResult>> IRequestHandler<SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, IApizrResponse<TModelReadAllResult>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, IApizrResponse<TModelReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>>) public SafeReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> Methods Handle(SafeReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) Handling the ReadAll query public override Task<IApizrResponse<TModelReadAllResult>> Handle(SafeReadAllQuery<TReadAllParams, TModelReadAllResult> request, CancellationToken cancellationToken) Parameters request SafeReadAllQuery<TReadAllParams, TModelReadAllResult> The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TModelReadAllResult>>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeReadQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeReadQueryHandler-4.html",
    "title": "Class SafeReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Read query handler public class SafeReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeReadQuery<TModelEntity>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<SafeReadQuery<TModelEntity>, IApizrResponse<TModelEntity>>, IRequestHandler<SafeReadQuery<TModelEntity>, IApizrResponse<TModelEntity>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeReadQuery<TModelEntity>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler<SafeReadQuery<TModelEntity>, IApizrResponse<TModelEntity>> IRequestHandler<SafeReadQuery<TModelEntity>, IApizrResponse<TModelEntity>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeReadQuery<TModelEntity>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeReadQuery<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public SafeReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(SafeReadQuery<TModelEntity>, CancellationToken) Handling the Read query public override Task<IApizrResponse<TModelEntity>> Handle(SafeReadQuery<TModelEntity> request, CancellationToken cancellationToken) Parameters request SafeReadQuery<TModelEntity> The Read query cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TModelEntity>>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeReadQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeReadQueryHandler-5.html",
    "title": "Class SafeReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Read query handler public class SafeReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeReadQuery<TModelEntity, TApiEntityKey>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<SafeReadQuery<TModelEntity, TApiEntityKey>, IApizrResponse<TModelEntity>>, IRequestHandler<SafeReadQuery<TModelEntity, TApiEntityKey>, IApizrResponse<TModelEntity>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeReadQuery<TModelEntity, TApiEntityKey>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler<SafeReadQuery<TModelEntity, TApiEntityKey>, IApizrResponse<TModelEntity>> IRequestHandler<SafeReadQuery<TModelEntity, TApiEntityKey>, IApizrResponse<TModelEntity>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeReadQuery<TModelEntity, TApiEntityKey>, IApizrResponse<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public SafeReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(SafeReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Read query public override Task<IApizrResponse<TModelEntity>> Handle(SafeReadQuery<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters request SafeReadQuery<TModelEntity, TApiEntityKey> The Read query cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TModelEntity>>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeUpdateCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeUpdateCommandHandler-4.html",
    "title": "Class SafeUpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeUpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Update command handler public class SafeUpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeUpdateCommand<TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<SafeUpdateCommand<TModelEntity>, IApizrResponse>, IRequestHandler<SafeUpdateCommand<TModelEntity>, IApizrResponse> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeUpdateCommand<TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeUpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<SafeUpdateCommand<TModelEntity>, IApizrResponse> IRequestHandler<SafeUpdateCommand<TModelEntity>, IApizrResponse> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, SafeUpdateCommand<TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeUpdateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeUpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public SafeUpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(SafeUpdateCommand<TModelEntity>, CancellationToken) Handling the Update command public override Task<IApizrResponse> Handle(SafeUpdateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request SafeUpdateCommand<TModelEntity> The Update command cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.SafeUpdateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.SafeUpdateCommandHandler-5.html",
    "title": "Class SafeUpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class SafeUpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Update command handler public class SafeUpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeUpdateCommand<TApiEntityKey, TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<SafeUpdateCommand<TApiEntityKey, TModelEntity>, IApizrResponse>, IRequestHandler<SafeUpdateCommand<TApiEntityKey, TModelEntity>, IApizrResponse> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeUpdateCommand<TApiEntityKey, TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeUpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<SafeUpdateCommand<TApiEntityKey, TModelEntity>, IApizrResponse> IRequestHandler<SafeUpdateCommand<TApiEntityKey, TModelEntity>, IApizrResponse> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, SafeUpdateCommand<TApiEntityKey, TModelEntity>, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(SafeUpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeUpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public SafeUpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(SafeUpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) Handling the Update command public override Task<IApizrResponse> Handle(SafeUpdateCommand<TApiEntityKey, TModelEntity> request, CancellationToken cancellationToken) Parameters request SafeUpdateCommand<TApiEntityKey, TModelEntity> The Update command cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-4.html",
    "title": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Update command handler public class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateCommand<TModelEntity>, Unit>, IRequestHandler<UpdateCommand<TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<UpdateCommand<TModelEntity>, Unit> IRequestHandler<UpdateCommand<TModelEntity>, Unit> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(UpdateCommand<TModelEntity>, CancellationToken) Handling the Update command public override Task<Unit> Handle(UpdateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request UpdateCommand<TModelEntity> The Update command cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-5.html",
    "title": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Handling Assembly Apizr.Integrations.MediatR.dll The Update command handler public class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand<TApiEntityKey, TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit>, IRequestHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand<TApiEntityKey, TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit> IRequestHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand<TApiEntityKey, TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(UpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) Handling the Update command public override Task<Unit> Handle(UpdateCommand<TApiEntityKey, TModelEntity> request, CancellationToken cancellationToken) Parameters request UpdateCommand<TApiEntityKey, TModelEntity> The Update command cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Cruding.Handling.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.html",
    "title": "Namespace Apizr.Mediation.Cruding.Handling | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Handling Classes CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Create command handler DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Delete command handler DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Delete command handler ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> The ReadAll query handler ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> The ReadAll query handler ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Read query handler ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Read query handler SafeCreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Create command handler SafeDeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Delete command handler SafeDeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Delete command handler SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> The ReadAll query handler SafeReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> The ReadAll query handler SafeReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Read query handler SafeReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Read query handler SafeUpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Update command handler SafeUpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Update command handler UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Update command handler UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Update command handler"
  },
  "api/Apizr.Mediation.Cruding.ReadAllQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadAllQuery-1.html",
    "title": "Class ReadAllQuery<TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQuery<TReadAllResult> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation ReadAll query public class ReadAllQuery<TReadAllResult> : ReadAllQueryBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters TReadAllResult The api result type Inheritance object RequestBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<IDictionary<string, object>, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQuery<TReadAllResult> Implements IMediationQuery<TReadAllResult> IRequest<TReadAllResult> IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<string, object>, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public ReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ReadAllQuery(IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public ReadAllQuery(IDictionary<string, object> parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters IDictionary<string, object> The query parameters to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.ReadAllQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadAllQuery-2.html",
    "title": "Class ReadAllQuery<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQuery<TReadAllParams, TReadAllResult> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation ReadAll query public class ReadAllQuery<TReadAllParams, TReadAllResult> : ReadAllQueryBase<TReadAllParams, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters TReadAllParams The ReadAll parameters type TReadAllResult The api result type Inheritance object RequestBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllParams, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery<TReadAllResult> IRequest<TReadAllResult> IBaseRequest Inherited Members ReadAllQueryBase<TReadAllParams, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public ReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public ReadAllQuery(TReadAllParams parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters TReadAllParams The query parameters to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.ReadQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadQuery-1.html",
    "title": "Class ReadQuery<TResultData> | Apizr",
    "keywords": "Class ReadQuery<TResultData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Read query public class ReadQuery<TResultData> : ReadQueryBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters TResultData The result entity type Inheritance object RequestBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<TResultData, int, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQuery<TResultData> Implements IMediationQuery<TResultData> IRequest<TResultData> IBaseRequest Inherited Members ReadQueryBase<TResultData, int, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQuery(int, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public ReadQuery(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.ReadQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadQuery-2.html",
    "title": "Class ReadQuery<TResultData, TKey> | Apizr",
    "keywords": "Class ReadQuery<TResultData, TKey> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Read query public class ReadQuery<TResultData, TKey> : ReadQueryBase<TResultData, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters TResultData The result entity type TKey The entity's crud key type Inheritance object RequestBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<TResultData, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQuery<TResultData, TKey> Implements IMediationQuery<TResultData> IRequest<TResultData> IBaseRequest Inherited Members ReadQueryBase<TResultData, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadQuery(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public ReadQuery(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeCreateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeCreateCommand-1.html",
    "title": "Class SafeCreateCommand<TModelData> | Apizr",
    "keywords": "Class SafeCreateCommand<TModelData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Create command public class SafeCreateCommand<TModelData> : CreateCommandBase<TModelData, IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TModelData, IApizrResponse<TModelData>>, IRequest<IApizrResponse<TModelData>>, IBaseRequest Type Parameters TModelData The data type Inheritance object RequestBase<IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TModelData, IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommandBase<TModelData, IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeCreateCommand<TModelData> Implements IMediationCommand<TModelData, IApizrResponse<TModelData>> IRequest<IApizrResponse<TModelData>> IBaseRequest Inherited Members CreateCommandBase<TModelData, IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeCreateCommand(TModelData, Action<IApizrRequestOptionsBuilder>) The mediation Create command constructor public SafeCreateCommand(TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters modelData TModelData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeDeleteCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeDeleteCommand-1.html",
    "title": "Class SafeDeleteCommand<T> | Apizr",
    "keywords": "Class SafeDeleteCommand<T> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Delete command public class SafeDeleteCommand<T> : DeleteCommandBase<T, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<int, IApizrResponse>, IRequest<IApizrResponse>, IBaseRequest Type Parameters T The api entity type Inheritance object RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<int, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, int, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeDeleteCommand<T> Implements IMediationCommand<int, IApizrResponse> IRequest<IApizrResponse> IBaseRequest Inherited Members DeleteCommandBase<T, int, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeDeleteCommand(int, Action<IApizrRequestOptionsBuilder>) The mediation Delete command constructor public SafeDeleteCommand(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeDeleteCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeDeleteCommand-2.html",
    "title": "Class SafeDeleteCommand<T, TKey> | Apizr",
    "keywords": "Class SafeDeleteCommand<T, TKey> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Delete command public class SafeDeleteCommand<T, TKey> : DeleteCommandBase<T, TKey, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TKey, IApizrResponse>, IRequest<IApizrResponse>, IBaseRequest Type Parameters T The api entity type TKey The entity's crud key type Inheritance object RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TKey, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, TKey, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeDeleteCommand<T, TKey> Implements IMediationCommand<TKey, IApizrResponse> IRequest<IApizrResponse> IBaseRequest Inherited Members DeleteCommandBase<T, TKey, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeDeleteCommand(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Delete command constructor public SafeDeleteCommand(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeReadAllQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeReadAllQuery-1.html",
    "title": "Class SafeReadAllQuery<TReadAllResult> | Apizr",
    "keywords": "Class SafeReadAllQuery<TReadAllResult> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation ReadAll query public class SafeReadAllQuery<TReadAllResult> : ReadAllQueryBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<IApizrResponse<TReadAllResult>>, IRequest<IApizrResponse<TReadAllResult>>, IBaseRequest Type Parameters TReadAllResult The api result type Inheritance object RequestBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<IDictionary<string, object>, IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadAllQuery<TReadAllResult> Implements IMediationQuery<IApizrResponse<TReadAllResult>> IRequest<IApizrResponse<TReadAllResult>> IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<string, object>, IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadAllQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public SafeReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request SafeReadAllQuery(IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public SafeReadAllQuery(IDictionary<string, object> parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters IDictionary<string, object> The query parameters to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeReadAllQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeReadAllQuery-2.html",
    "title": "Class SafeReadAllQuery<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class SafeReadAllQuery<TReadAllParams, TReadAllResult> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation ReadAll query public class SafeReadAllQuery<TReadAllParams, TReadAllResult> : ReadAllQueryBase<TReadAllParams, IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<IApizrResponse<TReadAllResult>>, IRequest<IApizrResponse<TReadAllResult>>, IBaseRequest Type Parameters TReadAllParams The ReadAll parameters type TReadAllResult The api result type Inheritance object RequestBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllParams, IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadAllQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery<IApizrResponse<TReadAllResult>> IRequest<IApizrResponse<TReadAllResult>> IBaseRequest Inherited Members ReadAllQueryBase<TReadAllParams, IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<IApizrResponse<TReadAllResult>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadAllQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public SafeReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request SafeReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor public SafeReadAllQuery(TReadAllParams parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters TReadAllParams The query parameters to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeReadQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeReadQuery-1.html",
    "title": "Class SafeReadQuery<TResultData> | Apizr",
    "keywords": "Class SafeReadQuery<TResultData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Read query public class SafeReadQuery<TResultData> : ReadQueryBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<IApizrResponse<TResultData>>, IRequest<IApizrResponse<TResultData>>, IBaseRequest Type Parameters TResultData The result entity type Inheritance object RequestBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<IApizrResponse<TResultData>, int, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadQuery<TResultData> Implements IMediationQuery<IApizrResponse<TResultData>> IRequest<IApizrResponse<TResultData>> IBaseRequest Inherited Members ReadQueryBase<IApizrResponse<TResultData>, int, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadQuery(int, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public SafeReadQuery(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeReadQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeReadQuery-2.html",
    "title": "Class SafeReadQuery<TResultData, TKey> | Apizr",
    "keywords": "Class SafeReadQuery<TResultData, TKey> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Read query public class SafeReadQuery<TResultData, TKey> : ReadQueryBase<IApizrResponse<TResultData>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<IApizrResponse<TResultData>>, IRequest<IApizrResponse<TResultData>>, IBaseRequest Type Parameters TResultData The result entity type TKey The entity's crud key type Inheritance object RequestBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<IApizrResponse<TResultData>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeReadQuery<TResultData, TKey> Implements IMediationQuery<IApizrResponse<TResultData>> IRequest<IApizrResponse<TResultData>> IBaseRequest Inherited Members ReadQueryBase<IApizrResponse<TResultData>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<IApizrResponse<TResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadQuery(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public SafeReadQuery(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeUpdateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeUpdateCommand-1.html",
    "title": "Class SafeUpdateCommand<TRequestData> | Apizr",
    "keywords": "Class SafeUpdateCommand<TRequestData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Update command public class SafeUpdateCommand<TRequestData> : UpdateCommandBase<TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, IApizrResponse>, IRequest<IApizrResponse>, IBaseRequest Type Parameters TRequestData The request data type Inheritance object RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<int, TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeUpdateCommand<TRequestData> Implements IMediationCommand<TRequestData, IApizrResponse> IRequest<IApizrResponse> IBaseRequest Inherited Members UpdateCommandBase<int, TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<int, TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeUpdateCommand(int, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update command constructor public SafeUpdateCommand(int key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.SafeUpdateCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.SafeUpdateCommand-2.html",
    "title": "Class SafeUpdateCommand<TKey, TRequestData> | Apizr",
    "keywords": "Class SafeUpdateCommand<TKey, TRequestData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Update command public class SafeUpdateCommand<TKey, TRequestData> : UpdateCommandBase<TKey, TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, IApizrResponse>, IRequest<IApizrResponse>, IBaseRequest Type Parameters TKey The entity's crud key type TRequestData The request data type Inheritance object RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<TKey, TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> SafeUpdateCommand<TKey, TRequestData> Implements IMediationCommand<TRequestData, IApizrResponse> IRequest<IApizrResponse> IBaseRequest Inherited Members UpdateCommandBase<TKey, TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<TKey, TRequestData, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeUpdateCommand(TKey, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update command constructor public SafeUpdateCommand(TKey key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator-4.html",
    "title": "Class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Sending Assembly Apizr.Integrations.MediatR.dll Apizr mediator dedicated to cruding public class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters TApiEntity TApiEntityKey TReadAllResult TReadAllParams Inheritance object ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudMediatorBase IApizrMediatorBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrCrudMediator(IApizrCrudMediator) public ApizrCrudMediator(IApizrCrudMediator apizrMediator) Parameters apizrMediator IApizrCrudMediator Methods SendCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR public Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> SendCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result public Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity SendDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR public Task SendDeleteCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendReadAllQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<TReadAllResult> SendReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> SendReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> SendReadAllQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult SendReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR public Task<TApiEntity> SendReadQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> SendReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity SendSafeCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeCreateCommand<TModelData> to Apizr using MediatR public Task<IApizrResponse<TApiEntity>> SendSafeCreateCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> SendSafeCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeCreateCommand<TModelData> to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelEntity>> SendSafeCreateCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity SendSafeDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeDeleteCommand<T, TKey> to Apizr using MediatR public Task<IApizrResponse> SendSafeDeleteCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendSafeReadAllQuery(Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result public Task<IApizrResponse<TModelEntityReadAllResult>> SendSafeReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntityReadAllResult>> Type Parameters TModelEntityReadAllResult The mapped result SendSafeReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelEntityReadAllResult>> SendSafeReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntityReadAllResult>> Type Parameters TModelEntityReadAllResult SendSafeReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR public Task<IApizrResponse<TApiEntity>> SendSafeReadQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> SendSafeReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelEntity>> SendSafeReadQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity SendSafeUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task<IApizrResponse> SendSafeUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendSafeUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task<IApizrResponse> SendSafeUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelEntity SendUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelEntity"
  },
  "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.html",
    "title": "Class ApizrCrudMediator | Apizr",
    "keywords": "Class ApizrCrudMediator Namespace Apizr.Mediation.Cruding.Sending Assembly Apizr.Integrations.MediatR.dll Apizr mediator dedicated to cruding public class ApizrCrudMediator : ApizrMediatorBase, IApizrCrudMediator, IApizrCrudMediatorBase, IApizrMediatorBase Inheritance object ApizrMediatorBase ApizrCrudMediator Implements IApizrCrudMediator IApizrCrudMediatorBase IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrCrudMediator(IMediator) public ApizrCrudMediator(IMediator mediator) Parameters mediator IMediator Methods SendCreateCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR public Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> Type Parameters TApiEntity The api entity type SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result public Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR public Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> Type Parameters TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult The model result type to map to TReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> Type Parameters TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult The model result type to map to TReadAllResult TReadAllParams The ReadAll parameters type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendSafeCreateCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeCreateCommand<TModelData> to Apizr using MediatR public Task<IApizrResponse<TApiEntity>> SendSafeCreateCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> Type Parameters TApiEntity The api entity type SendSafeCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeCreateCommand<TModelData> to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelEntity>> SendSafeCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendSafeDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeDeleteCommand<T, TKey> to Apizr using MediatR public Task<IApizrResponse> SendSafeDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendSafeReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> Type Parameters TReadAllResult The \"ReadAll\" query result type SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result public Task<IApizrResponse<TModelReadAllResult>> SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelReadAllResult>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendSafeReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR public Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> Type Parameters TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelReadAllResult>> SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelReadAllResult>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendSafeReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR public Task<IApizrResponse<TApiEntity>> SendSafeReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendSafeReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelEntity>> SendSafeReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendSafeUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task<IApizrResponse> SendSafeUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendSafeUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task<IApizrResponse> SendSafeUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR public Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html",
    "title": "Interface IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Mediation.Cruding.Sending Assembly Apizr.Integrations.MediatR.dll Apizr mediator dedicated to TApiEntity cruding, getting all shorter public interface IApizrCrudMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters TApiEntity TApiEntityKey TReadAllResult TReadAllParams Methods SendCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> SendCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity SendDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Task SendDeleteCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendReadAllQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Task<TReadAllResult> SendReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> SendReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntityReadAllResult> Type Parameters TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntityReadAllResult> Type Parameters TModelEntityReadAllResult SendReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Task<TApiEntity> SendReadQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> SendReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity SendSafeCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeCreateCommand<TModelData> to Apizr using MediatR Task<IApizrResponse<TApiEntity>> SendSafeCreateCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> SendSafeCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeCreateCommand<TModelData> to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelEntity>> SendSafeCreateCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity SendSafeDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeDeleteCommand<T, TKey> to Apizr using MediatR Task<IApizrResponse> SendSafeDeleteCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendSafeReadAllQuery(Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Task<IApizrResponse<TModelEntityReadAllResult>> SendSafeReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntityReadAllResult>> Type Parameters TModelEntityReadAllResult The mapped result SendSafeReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelEntityReadAllResult>> SendSafeReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntityReadAllResult>> Type Parameters TModelEntityReadAllResult SendSafeReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR Task<IApizrResponse<TApiEntity>> SendSafeReadQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> SendSafeReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelEntity>> SendSafeReadQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity SendSafeUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR Task<IApizrResponse> SendSafeUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendSafeUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR Task<IApizrResponse> SendSafeUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelEntity SendUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelEntity"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.html",
    "title": "Interface IApizrCrudMediator | Apizr",
    "keywords": "Interface IApizrCrudMediator Namespace Apizr.Mediation.Cruding.Sending Assembly Apizr.Integrations.MediatR.dll Apizr mediator dedicated to cruding public interface IApizrCrudMediator : IApizrCrudMediatorBase, IApizrMediatorBase Methods SendCreateCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> Type Parameters TApiEntity The api entity type SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> Type Parameters TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TReadAllResult> Type Parameters TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelReadAllResult> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiEntity> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelEntity> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendSafeCreateCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeCreateCommand<TModelData> to Apizr using MediatR Task<IApizrResponse<TApiEntity>> SendSafeCreateCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> Type Parameters TApiEntity The api entity type SendSafeCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeCreateCommand<TModelData> to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelEntity>> SendSafeCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendSafeDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeDeleteCommand<T, TKey> to Apizr using MediatR Task<IApizrResponse> SendSafeDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendSafeReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> Type Parameters TReadAllResult The \"ReadAll\" query result type SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Task<IApizrResponse<TModelReadAllResult>> SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelReadAllResult>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendSafeReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a SafeReadAllQuery<TReadAllResult> to Apizr using MediatR Task<IApizrResponse<TReadAllResult>> SendSafeReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TReadAllResult>> Type Parameters TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelReadAllResult>> SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelReadAllResult>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendSafeReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR Task<IApizrResponse<TApiEntity>> SendSafeReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiEntity>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendSafeReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a SafeReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelEntity>> SendSafeReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelEntity>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendSafeUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR Task<IApizrResponse> SendSafeUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendSafeUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped SafeUpdateCommand<TKey, TRequestData> to Apizr using MediatR Task<IApizrResponse> SendSafeUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediatorBase.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediatorBase.html",
    "title": "Interface IApizrCrudMediatorBase | Apizr",
    "keywords": "Interface IApizrCrudMediatorBase Namespace Apizr.Mediation.Cruding.Sending Assembly Apizr.Integrations.MediatR.dll Apizr base mediator dedicated to cruding public interface IApizrCrudMediatorBase : IApizrMediatorBase"
  },
  "api/Apizr.Mediation.Cruding.Sending.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.html",
    "title": "Namespace Apizr.Mediation.Cruding.Sending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Sending Classes ApizrCrudMediator Apizr mediator dedicated to cruding ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to cruding Interfaces IApizrCrudMediator Apizr mediator dedicated to cruding IApizrCrudMediatorBase Apizr base mediator dedicated to cruding IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to TApiEntity cruding, getting all shorter"
  },
  "api/Apizr.Mediation.Cruding.UpdateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.UpdateCommand-1.html",
    "title": "Class UpdateCommand<TRequestData> | Apizr",
    "keywords": "Class UpdateCommand<TRequestData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Update command public class UpdateCommand<TRequestData> : UpdateCommandBase<TRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest Type Parameters TRequestData The request data type Inheritance object RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<int, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommand<TRequestData> Implements IMediationCommand<TRequestData, Unit> IRequest<Unit> IBaseRequest Inherited Members UpdateCommandBase<int, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<int, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommand(int, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update command constructor public UpdateCommand(int key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.UpdateCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.UpdateCommand-2.html",
    "title": "Class UpdateCommand<TKey, TRequestData> | Apizr",
    "keywords": "Class UpdateCommand<TKey, TRequestData> Namespace Apizr.Mediation.Cruding Assembly Apizr.Integrations.MediatR.dll The mediation Update command public class UpdateCommand<TKey, TRequestData> : UpdateCommandBase<TKey, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest Type Parameters TKey The entity's crud key type TRequestData The request data type Inheritance object RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<TKey, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommand<TKey, TRequestData> Implements IMediationCommand<TRequestData, Unit> IRequest<Unit> IBaseRequest Inherited Members UpdateCommandBase<TKey, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<TKey, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateCommand(TKey, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update command constructor public UpdateCommand(TKey key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Cruding.html": {
    "href": "api/Apizr.Mediation.Cruding.html",
    "title": "Namespace Apizr.Mediation.Cruding | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding Classes CreateCommand<TModelData> The mediation Create command DeleteCommand<T> The mediation Delete command DeleteCommand<T, TKey> The mediation Delete command ReadAllQuery<TReadAllResult> The mediation ReadAll query ReadAllQuery<TReadAllParams, TReadAllResult> The mediation ReadAll query ReadQuery<TResultData> The mediation Read query ReadQuery<TResultData, TKey> The mediation Read query SafeCreateCommand<TModelData> The mediation Create command SafeDeleteCommand<T> The mediation Delete command SafeDeleteCommand<T, TKey> The mediation Delete command SafeReadAllQuery<TReadAllResult> The mediation ReadAll query SafeReadAllQuery<TReadAllParams, TReadAllResult> The mediation ReadAll query SafeReadQuery<TResultData> The mediation Read query SafeReadQuery<TResultData, TKey> The mediation Read query SafeUpdateCommand<TRequestData> The mediation Update command SafeUpdateCommand<TKey, TRequestData> The mediation Update command UpdateCommand<TRequestData> The mediation Update command UpdateCommand<TKey, TRequestData> The mediation Update command"
  },
  "api/Apizr.Mediation.Extending.ApizrMediatorFileTransferExtensions.html": {
    "href": "api/Apizr.Mediation.Extending.ApizrMediatorFileTransferExtensions.html",
    "title": "Class ApizrMediatorFileTransferExtensions | Apizr",
    "keywords": "Class ApizrMediatorFileTransferExtensions Namespace Apizr.Mediation.Extending Assembly Apizr.Integrations.FileTransfer.MediatR.dll public static class ApizrMediatorFileTransferExtensions Inheritance object ApizrMediatorFileTransferExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SendDownloadQuery(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi public static Task<FileInfo> SendDownloadQuery(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> SendDownloadQuery(IApizrMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi with a dictionary query parameters type public static Task<FileInfo> SendDownloadQuery(this IApizrMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi>(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a dictionary query parameters type public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi>(this IApizrMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi, TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a custom query parameters type public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi, TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams public static Task<FileInfo> SendDownloadWithQuery<TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadParams The query parameters type SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams public static Task<FileInfo> SendDownloadWithQuery<TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> Type Parameters TDownloadParams The query parameters type SendUploadCommand(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file bytes data public static Task SendUploadCommand(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task SendUploadCommand(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file info data public static Task SendUploadCommand(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task SendUploadCommand(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file stream data public static Task SendUploadCommand(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task SendUploadCommandFor<TUploadApi>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data public static Task SendUploadCommandFor<TUploadApi>(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters apizrMediator IApizrMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task Type Parameters TUploadApi The upload api type SendUploadCommandFor<TUploadApi>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data public static Task SendUploadCommandFor<TUploadApi>(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters apizrMediator IApizrMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task Type Parameters TUploadApi The upload api type SendUploadCommandFor<TUploadApi>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data public static Task SendUploadCommandFor<TUploadApi>(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters apizrMediator IApizrMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task Type Parameters TUploadApi The upload api type SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data public static Task<TUploadApiResultData> SendUploadCommandFor<TUploadApi, TUploadApiResultData>(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters apizrMediator IApizrMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data public static Task<TUploadApiResultData> SendUploadCommandFor<TUploadApi, TUploadApiResultData>(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters apizrMediator IApizrMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data public static Task<TUploadApiResultData> SendUploadCommandFor<TUploadApi, TUploadApiResultData>(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters apizrMediator IApizrMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file bytes data public static Task<TUploadApiResultData> SendUploadWithCommand<TUploadApiResultData>(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApiResultData The upload api result data type SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file info data public static Task<TUploadApiResultData> SendUploadWithCommand<TUploadApiResultData>(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApiResultData The upload api result data type SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file stream data public static Task<TUploadApiResultData> SendUploadWithCommand<TUploadApiResultData>(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> Type Parameters TUploadApiResultData The upload api result data type"
  },
  "api/Apizr.Mediation.Extending.html": {
    "href": "api/Apizr.Mediation.Extending.html",
    "title": "Namespace Apizr.Mediation.Extending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Extending Classes ApizrMediatorFileTransferExtensions"
  },
  "api/Apizr.Mediation.Querying.IMediationQuery-1.html": {
    "href": "api/Apizr.Mediation.Querying.IMediationQuery-1.html",
    "title": "Interface IMediationQuery<TResultData> | Apizr",
    "keywords": "Interface IMediationQuery<TResultData> Namespace Apizr.Mediation.Querying Assembly Apizr.Integrations.MediatR.dll A mediation query getting some TResultData data public interface IMediationQuery<out TResultData> : IRequest<TResultData>, IBaseRequest Type Parameters TResultData The returned data"
  },
  "api/Apizr.Mediation.Querying.IMediationQueryHandler-2.html": {
    "href": "api/Apizr.Mediation.Querying.IMediationQueryHandler-2.html",
    "title": "Interface IMediationQueryHandler<TQuery, TResponse> | Apizr",
    "keywords": "Interface IMediationQueryHandler<TQuery, TResponse> Namespace Apizr.Mediation.Querying Assembly Apizr.Integrations.MediatR.dll The mediation query handler public interface IMediationQueryHandler<in TQuery, TResponse> : IRequestHandler<TQuery, TResponse> where TQuery : IMediationQuery<TResponse> Type Parameters TQuery The query to handle TResponse The response to send back Inherited Members IRequestHandler<TQuery, TResponse>.Handle(TQuery, CancellationToken)"
  },
  "api/Apizr.Mediation.Querying.MediationQueryBase-3.html": {
    "href": "api/Apizr.Mediation.Querying.MediationQueryBase-3.html",
    "title": "Class MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Querying Assembly Apizr.Integrations.MediatR.dll The base mediation query getting some TResultData data public abstract class MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TResultData The returned data TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationQuery<TResultData> IRequest<TResultData> IBaseRequest Derived ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> DownloadQuery<TDownloadApi, TDownloadParams> DownloadOptionalQuery<TDownloadApi, TDownloadParams> Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MediationQueryBase(Action<TApizrRequestOptionsBuilder>) The base mediation query constructor protected MediationQueryBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Querying.html": {
    "href": "api/Apizr.Mediation.Querying.html",
    "title": "Namespace Apizr.Mediation.Querying | Apizr",
    "keywords": "Namespace Apizr.Mediation.Querying Classes MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base mediation query getting some TResultData data Interfaces IMediationQueryHandler<TQuery, TResponse> The mediation query handler IMediationQuery<TResultData> A mediation query getting some TResultData data"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-2.html",
    "title": "Class ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute request public abstract class ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Unit> IBaseRequest Derived ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteRequestBase(Expression, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor protected ExecuteRequestBase(Expression executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-3.html",
    "title": "Class ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute request public abstract class ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TFormattedModelResultData The result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Derived ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteRequestBase(Expression, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor protected ExecuteRequestBase(Expression executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties ExecuteApiMethod The request to execute public Expression ExecuteApiMethod { get; } Property Value Expression"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-4.html",
    "title": "Class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute request public abstract class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TFormattedModelResultData The result type TModelRequestData The request data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Derived ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteRequestBase(Expression, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor protected ExecuteRequestBase(Expression executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteRequestBase(Expression, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor protected ExecuteRequestBase(Expression executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties ModelRequestData The data provided to the request public TModelRequestData ModelRequestData { get; } Property Value TModelRequestData"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-4.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request (returning result) public abstract class ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TApiData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TApiData> IBaseRequest Derived ExecuteResultRequest<TWebApi, TApiData> Inherited Members ExecuteRequestBase<TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-5.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request (returning result) public abstract class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TModelData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TModelData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TModelData> IBaseRequest Derived ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequest<TWebApi, TModelData, TApiData> ExecuteSafeResultRequest<TWebApi, TApiData> ExecuteSafeUnitRequest<TWebApi> Inherited Members ExecuteRequestBase<TModelData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-6.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request (returning result) public abstract class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Derived ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-7.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-7.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request (returning result) public abstract class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TModelResultData> IBaseRequest Derived ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> Inherited Members ExecuteRequestBase<TModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-8.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-8.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request (returning result) public abstract class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TFormattedModelResultData The formatted model result type TApiRequestData The api request type TModelRequestData The model request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Derived ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-3.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request (returning no result) public abstract class ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Unit> IBaseRequest Derived ExecuteUnitRequest<TWebApi> Inherited Members ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-4.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request (returning no result) public abstract class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TFormattedModelResultData The formatted model result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Derived ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-5.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request (returning no result) public abstract class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<Unit, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Unit, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Unit> IBaseRequest Derived ExecuteUnitRequest<TWebApi, TModelData, TApiData> Inherited Members ExecuteRequestBase<Unit, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-6.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request (returning no result) public abstract class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Derived ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Base.RequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.RequestBase-3.html",
    "title": "Class RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation request public abstract class RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TFormattedModelResultData The result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Derived MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestBase(Action<TApizrRequestOptionsBuilder>) The base request constructor protected RequestBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties OptionsBuilder The request options builder public Action<TApizrRequestOptionsBuilder> OptionsBuilder { get; protected set; } Property Value Action<TApizrRequestOptionsBuilder>"
  },
  "api/Apizr.Mediation.Requesting.Base.RequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.RequestBase-4.html",
    "title": "Class RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation request public abstract class RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TFormattedModelResultData The result type TModelRequestData The request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<TFormattedModelResultData> IBaseRequest Inherited Members RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestBase(TModelRequestData, Action<TApizrRequestOptionsBuilder>) The base request constructor protected RequestBase(TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters modelRequestData TModelRequestData The request type optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request Properties ModelRequestData The request to send public TModelRequestData ModelRequestData { get; } Property Value TModelRequestData"
  },
  "api/Apizr.Mediation.Requesting.Base.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.html",
    "title": "Namespace Apizr.Mediation.Requesting.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Base Classes ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation request RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation request"
  },
  "api/Apizr.Mediation.Requesting.DownloadQuery-1.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadQuery-1.html",
    "title": "Class DownloadQuery<TDownloadApi> | Apizr",
    "keywords": "Class DownloadQuery<TDownloadApi> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation download query with a dictionary query parameters type public class DownloadQuery<TDownloadApi> : DownloadQuery<TDownloadApi, IDictionary<string, object>>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest where TDownloadApi : IDownloadApi Type Parameters TDownloadApi Inheritance object RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadQuery<TDownloadApi, IDictionary<string, object>> DownloadQuery<TDownloadApi> Implements IMediationQuery<FileInfo> IRequest<FileInfo> IBaseRequest Derived DownloadQuery Inherited Members DownloadQuery<TDownloadApi, IDictionary<string, object>>.FileInfo DownloadQuery<TDownloadApi, IDictionary<string, object>>.DownloadParams RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options DownloadQuery(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Mediation.Requesting.DownloadQuery-2.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadQuery-2.html",
    "title": "Class DownloadQuery<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadQuery<TDownloadApi, TDownloadParams> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation download query with a custom query parameters type public class DownloadQuery<TDownloadApi, TDownloadParams> : MediationQueryBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters TDownloadApi The download api type to manage TDownloadParams The query parameters type Inheritance object RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadQuery<TDownloadApi, TDownloadParams> Implements IMediationQuery<FileInfo> IRequest<FileInfo> IBaseRequest Derived DownloadQuery<TDownloadApi> DownloadWithQuery<TDownloadParams> Inherited Members RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Properties DownloadParams Some custom query parameters public TDownloadParams DownloadParams { get; } Property Value TDownloadParams FileInfo Some information about the file to download public FileInfo FileInfo { get; } Property Value FileInfo"
  },
  "api/Apizr.Mediation.Requesting.DownloadQuery.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadQuery.html",
    "title": "Class DownloadQuery | Apizr",
    "keywords": "Class DownloadQuery Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation download query with a dictionary query parameters type public class DownloadQuery : DownloadQuery<IDownloadApi>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest Inheritance object RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadQuery<IDownloadApi, IDictionary<string, object>> DownloadQuery<IDownloadApi> DownloadQuery Implements IMediationQuery<FileInfo> IRequest<FileInfo> IBaseRequest Inherited Members DownloadQuery<IDownloadApi, IDictionary<string, object>>.FileInfo DownloadQuery<IDownloadApi, IDictionary<string, object>>.DownloadParams RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options DownloadQuery(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Mediation.Requesting.DownloadWithQuery-1.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadWithQuery-1.html",
    "title": "Class DownloadWithQuery<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithQuery<TDownloadParams> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation download query with a dictionary query parameters type public class DownloadWithQuery<TDownloadParams> : DownloadQuery<IDownloadApi<TDownloadParams>, TDownloadParams>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest Type Parameters TDownloadParams Inheritance object RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadQuery<IDownloadApi<TDownloadParams>, TDownloadParams> DownloadWithQuery<TDownloadParams> Implements IMediationQuery<FileInfo> IRequest<FileInfo> IBaseRequest Inherited Members DownloadQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.FileInfo DownloadQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadParams RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadWithQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadWithQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options DownloadWithQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadWithQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-2.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-2.html",
    "title": "Class ExecuteResultRequest<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TApiData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute result request (returning result) public class ExecuteResultRequest<TWebApi, TApiData> : ExecuteResultRequestBase<TWebApi, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<TApiData>, IBaseRequest Type Parameters TWebApi The web api type TApiData The api data type Inheritance object RequestBase<TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<TApiData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequest<TWebApi, TApiData> Implements IRequest<TApiData> IBaseRequest Inherited Members ExecuteRequestBase<TApiData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-3.html",
    "title": "Class ExecuteResultRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute result request (returning result) public class ExecuteResultRequest<TWebApi, TModelData, TApiData> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<TModelData>, IBaseRequest Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequest<TWebApi, TModelData, TApiData> Implements IRequest<TModelData> IBaseRequest Inherited Members ExecuteRequestBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-5.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-5.html",
    "title": "Class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute result request (returning result) public class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<TModelResultData>, IBaseRequest Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Inheritance object RequestBase<TModelResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<TModelResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<TModelResultData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements IRequest<TModelResultData> IBaseRequest Inherited Members ExecuteRequestBase<TModelResultData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteSafeResultRequest-2.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteSafeResultRequest-2.html",
    "title": "Class ExecuteSafeResultRequest<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteSafeResultRequest<TWebApi, TApiData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute result request (returning result) public class ExecuteSafeResultRequest<TWebApi, TApiData> : ExecuteResultRequestBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<IApizrResponse<TApiData>>, IBaseRequest Type Parameters TWebApi The web api type TApiData The api data type Inheritance object RequestBase<IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse<TApiData>, IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, IApizrResponse<TApiData>, IApiResponse<TApiData>, IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeResultRequest<TWebApi, TApiData> Implements IRequest<IApizrResponse<TApiData>> IBaseRequest Inherited Members ExecuteRequestBase<IApizrResponse<TApiData>, IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<IApizrResponse<TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteSafeResultRequest(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteSafeResultRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteSafeResultRequest-3.html",
    "title": "Class ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute result request (returning result) public class ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> : ExecuteResultRequestBase<TWebApi, IApizrResponse<TModelData>, IApiResponse<TApiData>, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<IApizrResponse<TModelData>>, IBaseRequest Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestBase<IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse<TModelData>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse<TModelData>, IApiResponse<TApiData>, IApizrResponse<TModelData>, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse<TModelData>, IApiResponse<TApiData>, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> Implements IRequest<IApizrResponse<TModelData>> IBaseRequest Inherited Members ExecuteRequestBase<IApizrResponse<TModelData>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<IApizrResponse<TModelData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteSafeResultRequest(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteSafeResultRequest(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteSafeResultRequest-5.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteSafeResultRequest-5.html",
    "title": "Class ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute result request (returning result) public class ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestBase<TWebApi, IApizrResponse<TModelResultData>, IApiResponse<TApiResultData>, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<IApizrResponse<TModelResultData>>, IBaseRequest Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Inheritance object RequestBase<IApizrResponse<TModelResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse<TModelResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse<TModelResultData>, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse<TModelResultData>, IApiResponse<TApiResultData>, IApizrResponse<TModelResultData>, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse<TModelResultData>, IApiResponse<TApiResultData>, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements IRequest<IApizrResponse<TModelResultData>> IBaseRequest Inherited Members ExecuteRequestBase<IApizrResponse<TModelResultData>, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<IApizrResponse<TModelResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<IApizrResponse<TModelResultData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteSafeResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The request to execute modelRequestData TModelRequestData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteSafeUnitRequest-1.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteSafeUnitRequest-1.html",
    "title": "Class ExecuteSafeUnitRequest<TWebApi> | Apizr",
    "keywords": "Class ExecuteSafeUnitRequest<TWebApi> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute result request (returning result) public class ExecuteSafeUnitRequest<TWebApi> : ExecuteResultRequestBase<TWebApi, IApizrResponse, IApiResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<IApizrResponse>, IBaseRequest Type Parameters TWebApi The web api type Inheritance object RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse, IApiResponse, IApizrResponse, IApiResponse, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse, IApiResponse, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse, IApiResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeUnitRequest<TWebApi> Implements IRequest<IApizrResponse> IBaseRequest Inherited Members ExecuteRequestBase<IApizrResponse, IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteSafeUnitRequest(Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor public ExecuteSafeUnitRequest(Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteSafeUnitRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteSafeUnitRequest-3.html",
    "title": "Class ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute unit request (returning no result) public class ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> : ExecuteResultRequestBase<TWebApi, IApizrResponse, IApiResponse, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<IApizrResponse>, IBaseRequest Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrResponse, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse, IApiResponse, IApizrResponse, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, IApizrResponse, IApiResponse, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> Implements IRequest<IApizrResponse> IBaseRequest Inherited Members ExecuteRequestBase<IApizrResponse, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<IApizrResponse, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor public ExecuteSafeUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteSafeUnitRequest(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor public ExecuteSafeUnitRequest(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-1.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-1.html",
    "title": "Class ExecuteUnitRequest<TWebApi> | Apizr",
    "keywords": "Class ExecuteUnitRequest<TWebApi> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute unit request (returning no result) public class ExecuteUnitRequest<TWebApi> : ExecuteUnitRequestBase<TWebApi, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest Type Parameters TWebApi The web api type Inheritance object RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequest<TWebApi> Implements IRequest<Unit> IBaseRequest Inherited Members ExecuteRequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor public ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteUnitRequest(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor public ExecuteUnitRequest(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-3.html",
    "title": "Class ExecuteUnitRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteUnitRequest<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.MediatR.dll The mediation execute unit request (returning no result) public class ExecuteUnitRequest<TWebApi, TModelData, TApiData> : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Unit, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequest<TWebApi, TModelData, TApiData> Implements IRequest<Unit> IBaseRequest Inherited Members ExecuteRequestBase<Unit, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor public ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteUnitRequest(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor public ExecuteUnitRequest(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-5.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request handler public abstract class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : IRequestHandler<TRequest, TApiData> where TRequest : ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, TApiData> Derived ExecuteResultRequestHandler<TWebApi, TApiData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request public abstract Task<TApiData> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TApiData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-6.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request handler public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TModelData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, TModelData> Derived ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> ExecuteSafeResultRequestHandler<TWebApi, TApiData> ExecuteSafeUnitRequestHandler<TWebApi> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request public abstract Task<TModelData> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TModelData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-7.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request handler public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, TFormattedModelResultData> Derived ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TFormattedModelResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-8.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request handler public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, TModelResultData> Derived ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteSafeResultRequestHandler<TWebApi, TModelData, TApiData> ExecuteSafeResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteSafeUnitRequestHandler<TWebApi, TModelData, TApiData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request public abstract Task<TModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TModelResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-9.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute result request handler public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TFormattedModelResultData The formatted model result type TApiRequestData The api request type TModelRequestData The model request type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, TFormattedModelResultData> Derived ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TFormattedModelResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-4.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request handler public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Unit> where TRequest : ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, Unit> Derived ExecuteUnitRequestHandler<TWebApi> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request public abstract Task<Unit> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-5.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request handler public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TFormattedModelResultData The formatted model result data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, TFormattedModelResultData> Derived ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TFormattedModelResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-6.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request handler public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Unit> where TRequest : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, Unit> Derived ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request public abstract Task<Unit> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-7.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base mediation execute unit request handler public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, TFormattedModelResultData> Derived ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Fields WebApiManager protected readonly IApizrManager<TWebApi> WebApiManager Field Value IApizrManager<TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters request TRequest The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TFormattedModelResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.RequestHandlerBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.RequestHandlerBase-2.html",
    "title": "Class RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Mediation.Requesting.Handling.Base Assembly Apizr.Integrations.MediatR.dll The top level base request handler public abstract class RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TApizrRequestOptions TApizrRequestOptionsBuilder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Derived CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> DownloadQueryHandler<TDownloadApi> DownloadQueryHandler<TDownloadApi, TDownloadParams> DownloadWithQueryHandler<TDownloadParams> UploadCommandHandler<TUploadApi> UploadCommandHandler<TUploadApi, TUploadApiResultData> UploadWithCommandHandler<TUploadApiResultData> DownloadOptionalQueryHandler<TDownloadApi> DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> DownloadWithOptionalQueryHandler<TDownloadParams> UploadOptionalCommandHandler<TUploadApi> UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> UploadWithOptionalCommandHandler<TUploadApiResultData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.html",
    "title": "Namespace Apizr.Mediation.Requesting.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Handling.Base Classes ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base request handler"
  },
  "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-1.html",
    "title": "Class DownloadQueryHandler<TDownloadApi> | Apizr",
    "keywords": "Class DownloadQueryHandler<TDownloadApi> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation handler for DownloadQuery<TDownloadApi> public class DownloadQueryHandler<TDownloadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadQuery<TDownloadApi>, FileInfo>, IRequestHandler<DownloadQuery, FileInfo> where TDownloadApi : IDownloadApi Type Parameters TDownloadApi The download api type to manage Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadQueryHandler<TDownloadApi> Implements IRequestHandler<DownloadQuery<TDownloadApi>, FileInfo> IRequestHandler<DownloadQuery, FileInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadQueryHandler(IApizrDownloadManager<TDownloadApi>) public DownloadQueryHandler(IApizrDownloadManager<TDownloadApi> downloadManager) Parameters downloadManager IApizrDownloadManager<TDownloadApi> Methods Handle(DownloadQuery, CancellationToken) Handling the download request public Task<FileInfo> Handle(DownloadQuery request, CancellationToken cancellationToken) Parameters request DownloadQuery The download request cancellationToken CancellationToken A cancellation token Returns Task<FileInfo> Handle(DownloadQuery<TDownloadApi>, CancellationToken) Handling the download request public Task<FileInfo> Handle(DownloadQuery<TDownloadApi> request, CancellationToken cancellationToken) Parameters request DownloadQuery<TDownloadApi> The download request cancellationToken CancellationToken A cancellation token Returns Task<FileInfo>"
  },
  "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-2.html",
    "title": "Class DownloadQueryHandler<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadQueryHandler<TDownloadApi, TDownloadParams> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> public class DownloadQueryHandler<TDownloadApi, TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadQuery<TDownloadApi, TDownloadParams>, FileInfo> where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters TDownloadApi The download api type to manage TDownloadParams The query parameters type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadQueryHandler<TDownloadApi, TDownloadParams> Implements IRequestHandler<DownloadQuery<TDownloadApi, TDownloadParams>, FileInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams>) public DownloadQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams> downloadManager) Parameters downloadManager IApizrDownloadManager<TDownloadApi, TDownloadParams> Methods Handle(DownloadQuery<TDownloadApi, TDownloadParams>, CancellationToken) Handling the download request public Task<FileInfo> Handle(DownloadQuery<TDownloadApi, TDownloadParams> request, CancellationToken cancellationToken) Parameters request DownloadQuery<TDownloadApi, TDownloadParams> The download request cancellationToken CancellationToken A cancellation token Returns Task<FileInfo>"
  },
  "api/Apizr.Mediation.Requesting.Handling.DownloadWithQueryHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.DownloadWithQueryHandler-1.html",
    "title": "Class DownloadWithQueryHandler<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithQueryHandler<TDownloadParams> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> public class DownloadWithQueryHandler<TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadWithQuery<TDownloadParams>, FileInfo> Type Parameters TDownloadParams The query parameters type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadWithQueryHandler<TDownloadParams> Implements IRequestHandler<DownloadWithQuery<TDownloadParams>, FileInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadWithQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) public DownloadWithQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> downloadManager) Parameters downloadManager IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> Methods Handle(DownloadWithQuery<TDownloadParams>, CancellationToken) Handling the download request public Task<FileInfo> Handle(DownloadWithQuery<TDownloadParams> request, CancellationToken cancellationToken) Parameters request DownloadWithQuery<TDownloadParams> The download request cancellationToken CancellationToken A cancellation token Returns Task<FileInfo>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-2.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TApiData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute result request handler public class ExecuteResultRequestHandler<TWebApi, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteResultRequest<TWebApi, TApiData>, TApiData> Type Parameters TWebApi The web api type TApiData The api data type Inheritance object ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandler<TWebApi, TApiData> Implements IRequestHandler<ExecuteResultRequest<TWebApi, TApiData>, TApiData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteResultRequest<TWebApi, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteResultRequest<TWebApi, TApiData>, CancellationToken) Handling the execute result request public override Task<TApiData> Handle(ExecuteResultRequest<TWebApi, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteResultRequest<TWebApi, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TApiData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-3.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute result request handler public class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteResultRequest<TWebApi, TModelData, TApiData>, TModelData> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> Implements IRequestHandler<ExecuteResultRequest<TWebApi, TModelData, TApiData>, TModelData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute result request public override Task<TModelData> Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteResultRequest<TWebApi, TModelData, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TModelData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-5.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute result request handler public class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, TModelResultData> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements IRequestHandler<ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, TModelResultData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) Handling the execute result request public override Task<TModelResultData> Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request, CancellationToken cancellationToken) Parameters request ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<TModelResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeResultRequestHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeResultRequestHandler-2.html",
    "title": "Class ExecuteSafeResultRequestHandler<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteSafeResultRequestHandler<TWebApi, TApiData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute result request handler public class ExecuteSafeResultRequestHandler<TWebApi, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, ExecuteSafeResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteSafeResultRequest<TWebApi, TApiData>, IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, ExecuteSafeResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeResultRequestHandler<TWebApi, TApiData> Implements IRequestHandler<ExecuteSafeResultRequest<TWebApi, TApiData>, IApizrResponse<TApiData>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, ExecuteSafeResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TApiData>, IApiResponse<TApiData>, ExecuteSafeResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteSafeResultRequest<TWebApi, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeResultRequestHandler(IApizrManager<TWebApi>) public ExecuteSafeResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteSafeResultRequest<TWebApi, TApiData>, CancellationToken) Handling the execute result request public override Task<IApizrResponse<TApiData>> Handle(ExecuteSafeResultRequest<TWebApi, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteSafeResultRequest<TWebApi, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TApiData>>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeResultRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeResultRequestHandler-3.html",
    "title": "Class ExecuteSafeResultRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteSafeResultRequestHandler<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute result request handler public class ExecuteSafeResultRequestHandler<TWebApi, TModelData, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelData>, IApiResponse<TApiData>, TApiData, TModelData, ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelData>, IApiResponse<TApiData>, TApiData, TModelData, ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeResultRequestHandler<TWebApi, TModelData, TApiData> Implements IRequestHandler<ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, IApizrResponse<TModelData>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelData>, IApiResponse<TApiData>, TApiData, TModelData, ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelData>, IApiResponse<TApiData>, TApiData, TModelData, ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeResultRequestHandler(IApizrManager<TWebApi>) public ExecuteSafeResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute result request public override Task<IApizrResponse<TModelData>> Handle(ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TModelData>>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeResultRequestHandler-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeResultRequestHandler-5.html",
    "title": "Class ExecuteSafeResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteSafeResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute result request handler public class ExecuteSafeResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelResultData>, IApiResponse<TApiResultData>, TApiRequestData, TModelRequestData, ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelResultData>, IApiResponse<TApiResultData>, TApiRequestData, TModelRequestData, ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements IRequestHandler<ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrResponse<TModelResultData>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelResultData>, IApiResponse<TApiResultData>, TApiRequestData, TModelRequestData, ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse<TModelResultData>, IApiResponse<TApiResultData>, TApiRequestData, TModelRequestData, ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeResultRequestHandler(IApizrManager<TWebApi>) public ExecuteSafeResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) Handling the execute result request public override Task<IApizrResponse<TModelResultData>> Handle(ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request, CancellationToken cancellationToken) Parameters request ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse<TModelResultData>>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeUnitRequestHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeUnitRequestHandler-1.html",
    "title": "Class ExecuteSafeUnitRequestHandler<TWebApi> | Apizr",
    "keywords": "Class ExecuteSafeUnitRequestHandler<TWebApi> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute unit request handler public class ExecuteSafeUnitRequestHandler<TWebApi> : ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, ExecuteSafeUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteSafeUnitRequest<TWebApi>, IApizrResponse> Type Parameters TWebApi The web api type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, ExecuteSafeUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeUnitRequestHandler<TWebApi> Implements IRequestHandler<ExecuteSafeUnitRequest<TWebApi>, IApizrResponse> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, ExecuteSafeUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, ExecuteSafeUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteSafeUnitRequest<TWebApi>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeUnitRequestHandler(IApizrManager<TWebApi>) public ExecuteSafeUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteSafeUnitRequest<TWebApi>, CancellationToken) Handling the execute result request public override Task<IApizrResponse> Handle(ExecuteSafeUnitRequest<TWebApi> request, CancellationToken cancellationToken) Parameters request ExecuteSafeUnitRequest<TWebApi> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeUnitRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteSafeUnitRequestHandler-3.html",
    "title": "Class ExecuteSafeUnitRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteSafeUnitRequestHandler<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute unit request handler public class ExecuteSafeUnitRequestHandler<TWebApi, TModelData, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, TApiData, TModelData, ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, IApizrResponse> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, TApiData, TModelData, ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteSafeUnitRequestHandler<TWebApi, TModelData, TApiData> Implements IRequestHandler<ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, IApizrResponse> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, TApiData, TModelData, ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, IApizrResponse, IApiResponse, TApiData, TModelData, ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteSafeUnitRequestHandler(IApizrManager<TWebApi>) public ExecuteSafeUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute result request public override Task<IApizrResponse> Handle(ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<IApizrResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-1.html",
    "title": "Class ExecuteUnitRequestHandler<TWebApi> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandler<TWebApi> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute unit request handler public class ExecuteUnitRequestHandler<TWebApi> : ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteUnitRequest<TWebApi>, Unit> Type Parameters TWebApi The web api type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestHandler<TWebApi> Implements IRequestHandler<ExecuteUnitRequest<TWebApi>, Unit> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteUnitRequest<TWebApi>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestHandler(IApizrManager<TWebApi>) public ExecuteUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteUnitRequest<TWebApi>, CancellationToken) Handling the execute unit request public override Task<Unit> Handle(ExecuteUnitRequest<TWebApi> request, CancellationToken cancellationToken) Parameters request ExecuteUnitRequest<TWebApi> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-3.html",
    "title": "Class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.MediatR.dll The mediation execute unit request handler public class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> : ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteUnitRequest<TWebApi, TModelData, TApiData>, Unit> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Implements IRequestHandler<ExecuteUnitRequest<TWebApi, TModelData, TApiData>, Unit> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteUnitRequestHandler(IApizrManager<TWebApi>) public ExecuteUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute unit request public override Task<Unit> Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteUnitRequest<TWebApi, TModelData, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Unit>"
  },
  "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-1.html",
    "title": "Class UploadCommandHandler<TUploadApi> | Apizr",
    "keywords": "Class UploadCommandHandler<TUploadApi> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.MediatR.dll public class UploadCommandHandler<TUploadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadCommand<TUploadApi>, HttpResponseMessage>, IRequestHandler<UploadCommand, HttpResponseMessage> where TUploadApi : IUploadApi Type Parameters TUploadApi Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadCommandHandler<TUploadApi> Implements IRequestHandler<UploadCommand<TUploadApi>, HttpResponseMessage> IRequestHandler<UploadCommand, HttpResponseMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadCommandHandler(IApizrUploadManager<TUploadApi>) public UploadCommandHandler(IApizrUploadManager<TUploadApi> uploadManager) Parameters uploadManager IApizrUploadManager<TUploadApi> Methods Handle(UploadCommand, CancellationToken) Handling the upload request public Task<HttpResponseMessage> Handle(UploadCommand request, CancellationToken cancellationToken) Parameters request UploadCommand The upload request cancellationToken CancellationToken A cancellation token Returns Task<HttpResponseMessage> Handle(UploadCommand<TUploadApi>, CancellationToken) Handling the upload request public Task<HttpResponseMessage> Handle(UploadCommand<TUploadApi> request, CancellationToken cancellationToken) Parameters request UploadCommand<TUploadApi> The upload request cancellationToken CancellationToken A cancellation token Returns Task<HttpResponseMessage>"
  },
  "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-2.html",
    "title": "Class UploadCommandHandler<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadCommandHandler<TUploadApi, TUploadApiResultData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.MediatR.dll public class UploadCommandHandler<TUploadApi, TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadCommand<TUploadApi, TUploadApiResultData>, TUploadApiResultData> where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters TUploadApi TUploadApiResultData Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadCommandHandler<TUploadApi, TUploadApiResultData> Implements IRequestHandler<UploadCommand<TUploadApi, TUploadApiResultData>, TUploadApiResultData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData>) public UploadCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData> uploadManager) Parameters uploadManager IApizrUploadManager<TUploadApi, TUploadApiResultData> Methods Handle(UploadCommand<TUploadApi, TUploadApiResultData>, CancellationToken) Handling the upload request public Task<TUploadApiResultData> Handle(UploadCommand<TUploadApi, TUploadApiResultData> request, CancellationToken cancellationToken) Parameters request UploadCommand<TUploadApi, TUploadApiResultData> The upload request cancellationToken CancellationToken A cancellation token Returns Task<TUploadApiResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.UploadWithCommandHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.UploadWithCommandHandler-1.html",
    "title": "Class UploadWithCommandHandler<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithCommandHandler<TUploadApiResultData> Namespace Apizr.Mediation.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.MediatR.dll public class UploadWithCommandHandler<TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadWithCommand<TUploadApiResultData>, TUploadApiResultData> Type Parameters TUploadApiResultData Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadWithCommandHandler<TUploadApiResultData> Implements IRequestHandler<UploadWithCommand<TUploadApiResultData>, TUploadApiResultData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadWithCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) public UploadWithCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> uploadManager) Parameters uploadManager IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> Methods Handle(UploadWithCommand<TUploadApiResultData>, CancellationToken) Handling the upload request public Task<TUploadApiResultData> Handle(UploadWithCommand<TUploadApiResultData> request, CancellationToken cancellationToken) Parameters request UploadWithCommand<TUploadApiResultData> The upload request cancellationToken CancellationToken A cancellation token Returns Task<TUploadApiResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.html",
    "title": "Namespace Apizr.Mediation.Requesting.Handling | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Handling Classes DownloadQueryHandler<TDownloadApi> The mediation handler for DownloadQuery<TDownloadApi> DownloadQueryHandler<TDownloadApi, TDownloadParams> The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> DownloadWithQueryHandler<TDownloadParams> The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> ExecuteResultRequestHandler<TWebApi, TApiData> The mediation execute result request handler ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> The mediation execute result request handler ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request handler ExecuteSafeResultRequestHandler<TWebApi, TApiData> The mediation execute result request handler ExecuteSafeResultRequestHandler<TWebApi, TModelData, TApiData> The mediation execute result request handler ExecuteSafeResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request handler ExecuteSafeUnitRequestHandler<TWebApi> The mediation execute unit request handler ExecuteSafeUnitRequestHandler<TWebApi, TModelData, TApiData> The mediation execute unit request handler ExecuteUnitRequestHandler<TWebApi> The mediation execute unit request handler ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> The mediation execute unit request handler UploadCommandHandler<TUploadApi> UploadCommandHandler<TUploadApi, TUploadApiResultData> UploadWithCommandHandler<TUploadApiResultData>"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediator-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediator-1.html",
    "title": "Class ApizrMediator<TWebApi> | Apizr",
    "keywords": "Class ApizrMediator<TWebApi> Namespace Apizr.Mediation.Requesting.Sending Assembly Apizr.Integrations.MediatR.dll Apizr mediator to send request using MediatR by calling expression public class ApizrMediator<TWebApi> : IApizrMediator<TWebApi>, IApizrMediatorBase Type Parameters TWebApi Inheritance object ApizrMediator<TWebApi> Implements IApizrMediator<TWebApi> IApizrMediatorBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrMediator(IApizrMediator) public ApizrMediator(IApizrMediator apizrMediator) Parameters apizrMediator IApizrMediator Methods SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<IApizrResponse> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendFor(Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<IApizrResponse> SendFor(Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api response SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api response SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<TApiData> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The api response SendFor<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api result type SendFor<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api result type SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<TApiData> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The api result type SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token public Task<IApizrResponse> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token public Task SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request public Task<IApizrResponse> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request public Task SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediator.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediator.html",
    "title": "Class ApizrMediator | Apizr",
    "keywords": "Class ApizrMediator Namespace Apizr.Mediation.Requesting.Sending Assembly Apizr.Integrations.MediatR.dll Apizr mediator to send request using MediatR by calling expression public class ApizrMediator : ApizrMediatorBase, IApizrMediator, IApizrMediatorBase Inheritance object ApizrMediatorBase ApizrMediator Implements IApizrMediator IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Constructors ApizrMediator(IMediator) public ApizrMediator(IMediator mediator) Parameters mediator IMediator Methods SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<IApizrResponse> SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<IApizrResponse> SendFor<TWebApi>(Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and some options public Task<IApizrResponse> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and some options public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request public Task<IApizrResponse> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediatorBase.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediatorBase.html",
    "title": "Class ApizrMediatorBase | Apizr",
    "keywords": "Class ApizrMediatorBase Namespace Apizr.Mediation.Requesting.Sending Assembly Apizr.Integrations.MediatR.dll public abstract class ApizrMediatorBase : IApizrMediatorBase Inheritance object ApizrMediatorBase Implements IApizrMediatorBase Derived ApizrCrudMediator ApizrMediator ApizrCrudOptionalMediator ApizrOptionalMediator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) protected static IApizrRequestOptionsBuilder CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder> optionsBuilder) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Returns IApizrRequestOptionsBuilder"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediator-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediator-1.html",
    "title": "Interface IApizrMediator<TWebApi> | Apizr",
    "keywords": "Interface IApizrMediator<TWebApi> Namespace Apizr.Mediation.Requesting.Sending Assembly Apizr.Integrations.MediatR.dll IApizrMediator but dedicated to TWebApi, getting all shorter public interface IApizrMediator<TWebApi> : IApizrMediatorBase Type Parameters TWebApi The api interface to play with MediatR Methods SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<IApizrResponse> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendFor(Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<IApizrResponse> SendFor(Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api response SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api response SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<TApiData> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The api response SendFor<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api result type SendFor<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<IApizrResponse<TApiData>> SendFor<TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TApiData The api result type SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<TApiData> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TApiData The api result type SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Task<IApizrResponse> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Task SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Task<IApizrResponse> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Task SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediator.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediator.html",
    "title": "Interface IApizrMediator | Apizr",
    "keywords": "Interface IApizrMediator Namespace Apizr.Mediation.Requesting.Sending Assembly Apizr.Integrations.MediatR.dll Apizr mediator to send request using MediatR by calling expression public interface IApizrMediator : IApizrMediatorBase Extension Methods ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Methods SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<IApizrResponse> SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<TWebApi, Task<IApiResponse>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<IApizrResponse> SendFor<TWebApi>(Expression<Func<TWebApi, Task<IApiResponse>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<IApizrResponse<TApiData>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TApiData>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TApiData> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with some options and returning a mapped result Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and some options Task<IApizrResponse> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and some options Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<ApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<IApiResponse<TApiData>>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<ApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelData>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse<TApiData>>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelData>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Task<IApizrResponse> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<IApiResponse>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelData> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, some options and returning a mapped result Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<ApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<IApizrResponse<TModelResultData>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<IApiResponse<TApiResultData>>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<IApizrResponse<TModelResultData>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<TModelResultData> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediatorBase.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediatorBase.html",
    "title": "Interface IApizrMediatorBase | Apizr",
    "keywords": "Interface IApizrMediatorBase Namespace Apizr.Mediation.Requesting.Sending Assembly Apizr.Integrations.MediatR.dll Apizr base mediator public interface IApizrMediatorBase"
  },
  "api/Apizr.Mediation.Requesting.Sending.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.html",
    "title": "Namespace Apizr.Mediation.Requesting.Sending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Sending Classes ApizrMediator Apizr mediator to send request using MediatR by calling expression ApizrMediatorBase ApizrMediator<TWebApi> Apizr mediator to send request using MediatR by calling expression Interfaces IApizrMediator Apizr mediator to send request using MediatR by calling expression IApizrMediatorBase Apizr base mediator IApizrMediator<TWebApi> IApizrMediator but dedicated to TWebApi, getting all shorter"
  },
  "api/Apizr.Mediation.Requesting.UploadCommand-1.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadCommand-1.html",
    "title": "Class UploadCommand<TUploadApi> | Apizr",
    "keywords": "Class UploadCommand<TUploadApi> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation upload command public class UploadCommand<TUploadApi> : UploadCommand<TUploadApi, HttpResponseMessage>, IMediationCommand<Unit, HttpResponseMessage>, IRequest<HttpResponseMessage>, IBaseRequest where TUploadApi : IUploadApi Type Parameters TUploadApi Inheritance object RequestBase<HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadCommand<TUploadApi, HttpResponseMessage> UploadCommand<TUploadApi> Implements IMediationCommand<Unit, HttpResponseMessage> IRequest<HttpResponseMessage> IBaseRequest Derived UploadCommand Inherited Members UploadCommand<TUploadApi, HttpResponseMessage>.FileInfoPart UploadCommand<TUploadApi, HttpResponseMessage>.StreamPart UploadCommand<TUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Mediation.Requesting.UploadCommand-2.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadCommand-2.html",
    "title": "Class UploadCommand<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadCommand<TUploadApi, TUploadApiResultData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation upload command public class UploadCommand<TUploadApi, TUploadApiResultData> : MediationCommandBase<Unit, TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<Unit, TUploadApiResultData>, IRequest<TUploadApiResultData>, IBaseRequest where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters TUploadApi The upload api type to manage TUploadApiResultData The upload api result data type Inheritance object RequestBase<TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadCommand<TUploadApi, TUploadApiResultData> Implements IMediationCommand<Unit, TUploadApiResultData> IRequest<TUploadApiResultData> IBaseRequest Derived UploadCommand<TUploadApi> UploadWithCommand<TUploadApiResultData> Inherited Members RequestBase<TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Properties ByteArrayPart The file bytes data public ByteArrayPart ByteArrayPart { get; } Property Value ByteArrayPart FileInfoPart The file info data public FileInfoPart FileInfoPart { get; } Property Value FileInfoPart StreamPart The file stream data public StreamPart StreamPart { get; } Property Value StreamPart"
  },
  "api/Apizr.Mediation.Requesting.UploadCommand.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadCommand.html",
    "title": "Class UploadCommand | Apizr",
    "keywords": "Class UploadCommand Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation upload command public class UploadCommand : UploadCommand<IUploadApi>, IMediationCommand<Unit, HttpResponseMessage>, IRequest<HttpResponseMessage>, IBaseRequest Inheritance object RequestBase<HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadCommand<IUploadApi, HttpResponseMessage> UploadCommand<IUploadApi> UploadCommand Implements IMediationCommand<Unit, HttpResponseMessage> IRequest<HttpResponseMessage> IBaseRequest Inherited Members UploadCommand<IUploadApi, HttpResponseMessage>.FileInfoPart UploadCommand<IUploadApi, HttpResponseMessage>.StreamPart UploadCommand<IUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Mediation.Requesting.UploadWithCommand-1.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadWithCommand-1.html",
    "title": "Class UploadWithCommand<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithCommand<TUploadApiResultData> Namespace Apizr.Mediation.Requesting Assembly Apizr.Integrations.FileTransfer.MediatR.dll The mediation upload command public class UploadWithCommand<TUploadApiResultData> : UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IMediationCommand<Unit, TUploadApiResultData>, IRequest<TUploadApiResultData>, IBaseRequest Type Parameters TUploadApiResultData Inheritance object RequestBase<TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData> UploadWithCommand<TUploadApiResultData> Implements IMediationCommand<Unit, TUploadApiResultData> IRequest<TUploadApiResultData> IBaseRequest Inherited Members UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.FileInfoPart UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.StreamPart UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.ByteArrayPart RequestBase<TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadWithCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadWithCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadWithCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadWithCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadWithCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadWithCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Mediation.Requesting.html": {
    "href": "api/Apizr.Mediation.Requesting.html",
    "title": "Namespace Apizr.Mediation.Requesting | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting Classes DownloadQuery The mediation download query with a dictionary query parameters type DownloadQuery<TDownloadApi> The mediation download query with a dictionary query parameters type DownloadQuery<TDownloadApi, TDownloadParams> The mediation download query with a custom query parameters type DownloadWithQuery<TDownloadParams> The mediation download query with a dictionary query parameters type ExecuteResultRequest<TWebApi, TApiData> The mediation execute result request (returning result) ExecuteResultRequest<TWebApi, TModelData, TApiData> The mediation execute result request (returning result) ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request (returning result) ExecuteSafeResultRequest<TWebApi, TApiData> The mediation execute result request (returning result) ExecuteSafeResultRequest<TWebApi, TModelData, TApiData> The mediation execute result request (returning result) ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request (returning result) ExecuteSafeUnitRequest<TWebApi> The mediation execute result request (returning result) ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData> The mediation execute unit request (returning no result) ExecuteUnitRequest<TWebApi> The mediation execute unit request (returning no result) ExecuteUnitRequest<TWebApi, TModelData, TApiData> The mediation execute unit request (returning no result) UploadCommand The mediation upload command UploadCommand<TUploadApi> The mediation upload command UploadCommand<TUploadApi, TUploadApiResultData> The mediation upload command UploadWithCommand<TUploadApiResultData> The mediation upload command"
  },
  "api/Apizr.MediationFileTransferOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MediationFileTransferOptionsBuilderExtensions.html",
    "title": "Class MediationFileTransferOptionsBuilderExtensions | Apizr",
    "keywords": "Class MediationFileTransferOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.FileTransfer.MediatR.dll public static class MediationFileTransferOptionsBuilderExtensions Inheritance object MediationFileTransferOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithFileTransferMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle file transfer requests management with some mediation public static IApizrExtendedCommonOptionsBuilder WithFileTransferMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedCommonOptionsBuilder Returns IApizrExtendedCommonOptionsBuilder WithFileTransferMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle file transfer requests management with some mediation public static IApizrExtendedManagerOptionsBuilder WithFileTransferMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedManagerOptionsBuilder Returns IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.MediationOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MediationOptionsBuilderExtensions.html",
    "title": "Class MediationOptionsBuilderExtensions | Apizr",
    "keywords": "Class MediationOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.MediatR.dll MediatR options builder extensions public static class MediationOptionsBuilderExtensions Inheritance object MediationOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle requests execution with some mediation public static IApizrExtendedCommonOptionsBuilder WithMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedCommonOptionsBuilder Returns IApizrExtendedCommonOptionsBuilder WithMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle requests execution with some mediation public static IApizrExtendedManagerOptionsBuilder WithMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedManagerOptionsBuilder Returns IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.MicrosoftCachingOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MicrosoftCachingOptionsBuilderExtensions.html",
    "title": "Class MicrosoftCachingOptionsBuilderExtensions | Apizr",
    "keywords": "Class MicrosoftCachingOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Extensions.Microsoft.Caching.dll Microsoft Caching options builder extensions public static class MicrosoftCachingOptionsBuilderExtensions Inheritance object MicrosoftCachingOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) Use any registered IDistributedCache implementation public static TBuilder WithDistributedCacheHandler<TBuilder, TCache>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilderBase Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder TCache WithInMemoryCacheHandler<TBuilder>(TBuilder) Use any registered IMemoryCache implementation public static TBuilder WithInMemoryCacheHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilderBase Parameters builder TBuilder Returns TBuilder Type Parameters TBuilder"
  },
  "api/Apizr.MonkeyCacheHandler.html": {
    "href": "api/Apizr.MonkeyCacheHandler.html",
    "title": "Class MonkeyCacheHandler | Apizr",
    "keywords": "Class MonkeyCacheHandler Namespace Apizr Assembly Apizr.Integrations.MonkeyCache.dll MonkeyCache cache handler implementation public class MonkeyCacheHandler : ICacheHandler Inheritance object MonkeyCacheHandler Implements ICacheHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MonkeyCacheHandler(IBarrel) public MonkeyCacheHandler(IBarrel barrel) Parameters barrel IBarrel Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method public Task ClearAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken An optional cancellation token Returns Task GetAsync<T>(string, CancellationToken) Map Apizr cache getting method to your cache handler method public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default) Parameters key string The key to get from cancellationToken CancellationToken An optional cancellation token Returns Task<T> Type Parameters T The expected value type RemoveAsync(string, CancellationToken) Map Apizr cache removing method to your cache handler method public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default) Parameters key string The key to remove from cancellationToken CancellationToken An optional cancellation token Returns Task<bool> SetAsync(string, object, TimeSpan?, CancellationToken) Map Apizr cache saving method to your cache handler method public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default) Parameters key string The key to cache at value object The value to cache lifeSpan TimeSpan? The optional life span cancellationToken CancellationToken An optional cancellation token Returns Task"
  },
  "api/Apizr.Optional.Commanding.IOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Commanding.IOptionalCommand-1.html",
    "title": "Interface IOptionalCommand<TError> | Apizr",
    "keywords": "Interface IOptionalCommand<TError> Namespace Apizr.Optional.Commanding Assembly Apizr.Integrations.Optional.dll A mediation command returning an optional error public interface IOptionalCommand<TError> : IRequest<Option<Unit, TError>>, IBaseRequest Type Parameters TError The optional error"
  },
  "api/Apizr.Optional.Commanding.html": {
    "href": "api/Apizr.Optional.Commanding.html",
    "title": "Namespace Apizr.Optional.Commanding | Apizr",
    "keywords": "Namespace Apizr.Optional.Commanding Interfaces IOptionalCommand<TError> A mediation command returning an optional error"
  },
  "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry.html",
    "title": "Class ApizrOptionalMediationRegistry | Apizr",
    "keywords": "Class ApizrOptionalMediationRegistry Namespace Apizr.Optional.Configuring.Registry Assembly Apizr.Integrations.Optional.dll Registry options available for extended registrations with optional mediation public class ApizrOptionalMediationRegistry : ApizrOptionalMediationRegistryBase, IApizrOptionalMediationConcurrentRegistry, IApizrOptionalMediationRegistry, IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Inheritance object ApizrOptionalMediationRegistryBase ApizrOptionalMediationRegistry Implements IApizrOptionalMediationConcurrentRegistry IApizrOptionalMediationRegistry IApizrOptionalMediationEnumerableRegistry IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>> IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrOptionalMediationRegistryBase.ConcurrentRegistry ApizrOptionalMediationRegistryBase.GetEnumerator() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrOptionalMediationRegistryBase.GetOptionalMediatorFor<TWebApi>() ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) ApizrOptionalMediationRegistryBase.TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) ApizrOptionalMediationRegistryBase.Count ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrOptionalMediationRegistryBase.ContainsOptionalMediatorFor<TWebApi>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOrUpdateManager(Type) public void AddOrUpdateManager(Type managerType) Parameters managerType Type"
  },
  "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.html",
    "title": "Class ApizrOptionalMediationRegistryBase | Apizr",
    "keywords": "Class ApizrOptionalMediationRegistryBase Namespace Apizr.Optional.Configuring.Registry Assembly Apizr.Integrations.Optional.dll Registry options available for extended registrations with optional mediation public abstract class ApizrOptionalMediationRegistryBase : IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Inheritance object ApizrOptionalMediationRegistryBase Implements IApizrOptionalMediationEnumerableRegistry IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>> IEnumerable Derived ApizrOptionalMediationRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrOptionalMediationRegistryBase() protected ApizrOptionalMediationRegistryBase() Fields ConcurrentRegistry protected readonly IDictionary<Type, Func<IApizrOptionalMediatorBase>> ConcurrentRegistry Field Value IDictionary<Type, Func<IApizrOptionalMediatorBase>> Properties Count Optional mediators count public int Count { get; } Property Value int Methods ContainsCrudOptionalMediatorFor<T>() Check if registry contains an optional mediator for T entity type public bool ContainsCrudOptionalMediatorFor<T>() where T : class Returns bool Type Parameters T The entity type to manage ContainsCrudOptionalMediatorFor<T, TKey>() Check if registry contains an optional mediator for T entity type with TKey key type public bool ContainsCrudOptionalMediatorFor<T, TKey>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Check if registry contains an optional mediator for T entity type with TKey key type and TReadAllResult ReadAll result type public bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains an optional mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type public bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsOptionalMediatorFor<TWebApi>() Check if registry contains an optional mediator for TWebApi api type public bool ContainsOptionalMediatorFor<TWebApi>() Returns bool Type Parameters TWebApi The api type GetCrudOptionalMediatorFor<T>() Get a Crud optional mediator instance for an entity type public IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T>() where T : class Returns IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type GetCrudOptionalMediatorFor<T, TKey>() Get a Crud optional mediator instance for an entity type with a specific key type public IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey>() where T : class Returns IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type public IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type public IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetEnumerator() Get factory enumerator public IEnumerator<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>> GetEnumerator() Returns IEnumerator<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>> GetOptionalMediatorFor<TWebApi>() Get an api optional mediator instance public IApizrOptionalMediator<TWebApi> GetOptionalMediatorFor<TWebApi>() Returns IApizrOptionalMediator<TWebApi> Type Parameters TWebApi The managed api type TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud optional mediator instance for an entity type public bool TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type public bool TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type public bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type public bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) Try to get an api optional mediator instance public bool TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi> mediator) Parameters mediator IApizrOptionalMediator<TWebApi> Returns bool Type Parameters TWebApi The managed api type"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationConcurrentRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationConcurrentRegistry.html",
    "title": "Interface IApizrOptionalMediationConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationConcurrentRegistry Namespace Apizr.Optional.Configuring.Registry Assembly Apizr.Integrations.Optional.dll Registry options available for extended registrations with optional mediation public interface IApizrOptionalMediationConcurrentRegistry : IApizrOptionalMediationRegistry, IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Inherited Members IApizrOptionalMediationEnumerableRegistry.Count IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.ContainsOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.GetOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrOptionalMediationEnumerableRegistry.TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>.GetEnumerator() IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdateManager(Type)"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.html",
    "title": "Interface IApizrOptionalMediationEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationEnumerableRegistry Namespace Apizr.Optional.Configuring.Registry Assembly Apizr.Integrations.Optional.dll Registry options available for extended registrations with optional mediation public interface IApizrOptionalMediationEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Inherited Members IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>.GetEnumerator() IEnumerable.GetEnumerator() Properties Count Optional mediators count int Count { get; } Property Value int Methods ContainsCrudOptionalMediatorFor<T>() Check if registry contains an optional mediator for T entity type bool ContainsCrudOptionalMediatorFor<T>() where T : class Returns bool Type Parameters T The entity type to manage ContainsCrudOptionalMediatorFor<T, TKey>() Check if registry contains an optional mediator for T entity type with TKey key type bool ContainsCrudOptionalMediatorFor<T, TKey>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Check if registry contains an optional mediator for T entity type with TKey key type and TReadAllResult ReadAll result type bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains an optional mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns bool Type Parameters T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsOptionalMediatorFor<TWebApi>() Check if registry contains an optional mediator for TWebApi api type bool ContainsOptionalMediatorFor<TWebApi>() Returns bool Type Parameters TWebApi The api type GetCrudOptionalMediatorFor<T>() Get a Crud optional mediator instance for an entity type IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T>() where T : class Returns IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type GetCrudOptionalMediatorFor<T, TKey>() Get a Crud optional mediator instance for an entity type with a specific key type IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey>() where T : class Returns IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetOptionalMediatorFor<TWebApi>() Get an api optional mediator instance IApizrOptionalMediator<TWebApi> GetOptionalMediatorFor<TWebApi>() Returns IApizrOptionalMediator<TWebApi> Type Parameters TWebApi The managed api type TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud optional mediator instance for an entity type bool TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type bool TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters mediator IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> Returns bool Type Parameters T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) Try to get an api optional mediator instance bool TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi> mediator) Parameters mediator IApizrOptionalMediator<TWebApi> Returns bool Type Parameters TWebApi The managed api type"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry.html",
    "title": "Interface IApizrOptionalMediationRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationRegistry Namespace Apizr.Optional.Configuring.Registry Assembly Apizr.Integrations.Optional.dll Registry options available for extended registrations with optional mediation public interface IApizrOptionalMediationRegistry : IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Inherited Members IApizrOptionalMediationEnumerableRegistry.Count IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.ContainsOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.GetOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrOptionalMediationEnumerableRegistry.TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>.GetEnumerator() IEnumerable.GetEnumerator()"
  },
  "api/Apizr.Optional.Configuring.Registry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.html",
    "title": "Namespace Apizr.Optional.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Optional.Configuring.Registry Classes ApizrOptionalMediationRegistry Registry options available for extended registrations with optional mediation ApizrOptionalMediationRegistryBase Registry options available for extended registrations with optional mediation Interfaces IApizrOptionalMediationConcurrentRegistry Registry options available for extended registrations with optional mediation IApizrOptionalMediationEnumerableRegistry Registry options available for extended registrations with optional mediation IApizrOptionalMediationRegistry Registry options available for extended registrations with optional mediation"
  },
  "api/Apizr.Optional.Cruding.CreateOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.CreateOptionalCommand-1.html",
    "title": "Class CreateOptionalCommand<TModelData> | Apizr",
    "keywords": "Class CreateOptionalCommand<TModelData> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation Create optional command public class CreateOptionalCommand<TModelData> : CreateCommandBase<TModelData, Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TModelData, Option<TModelData, ApizrException>>, IRequest<Option<TModelData, ApizrException>>, IBaseRequest Type Parameters TModelData The data type Inheritance object RequestBase<Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TModelData, Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommandBase<TModelData, Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateOptionalCommand<TModelData> Implements IMediationCommand<TModelData, Option<TModelData, ApizrException>> IRequest<Option<TModelData, ApizrException>> IBaseRequest Inherited Members CreateCommandBase<TModelData, Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateOptionalCommand(TModelData, Action<IApizrRequestOptionsBuilder>) The mediation Create optional command constructor public CreateOptionalCommand(TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters modelData TModelData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.DeleteOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.DeleteOptionalCommand-1.html",
    "title": "Class DeleteOptionalCommand<T> | Apizr",
    "keywords": "Class DeleteOptionalCommand<T> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation Delete optional command public class DeleteOptionalCommand<T> : DeleteCommandBase<T, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<int, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters T The api entity type Inheritance object RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<int, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, int, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteOptionalCommand<T> Implements IMediationCommand<int, Option<Unit, ApizrException>> IRequest<Option<Unit, ApizrException>> IBaseRequest Inherited Members DeleteCommandBase<T, int, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteOptionalCommand(int, Action<IApizrRequestOptionsBuilder>) The mediation Delete optional command constructor public DeleteOptionalCommand(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.DeleteOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Cruding.DeleteOptionalCommand-2.html",
    "title": "Class DeleteOptionalCommand<T, TKey> | Apizr",
    "keywords": "Class DeleteOptionalCommand<T, TKey> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation Delete optional command public class DeleteOptionalCommand<T, TKey> : DeleteCommandBase<T, TKey, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TKey, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters T The api entity type TKey The entity's crud key type Inheritance object RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TKey, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandBase<T, TKey, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteOptionalCommand<T, TKey> Implements IMediationCommand<TKey, Option<Unit, ApizrException>> IRequest<Option<Unit, ApizrException>> IBaseRequest Inherited Members DeleteCommandBase<T, TKey, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteOptionalCommand(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Delete optional command constructor public DeleteOptionalCommand(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.Handling.CreateOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.CreateOptionalCommandHandler-5.html",
    "title": "Class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The Create optional command handler public class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>>, IRequestHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>> IRequestHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>> Inherited Members CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(CreateOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public CreateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(CreateOptionalCommand<TModelEntity>, CancellationToken) Handling the Create command public override Task<Option<TModelEntity, ApizrException>> Handle(CreateOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request CreateOptionalCommand<TModelEntity> The Create command cancellationToken CancellationToken A cancellation token Returns Task<Option<TModelEntity, ApizrException>>"
  },
  "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-4.html",
    "title": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The Delete optional command handler public class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> IRequestHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(DeleteOptionalCommand<TModelEntity>, CancellationToken) Handling the Delete command public override Task<Option<Unit, ApizrException>> Handle(DeleteOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request DeleteOptionalCommand<TModelEntity> The Delete command cancellationToken CancellationToken A cancellation token Returns Task<Option<Unit, ApizrException>>"
  },
  "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-5.html",
    "title": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The Delete optional command handler public class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>>, IRequestHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>> IRequestHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Delete command public override Task<Option<Unit, ApizrException>> Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters request DeleteOptionalCommand<TModelEntity, TApiEntityKey> The Delete command cancellationToken CancellationToken A cancellation token Returns Task<Option<Unit, ApizrException>>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-4.html",
    "title": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The ReadAll optional query handler public class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IRequestHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> where TApiEntity : class Type Parameters TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Implements IMediationQueryHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> IRequestHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllOptionalQuery<TModelEntityReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>>) public ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> Methods Handle(ReadAllOptionalQuery<TModelEntityReadAllResult>, CancellationToken) Handling the ReadAll query public override Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Handle(ReadAllOptionalQuery<TModelEntityReadAllResult> request, CancellationToken cancellationToken) Parameters request ReadAllOptionalQuery<TModelEntityReadAllResult> The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-5.html",
    "title": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The ReadAll optional query handler public class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IRequestHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> where TApiEntity : class Type Parameters TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type TReadAllParams The query parameters type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Implements IMediationQueryHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> IRequestHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>>) public ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> Methods Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, CancellationToken) Handling the ReadAll query public override Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult> request, CancellationToken cancellationToken) Parameters request ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult> The ReadAll query cancellationToken CancellationToken A cancellation token Returns Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-4.html",
    "title": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The Read optional query handler public class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>>, IRequestHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>> where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>> IRequestHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadOptionalQuery<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(ReadOptionalQuery<TModelEntity>, CancellationToken) Handling the Read query public override Task<Option<TModelEntity, ApizrException<TModelEntity>>> Handle(ReadOptionalQuery<TModelEntity> request, CancellationToken cancellationToken) Parameters request ReadOptionalQuery<TModelEntity> The Read query cancellationToken CancellationToken A cancellation token Returns Task<Option<TModelEntity, ApizrException<TModelEntity>>>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-5.html",
    "title": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The Read optional query handler public class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>>, IRequestHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>> IRequestHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Read query public override Task<Option<TModelEntity, ApizrException<TModelEntity>>> Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters request ReadOptionalQuery<TModelEntity, TApiEntityKey> The Read query cancellationToken CancellationToken A cancellation token Returns Task<Option<TModelEntity, ApizrException<TModelEntity>>>"
  },
  "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-4.html",
    "title": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The Update optional command handler public class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> IRequestHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>>) public UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> Methods Handle(UpdateOptionalCommand<TModelEntity>, CancellationToken) Handling the Update command public override Task<Option<Unit, ApizrException>> Handle(UpdateOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters request UpdateOptionalCommand<TModelEntity> The Update command cancellationToken CancellationToken A cancellation token Returns Task<Option<Unit, ApizrException>>"
  },
  "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-5.html",
    "title": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Handling Assembly Apizr.Integrations.Optional.dll The Update optional command handler public class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>> IRequestHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) public UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters crudApiManager IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Methods Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity>, CancellationToken) Handling the Update command public override Task<Option<Unit, ApizrException>> Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity> request, CancellationToken cancellationToken) Parameters request UpdateOptionalCommand<TApiEntityKey, TModelEntity> The Update command cancellationToken CancellationToken A cancellation token Returns Task<Option<Unit, ApizrException>>"
  },
  "api/Apizr.Optional.Cruding.Handling.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.html",
    "title": "Namespace Apizr.Optional.Cruding.Handling | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding.Handling Classes CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Create optional command handler DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Delete optional command handler DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Delete optional command handler ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> The ReadAll optional query handler ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> The ReadAll optional query handler ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Read optional query handler ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Read optional query handler UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Update optional command handler UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Update optional command handler"
  },
  "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-1.html",
    "title": "Class ReadAllOptionalQuery<TReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQuery<TReadAllResult> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation ReadAll optional query public class ReadAllOptionalQuery<TReadAllResult> : ReadAllQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IBaseRequest Type Parameters TReadAllResult The api result type Inheritance object RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<IDictionary<string, object>, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllOptionalQuery<TReadAllResult> Implements IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>> IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>> IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<string, object>, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor public ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ReadAllOptionalQuery(IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor public ReadAllOptionalQuery(IDictionary<string, object> parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters IDictionary<string, object> The query parameters to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-2.html",
    "title": "Class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation ReadAll optional query public class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : ReadAllQueryBase<TReadAllParams, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IBaseRequest Type Parameters TReadAllParams The ReadAll parameters type TReadAllResult The api result type Inheritance object RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllParams, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>> IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>> IBaseRequest Inherited Members ReadAllQueryBase<TReadAllParams, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor public ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ReadAllOptionalQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor public ReadAllOptionalQuery(TReadAllParams parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters parameters TReadAllParams The query parameters to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.ReadOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Cruding.ReadOptionalQuery-1.html",
    "title": "Class ReadOptionalQuery<TResultData> | Apizr",
    "keywords": "Class ReadOptionalQuery<TResultData> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation Read optional query public class ReadOptionalQuery<TResultData> : ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TResultData, ApizrException<TResultData>>>, IRequest<Option<TResultData, ApizrException<TResultData>>>, IBaseRequest Type Parameters TResultData The result entity type Inheritance object RequestBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, int, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadOptionalQuery<TResultData> Implements IMediationQuery<Option<TResultData, ApizrException<TResultData>>> IRequest<Option<TResultData, ApizrException<TResultData>>> IBaseRequest Inherited Members ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, int, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOptionalQuery(int, Action<IApizrRequestOptionsBuilder>) The mediation Read optional query constructor public ReadOptionalQuery(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.ReadOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Cruding.ReadOptionalQuery-2.html",
    "title": "Class ReadOptionalQuery<TResultData, TKey> | Apizr",
    "keywords": "Class ReadOptionalQuery<TResultData, TKey> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation Read optional query public class ReadOptionalQuery<TResultData, TKey> : ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TResultData, ApizrException<TResultData>>>, IRequest<Option<TResultData, ApizrException<TResultData>>>, IBaseRequest Type Parameters TResultData The result entity type TKey The entity's crud key type Inheritance object RequestBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder> ReadOptionalQuery<TResultData, TKey> Implements IMediationQuery<Option<TResultData, ApizrException<TResultData>>> IRequest<Option<TResultData, ApizrException<TResultData>>> IBaseRequest Inherited Members ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOptionalQuery(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Read optional query constructor public ReadOptionalQuery(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator-4.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator-4.html",
    "title": "Class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Sending Assembly Apizr.Integrations.Optional.dll Apizr mediator dedicated to cruding and with optional result public class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters TApiEntity TApiEntityKey TReadAllResult TReadAllParams Inheritance object ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrCrudOptionalMediator(IApizrCrudOptionalMediator) public ApizrCrudOptionalMediator(IApizrCrudOptionalMediator apizrMediator) Parameters apizrMediator IApizrCrudOptionalMediator Methods SendCreateOptionalCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException>> Type Parameters TModelEntity SendDeleteOptionalCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> Type Parameters TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> Type Parameters TModelReadAllResult SendReadOptionalQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException<TModelEntity>>> Type Parameters TModelEntity SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TModelEntity"
  },
  "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.html",
    "title": "Class ApizrCrudOptionalMediator | Apizr",
    "keywords": "Class ApizrCrudOptionalMediator Namespace Apizr.Optional.Cruding.Sending Assembly Apizr.Integrations.Optional.dll Apizr mediator dedicated to cruding and with optional result public class ApizrCrudOptionalMediator : ApizrMediatorBase, IApizrCrudOptionalMediator, IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase Inheritance object ApizrMediatorBase ApizrCrudOptionalMediator Implements IApizrCrudOptionalMediator IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrCrudOptionalMediator(IMediator) public ApizrCrudOptionalMediator(IMediator mediator) Parameters mediator IMediator Methods SendCreateOptionalCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException>> Type Parameters TApiEntity The api entity type SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> Type Parameters TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> Type Parameters TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException<TApiEntity>>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException<TModelEntity>>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator-4.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator-4.html",
    "title": "Interface IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Namespace Apizr.Optional.Cruding.Sending Assembly Apizr.Integrations.Optional.dll IApizrCrudOptionalMediator but dedicated to TApiEntity cruding with optional result, getting all shorter public interface IApizrCrudOptionalMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters TApiEntity TApiEntityKey TReadAllResult TReadAllParams Methods SendCreateOptionalCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters payload TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters payload TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException>> Type Parameters TModelEntity SendDeleteOptionalCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Type Parameters TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Type Parameters TModelEntityReadAllResult SendReadOptionalQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException<TModelEntity>>> Type Parameters TModelEntity SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key payload TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key payload TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TModelEntity"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.html",
    "title": "Interface IApizrCrudOptionalMediator | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediator Namespace Apizr.Optional.Cruding.Sending Assembly Apizr.Integrations.Optional.dll Apizr mediator dedicated to cruding and with optional result public interface IApizrCrudOptionalMediator : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase Methods SendCreateOptionalCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TApiEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException>> Type Parameters TApiEntity The api entity type SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters entity TModelEntity The entity to create optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> Type Parameters TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> Type Parameters TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters readAllParams TReadAllParams The read all filters optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> Type Parameters TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiEntity, ApizrException<TApiEntity>>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelEntity, ApizrException<TModelEntity>>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TApiEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TApiEntityKey The entity key entity TModelEntity The entity to update optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediatorBase.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediatorBase.html",
    "title": "Interface IApizrCrudOptionalMediatorBase | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediatorBase Namespace Apizr.Optional.Cruding.Sending Assembly Apizr.Integrations.Optional.dll Apizr base optional mediator dedicated to cruding public interface IApizrCrudOptionalMediatorBase : IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase"
  },
  "api/Apizr.Optional.Cruding.Sending.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.html",
    "title": "Namespace Apizr.Optional.Cruding.Sending | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding.Sending Classes ApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to cruding and with optional result Interfaces IApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result IApizrCrudOptionalMediatorBase Apizr base optional mediator dedicated to cruding IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediator but dedicated to TApiEntity cruding with optional result, getting all shorter"
  },
  "api/Apizr.Optional.Cruding.UpdateOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.UpdateOptionalCommand-1.html",
    "title": "Class UpdateOptionalCommand<TRequestData> | Apizr",
    "keywords": "Class UpdateOptionalCommand<TRequestData> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation Update optional command public class UpdateOptionalCommand<TRequestData> : UpdateCommandBase<TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters TRequestData The request data type Inheritance object RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<int, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateOptionalCommand<TRequestData> Implements IMediationCommand<TRequestData, Option<Unit, ApizrException>> IRequest<Option<Unit, ApizrException>> IBaseRequest Inherited Members UpdateCommandBase<int, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<int, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateOptionalCommand(int, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update optional command constructor public UpdateOptionalCommand(int key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key int The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.UpdateOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Cruding.UpdateOptionalCommand-2.html",
    "title": "Class UpdateOptionalCommand<TKey, TRequestData> | Apizr",
    "keywords": "Class UpdateOptionalCommand<TKey, TRequestData> Namespace Apizr.Optional.Cruding Assembly Apizr.Integrations.Optional.dll The mediation Update optional command public class UpdateOptionalCommand<TKey, TRequestData> : UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters TKey The entity's crud key type TRequestData The request data type Inheritance object RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UpdateOptionalCommand<TKey, TRequestData> Implements IMediationCommand<TRequestData, Option<Unit, ApizrException>> IRequest<Option<Unit, ApizrException>> IBaseRequest Inherited Members UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateOptionalCommand(TKey, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update optional command constructor public UpdateOptionalCommand(TKey key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters key TKey The entity's crud key requestData TRequestData The request data to send optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Cruding.html": {
    "href": "api/Apizr.Optional.Cruding.html",
    "title": "Namespace Apizr.Optional.Cruding | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding Classes CreateOptionalCommand<TModelData> The mediation Create optional command DeleteOptionalCommand<T> The mediation Delete optional command DeleteOptionalCommand<T, TKey> The mediation Delete optional command ReadAllOptionalQuery<TReadAllResult> The mediation ReadAll optional query ReadAllOptionalQuery<TReadAllParams, TReadAllResult> The mediation ReadAll optional query ReadOptionalQuery<TResultData> The mediation Read optional query ReadOptionalQuery<TResultData, TKey> The mediation Read optional query UpdateOptionalCommand<TRequestData> The mediation Update optional command UpdateOptionalCommand<TKey, TRequestData> The mediation Update optional command"
  },
  "api/Apizr.Optional.Extending.ApizrOptionalMediatorFileTransferExtensions.html": {
    "href": "api/Apizr.Optional.Extending.ApizrOptionalMediatorFileTransferExtensions.html",
    "title": "Class ApizrOptionalMediatorFileTransferExtensions | Apizr",
    "keywords": "Class ApizrOptionalMediatorFileTransferExtensions Namespace Apizr.Optional.Extending Assembly Apizr.Integrations.FileTransfer.Optional.dll Extensions for file transfer requests with optional result public static class ApizrOptionalMediatorFileTransferExtensions Inheritance object ApizrOptionalMediatorFileTransferExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi with optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQuery(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi with a dictionary query parameters type and optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQuery(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> Type Parameters TDownloadApi The download api type SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a dictionary query parameters type and optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> Type Parameters TDownloadApi The download api type SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> Type Parameters TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a custom query parameters type and optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> Type Parameters TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadWithOptionalQueryWith<TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams and optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadWithOptionalQueryWith<TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> Type Parameters TDownloadParams The query parameters type SendDownloadWithOptionalQuery<TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams and optional result public static Task<Option<FileInfo, ApizrException>> SendDownloadWithOptionalQuery<TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<FileInfo, ApizrException>> Type Parameters TDownloadParams The query parameters type SendUploadOptionalCommand(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file bytes data with optional result public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file info data with optional result public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file stream data with optional result public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data with optional result public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommandFor<TUploadApi>(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters apizrMediator IApizrOptionalMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<HttpResponseMessage, ApizrException>> Type Parameters TUploadApi The upload api type SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data with optional result public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommandFor<TUploadApi>(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<HttpResponseMessage, ApizrException>> Type Parameters TUploadApi The upload api type SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data with optional result public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommandFor<TUploadApi>(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters apizrMediator IApizrOptionalMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<HttpResponseMessage, ApizrException>> Type Parameters TUploadApi The upload api type SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data with optional result public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters apizrMediator IApizrOptionalMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<TUploadApiResultData, ApizrException>> Type Parameters TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data with optional result public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<TUploadApiResultData, ApizrException>> Type Parameters TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data with optional result public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters apizrMediator IApizrOptionalMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<TUploadApiResultData, ApizrException>> Type Parameters TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file bytes data with optional result public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadWithOptionalCommand<TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<TUploadApiResultData, ApizrException>> Type Parameters TUploadApiResultData The upload api result data type SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file info data with optional result public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadWithOptionalCommand<TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<TUploadApiResultData, ApizrException>> Type Parameters TUploadApiResultData The upload api result data type SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file stream data with optional result public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadWithOptionalCommand<TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters apizrMediator IApizrOptionalMediator The extended mediator streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<Option<TUploadApiResultData, ApizrException>> Type Parameters TUploadApiResultData The upload api result data type"
  },
  "api/Apizr.Optional.Extending.OptionalMediationExtensions.html": {
    "href": "api/Apizr.Optional.Extending.OptionalMediationExtensions.html",
    "title": "Class OptionalMediationExtensions | Apizr",
    "keywords": "Class OptionalMediationExtensions Namespace Apizr.Optional.Extending Assembly Apizr.Integrations.Optional.dll Optional request extensions public static class OptionalMediationExtensions Inheritance object OptionalMediationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CatchAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<Exception>, bool) Return TResult (from fetch or cache), no matter of exception (handled by onException). Could throw if you ask to with letThrowOnExceptionWithEmptyCache in case of exception with empty cache (onException won't be called), otherwise return the empty cache (have to be managed) after calling onException action. public static Task<TResult> CatchAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<Exception> onException, bool letThrowOnExceptionWithEmptyCache = false) Parameters option Task<Option<TResult, ApizrException<TResult>>> onException Action<Exception> Action to call to handle exception (like informing the user) before returning result from cache letThrowOnExceptionWithEmptyCache bool True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result Returns Task<TResult> Type Parameters TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<TResult>) The action will be invoked just before throwing any exception that might have occurred during request execution public static Task OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<TResult> onResult) Parameters option Task<Option<TResult, ApizrException<TResult>>> onResult Action<TResult> The action to invoke Returns Task Type Parameters TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, bool>) The function will be invoked with the returned result and potential occurred exception. You might decide to throw from the function itself, or to return the success boolean. public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, bool> onResult) Parameters option Task<Option<TResult, ApizrException<TResult>>> onResult Func<TResult, ApizrException<TResult>, bool> The function to invoke Returns Task<bool> Type Parameters TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, Task<bool>>) The function will be invoked with the returned result and potential occurred exception. Checking exception, you might decide to throw it from the function itself, or to return the success boolean. public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, Task<bool>> onResult) Parameters option Task<Option<TResult, ApizrException<TResult>>> onResult Func<TResult, ApizrException<TResult>, Task<bool>> The function to invoke Returns Task<bool> Type Parameters TResult The returned result (from fetch if succeed or cache if failed)"
  },
  "api/Apizr.Optional.Extending.html": {
    "href": "api/Apizr.Optional.Extending.html",
    "title": "Namespace Apizr.Optional.Extending | Apizr",
    "keywords": "Namespace Apizr.Optional.Extending Classes ApizrOptionalMediatorFileTransferExtensions Extensions for file transfer requests with optional result OptionalMediationExtensions Optional request extensions"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-4.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-4.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute result request (returning optional result) public abstract class ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<TApiData, ApizrException<TApiData>>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Option<TApiData, ApizrException<TApiData>>> IBaseRequest Derived ExecuteOptionalResultRequest<TWebApi, TApiData> Inherited Members ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-5.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-5.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute result request (returning optional result) public abstract class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<TModelData, ApizrException<TModelData>>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Option<TModelData, ApizrException<TModelData>>> IBaseRequest Derived ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Inherited Members ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-7.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-7.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute result request (returning optional result) public abstract class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<TModelResultData, ApizrException<TModelResultData>>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Option<TModelResultData, ApizrException<TModelResultData>>> IBaseRequest Derived ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inherited Members ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelData TModelRequestData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelData TModelRequestData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-3.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-3.html",
    "title": "Class ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute optional unit request (returning no result) public abstract class ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestBase<TWebApi, Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Option<Unit, ApizrException>> IBaseRequest Derived ExecuteOptionalUnitRequest<TWebApi> Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor protected ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor protected ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, Task>> The request to execute optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-5.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-5.html",
    "title": "Class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute optional unit request (returning no result) public abstract class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<Option<Unit, ApizrException>, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequest<Option<Unit, ApizrException>> IBaseRequest Derived ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor protected ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor protected ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<TApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.Base.html": {
    "href": "api/Apizr.Optional.Requesting.Base.html",
    "title": "Namespace Apizr.Optional.Requesting.Base | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Base Classes ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request (returning no result) ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request (returning no result)"
  },
  "api/Apizr.Optional.Requesting.DownloadOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadOptionalQuery-1.html",
    "title": "Class DownloadOptionalQuery<TDownloadApi> | Apizr",
    "keywords": "Class DownloadOptionalQuery<TDownloadApi> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation download query with a dictionary query parameters type public class DownloadOptionalQuery<TDownloadApi> : DownloadOptionalQuery<TDownloadApi, IDictionary<string, object>>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest where TDownloadApi : IDownloadApi Type Parameters TDownloadApi The download api type to manage Inheritance object RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadOptionalQuery<TDownloadApi, IDictionary<string, object>> DownloadOptionalQuery<TDownloadApi> Implements IMediationQuery<Option<FileInfo, ApizrException>> IRequest<Option<FileInfo, ApizrException>> IBaseRequest Derived DownloadOptionalQuery Inherited Members DownloadOptionalQuery<TDownloadApi, IDictionary<string, object>>.FileInfo DownloadOptionalQuery<TDownloadApi, IDictionary<string, object>>.DownloadParams RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadOptionalQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadOptionalQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options DownloadOptionalQuery(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadOptionalQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Optional.Requesting.DownloadOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadOptionalQuery-2.html",
    "title": "Class DownloadOptionalQuery<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadOptionalQuery<TDownloadApi, TDownloadParams> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation download query with a custom query parameters type public class DownloadOptionalQuery<TDownloadApi, TDownloadParams> : MediationQueryBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters TDownloadApi The download api type to manage TDownloadParams The query parameters type Inheritance object RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadOptionalQuery<TDownloadApi, TDownloadParams> Implements IMediationQuery<Option<FileInfo, ApizrException>> IRequest<Option<FileInfo, ApizrException>> IBaseRequest Derived DownloadOptionalQuery<TDownloadApi> DownloadWithOptionalQuery<TDownloadParams> Inherited Members RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadOptionalQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadOptionalQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Properties DownloadParams Some custom query parameters public TDownloadParams DownloadParams { get; } Property Value TDownloadParams FileInfo Some information about the file to download public FileInfo FileInfo { get; } Property Value FileInfo"
  },
  "api/Apizr.Optional.Requesting.DownloadOptionalQuery.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadOptionalQuery.html",
    "title": "Class DownloadOptionalQuery | Apizr",
    "keywords": "Class DownloadOptionalQuery Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation download query with a dictionary query parameters type public class DownloadOptionalQuery : DownloadOptionalQuery<IDownloadApi>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest Inheritance object RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadOptionalQuery<IDownloadApi, IDictionary<string, object>> DownloadOptionalQuery<IDownloadApi> DownloadOptionalQuery Implements IMediationQuery<Option<FileInfo, ApizrException>> IRequest<Option<FileInfo, ApizrException>> IBaseRequest Inherited Members DownloadOptionalQuery<IDownloadApi, IDictionary<string, object>>.FileInfo DownloadOptionalQuery<IDownloadApi, IDictionary<string, object>>.DownloadParams RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadOptionalQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadOptionalQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options DownloadOptionalQuery(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadOptionalQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams IDictionary<string, object> Some query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Optional.Requesting.DownloadWithOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadWithOptionalQuery-1.html",
    "title": "Class DownloadWithOptionalQuery<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithOptionalQuery<TDownloadParams> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation download query with a dictionary query parameters type public class DownloadWithOptionalQuery<TDownloadParams> : DownloadOptionalQuery<IDownloadApi<TDownloadParams>, TDownloadParams>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest Type Parameters TDownloadParams The query parameters type Inheritance object RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationQueryBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadOptionalQuery<IDownloadApi<TDownloadParams>, TDownloadParams> DownloadWithOptionalQuery<TDownloadParams> Implements IMediationQuery<Option<FileInfo, ApizrException>> IRequest<Option<FileInfo, ApizrException>> IBaseRequest Inherited Members DownloadOptionalQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.FileInfo DownloadOptionalQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadParams RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadWithOptionalQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadWithOptionalQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options DownloadWithOptionalQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor public DownloadWithOptionalQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-2.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-2.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TApiData> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.Optional.dll The mediation execute optional result request (returning result) public class ExecuteOptionalResultRequest<TWebApi, TApiData> : ExecuteOptionalResultRequestBase<TWebApi, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<TApiData, ApizrException<TApiData>>>, IBaseRequest Type Parameters TWebApi The web api type TApiData The api data type Inheritance object RequestBase<Option<TApiData, ApizrException<TApiData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TApiData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequest<TWebApi, TApiData> Implements IRequest<Option<TApiData, ApizrException<TApiData>>> IBaseRequest Inherited Members ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TApiData, ApizrException<TApiData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-3.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-3.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.Optional.dll The mediation execute optional result request (returning result) public class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> : ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<TModelData, ApizrException<TModelData>>>, IBaseRequest Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestBase<Option<TModelData, ApizrException<TModelData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TApiData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Implements IRequest<Option<TModelData, ApizrException<TModelData>>> IBaseRequest Inherited Members ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelData, ApizrException<TModelData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-5.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-5.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.Optional.dll The mediation execute optional result request (returning result) public class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<TModelResultData, ApizrException<TModelResultData>>>, IBaseRequest Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Inheritance object RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements IRequest<Option<TModelResultData, ApizrException<TModelResultData>>> IBaseRequest Inherited Members ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelData TModelRequestData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiResultData>>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor public ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The request to execute modelData TModelRequestData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-1.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-1.html",
    "title": "Class ExecuteOptionalUnitRequest<TWebApi> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequest<TWebApi> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.Optional.dll The mediation execute optional unit request (returning no result) public class ExecuteOptionalUnitRequest<TWebApi> : ExecuteOptionalUnitRequestBase<TWebApi, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters TWebApi The web api type Inheritance object RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequest<TWebApi> Implements IRequest<Option<Unit, ApizrException>> IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor public ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalUnitRequest(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor public ExecuteOptionalUnitRequest(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The request to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-3.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-3.html",
    "title": "Class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.Optional.dll The mediation execute optional unit request (returning no result) public class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> : ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteRequestBase<Option<Unit, ApizrException>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Implements IRequest<Option<Unit, ApizrException>> IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor public ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request ExecuteOptionalUnitRequest(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor public ExecuteOptionalUnitRequest(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The request to execute modelData TModelData The data provided to the request optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-5.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-5.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Handling.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute optional result request handler public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<TApiData, ApizrException<TApiData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, Option<TApiData, ApizrException<TApiData>>> Derived ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-6.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-6.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Handling.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute optional result request handler public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<TModelData, ApizrException<TModelData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, Option<TModelData, ApizrException<TModelData>>> Derived ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-8.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-8.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Handling.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute optional result request handler public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<TModelResultData, ApizrException<TModelResultData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, Option<TModelResultData, ApizrException<TModelResultData>>> Derived ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-4.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-4.html",
    "title": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Handling.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute optional unit request handler public abstract class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<Unit, ApizrException>> where TRequest : ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, Option<Unit, ApizrException>> Derived ExecuteOptionalUnitRequestHandler<TWebApi> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-6.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-6.html",
    "title": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Namespace Apizr.Optional.Requesting.Handling.Base Assembly Apizr.Integrations.Optional.dll The top level base mediation execute optional unit request handler public abstract class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<Unit, ApizrException>> where TRequest : ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Inheritance object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IRequestHandler<TRequest, Option<Unit, ApizrException>> Derived ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi>) protected ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.html",
    "title": "Namespace Apizr.Optional.Requesting.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Handling.Base Classes ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request handler ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request handler"
  },
  "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-1.html",
    "title": "Class DownloadOptionalQueryHandler<TDownloadApi> | Apizr",
    "keywords": "Class DownloadOptionalQueryHandler<TDownloadApi> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation handler for DownloadOptionalQuery<TDownloadApi> public class DownloadOptionalQueryHandler<TDownloadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadOptionalQuery<TDownloadApi>, Option<FileInfo, ApizrException>>, IRequestHandler<DownloadOptionalQuery, Option<FileInfo, ApizrException>> where TDownloadApi : IDownloadApi Type Parameters TDownloadApi The download api type to manage Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadOptionalQueryHandler<TDownloadApi> Implements IRequestHandler<DownloadOptionalQuery<TDownloadApi>, Option<FileInfo, ApizrException>> IRequestHandler<DownloadOptionalQuery, Option<FileInfo, ApizrException>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi>) The mediation handler for DownloadOptionalQuery<TDownloadApi> public DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi> downloadManager) Parameters downloadManager IApizrDownloadManager<TDownloadApi> The download manager Methods Handle(DownloadOptionalQuery, CancellationToken) Handling the download optional request public Task<Option<FileInfo, ApizrException>> Handle(DownloadOptionalQuery request, CancellationToken cancellationToken) Parameters request DownloadOptionalQuery The download optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<FileInfo, ApizrException>> Handle(DownloadOptionalQuery<TDownloadApi>, CancellationToken) Handling the download optional request public Task<Option<FileInfo, ApizrException>> Handle(DownloadOptionalQuery<TDownloadApi> request, CancellationToken cancellationToken) Parameters request DownloadOptionalQuery<TDownloadApi> The download optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<FileInfo, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-2.html",
    "title": "Class DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation handler for DownloadOptionalQuery<TDownloadApi, TDownloadParams> public class DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadOptionalQuery<TDownloadApi, TDownloadParams>, Option<FileInfo, ApizrException>> where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters TDownloadApi The download api type to manage TDownloadParams The query parameters type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> Implements IRequestHandler<DownloadOptionalQuery<TDownloadApi, TDownloadParams>, Option<FileInfo, ApizrException>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams>) The mediation handler for DownloadOptionalQuery<TDownloadApi, TDownloadParams> public DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams> downloadManager) Parameters downloadManager IApizrDownloadManager<TDownloadApi, TDownloadParams> The download manager Methods Handle(DownloadOptionalQuery<TDownloadApi, TDownloadParams>, CancellationToken) Handling the download optional request public Task<Option<FileInfo, ApizrException>> Handle(DownloadOptionalQuery<TDownloadApi, TDownloadParams> request, CancellationToken cancellationToken) Parameters request DownloadOptionalQuery<TDownloadApi, TDownloadParams> The download optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<FileInfo, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.DownloadWithOptionalQueryHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.DownloadWithOptionalQueryHandler-1.html",
    "title": "Class DownloadWithOptionalQueryHandler<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithOptionalQueryHandler<TDownloadParams> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation handler for DownloadWithOptionalQuery<TDownloadParams> public class DownloadWithOptionalQueryHandler<TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadWithOptionalQuery<TDownloadParams>, Option<FileInfo, ApizrException>> Type Parameters TDownloadParams The query parameters type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> DownloadWithOptionalQueryHandler<TDownloadParams> Implements IRequestHandler<DownloadWithOptionalQuery<TDownloadParams>, Option<FileInfo, ApizrException>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownloadWithOptionalQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) The mediation handler for DownloadWithOptionalQuery<TDownloadParams> public DownloadWithOptionalQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> downloadManager) Parameters downloadManager IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> The download manager Methods Handle(DownloadWithOptionalQuery<TDownloadParams>, CancellationToken) Handling the download optional request public Task<Option<FileInfo, ApizrException>> Handle(DownloadWithOptionalQuery<TDownloadParams> request, CancellationToken cancellationToken) Parameters request DownloadWithOptionalQuery<TDownloadParams> The download optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<FileInfo, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-2.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.Optional.dll The mediation execute optional result request handler public class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TApiData>, Option<TApiData, ApizrException<TApiData>>> Type Parameters TWebApi The web api type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Implements IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TApiData>, Option<TApiData, ApizrException<TApiData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalResultRequest<TWebApi, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteOptionalResultRequest<TWebApi, TApiData>, CancellationToken) Handling the execute result request public override Task<Option<TApiData, ApizrException<TApiData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteOptionalResultRequest<TWebApi, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Option<TApiData, ApizrException<TApiData>>>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-3.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-3.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.Optional.dll The mediation execute optional result request handler public class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Implements IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, Option<TModelData, ApizrException<TModelData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute result request public override Task<Option<TModelData, ApizrException<TModelData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Option<TModelData, ApizrException<TModelData>>>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-5.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-5.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.Optional.dll The mediation execute optional result request handler public class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Option<TModelResultData, ApizrException<TModelResultData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) Handling the execute result request public override Task<Option<TModelResultData, ApizrException<TModelResultData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request, CancellationToken cancellationToken) Parameters request ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-1.html",
    "title": "Class ExecuteOptionalUnitRequestHandler<TWebApi> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandler<TWebApi> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.Optional.dll The mediation execute optional unit request handler public class ExecuteOptionalUnitRequestHandler<TWebApi> : ExecuteOptionalUnitRequestHandlerBase<TWebApi, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalUnitRequest<TWebApi>, Option<Unit, ApizrException>> Type Parameters TWebApi The web api type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandler<TWebApi> Implements IRequestHandler<ExecuteOptionalUnitRequest<TWebApi>, Option<Unit, ApizrException>> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>) public ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken) Handling the execute unit request public override Task<Option<Unit, ApizrException>> Handle(ExecuteOptionalUnitRequest<TWebApi> request, CancellationToken cancellationToken) Parameters request ExecuteOptionalUnitRequest<TWebApi> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Option<Unit, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-3.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-3.html",
    "title": "Class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.Optional.dll The mediation execute optional unit request handler public class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> : ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, Option<Unit, ApizrException>> Type Parameters TWebApi The web api type TModelData The model data type TApiData The api data type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Implements IRequestHandler<ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, Option<Unit, ApizrException>> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>) public ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters webApiManager IApizrManager<TWebApi> Methods Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute unit request public override Task<Option<Unit, ApizrException>> Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters request ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> The execute result request cancellationToken CancellationToken A cancellation token Returns Task<Option<Unit, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-1.html",
    "title": "Class UploadOptionalCommandHandler<TUploadApi> | Apizr",
    "keywords": "Class UploadOptionalCommandHandler<TUploadApi> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation handler for UploadOptionalCommand<TUploadApi> public class UploadOptionalCommandHandler<TUploadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadOptionalCommand<TUploadApi>, Option<HttpResponseMessage, ApizrException>>, IRequestHandler<UploadOptionalCommand, Option<HttpResponseMessage, ApizrException>> where TUploadApi : IUploadApi Type Parameters TUploadApi The upload api type to manage Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadOptionalCommandHandler<TUploadApi> Implements IRequestHandler<UploadOptionalCommand<TUploadApi>, Option<HttpResponseMessage, ApizrException>> IRequestHandler<UploadOptionalCommand, Option<HttpResponseMessage, ApizrException>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi>) The mediation handler for UploadOptionalCommand<TUploadApi> public UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi> uploadManager) Parameters uploadManager IApizrUploadManager<TUploadApi> The upload manager Methods Handle(UploadOptionalCommand, CancellationToken) Handling the upload optional request public Task<Option<HttpResponseMessage, ApizrException>> Handle(UploadOptionalCommand request, CancellationToken cancellationToken) Parameters request UploadOptionalCommand The upload optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<HttpResponseMessage, ApizrException>> Handle(UploadOptionalCommand<TUploadApi>, CancellationToken) Handling the upload optional request public Task<Option<HttpResponseMessage, ApizrException>> Handle(UploadOptionalCommand<TUploadApi> request, CancellationToken cancellationToken) Parameters request UploadOptionalCommand<TUploadApi> The upload optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<HttpResponseMessage, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-2.html",
    "title": "Class UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation handler for UploadOptionalCommand<TUploadApi, TUploadApiResultData> public class UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadOptionalCommand<TUploadApi, TUploadApiResultData>, Option<TUploadApiResultData, ApizrException>> where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters TUploadApi The upload api type to manage TUploadApiResultData The upload result type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> Implements IRequestHandler<UploadOptionalCommand<TUploadApi, TUploadApiResultData>, Option<TUploadApiResultData, ApizrException>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData>) The mediation handler for UploadOptionalCommand<TUploadApi, TUploadApiResultData> public UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData> uploadManager) Parameters uploadManager IApizrUploadManager<TUploadApi, TUploadApiResultData> The upload manager Methods Handle(UploadOptionalCommand<TUploadApi, TUploadApiResultData>, CancellationToken) Handling the upload optional request public Task<Option<TUploadApiResultData, ApizrException>> Handle(UploadOptionalCommand<TUploadApi, TUploadApiResultData> request, CancellationToken cancellationToken) Parameters request UploadOptionalCommand<TUploadApi, TUploadApiResultData> The upload optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<TUploadApiResultData, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.UploadWithOptionalCommandHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.UploadWithOptionalCommandHandler-1.html",
    "title": "Class UploadWithOptionalCommandHandler<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithOptionalCommandHandler<TUploadApiResultData> Namespace Apizr.Optional.Requesting.Handling Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation handler for UploadWithOptionalCommand<TUploadApiResultData> public class UploadWithOptionalCommandHandler<TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadWithOptionalCommand<TUploadApiResultData>, Option<TUploadApiResultData, ApizrException>> Type Parameters TUploadApiResultData The upload result type Inheritance object RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadWithOptionalCommandHandler<TUploadApiResultData> Implements IRequestHandler<UploadWithOptionalCommand<TUploadApiResultData>, Option<TUploadApiResultData, ApizrException>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadWithOptionalCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) The mediation handler for UploadWithOptionalCommand<TUploadApiResultData> public UploadWithOptionalCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> uploadManager) Parameters uploadManager IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> The upload manager Methods Handle(UploadWithOptionalCommand<TUploadApiResultData>, CancellationToken) Handling the upload optional request public Task<Option<TUploadApiResultData, ApizrException>> Handle(UploadWithOptionalCommand<TUploadApiResultData> request, CancellationToken cancellationToken) Parameters request UploadWithOptionalCommand<TUploadApiResultData> The upload optional request cancellationToken CancellationToken A cancellation token Returns Task<Option<TUploadApiResultData, ApizrException>>"
  },
  "api/Apizr.Optional.Requesting.Handling.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.html",
    "title": "Namespace Apizr.Optional.Requesting.Handling | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Handling Classes DownloadOptionalQueryHandler<TDownloadApi> The mediation handler for DownloadOptionalQuery<TDownloadApi> DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> The mediation handler for DownloadOptionalQuery<TDownloadApi, TDownloadParams> DownloadWithOptionalQueryHandler<TDownloadParams> The mediation handler for DownloadWithOptionalQuery<TDownloadParams> ExecuteOptionalResultRequestHandler<TWebApi, TApiData> The mediation execute optional result request handler ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> The mediation execute optional result request handler ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute optional result request handler ExecuteOptionalUnitRequestHandler<TWebApi> The mediation execute optional unit request handler ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> The mediation execute optional unit request handler UploadOptionalCommandHandler<TUploadApi> The mediation handler for UploadOptionalCommand<TUploadApi> UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> The mediation handler for UploadOptionalCommand<TUploadApi, TUploadApiResultData> UploadWithOptionalCommandHandler<TUploadApiResultData> The mediation handler for UploadWithOptionalCommand<TUploadApiResultData>"
  },
  "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator-1.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator-1.html",
    "title": "Class ApizrOptionalMediator<TWebApi> | Apizr",
    "keywords": "Class ApizrOptionalMediator<TWebApi> Namespace Apizr.Optional.Requesting.Sending Assembly Apizr.Integrations.Optional.dll IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter public class ApizrOptionalMediator<TWebApi> : IApizrOptionalMediator<TWebApi>, IApizrOptionalMediatorBase, IApizrMediatorBase Type Parameters TWebApi Inheritance object ApizrOptionalMediator<TWebApi> Implements IApizrOptionalMediator<TWebApi> IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrOptionalMediator(IApizrOptionalMediator) public ApizrOptionalMediator(IApizrOptionalMediator apizrMediator) Parameters apizrMediator IApizrOptionalMediator Methods SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TApiData The api result type SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TApiData The api result type SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.html",
    "title": "Class ApizrOptionalMediator | Apizr",
    "keywords": "Class ApizrOptionalMediator Namespace Apizr.Optional.Requesting.Sending Assembly Apizr.Integrations.Optional.dll Apizr mediator to send request using MediatR by calling expression and returning optional result public class ApizrOptionalMediator : ApizrMediatorBase, IApizrOptionalMediator, IApizrOptionalMediatorBase, IApizrMediatorBase Inheritance object ApizrMediatorBase ApizrOptionalMediator Implements IApizrOptionalMediator IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQueryWith<TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQuery<TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Constructors ApizrOptionalMediator(IMediator) public ApizrOptionalMediator(IMediator mediator) Parameters mediator IMediator Methods SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator-1.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator-1.html",
    "title": "Interface IApizrOptionalMediator<TWebApi> | Apizr",
    "keywords": "Interface IApizrOptionalMediator<TWebApi> Namespace Apizr.Optional.Requesting.Sending Assembly Apizr.Integrations.Optional.dll IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter public interface IApizrOptionalMediator<TWebApi> : IApizrOptionalMediatorBase, IApizrMediatorBase Type Parameters TWebApi Methods SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TApiData The api result type SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TApiData The api result type SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Returns Task<Option<Unit, ApizrException>> Type Parameters TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.html",
    "title": "Interface IApizrOptionalMediator | Apizr",
    "keywords": "Interface IApizrOptionalMediator Namespace Apizr.Optional.Requesting.Sending Assembly Apizr.Integrations.Optional.dll Apizr mediator to send request using MediatR by calling expression and returning optional result public interface IApizrOptionalMediator : IApizrOptionalMediatorBase, IApizrMediatorBase Extension Methods ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQueryWith<TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQuery<TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Methods SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TApiData, ApizrException<TApiData>>> Type Parameters TWebApi The web api type TApiData The api result type SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, Task<TApiData>>> The TWebApi call to execute optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task<TApiData>>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelData, ApizrException<TModelData>>> Type Parameters TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiData, Task>> The TWebApi call to execute modelData TModelData The model data to map optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<Unit, ApizrException>> Type Parameters TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters executeApiMethod Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> The TWebApi call to execute modelRequestData TModelRequestData The model request data optionsBuilder Action<IApizrRequestOptionsBuilder> Options provided to the request Returns Task<Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase.html",
    "title": "Interface IApizrOptionalMediatorBase | Apizr",
    "keywords": "Interface IApizrOptionalMediatorBase Namespace Apizr.Optional.Requesting.Sending Assembly Apizr.Integrations.Optional.dll Apizr base optional mediator public interface IApizrOptionalMediatorBase : IApizrMediatorBase"
  },
  "api/Apizr.Optional.Requesting.Sending.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.html",
    "title": "Namespace Apizr.Optional.Requesting.Sending | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Sending Classes ApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result ApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter Interfaces IApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result IApizrOptionalMediatorBase Apizr base optional mediator IApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter"
  },
  "api/Apizr.Optional.Requesting.UploadOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Requesting.UploadOptionalCommand-1.html",
    "title": "Class UploadOptionalCommand<TUploadApi> | Apizr",
    "keywords": "Class UploadOptionalCommand<TUploadApi> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation upload command returning an optional result public class UploadOptionalCommand<TUploadApi> : UploadOptionalCommand<TUploadApi, HttpResponseMessage>, IMediationCommand<Unit, Option<HttpResponseMessage, ApizrException>>, IRequest<Option<HttpResponseMessage, ApizrException>>, IBaseRequest where TUploadApi : IUploadApi Type Parameters TUploadApi The upload api type to manage Inheritance object RequestBase<Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadOptionalCommand<TUploadApi, HttpResponseMessage> UploadOptionalCommand<TUploadApi> Implements IMediationCommand<Unit, Option<HttpResponseMessage, ApizrException>> IRequest<Option<HttpResponseMessage, ApizrException>> IBaseRequest Derived UploadOptionalCommand Inherited Members UploadOptionalCommand<TUploadApi, HttpResponseMessage>.FileInfoPart UploadOptionalCommand<TUploadApi, HttpResponseMessage>.StreamPart UploadOptionalCommand<TUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Optional.Requesting.UploadOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Requesting.UploadOptionalCommand-2.html",
    "title": "Class UploadOptionalCommand<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadOptionalCommand<TUploadApi, TUploadApiResultData> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation upload command returning an optional result public class UploadOptionalCommand<TUploadApi, TUploadApiResultData> : MediationCommandBase<Unit, Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<Unit, Option<TUploadApiResultData, ApizrException>>, IRequest<Option<TUploadApiResultData, ApizrException>>, IBaseRequest where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters TUploadApi The upload api type to manage TUploadApiResultData The upload api result data type Inheritance object RequestBase<Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadOptionalCommand<TUploadApi, TUploadApiResultData> Implements IMediationCommand<Unit, Option<TUploadApiResultData, ApizrException>> IRequest<Option<TUploadApiResultData, ApizrException>> IBaseRequest Derived UploadOptionalCommand<TUploadApi> UploadWithOptionalCommand<TUploadApiResultData> Inherited Members RequestBase<Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Properties ByteArrayPart The file bytes data public ByteArrayPart ByteArrayPart { get; } Property Value ByteArrayPart FileInfoPart The file info data public FileInfoPart FileInfoPart { get; } Property Value FileInfoPart StreamPart The file stream data public StreamPart StreamPart { get; } Property Value StreamPart"
  },
  "api/Apizr.Optional.Requesting.UploadOptionalCommand.html": {
    "href": "api/Apizr.Optional.Requesting.UploadOptionalCommand.html",
    "title": "Class UploadOptionalCommand | Apizr",
    "keywords": "Class UploadOptionalCommand Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation upload command public class UploadOptionalCommand : UploadOptionalCommand<IUploadApi>, IMediationCommand<Unit, Option<HttpResponseMessage, ApizrException>>, IRequest<Option<HttpResponseMessage, ApizrException>>, IBaseRequest Inheritance object RequestBase<Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadOptionalCommand<IUploadApi, HttpResponseMessage> UploadOptionalCommand<IUploadApi> UploadOptionalCommand Implements IMediationCommand<Unit, Option<HttpResponseMessage, ApizrException>> IRequest<Option<HttpResponseMessage, ApizrException>> IBaseRequest Inherited Members UploadOptionalCommand<IUploadApi, HttpResponseMessage>.FileInfoPart UploadOptionalCommand<IUploadApi, HttpResponseMessage>.StreamPart UploadOptionalCommand<IUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Optional.Requesting.UploadWithOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Requesting.UploadWithOptionalCommand-1.html",
    "title": "Class UploadWithOptionalCommand<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithOptionalCommand<TUploadApiResultData> Namespace Apizr.Optional.Requesting Assembly Apizr.Integrations.FileTransfer.Optional.dll The mediation upload command returning an optional result public class UploadWithOptionalCommand<TUploadApiResultData> : UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IMediationCommand<Unit, Option<TUploadApiResultData, ApizrException>>, IRequest<Option<TUploadApiResultData, ApizrException>>, IBaseRequest Type Parameters TUploadApiResultData The upload api result data type Inheritance object RequestBase<Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> MediationCommandBase<Unit, Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder> UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData> UploadWithOptionalCommand<TUploadApiResultData> Implements IMediationCommand<Unit, Option<TUploadApiResultData, ApizrException>> IRequest<Option<TUploadApiResultData, ApizrException>> IBaseRequest Inherited Members UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.FileInfoPart UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.StreamPart UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.ByteArrayPart RequestBase<Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UploadWithOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public UploadWithOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadWithOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public UploadWithOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options UploadWithOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public UploadWithOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options"
  },
  "api/Apizr.Optional.Requesting.html": {
    "href": "api/Apizr.Optional.Requesting.html",
    "title": "Namespace Apizr.Optional.Requesting | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting Classes DownloadOptionalQuery The mediation download query with a dictionary query parameters type DownloadOptionalQuery<TDownloadApi> The mediation download query with a dictionary query parameters type DownloadOptionalQuery<TDownloadApi, TDownloadParams> The mediation download query with a custom query parameters type DownloadWithOptionalQuery<TDownloadParams> The mediation download query with a dictionary query parameters type ExecuteOptionalResultRequest<TWebApi, TApiData> The mediation execute optional result request (returning result) ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> The mediation execute optional result request (returning result) ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute optional result request (returning result) ExecuteOptionalUnitRequest<TWebApi> The mediation execute optional unit request (returning no result) ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> The mediation execute optional unit request (returning no result) UploadOptionalCommand The mediation upload command UploadOptionalCommand<TUploadApi> The mediation upload command returning an optional result UploadOptionalCommand<TUploadApi, TUploadApiResultData> The mediation upload command returning an optional result UploadWithOptionalCommand<TUploadApiResultData> The mediation upload command returning an optional result"
  },
  "api/Apizr.OptionalFileTransferOptionsBuilderExtensions.html": {
    "href": "api/Apizr.OptionalFileTransferOptionsBuilderExtensions.html",
    "title": "Class OptionalFileTransferOptionsBuilderExtensions | Apizr",
    "keywords": "Class OptionalFileTransferOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.FileTransfer.Optional.dll Extensions for file transfer registration with optional result public static class OptionalFileTransferOptionsBuilderExtensions Inheritance object OptionalFileTransferOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithFileTransferOptionalMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle file transfer requests management with some mediation and optional result public static IApizrExtendedCommonOptionsBuilder WithFileTransferOptionalMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedCommonOptionsBuilder Returns IApizrExtendedCommonOptionsBuilder WithFileTransferOptionalMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle file transfer requests management with some mediation and optional result public static IApizrExtendedManagerOptionsBuilder WithFileTransferOptionalMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedManagerOptionsBuilder Returns IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.OptionalOptionsBuilderExtensions.html": {
    "href": "api/Apizr.OptionalOptionsBuilderExtensions.html",
    "title": "Class OptionalOptionsBuilderExtensions | Apizr",
    "keywords": "Class OptionalOptionsBuilderExtensions Namespace Apizr Assembly Apizr.Integrations.Optional.dll Optional with MediatR options builder extensions public static class OptionalOptionsBuilderExtensions Inheritance object OptionalOptionsBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle requests execution with some mediation and optional result public static IApizrExtendedCommonOptionsBuilder WithOptionalMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedCommonOptionsBuilder Returns IApizrExtendedCommonOptionsBuilder WithOptionalMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle requests execution with some mediation and optional result public static IApizrExtendedManagerOptionsBuilder WithOptionalMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters optionsBuilder IApizrExtendedManagerOptionsBuilder Returns IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.PriorityAttribute.html": {
    "href": "api/Apizr.PriorityAttribute.html",
    "title": "Class PriorityAttribute | Apizr",
    "keywords": "Class PriorityAttribute Namespace Apizr Assembly Apizr.Integrations.Fusillade.dll The Fusillade priority attribute [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface|AttributeTargets.Parameter)] public class PriorityAttribute : HandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute PriorityAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Info: . Decorating a request parameter with PriorityAttribute is obsolete. Please use the request options parameter instead. . Decorating anything else must come with the priority value. . Don't forget to activate priority management fluently at register time. Constructors PriorityAttribute() Define priority [Obsolete(\"Please use the request options parameter instead\")] public PriorityAttribute() Remarks Warning: Decorating a request parameter with PriorityAttribute is obsolete. Please use the request options parameter instead. Error: Decorating anything else must come with the priority value. PriorityAttribute(Priority) Define priority public PriorityAttribute(Priority priority) Parameters priority Priority The priority PriorityAttribute(int) Define priority public PriorityAttribute(int priority) Parameters priority int The priority"
  },
  "api/Apizr.PriorityHttpMessageHandler.html": {
    "href": "api/Apizr.PriorityHttpMessageHandler.html",
    "title": "Class PriorityHttpMessageHandler | Apizr",
    "keywords": "Class PriorityHttpMessageHandler Namespace Apizr Assembly Apizr.Integrations.Fusillade.dll public class PriorityHttpMessageHandler : LimitingHttpMessageHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler LimitingHttpMessageHandler PriorityHttpMessageHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityHttpMessageHandler(HttpMessageHandler, ILogger, IApizrManagerOptionsBase, long?, OperationQueue) public PriorityHttpMessageHandler(HttpMessageHandler innerHandler, ILogger logger, IApizrManagerOptionsBase apizrOptions, long? maxBytesToRead = null, OperationQueue opQueue = null) Parameters innerHandler HttpMessageHandler logger ILogger apizrOptions IApizrManagerOptionsBase maxBytesToRead long? opQueue OperationQueue Methods ResetLimit(long?) Resets the total limit of bytes to read. This is usually called when the app resumes from suspend, to indicate that we should fetch another set of data. public override void ResetLimit(long? maxBytesToRead = null) Parameters maxBytesToRead long? The maximum number of bytes to read. SendAsync(HttpRequestMessage, CancellationToken) protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task<HttpResponseMessage>"
  },
  "api/Apizr.Progressing.ApizrProgress.html": {
    "href": "api/Apizr.Progressing.ApizrProgress.html",
    "title": "Class ApizrProgress | Apizr",
    "keywords": "Class ApizrProgress Namespace Apizr.Progressing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrProgress : Progress<ApizrProgressEventArgs>, IApizrProgress, IProgress<ApizrProgressEventArgs> Inheritance object Progress<ApizrProgressEventArgs> ApizrProgress Implements IApizrProgress IProgress<ApizrProgressEventArgs> Inherited Members Progress<ApizrProgressEventArgs>.OnReport(ApizrProgressEventArgs) Progress<ApizrProgressEventArgs>.ProgressChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrProgress() public ApizrProgress() ApizrProgress(Action<ApizrProgressEventArgs>) public ApizrProgress(Action<ApizrProgressEventArgs> handler) Parameters handler Action<ApizrProgressEventArgs>"
  },
  "api/Apizr.Progressing.ApizrProgressEventArgs.html": {
    "href": "api/Apizr.Progressing.ApizrProgressEventArgs.html",
    "title": "Class ApizrProgressEventArgs | Apizr",
    "keywords": "Class ApizrProgressEventArgs Namespace Apizr.Progressing Assembly Apizr.Integrations.FileTransfer.dll Provides data for the events generated by ApizrProgressHandler. public class ApizrProgressEventArgs : ProgressChangedEventArgs Inheritance object EventArgs ProgressChangedEventArgs ApizrProgressEventArgs Inherited Members ProgressChangedEventArgs.ProgressPercentage ProgressChangedEventArgs.UserState EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrProgressEventArgs(HttpRequestMessage, ApizrProgressType, int, object, long, long?) Initializes a new instance of the ApizrProgressEventArgs with the parameters given. public ApizrProgressEventArgs(HttpRequestMessage request, ApizrProgressType progressType, int progressPercentage, object userToken, long bytesTransferred, long? totalBytes) Parameters request HttpRequestMessage The request progressType ApizrProgressType Type of progress (request or response) progressPercentage int The percent completed of the overall exchange. userToken object Any user state provided as part of reading or writing the data. bytesTransferred long The current number of bytes either received or sent. totalBytes long? The total number of bytes expected to be received or sent. Properties BytesTransferred Gets the current number of bytes transferred. public long BytesTransferred { get; } Property Value long ProgressType Gets the type of progress public ApizrProgressType ProgressType { get; } Property Value ApizrProgressType Request Gets the request public HttpRequestMessage Request { get; } Property Value HttpRequestMessage TotalBytes Gets the total number of expected bytes to be sent or received. If the number is not known then this is null. public long? TotalBytes { get; } Property Value long?"
  },
  "api/Apizr.Progressing.ApizrProgressHandler.html": {
    "href": "api/Apizr.Progressing.ApizrProgressHandler.html",
    "title": "Class ApizrProgressHandler | Apizr",
    "keywords": "Class ApizrProgressHandler Namespace Apizr.Progressing Assembly Apizr.Integrations.FileTransfer.dll The ApizrProgressHandler provides a mechanism for getting progress event notifications when sending and receiving data in connection with exchanging HTTP requests and responses. public class ApizrProgressHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler ApizrProgressHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrProgressHandler() Initializes a new instance of the ApizrProgressHandler class. public ApizrProgressHandler() ApizrProgressHandler(HttpMessageHandler) Initializes a new instance of the ApizrProgressHandler class. public ApizrProgressHandler(HttpMessageHandler innerHandler) Parameters innerHandler HttpMessageHandler The inner handler to which this handler submits requests. Methods SendAsync(HttpRequestMessage, CancellationToken) protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task<HttpResponseMessage>"
  },
  "api/Apizr.Progressing.ApizrProgressType.html": {
    "href": "api/Apizr.Progressing.ApizrProgressType.html",
    "title": "Enum ApizrProgressType | Apizr",
    "keywords": "Enum ApizrProgressType Namespace Apizr.Progressing Assembly Apizr.Integrations.FileTransfer.dll public enum ApizrProgressType Fields Request = 0 Response = 1"
  },
  "api/Apizr.Progressing.IApizrProgress.html": {
    "href": "api/Apizr.Progressing.IApizrProgress.html",
    "title": "Interface IApizrProgress | Apizr",
    "keywords": "Interface IApizrProgress Namespace Apizr.Progressing Assembly Apizr.Integrations.FileTransfer.dll public interface IApizrProgress : IProgress<ApizrProgressEventArgs> Inherited Members IProgress<ApizrProgressEventArgs>.Report(ApizrProgressEventArgs)"
  },
  "api/Apizr.Progressing.html": {
    "href": "api/Apizr.Progressing.html",
    "title": "Namespace Apizr.Progressing | Apizr",
    "keywords": "Namespace Apizr.Progressing Classes ApizrProgress ApizrProgressEventArgs Provides data for the events generated by ApizrProgressHandler. ApizrProgressHandler The ApizrProgressHandler provides a mechanism for getting progress event notifications when sending and receiving data in connection with exchanging HTTP requests and responses. Interfaces IApizrProgress Enums ApizrProgressType"
  },
  "api/Apizr.ReadAllPriorityAttribute.html": {
    "href": "api/Apizr.ReadAllPriorityAttribute.html",
    "title": "Class ReadAllPriorityAttribute | Apizr",
    "keywords": "Class ReadAllPriorityAttribute Namespace Apizr Assembly Apizr.Integrations.Fusillade.dll The Fusillade priority attribute [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface)] public class ReadAllPriorityAttribute : ReadAllHandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadAllHandlerParameterAttribute ReadAllPriorityAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Info: . Don't forget to activate priority management fluently at register time. Constructors ReadAllPriorityAttribute(Priority) Define priority public ReadAllPriorityAttribute(Priority priority) Parameters priority Priority The priority ReadAllPriorityAttribute(int) Define priority public ReadAllPriorityAttribute(int priority) Parameters priority int The priority"
  },
  "api/Apizr.ReadPriorityAttribute.html": {
    "href": "api/Apizr.ReadPriorityAttribute.html",
    "title": "Class ReadPriorityAttribute | Apizr",
    "keywords": "Class ReadPriorityAttribute Namespace Apizr Assembly Apizr.Integrations.Fusillade.dll The Fusillade priority attribute [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface)] public class ReadPriorityAttribute : ReadHandlerParameterAttribute Inheritance object Attribute PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadHandlerParameterAttribute ReadPriorityAttribute Inherited Members HandlerParameterAttribute.Value PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Info: . Don't forget to activate priority management fluently at register time. Constructors ReadPriorityAttribute(Priority) Define priority public ReadPriorityAttribute(Priority priority) Parameters priority Priority The priority ReadPriorityAttribute(int) Define priority public ReadPriorityAttribute(int priority) Parameters priority int The priority"
  },
  "api/Apizr.Requesting.Attributes.CreateHeadersAttribute.html": {
    "href": "api/Apizr.Requesting.Attributes.CreateHeadersAttribute.html",
    "title": "Class CreateHeadersAttribute | Apizr",
    "keywords": "Class CreateHeadersAttribute Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to set headers on Create method [AttributeUsage(AttributeTargets.Class)] public class CreateHeadersAttribute : HeadersAttribute Inheritance object Attribute HeadersAttribute CreateHeadersAttribute Inherited Members HeadersAttribute.Headers Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateHeadersAttribute(params string[]) public CreateHeadersAttribute(params string[] headers) Parameters headers string[]"
  },
  "api/Apizr.Requesting.Attributes.CrudEntityAttribute-1.html": {
    "href": "api/Apizr.Requesting.Attributes.CrudEntityAttribute-1.html",
    "title": "Class CrudEntityAttribute<TKey> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey> Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.Attributes.CrudEntityAttribute-2.html": {
    "href": "api/Apizr.Requesting.Attributes.CrudEntityAttribute-2.html",
    "title": "Class CrudEntityAttribute<TKey, TReadAllResult> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey, TReadAllResult> Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey, TReadAllResult> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) TReadAllResult The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey, TReadAllResult> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.Attributes.CrudEntityAttribute-3.html": {
    "href": "api/Apizr.Requesting.Attributes.CrudEntityAttribute-3.html",
    "title": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) TReadAllResult The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) TReadAllParams ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.Attributes.CrudEntityAttribute-4.html": {
    "href": "api/Apizr.Requesting.Attributes.CrudEntityAttribute-4.html",
    "title": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) TReadAllResult The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) TReadAllParams ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) TModelEntity Model entity type mapped with this api entity type (default: null = decorated api entity type) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.Attributes.CrudEntityAttribute.html": {
    "href": "api/Apizr.Requesting.Attributes.CrudEntityAttribute.html",
    "title": "Class CrudEntityAttribute | Apizr",
    "keywords": "Class CrudEntityAttribute Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute : Attribute Inheritance object Attribute CrudEntityAttribute Derived MappedCrudEntityAttribute CrudEntityAttribute<TKey> CrudEntityAttribute<TKey, TReadAllResult> CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string, Type, Type, Type, Type) Define some crud api settings from this api entity public CrudEntityAttribute(string baseUri, Type keyType = null, Type readAllResultType = null, Type readAllParamsType = null, Type modelEntityType = null) Parameters baseUri string This specific api entity's base crud uri keyType Type This specific api entity's crud key type (default: null = typeof(int)) readAllResultType Type The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) readAllParamsType Type ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) modelEntityType Type Model entity type mapped with this api entity type (default: null = decorated api entity type) Properties BaseUri This specific entity's base crud uri public string BaseUri { get; } Property Value string KeyType This specific object's crud key type public Type KeyType { get; } Property Value Type MappedEntityType Model entity type mapped with this Api entity type public Type MappedEntityType { get; set; } Property Value Type ReadAllParamsType \"ReadAll\" query parameters type public Type ReadAllParamsType { get; set; } Property Value Type ReadAllResultType \"ReadAll\" query result type public Type ReadAllResultType { get; set; } Property Value Type"
  },
  "api/Apizr.Requesting.Attributes.DeleteHeadersAttribute.html": {
    "href": "api/Apizr.Requesting.Attributes.DeleteHeadersAttribute.html",
    "title": "Class DeleteHeadersAttribute | Apizr",
    "keywords": "Class DeleteHeadersAttribute Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to set headers on Delete method [AttributeUsage(AttributeTargets.Class)] public class DeleteHeadersAttribute : HeadersAttribute Inheritance object Attribute HeadersAttribute DeleteHeadersAttribute Inherited Members HeadersAttribute.Headers Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteHeadersAttribute(params string[]) public DeleteHeadersAttribute(params string[] headers) Parameters headers string[]"
  },
  "api/Apizr.Requesting.Attributes.ReadAllHeadersAttribute.html": {
    "href": "api/Apizr.Requesting.Attributes.ReadAllHeadersAttribute.html",
    "title": "Class ReadAllHeadersAttribute | Apizr",
    "keywords": "Class ReadAllHeadersAttribute Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to set headers on ReadAll method [AttributeUsage(AttributeTargets.Class)] public class ReadAllHeadersAttribute : HeadersAttribute Inheritance object Attribute HeadersAttribute ReadAllHeadersAttribute Inherited Members HeadersAttribute.Headers Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllHeadersAttribute(params string[]) public ReadAllHeadersAttribute(params string[] headers) Parameters headers string[]"
  },
  "api/Apizr.Requesting.Attributes.ReadHeadersAttribute.html": {
    "href": "api/Apizr.Requesting.Attributes.ReadHeadersAttribute.html",
    "title": "Class ReadHeadersAttribute | Apizr",
    "keywords": "Class ReadHeadersAttribute Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to set headers on Read method [AttributeUsage(AttributeTargets.Class)] public class ReadHeadersAttribute : HeadersAttribute Inheritance object Attribute HeadersAttribute ReadHeadersAttribute Inherited Members HeadersAttribute.Headers Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadHeadersAttribute(params string[]) public ReadHeadersAttribute(params string[] headers) Parameters headers string[]"
  },
  "api/Apizr.Requesting.Attributes.UpdateHeadersAttribute.html": {
    "href": "api/Apizr.Requesting.Attributes.UpdateHeadersAttribute.html",
    "title": "Class UpdateHeadersAttribute | Apizr",
    "keywords": "Class UpdateHeadersAttribute Namespace Apizr.Requesting.Attributes Assembly Apizr.dll Tells Apizr to set headers on Update method [AttributeUsage(AttributeTargets.Class)] public class UpdateHeadersAttribute : HeadersAttribute Inheritance object Attribute HeadersAttribute UpdateHeadersAttribute Inherited Members HeadersAttribute.Headers Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateHeadersAttribute(params string[]) public UpdateHeadersAttribute(params string[] headers) Parameters headers string[]"
  },
  "api/Apizr.Requesting.Attributes.html": {
    "href": "api/Apizr.Requesting.Attributes.html",
    "title": "Namespace Apizr.Requesting.Attributes | Apizr",
    "keywords": "Namespace Apizr.Requesting.Attributes Classes CreateHeadersAttribute Tells Apizr to set headers on Create method DeleteHeadersAttribute Tells Apizr to set headers on Delete method ReadAllHeadersAttribute Tells Apizr to set headers on ReadAll method ReadHeadersAttribute Tells Apizr to set headers on Read method UpdateHeadersAttribute Tells Apizr to set headers on Update method"
  },
  "api/Apizr.Requesting.CrudEntityAttribute-1.html": {
    "href": "api/Apizr.Requesting.CrudEntityAttribute-1.html",
    "title": "Class CrudEntityAttribute<TKey> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey> Namespace Apizr.Requesting Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.CrudEntityAttribute-2.html": {
    "href": "api/Apizr.Requesting.CrudEntityAttribute-2.html",
    "title": "Class CrudEntityAttribute<TKey, TReadAllResult> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey, TReadAllResult> Namespace Apizr.Requesting Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey, TReadAllResult> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) TReadAllResult The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey, TReadAllResult> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.CrudEntityAttribute-3.html": {
    "href": "api/Apizr.Requesting.CrudEntityAttribute-3.html",
    "title": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> Namespace Apizr.Requesting Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) TReadAllResult The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) TReadAllParams ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.CrudEntityAttribute-4.html": {
    "href": "api/Apizr.Requesting.CrudEntityAttribute-4.html",
    "title": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> | Apizr",
    "keywords": "Class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> Namespace Apizr.Requesting Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> : CrudEntityAttribute Type Parameters TKey This specific api entity's crud key type (default: null = typeof(int)) TReadAllResult The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) TReadAllParams ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) TModelEntity Model entity type mapped with this api entity type (default: null = decorated api entity type) Inheritance object Attribute CrudEntityAttribute CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string) Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) public CrudEntityAttribute(string baseUri) Parameters baseUri string This specific api entity's base crud uri"
  },
  "api/Apizr.Requesting.CrudEntityAttribute.html": {
    "href": "api/Apizr.Requesting.CrudEntityAttribute.html",
    "title": "Class CrudEntityAttribute | Apizr",
    "keywords": "Class CrudEntityAttribute Namespace Apizr.Requesting Assembly Apizr.dll Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute : Attribute Inheritance object Attribute CrudEntityAttribute Derived MappedCrudEntityAttribute CrudEntityAttribute<TKey> CrudEntityAttribute<TKey, TReadAllResult> CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams> CrudEntityAttribute<TKey, TReadAllResult, TReadAllParams, TModelEntity> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudEntityAttribute(string, Type, Type, Type, Type) Define some crud api settings from this api entity public CrudEntityAttribute(string baseUri, Type keyType = null, Type readAllResultType = null, Type readAllParamsType = null, Type modelEntityType = null) Parameters baseUri string This specific api entity's base crud uri keyType Type This specific api entity's crud key type (default: null = typeof(int)) readAllResultType Type The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) readAllParamsType Type ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) modelEntityType Type Model entity type mapped with this api entity type (default: null = decorated api entity type) Properties BaseUri This specific entity's base crud uri public string BaseUri { get; } Property Value string KeyType This specific object's crud key type public Type KeyType { get; } Property Value Type MappedEntityType Model entity type mapped with this Api entity type public Type MappedEntityType { get; set; } Property Value Type ReadAllParamsType \"ReadAll\" query parameters type public Type ReadAllParamsType { get; set; } Property Value Type ReadAllResultType \"ReadAll\" query result type public Type ReadAllResultType { get; set; } Property Value Type"
  },
  "api/Apizr.Requesting.ICrudApi-4.html": {
    "href": "api/Apizr.Requesting.ICrudApi-4.html",
    "title": "Interface ICrudApi<T, TKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface ICrudApi<T, TKey, TReadAllResult, TReadAllParams> Namespace Apizr.Requesting Assembly Apizr.dll The crud api interface public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class Type Parameters T The entity type TKey The entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type Methods Create(T) Send a Create request with a T payload [Post(\"\")] Task<T> Create(T payload) Parameters payload T The payload Returns Task<T> Create(T, IApizrRequestOptions) Send a Create request with a T payload, passing a Polly context and a cancellation token through the request [Post(\"\")] Task<T> Create(T payload, IApizrRequestOptions options) Parameters payload T The payload options IApizrRequestOptions The request options Returns Task<T> Delete(TKey) Send a Delete request with a key param [Delete(\"/{key}\")] Task Delete(TKey key) Parameters key TKey The key Returns Task Delete(TKey, IApizrRequestOptions) Send a Delete request with a key param [Delete(\"/{key}\")] Task Delete(TKey key, IApizrRequestOptions options) Parameters key TKey The key options IApizrRequestOptions The request options Returns Task Read(TKey) Send a Read request with a key param [Get(\"/{key}\")] Task<T> Read(TKey key) Parameters key TKey The key Returns Task<T> Read(TKey, IApizrRequestOptions) Send a Read request with a key param [Get(\"/{key}\")] Task<T> Read(TKey key, IApizrRequestOptions options) Parameters key TKey The key options IApizrRequestOptions The request options Returns Task<T> ReadAll() Send a ReadAll request [Get(\"\")] Task<TReadAllResult> ReadAll() Returns Task<TReadAllResult> ReadAll(IApizrRequestOptions) Send a ReadAll request [Get(\"\")] Task<TReadAllResult> ReadAll(IApizrRequestOptions options) Parameters options IApizrRequestOptions The request options Returns Task<TReadAllResult> ReadAll(TReadAllParams) Send a ReadAll request with some query params used as cache key [Get(\"\")] Task<TReadAllResult> ReadAll(TReadAllParams readAllParams) Parameters readAllParams TReadAllParams Query params used as cache key Returns Task<TReadAllResult> ReadAll(TReadAllParams, IApizrRequestOptions) Send a ReadAll request with some query params used as cache key [Get(\"\")] Task<TReadAllResult> ReadAll(TReadAllParams readAllParams, IApizrRequestOptions options) Parameters readAllParams TReadAllParams Query params used as cache key options IApizrRequestOptions The request options Returns Task<TReadAllResult> SafeCreate(T) Send a Create request with a T payload [Post(\"\")] Task<IApiResponse<T>> SafeCreate(T payload) Parameters payload T The payload Returns Task<IApiResponse<T>> SafeCreate(T, IApizrRequestOptions) Send a Create request with a T payload, passing a Polly context and a cancellation token through the request [Post(\"\")] Task<IApiResponse<T>> SafeCreate(T payload, IApizrRequestOptions options) Parameters payload T The payload options IApizrRequestOptions The request options Returns Task<IApiResponse<T>> SafeDelete(TKey) Send a Delete request with a key param [Delete(\"/{key}\")] Task<IApiResponse> SafeDelete(TKey key) Parameters key TKey The key Returns Task<IApiResponse> SafeDelete(TKey, IApizrRequestOptions) Send a Delete request with a key param [Delete(\"/{key}\")] Task<IApiResponse> SafeDelete(TKey key, IApizrRequestOptions options) Parameters key TKey The key options IApizrRequestOptions The request options Returns Task<IApiResponse> SafeRead(TKey) Send a Read request with a key param [Get(\"/{key}\")] Task<IApiResponse<T>> SafeRead(TKey key) Parameters key TKey The key Returns Task<IApiResponse<T>> SafeRead(TKey, IApizrRequestOptions) Send a Read request with a key param [Get(\"/{key}\")] Task<IApiResponse<T>> SafeRead(TKey key, IApizrRequestOptions options) Parameters key TKey The key options IApizrRequestOptions The request options Returns Task<IApiResponse<T>> SafeReadAll() Send a ReadAll request [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll() Returns Task<IApiResponse<TReadAllResult>> SafeReadAll(IApizrRequestOptions) Send a ReadAll request [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll(IApizrRequestOptions options) Parameters options IApizrRequestOptions The request options Returns Task<IApiResponse<TReadAllResult>> SafeReadAll(TReadAllParams) Send a ReadAll request with some query params used as cache key [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll(TReadAllParams readAllParams) Parameters readAllParams TReadAllParams Query params used as cache key Returns Task<IApiResponse<TReadAllResult>> SafeReadAll(TReadAllParams, IApizrRequestOptions) Send a ReadAll request with some query params used as cache key [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll(TReadAllParams readAllParams, IApizrRequestOptions options) Parameters readAllParams TReadAllParams Query params used as cache key options IApizrRequestOptions The request options Returns Task<IApiResponse<TReadAllResult>> SafeUpdate(TKey, T) Send an Update request with a key and a payload [Put(\"/{key}\")] Task<IApiResponse> SafeUpdate(TKey key, T payload) Parameters key TKey The key payload T The payload Returns Task<IApiResponse> SafeUpdate(TKey, T, IApizrRequestOptions) Send an Update request with a key and a payload [Put(\"/{key}\")] Task<IApiResponse> SafeUpdate(TKey key, T payload, IApizrRequestOptions options) Parameters key TKey The key payload T The payload options IApizrRequestOptions The request options Returns Task<IApiResponse> Update(TKey, T) Send an Update request with a key and a payload [Put(\"/{key}\")] Task Update(TKey key, T payload) Parameters key TKey The key payload T The payload Returns Task Update(TKey, T, IApizrRequestOptions) Send an Update request with a key and a payload [Put(\"/{key}\")] Task Update(TKey key, T payload, IApizrRequestOptions options) Parameters key TKey The key payload T The payload options IApizrRequestOptions The request options Returns Task"
  },
  "api/Apizr.Requesting.html": {
    "href": "api/Apizr.Requesting.html",
    "title": "Namespace Apizr.Requesting | Apizr",
    "keywords": "Namespace Apizr.Requesting Interfaces ICrudApi<T, TKey, TReadAllResult, TReadAllParams> The crud api interface"
  },
  "api/Apizr.Resiliencing.ApizrResilienceContextSettings.html": {
    "href": "api/Apizr.Resiliencing.ApizrResilienceContextSettings.html",
    "title": "Struct ApizrResilienceContextSettings | Apizr",
    "keywords": "Struct ApizrResilienceContextSettings Namespace Apizr.Resiliencing Assembly Apizr.dll Settings used by Apizr when dealing with ResilienceContext. public readonly struct ApizrResilienceContextSettings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ApizrResilienceContextSettings(bool?, bool?) Initializes a new instance of the ApizrResilienceContextSettings struct. public ApizrResilienceContextSettings(bool? continueOnCapturedContext = null, bool? returnToPoolOnComplete = null) Parameters continueOnCapturedContext bool? Value indicating whether to continue on captured context. returnToPoolOnComplete bool? Properties ContinueOnCapturedContext Gets the value indicating whether to continue on captured context, if any. public bool? ContinueOnCapturedContext { get; } Property Value bool? ReturnToPoolOnComplete Gets the value indicating whether to return the context to the pool, when request completes. public bool? ReturnToPoolOnComplete { get; } Property Value bool?"
  },
  "api/Apizr.Resiliencing.Attributes.CreateResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.CreateResiliencePipelineAttribute.html",
    "title": "Class CreateResiliencePipelineAttribute | Apizr",
    "keywords": "Class CreateResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll Tells Apizr to apply some policies to Create method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Class)] public class CreateResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase CreateResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateResiliencePipelineAttribute(params string[]) Apply strategies with keys public CreateResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.CreateResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.CreateResiliencePipelineAttribute.html",
    "title": "Class CreateResiliencePipelineAttribute | Apizr",
    "keywords": "Class CreateResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some policies to Create method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class CreateResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase CreateResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateResiliencePipelineAttribute(params string[]) Apply strategies with keys public CreateResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.DeleteResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.DeleteResiliencePipelineAttribute.html",
    "title": "Class DeleteResiliencePipelineAttribute | Apizr",
    "keywords": "Class DeleteResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Delete method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class DeleteResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase DeleteResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteResiliencePipelineAttribute(params string[]) Apply strategies with keys public DeleteResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.ReadAllResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.ReadAllResiliencePipelineAttribute.html",
    "title": "Class ReadAllResiliencePipelineAttribute | Apizr",
    "keywords": "Class ReadAllResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to ReadAll method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class ReadAllResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase ReadAllResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllResiliencePipelineAttribute(params string[]) Apply strategies with keys public ReadAllResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.ReadResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.ReadResiliencePipelineAttribute.html",
    "title": "Class ReadResiliencePipelineAttribute | Apizr",
    "keywords": "Class ReadResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Read method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class ReadResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase ReadResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadResiliencePipelineAttribute(params string[]) Apply strategies with keys public ReadResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.SafeCreateResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.SafeCreateResiliencePipelineAttribute.html",
    "title": "Class SafeCreateResiliencePipelineAttribute | Apizr",
    "keywords": "Class SafeCreateResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some policies to Create method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class SafeCreateResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase SafeCreateResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeCreateResiliencePipelineAttribute(params string[]) Apply strategies with keys public SafeCreateResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.SafeDeleteResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.SafeDeleteResiliencePipelineAttribute.html",
    "title": "Class SafeDeleteResiliencePipelineAttribute | Apizr",
    "keywords": "Class SafeDeleteResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Delete method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class SafeDeleteResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase SafeDeleteResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeDeleteResiliencePipelineAttribute(params string[]) Apply strategies with keys public SafeDeleteResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.SafeReadAllResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.SafeReadAllResiliencePipelineAttribute.html",
    "title": "Class SafeReadAllResiliencePipelineAttribute | Apizr",
    "keywords": "Class SafeReadAllResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to ReadAll method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class SafeReadAllResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase SafeReadAllResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadAllResiliencePipelineAttribute(params string[]) Apply strategies with keys public SafeReadAllResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.SafeReadResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.SafeReadResiliencePipelineAttribute.html",
    "title": "Class SafeReadResiliencePipelineAttribute | Apizr",
    "keywords": "Class SafeReadResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Read method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class SafeReadResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase SafeReadResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeReadResiliencePipelineAttribute(params string[]) Apply strategies with keys public SafeReadResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.SafeUpdateResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.SafeUpdateResiliencePipelineAttribute.html",
    "title": "Class SafeUpdateResiliencePipelineAttribute | Apizr",
    "keywords": "Class SafeUpdateResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Update method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class SafeUpdateResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase SafeUpdateResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeUpdateResiliencePipelineAttribute(params string[]) Apply strategies with keys public SafeUpdateResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.UpdateResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.UpdateResiliencePipelineAttribute.html",
    "title": "Class UpdateResiliencePipelineAttribute | Apizr",
    "keywords": "Class UpdateResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Crud Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Update method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class)] public class UpdateResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase UpdateResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateResiliencePipelineAttribute(params string[]) Apply strategies with keys public UpdateResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Crud.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Crud.html",
    "title": "Namespace Apizr.Resiliencing.Attributes.Crud | Apizr",
    "keywords": "Namespace Apizr.Resiliencing.Attributes.Crud Classes CreateResiliencePipelineAttribute Tells Apizr to apply some policies to Create method You have to provide a strategy registry to Apizr to use this feature DeleteResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to Delete method You have to provide a strategy registry to Apizr to use this feature ReadAllResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to ReadAll method You have to provide a strategy registry to Apizr to use this feature ReadResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to Read method You have to provide a strategy registry to Apizr to use this feature SafeCreateResiliencePipelineAttribute Tells Apizr to apply some policies to Create method You have to provide a strategy registry to Apizr to use this feature SafeDeleteResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to Delete method You have to provide a strategy registry to Apizr to use this feature SafeReadAllResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to ReadAll method You have to provide a strategy registry to Apizr to use this feature SafeReadResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to Read method You have to provide a strategy registry to Apizr to use this feature SafeUpdateResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to Update method You have to provide a strategy registry to Apizr to use this feature UpdateResiliencePipelineAttribute Tells Apizr to apply some resilience strategies to Update method You have to provide a strategy registry to Apizr to use this feature"
  },
  "api/Apizr.Resiliencing.Attributes.DeleteResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.DeleteResiliencePipelineAttribute.html",
    "title": "Class DeleteResiliencePipelineAttribute | Apizr",
    "keywords": "Class DeleteResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Delete method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Class)] public class DeleteResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase DeleteResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteResiliencePipelineAttribute(params string[]) Apply strategies with keys public DeleteResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Http.DeleteResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Http.DeleteResiliencePipelineAttribute.html",
    "title": "Class DeleteResiliencePipelineAttribute | Apizr",
    "keywords": "Class DeleteResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Http Assembly Apizr.dll Tells Apizr to apply some policies to Delete http method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Interface)] public class DeleteResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase DeleteResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteResiliencePipelineAttribute(params string[]) Apply strategies with keys public DeleteResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Http.GetResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Http.GetResiliencePipelineAttribute.html",
    "title": "Class GetResiliencePipelineAttribute | Apizr",
    "keywords": "Class GetResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Http Assembly Apizr.dll Tells Apizr to apply some policies to Get http method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Interface)] public class GetResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase GetResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GetResiliencePipelineAttribute(params string[]) Apply strategies with keys public GetResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Http.HeadResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Http.HeadResiliencePipelineAttribute.html",
    "title": "Class HeadResiliencePipelineAttribute | Apizr",
    "keywords": "Class HeadResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Http Assembly Apizr.dll Tells Apizr to apply some policies to Head http method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Interface)] public class HeadResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase HeadResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HeadResiliencePipelineAttribute(params string[]) Apply strategies with keys public HeadResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Http.OptionsResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Http.OptionsResiliencePipelineAttribute.html",
    "title": "Class OptionsResiliencePipelineAttribute | Apizr",
    "keywords": "Class OptionsResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Http Assembly Apizr.dll Tells Apizr to apply some policies to Options http method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Interface)] public class OptionsResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase OptionsResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OptionsResiliencePipelineAttribute(params string[]) Apply strategies with keys public OptionsResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Http.PostResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Http.PostResiliencePipelineAttribute.html",
    "title": "Class PostResiliencePipelineAttribute | Apizr",
    "keywords": "Class PostResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Http Assembly Apizr.dll Tells Apizr to apply some policies to Post http method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Interface)] public class PostResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase PostResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PostResiliencePipelineAttribute(params string[]) Apply strategies with keys public PostResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Http.PutResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Http.PutResiliencePipelineAttribute.html",
    "title": "Class PutResiliencePipelineAttribute | Apizr",
    "keywords": "Class PutResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes.Http Assembly Apizr.dll Tells Apizr to apply some policies to Put http method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Interface)] public class PutResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase PutResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PutResiliencePipelineAttribute(params string[]) Apply strategies with keys public PutResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.Http.html": {
    "href": "api/Apizr.Resiliencing.Attributes.Http.html",
    "title": "Namespace Apizr.Resiliencing.Attributes.Http | Apizr",
    "keywords": "Namespace Apizr.Resiliencing.Attributes.Http Classes DeleteResiliencePipelineAttribute Tells Apizr to apply some policies to Delete http method You have to provide a strategy registry to Apizr to use this feature GetResiliencePipelineAttribute Tells Apizr to apply some policies to Get http method You have to provide a strategy registry to Apizr to use this feature HeadResiliencePipelineAttribute Tells Apizr to apply some policies to Head http method You have to provide a strategy registry to Apizr to use this feature OptionsResiliencePipelineAttribute Tells Apizr to apply some policies to Options http method You have to provide a strategy registry to Apizr to use this feature PostResiliencePipelineAttribute Tells Apizr to apply some policies to Post http method You have to provide a strategy registry to Apizr to use this feature PutResiliencePipelineAttribute Tells Apizr to apply some policies to Put http method You have to provide a strategy registry to Apizr to use this feature"
  },
  "api/Apizr.Resiliencing.Attributes.ReadAllResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.ReadAllResiliencePipelineAttribute.html",
    "title": "Class ReadAllResiliencePipelineAttribute | Apizr",
    "keywords": "Class ReadAllResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll Tells Apizr to apply some resilience strategies to ReadAll method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Class)] public class ReadAllResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase ReadAllResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllResiliencePipelineAttribute(params string[]) Apply strategies with keys public ReadAllResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.ReadResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.ReadResiliencePipelineAttribute.html",
    "title": "Class ReadResiliencePipelineAttribute | Apizr",
    "keywords": "Class ReadResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Read method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Class)] public class ReadResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase ReadResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadResiliencePipelineAttribute(params string[]) Apply strategies with keys public ReadResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.ResilienceContextAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.ResilienceContextAttribute.html",
    "title": "Class ResilienceContextAttribute | Apizr",
    "keywords": "Class ResilienceContextAttribute Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll The Polly's resilience context property attribute public class ResilienceContextAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute ResilienceContextAttribute Inherited Members PropertyAttribute.Key Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResilienceContextAttribute() Create a Polly context public ResilienceContextAttribute()"
  },
  "api/Apizr.Resiliencing.Attributes.ResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.ResiliencePipelineAttribute.html",
    "title": "Class ResiliencePipelineAttribute | Apizr",
    "keywords": "Class ResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll Tells Apizr to apply some strategies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Interface)] public class ResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase ResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResiliencePipelineAttribute(params string[]) Apply strategies with keys public ResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase.html": {
    "href": "api/Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase.html",
    "title": "Class ResiliencePipelineAttributeBase | Apizr",
    "keywords": "Class ResiliencePipelineAttributeBase Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll Tells Apizr to apply some strategies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a strategy registry to Apizr to use this feature public abstract class ResiliencePipelineAttributeBase : Attribute Inheritance object Attribute ResiliencePipelineAttributeBase Derived CreateResiliencePipelineAttribute DeleteResiliencePipelineAttribute ReadAllResiliencePipelineAttribute ReadResiliencePipelineAttribute SafeCreateResiliencePipelineAttribute SafeDeleteResiliencePipelineAttribute SafeReadAllResiliencePipelineAttribute SafeReadResiliencePipelineAttribute SafeUpdateResiliencePipelineAttribute UpdateResiliencePipelineAttribute DeleteResiliencePipelineAttribute GetResiliencePipelineAttribute HeadResiliencePipelineAttribute OptionsResiliencePipelineAttribute PostResiliencePipelineAttribute PutResiliencePipelineAttribute ResiliencePipelineAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResiliencePipelineAttributeBase(params string[]) Apply strategies with keys protected ResiliencePipelineAttributeBase(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys Properties RegistryKeys Strategy registry keys public string[] RegistryKeys { get; } Property Value string[]"
  },
  "api/Apizr.Resiliencing.Attributes.UpdateResiliencePipelineAttribute.html": {
    "href": "api/Apizr.Resiliencing.Attributes.UpdateResiliencePipelineAttribute.html",
    "title": "Class UpdateResiliencePipelineAttribute | Apizr",
    "keywords": "Class UpdateResiliencePipelineAttribute Namespace Apizr.Resiliencing.Attributes Assembly Apizr.dll Tells Apizr to apply some resilience strategies to Update method You have to provide a strategy registry to Apizr to use this feature [AttributeUsage(AttributeTargets.Class)] public class UpdateResiliencePipelineAttribute : ResiliencePipelineAttributeBase Inheritance object Attribute ResiliencePipelineAttributeBase UpdateResiliencePipelineAttribute Inherited Members ResiliencePipelineAttributeBase.RegistryKeys Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateResiliencePipelineAttribute(params string[]) Apply strategies with keys public UpdateResiliencePipelineAttribute(params string[] registryKeys) Parameters registryKeys string[] Strategy registry keys"
  },
  "api/Apizr.Resiliencing.Attributes.html": {
    "href": "api/Apizr.Resiliencing.Attributes.html",
    "title": "Namespace Apizr.Resiliencing.Attributes | Apizr",
    "keywords": "Namespace Apizr.Resiliencing.Attributes Classes ResilienceContextAttribute The Polly's resilience context property attribute ResiliencePipelineAttribute Tells Apizr to apply some strategies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a strategy registry to Apizr to use this feature ResiliencePipelineAttributeBase Tells Apizr to apply some strategies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a strategy registry to Apizr to use this feature"
  },
  "api/Apizr.Resiliencing.HttpRequestMessageApizrExtensions.html": {
    "href": "api/Apizr.Resiliencing.HttpRequestMessageApizrExtensions.html",
    "title": "Class HttpRequestMessageApizrExtensions | Apizr",
    "keywords": "Class HttpRequestMessageApizrExtensions Namespace Apizr.Resiliencing Assembly Apizr.dll Extension methods for HttpRequestMessage Polly integration. public static class HttpRequestMessageApizrExtensions Inheritance object HttpRequestMessageApizrExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetApizrRequestOptions(HttpRequestMessage) Gets the IApizrRequestOptions associated with the provided HttpRequestMessage. public static IApizrRequestOptions GetApizrRequestOptions(this HttpRequestMessage request) Parameters request HttpRequestMessage The HttpRequestMessage. Returns IApizrRequestOptions The IApizrRequestOptions if set, otherwise null. GetApizrResilienceContext(HttpRequestMessage) Gets the ResilienceContext associated with the provided HttpRequestMessage. public static ResilienceContext GetApizrResilienceContext(this HttpRequestMessage request) Parameters request HttpRequestMessage The HttpRequestMessage. Returns ResilienceContext The ResilienceContext if set, otherwise null. Remarks The ResilienceHttpMessageHandler will attach a context to the HttpResponseMessage prior to executing a ResiliencePipeline, if one does not already exist. The ResilienceContext will be provided to the Resilience Pipeline for use inside the ResiliencePipeline and in other message handlers. GetOrBuildApizrResilienceContext(HttpRequestMessage, CancellationToken) Gets the ResilienceContext associated with the provided HttpRequestMessage. public static ResilienceContext GetOrBuildApizrResilienceContext(this HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HttpRequestMessage. cancellationToken CancellationToken A cancellation token Returns ResilienceContext The ResilienceContext if set, otherwise null. Remarks The ResilienceHttpMessageHandler will attach a context to the HttpResponseMessage prior to executing a ResiliencePipeline, if one does not already exist. The ResilienceContext will be provided to the resilience pipeline for use inside the ResilienceContext and in other message handlers. SetApizrResilienceContext(HttpRequestMessage, ResilienceContext) Sets the ResilienceContext associated with the provided HttpRequestMessage. public static void SetApizrResilienceContext(this HttpRequestMessage request, ResilienceContext context) Parameters request HttpRequestMessage The HttpRequestMessage. context ResilienceContext The ResilienceContext, may be null. Remarks The ResilienceHttpMessageHandler will attach a context to the HttpResponseMessage prior to executing a ResiliencePipeline, if one does not already exist. The ResilienceContext will be provided to the strategy for use inside the ResiliencePipeline and in other message handlers. TryGetApizrRequestOptions(HttpRequestMessage, out IApizrRequestOptions) Try to get the IApizrRequestOptions associated with the provided HttpRequestMessage. public static bool TryGetApizrRequestOptions(this HttpRequestMessage request, out IApizrRequestOptions options) Parameters request HttpRequestMessage The HttpRequestMessage. options IApizrRequestOptions The IApizrRequestOptions if set, otherwise null. Returns bool"
  },
  "api/Apizr.Resiliencing.ResilienceContextExtensions.html": {
    "href": "api/Apizr.Resiliencing.ResilienceContextExtensions.html",
    "title": "Class ResilienceContextExtensions | Apizr",
    "keywords": "Class ResilienceContextExtensions Namespace Apizr.Resiliencing Assembly Apizr.dll Polly logging extensions public static class ResilienceContextExtensions Inheritance object ResilienceContextExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryGetLogger(ResilienceContext, out ILogger, out LogLevel[], out HttpMessageParts, out HttpTracerMode) Trying to get your ILogger mapping implementation from Polly context public static bool TryGetLogger(this ResilienceContext context, out ILogger logger, out LogLevel[] logLevels, out HttpMessageParts verbosity, out HttpTracerMode tracerMode) Parameters context ResilienceContext Polly context logger ILogger Your ILogger mapping implementation logLevels LogLevel[] verbosity HttpMessageParts tracerMode HttpTracerMode Returns bool WithLogger(ResilienceContext, ILogger, LogLevel[], HttpMessageParts, HttpTracerMode) Passing your ILogger mapping implementation to Polly context public static ResilienceContext WithLogger(this ResilienceContext context, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity, HttpTracerMode tracerMode) Parameters context ResilienceContext Polly context logger ILogger Your ILogger mapping implementation logLevels LogLevel[] verbosity HttpMessageParts tracerMode HttpTracerMode Returns ResilienceContext"
  },
  "api/Apizr.Resiliencing.ResilienceHttpMessageHandler.html": {
    "href": "api/Apizr.Resiliencing.ResilienceHttpMessageHandler.html",
    "title": "Class ResilienceHttpMessageHandler | Apizr",
    "keywords": "Class ResilienceHttpMessageHandler Namespace Apizr.Resiliencing Assembly Apizr.dll Base class for resilience handler, i.e. handlers that use resilience strategies to send the requests. public class ResilienceHttpMessageHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler ResilienceHttpMessageHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResilienceHttpMessageHandler(ResiliencePipelineRegistry<string>, IApizrManagerOptionsBase) public ResilienceHttpMessageHandler(ResiliencePipelineRegistry<string> registry, IApizrManagerOptionsBase apizrOptions) Parameters registry ResiliencePipelineRegistry<string> apizrOptions IApizrManagerOptionsBase ResilienceHttpMessageHandler(ResiliencePipeline<HttpResponseMessage>, IApizrManagerOptionsBase) Initializes a new instance of the ResilienceHttpMessageHandler class. public ResilienceHttpMessageHandler(ResiliencePipeline<HttpResponseMessage> pipeline, IApizrManagerOptionsBase apizrOptions) Parameters pipeline ResiliencePipeline<HttpResponseMessage> The pipeline to use for the message. apizrOptions IApizrManagerOptionsBase The Apizr options Exceptions ArgumentNullException If pipeline is null. ResilienceHttpMessageHandler(Func<HttpRequestMessage, CancellationToken, ResiliencePipeline<HttpResponseMessage>>, IApizrManagerOptionsBase) Initializes a new instance of the ResilienceHttpMessageHandler class. public ResilienceHttpMessageHandler(Func<HttpRequestMessage, CancellationToken, ResiliencePipeline<HttpResponseMessage>> pipelineProvider, IApizrManagerOptionsBase apizrOptions) Parameters pipelineProvider Func<HttpRequestMessage, CancellationToken, ResiliencePipeline<HttpResponseMessage>> The pipeline provider that supplies pipelines in response to an http message. apizrOptions IApizrManagerOptionsBase The Apizr options Exceptions ArgumentNullException If pipelineProvider is null. Methods SendAsync(HttpRequestMessage, CancellationToken) Sends an HTTP request to the inner handler to send to the server as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HTTP request message to send to the server. cancellationToken CancellationToken A cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions ArgumentNullException If request is null."
  },
  "api/Apizr.Resiliencing.html": {
    "href": "api/Apizr.Resiliencing.html",
    "title": "Namespace Apizr.Resiliencing | Apizr",
    "keywords": "Namespace Apizr.Resiliencing Classes HttpRequestMessageApizrExtensions Extension methods for HttpRequestMessage Polly integration. ResilienceContextExtensions Polly logging extensions ResilienceHttpMessageHandler Base class for resilience handler, i.e. handlers that use resilience strategies to send the requests. Structs ApizrResilienceContextSettings Settings used by Apizr when dealing with ResilienceContext."
  },
  "api/Apizr.ServiceCollectionExtensions.html": {
    "href": "api/Apizr.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Apizr",
    "keywords": "Class ServiceCollectionExtensions Namespace Apizr Assembly Apizr.Extensions.Microsoft.DependencyInjection.dll Apizr service collection extensions public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddApizr(IServiceCollection, Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options public static IServiceCollection AddApizr(this IServiceCollection services, Action<IApizrExtendedRegistryBuilder> registryBuilder, Action<IApizrExtendedCommonOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection registryBuilder Action<IApizrExtendedRegistryBuilder> The registry builder with access to proper options optionsBuilder Action<IApizrExtendedCommonOptionsBuilder> The common options shared by all managers Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Assembly[], Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Assembly[] assemblies, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection assemblies Assembly[] Any assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apiEntityType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apiEntityType Type The object type to manage with crud api calls (class) optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Assembly[], Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerImplementationType, Assembly[] assemblies, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblies Assembly[] Any assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType and \"ReadAll\" query result of type IEnumerable<T> public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apiEntityType, Type apiEntityKeyType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Type apiEntityReadAllParamsType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apiEntityType Type The object type to manage with crud api calls (class) apiEntityKeyType Type The object key type apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) apiEntityReadAllParamsType Type ReadAll query parameters type optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for apiEntityType object type (class), with key of type apiEntityKeyType and \"ReadAll\" query result of type apiEntityReadAllResultType (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apiEntityType, Type apiEntityKeyType, Type apiEntityReadAllResultType, Type apiEntityReadAllParamsType, Type apizrManagerImplementationType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apiEntityType Type The object type to manage with crud api calls apiEntityKeyType Type The object key type apiEntityReadAllResultType Type \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) apiEntityReadAllParamsType Type ReadAll query parameters type apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type[], Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerImplementationType, Type[] assemblyMarkerTypes, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblyMarkerTypes Type[] Any type contained in assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type[], Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type[] assemblyMarkerTypes, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection assemblyMarkerTypes Type[] Any type contained in assembly to scan for CrudEntityAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrCrudManagerFor<T>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type int and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public static IServiceCollection AddApizrCrudManagerFor<T>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters services IServiceCollection The service collection optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection Type Parameters T The object type to manage with crud api calls AddApizrCrudManagerFor<T, TKey>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey and \"ReadAll\" query result of type IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} public static IServiceCollection AddApizrCrudManagerFor<T, TKey>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters services IServiceCollection The service collection optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection Type Parameters T The object type to manage with crud api calls TKey The object key type AddApizrCrudManagerFor<T, TKey, TReadAllResult>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey and \"ReadAll\" query result of type TReadAllResult (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters services IServiceCollection The service collection optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection Type Parameters T The object type to manage with crud api calls (class) TKey The object key type TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey and \"ReadAll\" query result of type TReadAllResult (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters services IServiceCollection The service collection optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection Type Parameters T The object type to manage with crud api calls (class) TKey The object key type TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey and \"ReadAll\" query result of type TReadAllResult (inheriting from IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters services IServiceCollection The service collection optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection Type Parameters T The object type to manage with crud api calls TKey The object key type TReadAllResult \"ReadAll\" query result type (should inherit from IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddApizrManagerFor(IServiceCollection, Assembly[], Action<IApizrExtendedManagerOptionsBuilder>) Register a IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Assembly[] assemblies, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection assemblies Assembly[] Any assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection webApiType Type The web api interface type to manage optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Assembly[], Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerImplementationType, Assembly[] assemblies, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblies Assembly[] Any assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Type apizrManagerImplementationType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection webApiType Type The web api interface type to manage apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Type[], Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerImplementationType, Type[] assemblyMarkerTypes, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection apizrManagerImplementationType Type A custom IApizrManager<TWebApi> implementation type assemblyMarkerTypes Type[] Any type contained in assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrManagerFor(IServiceCollection, Type[], Action<IApizrExtendedManagerOptionsBuilder>) Register a IApizrManager<TWebApi> for each BaseAddressAttribute decorated interfaces public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type[] assemblyMarkerTypes, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection assemblyMarkerTypes Type[] Any type contained in assembly to scan for BaseAddressAttribute optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection AddApizrManagerFor<TWebApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> public static IServiceCollection AddApizrManagerFor<TWebApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters services IServiceCollection The service collection optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection Type Parameters TWebApi The web api interface to manage AddApizrManagerFor<TWebApi, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> public static IServiceCollection AddApizrManagerFor<TWebApi, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters services IServiceCollection The service collection optionsBuilder Action<IApizrExtendedManagerOptionsBuilder> The builder defining specific Apizr options Returns IServiceCollection Type Parameters TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Transferring.Managing.ApizrDownloadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrDownloadManager-1.html",
    "title": "Class ApizrDownloadManager<TDownloadApi> | Apizr",
    "keywords": "Class ApizrDownloadManager<TDownloadApi> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrDownloadManager<TDownloadApi> : ApizrDownloadManager<TDownloadApi, IDictionary<string, object>>, IApizrDownloadManager<TDownloadApi>, IApizrDownloadManager<TDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<IDictionary<string, object>> Type Parameters TDownloadApi Inheritance object ApizrTransferManagerBase<TDownloadApi> ApizrDownloadManager<TDownloadApi, IDictionary<string, object>> ApizrDownloadManager<TDownloadApi> Implements IApizrDownloadManager<TDownloadApi> IApizrDownloadManager<TDownloadApi, IDictionary<string, object>> IApizrTransferManagerBase<TDownloadApi> IApizrManager Derived ApizrDownloadManager Inherited Members ApizrDownloadManager<TDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrDownloadManager<TDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<TDownloadApi>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrDownloadManager(IApizrManager<TDownloadApi>) public ApizrDownloadManager(IApizrManager<TDownloadApi> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<TDownloadApi>"
  },
  "api/Apizr.Transferring.Managing.ApizrDownloadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrDownloadManager-2.html",
    "title": "Class ApizrDownloadManager<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class ApizrDownloadManager<TDownloadApi, TDownloadParams> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrDownloadManager<TDownloadApi, TDownloadParams> : ApizrTransferManagerBase<TDownloadApi>, IApizrDownloadManager<TDownloadApi, TDownloadParams>, IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters TDownloadApi TDownloadParams Inheritance object ApizrTransferManagerBase<TDownloadApi> ApizrDownloadManager<TDownloadApi, TDownloadParams> Implements IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrTransferManagerBase<TDownloadApi> IApizrManager Derived ApizrDownloadManagerWith<TDownloadParams> ApizrDownloadManager<TDownloadApi> Inherited Members ApizrTransferManagerBase<TDownloadApi>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrDownloadManager(IApizrManager<TDownloadApi>) public ApizrDownloadManager(IApizrManager<TDownloadApi> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<TDownloadApi> Methods DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file public Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters public Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo>"
  },
  "api/Apizr.Transferring.Managing.ApizrDownloadManager.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrDownloadManager.html",
    "title": "Class ApizrDownloadManager | Apizr",
    "keywords": "Class ApizrDownloadManager Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrDownloadManager : ApizrDownloadManager<IDownloadApi>, IApizrDownloadManager, IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrManager Inheritance object ApizrTransferManagerBase<IDownloadApi> ApizrDownloadManager<IDownloadApi, IDictionary<string, object>> ApizrDownloadManager<IDownloadApi> ApizrDownloadManager Implements IApizrDownloadManager IApizrDownloadManager<IDownloadApi> IApizrDownloadManager<IDownloadApi, IDictionary<string, object>> IApizrTransferManagerBase<IDownloadApi> IApizrManager Inherited Members ApizrDownloadManager<IDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrDownloadManager<IDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<IDownloadApi>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrDownloadManager(IApizrManager<IDownloadApi>) public ApizrDownloadManager(IApizrManager<IDownloadApi> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<IDownloadApi>"
  },
  "api/Apizr.Transferring.Managing.ApizrDownloadManagerWith-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrDownloadManagerWith-1.html",
    "title": "Class ApizrDownloadManagerWith<TDownloadParams> | Apizr",
    "keywords": "Class ApizrDownloadManagerWith<TDownloadParams> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrDownloadManagerWith<TDownloadParams> : ApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>, IApizrDownloadManagerWith<TDownloadParams>, IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>, IApizrTransferManagerBase<IDownloadApi<TDownloadParams>>, IApizrManager Type Parameters TDownloadParams Inheritance object ApizrTransferManagerBase<IDownloadApi<TDownloadParams>> ApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> ApizrDownloadManagerWith<TDownloadParams> Implements IApizrDownloadManagerWith<TDownloadParams> IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> IApizrTransferManagerBase<IDownloadApi<TDownloadParams>> IApizrManager Inherited Members ApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<IDownloadApi<TDownloadParams>>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrDownloadManagerWith(IApizrManager<IDownloadApi<TDownloadParams>>) public ApizrDownloadManagerWith(IApizrManager<IDownloadApi<TDownloadParams>> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<IDownloadApi<TDownloadParams>>"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager-1.html",
    "title": "Class ApizrTransferManager<TTransferApi> | Apizr",
    "keywords": "Class ApizrTransferManager<TTransferApi> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrTransferManager<TTransferApi> : ApizrTransferManager<TTransferApi, IDictionary<string, object>>, IApizrTransferManager<TTransferApi, IDictionary<string, object>>, IApizrTransferManager<TTransferApi>, IApizrDownloadManager<TTransferApi>, IApizrDownloadManager<TTransferApi, IDictionary<string, object>>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Type Parameters TTransferApi Inheritance object ApizrTransferManager<TTransferApi, IDictionary<string, object>> ApizrTransferManager<TTransferApi> Implements IApizrTransferManager<TTransferApi, IDictionary<string, object>> IApizrTransferManager<TTransferApi> IApizrDownloadManager<TTransferApi> IApizrDownloadManager<TTransferApi, IDictionary<string, object>> IApizrUploadManager<TTransferApi> IApizrUploadManager<TTransferApi, HttpResponseMessage> IApizrTransferManagerBase<TTransferApi> IApizrManager Derived ApizrTransferManager Inherited Members ApizrTransferManager<TTransferApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<string, object>>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<string, object>>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<string, object>>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrTransferManager(IApizrDownloadManager<TTransferApi>, IApizrUploadManager<TTransferApi>) public ApizrTransferManager(IApizrDownloadManager<TTransferApi> downloadManager, IApizrUploadManager<TTransferApi> uploadManager) Parameters downloadManager IApizrDownloadManager<TTransferApi> uploadManager IApizrUploadManager<TTransferApi>"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager-2.html",
    "title": "Class ApizrTransferManager<TTransferApi, TDownloadParams> | Apizr",
    "keywords": "Class ApizrTransferManager<TTransferApi, TDownloadParams> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrTransferManager<TTransferApi, TDownloadParams> : IApizrTransferManager<TTransferApi, TDownloadParams>, IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage> Type Parameters TTransferApi TDownloadParams Inheritance object ApizrTransferManager<TTransferApi, TDownloadParams> Implements IApizrTransferManager<TTransferApi, TDownloadParams> IApizrDownloadManager<TTransferApi, TDownloadParams> IApizrUploadManager<TTransferApi> IApizrUploadManager<TTransferApi, HttpResponseMessage> IApizrTransferManagerBase<TTransferApi> IApizrManager Derived ApizrTransferManager<TTransferApi> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi>) public ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams> downloadManager, IApizrUploadManager<TTransferApi> uploadManager) Parameters downloadManager IApizrDownloadManager<TTransferApi, TDownloadParams> uploadManager IApizrUploadManager<TTransferApi> Methods DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file public Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters public Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public Task<HttpResponseMessage> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public Task<HttpResponseMessage> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage> UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public Task<HttpResponseMessage> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<HttpResponseMessage>"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager-3.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager-3.html",
    "title": "Class ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Class ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> : IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>, IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi, TUploadApiResultData>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Type Parameters TTransferApi TDownloadParams TUploadApiResultData Inheritance object ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> Implements IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> IApizrDownloadManager<TTransferApi, TDownloadParams> IApizrUploadManager<TTransferApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApi> IApizrManager Derived ApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi, TUploadApiResultData>) public ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams> downloadManager, IApizrUploadManager<TTransferApi, TUploadApiResultData> uploadManager) Parameters downloadManager IApizrDownloadManager<TTransferApi, TDownloadParams> uploadManager IApizrUploadManager<TTransferApi, TUploadApiResultData> Methods DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file public Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters public Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public Task<TUploadApiResultData> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public Task<TUploadApiResultData> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public Task<TUploadApiResultData> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData>"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager.html",
    "title": "Class ApizrTransferManager | Apizr",
    "keywords": "Class ApizrTransferManager Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrTransferManager : ApizrTransferManager<ITransferApi>, IApizrTransferManager<ITransferApi, IDictionary<string, object>>, IApizrTransferManager<ITransferApi>, IApizrDownloadManager<ITransferApi>, IApizrDownloadManager<ITransferApi, IDictionary<string, object>>, IApizrUploadManager<ITransferApi>, IApizrUploadManager<ITransferApi, HttpResponseMessage>, IApizrTransferManagerBase<ITransferApi>, IApizrTransferManager, IApizrDownloadManager, IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrUploadManager, IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager Inheritance object ApizrTransferManager<ITransferApi, IDictionary<string, object>> ApizrTransferManager<ITransferApi> ApizrTransferManager Implements IApizrTransferManager<ITransferApi, IDictionary<string, object>> IApizrTransferManager<ITransferApi> IApizrDownloadManager<ITransferApi> IApizrDownloadManager<ITransferApi, IDictionary<string, object>> IApizrUploadManager<ITransferApi> IApizrUploadManager<ITransferApi, HttpResponseMessage> IApizrTransferManagerBase<ITransferApi> IApizrTransferManager IApizrDownloadManager IApizrDownloadManager<IDownloadApi> IApizrDownloadManager<IDownloadApi, IDictionary<string, object>> IApizrTransferManagerBase<IDownloadApi> IApizrUploadManager IApizrUploadManager<IUploadApi> IApizrUploadManager<IUploadApi, HttpResponseMessage> IApizrTransferManagerBase<IUploadApi> IApizrManager Inherited Members ApizrTransferManager<ITransferApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<string, object>>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<string, object>>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<string, object>>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrTransferManager(IApizrDownloadManager<ITransferApi>, IApizrUploadManager<ITransferApi>) public ApizrTransferManager(IApizrDownloadManager<ITransferApi> downloadManager, IApizrUploadManager<ITransferApi> uploadManager) Parameters downloadManager IApizrDownloadManager<ITransferApi> uploadManager IApizrUploadManager<ITransferApi>"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManagerBase-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManagerBase-1.html",
    "title": "Class ApizrTransferManagerBase<TTransferApiBase> | Apizr",
    "keywords": "Class ApizrTransferManagerBase<TTransferApiBase> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public abstract class ApizrTransferManagerBase<TTransferApiBase> : IApizrTransferManagerBase<TTransferApiBase>, IApizrManager where TTransferApiBase : ITransferApiBase Type Parameters TTransferApiBase Inheritance object ApizrTransferManagerBase<TTransferApiBase> Implements IApizrTransferManagerBase<TTransferApiBase> IApizrManager Derived ApizrDownloadManager<TDownloadApi, TDownloadParams> ApizrUploadManager<TUploadApi, TUploadApiResultData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrTransferManagerBase(IApizrManager<TTransferApiBase>) protected ApizrTransferManagerBase(IApizrManager<TTransferApiBase> transferApiManager) Parameters transferApiManager IApizrManager<TTransferApiBase> Fields TransferApiManager protected readonly IApizrManager<TTransferApiBase> TransferApiManager Field Value IApizrManager<TTransferApiBase>"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManagerWith-2.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManagerWith-2.html",
    "title": "Class ApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Class ApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> : ApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>, IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>, IApizrDownloadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams>, IApizrUploadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TUploadApiResultData>, IApizrTransferManagerBase<ITransferApi<TDownloadParams, TUploadApiResultData>>, IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData>, IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>, IApizrTransferManagerBase<IDownloadApi<TDownloadParams>>, IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IApizrTransferManagerBase<IUploadApi<TUploadApiResultData>>, IApizrManager Type Parameters TDownloadParams TUploadApiResultData Inheritance object ApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> ApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> Implements IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> IApizrDownloadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams> IApizrUploadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TUploadApiResultData> IApizrTransferManagerBase<ITransferApi<TDownloadParams, TUploadApiResultData>> IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> IApizrTransferManagerBase<IDownloadApi<TDownloadParams>> IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> IApizrTransferManagerBase<IUploadApi<TUploadApiResultData>> IApizrManager Inherited Members ApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrTransferManagerWith(IApizrDownloadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams>, IApizrUploadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TUploadApiResultData>) public ApizrTransferManagerWith(IApizrDownloadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams> downloadManager, IApizrUploadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TUploadApiResultData> uploadManager) Parameters downloadManager IApizrDownloadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams> uploadManager IApizrUploadManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TUploadApiResultData>"
  },
  "api/Apizr.Transferring.Managing.ApizrUploadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrUploadManager-1.html",
    "title": "Class ApizrUploadManager<TUploadApi> | Apizr",
    "keywords": "Class ApizrUploadManager<TUploadApi> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrUploadManager<TUploadApi> : ApizrUploadManager<TUploadApi, HttpResponseMessage>, IApizrUploadManager<TUploadApi>, IApizrUploadManager<TUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi<HttpResponseMessage> Type Parameters TUploadApi Inheritance object ApizrTransferManagerBase<TUploadApi> ApizrUploadManager<TUploadApi, HttpResponseMessage> ApizrUploadManager<TUploadApi> Implements IApizrUploadManager<TUploadApi> IApizrUploadManager<TUploadApi, HttpResponseMessage> IApizrTransferManagerBase<TUploadApi> IApizrManager Derived ApizrUploadManager Inherited Members ApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<TUploadApi>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrUploadManager(IApizrManager<TUploadApi>) public ApizrUploadManager(IApizrManager<TUploadApi> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<TUploadApi>"
  },
  "api/Apizr.Transferring.Managing.ApizrUploadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrUploadManager-2.html",
    "title": "Class ApizrUploadManager<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class ApizrUploadManager<TUploadApi, TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrUploadManager<TUploadApi, TUploadApiResultData> : ApizrTransferManagerBase<TUploadApi>, IApizrUploadManager<TUploadApi, TUploadApiResultData>, IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters TUploadApi TUploadApiResultData Inheritance object ApizrTransferManagerBase<TUploadApi> ApizrUploadManager<TUploadApi, TUploadApiResultData> Implements IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TUploadApi> IApizrManager Derived ApizrUploadManagerWith<TUploadApiResultData> ApizrUploadManager<TUploadApi> Inherited Members ApizrTransferManagerBase<TUploadApi>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrUploadManager(IApizrManager<TUploadApi>) public ApizrUploadManager(IApizrManager<TUploadApi> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<TUploadApi> Methods UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data public Task<TUploadApiResultData> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data public Task<TUploadApiResultData> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data public Task<TUploadApiResultData> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData>"
  },
  "api/Apizr.Transferring.Managing.ApizrUploadManager.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrUploadManager.html",
    "title": "Class ApizrUploadManager | Apizr",
    "keywords": "Class ApizrUploadManager Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrUploadManager : ApizrUploadManager<IUploadApi>, IApizrUploadManager, IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager Inheritance object ApizrTransferManagerBase<IUploadApi> ApizrUploadManager<IUploadApi, HttpResponseMessage> ApizrUploadManager<IUploadApi> ApizrUploadManager Implements IApizrUploadManager IApizrUploadManager<IUploadApi> IApizrUploadManager<IUploadApi, HttpResponseMessage> IApizrTransferManagerBase<IUploadApi> IApizrManager Inherited Members ApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<IUploadApi>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrUploadManager(IApizrManager<IUploadApi>) public ApizrUploadManager(IApizrManager<IUploadApi> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<IUploadApi>"
  },
  "api/Apizr.Transferring.Managing.ApizrUploadManagerWith-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrUploadManagerWith-1.html",
    "title": "Class ApizrUploadManagerWith<TUploadApiResultData> | Apizr",
    "keywords": "Class ApizrUploadManagerWith<TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public class ApizrUploadManagerWith<TUploadApiResultData> : ApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IApizrUploadManagerWith<TUploadApiResultData>, IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IApizrTransferManagerBase<IUploadApi<TUploadApiResultData>>, IApizrManager Type Parameters TUploadApiResultData Inheritance object ApizrTransferManagerBase<IUploadApi<TUploadApiResultData>> ApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> ApizrUploadManagerWith<TUploadApiResultData> Implements IApizrUploadManagerWith<TUploadApiResultData> IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> IApizrTransferManagerBase<IUploadApi<TUploadApiResultData>> IApizrManager Inherited Members ApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<IUploadApi<TUploadApiResultData>>.TransferApiManager object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApizrUploadManagerWith(IApizrManager<IUploadApi<TUploadApiResultData>>) public ApizrUploadManagerWith(IApizrManager<IUploadApi<TUploadApiResultData>> fileTransferApiManager) Parameters fileTransferApiManager IApizrManager<IUploadApi<TUploadApiResultData>>"
  },
  "api/Apizr.Transferring.Managing.IApizrDownloadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrDownloadManager-1.html",
    "title": "Interface IApizrDownloadManager<TDownloadApi> | Apizr",
    "keywords": "Interface IApizrDownloadManager<TDownloadApi> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The download manager with a dictionary query parameters type public interface IApizrDownloadManager<TDownloadApi> : IApizrDownloadManager<TDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<IDictionary<string, object>> Type Parameters TDownloadApi The download api type to manage Inherited Members IApizrDownloadManager<TDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrDownloadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrDownloadManager-2.html",
    "title": "Interface IApizrDownloadManager<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Interface IApizrDownloadManager<TDownloadApi, TDownloadParams> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The download manager with a custom query parameters type public interface IApizrDownloadManager<TDownloadApi, in TDownloadParams> : IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<in TDownloadParams> Type Parameters TDownloadApi The download api type to manage TDownloadParams The query parameters type Methods DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo> DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfo FileInfo Some information about the file to download downloadParams TDownloadParams Some custom query parameters optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<FileInfo>"
  },
  "api/Apizr.Transferring.Managing.IApizrDownloadManager.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrDownloadManager.html",
    "title": "Interface IApizrDownloadManager | Apizr",
    "keywords": "Interface IApizrDownloadManager Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The download manager with a dictionary query parameters type public interface IApizrDownloadManager : IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrManager Inherited Members IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrDownloadManagerWith-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrDownloadManagerWith-1.html",
    "title": "Interface IApizrDownloadManagerWith<TDownloadParams> | Apizr",
    "keywords": "Interface IApizrDownloadManagerWith<TDownloadParams> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The download manager with parameter shortcut public interface IApizrDownloadManagerWith<TDownloadParams> : IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>, IApizrTransferManagerBase<IDownloadApi<TDownloadParams>>, IApizrManager Type Parameters TDownloadParams The query parameters type Inherited Members IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager-1.html",
    "title": "Interface IApizrTransferManager<TTransferApi> | Apizr",
    "keywords": "Interface IApizrTransferManager<TTransferApi> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result public interface IApizrTransferManager<TTransferApi> : IApizrDownloadManager<TTransferApi>, IApizrDownloadManager<TTransferApi, IDictionary<string, object>>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage> Type Parameters TTransferApi The transfer api type to manage Inherited Members IApizrDownloadManager<TTransferApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TTransferApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager-2.html",
    "title": "Interface IApizrTransferManager<TTransferApi, TDownloadParams> | Apizr",
    "keywords": "Interface IApizrTransferManager<TTransferApi, TDownloadParams> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The transfer manager to work with both downloads and uploads and with a custom download query parameters type and no result public interface IApizrTransferManager<TTransferApi, in TDownloadParams> : IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<in TDownloadParams, HttpResponseMessage> Type Parameters TTransferApi The transfer api type to manage TDownloadParams The custom query parameters type Inherited Members IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager-3.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager-3.html",
    "title": "Interface IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Interface IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The transfer manager to work with both downloads and uploads and with a custom download query parameters type and a custom upload result type public interface IApizrTransferManager<TTransferApi, in TDownloadParams, TUploadApiResultData> : IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi, TUploadApiResultData>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<in TDownloadParams, TUploadApiResultData> Type Parameters TTransferApi The transfer api type to manage TDownloadParams The custom query parameters type TUploadApiResultData The transfer api result type Inherited Members IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, TUploadApiResultData>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, TUploadApiResultData>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, TUploadApiResultData>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager.html",
    "title": "Interface IApizrTransferManager | Apizr",
    "keywords": "Interface IApizrTransferManager Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result public interface IApizrTransferManager : IApizrDownloadManager, IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrUploadManager, IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager Inherited Members IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>.DownloadAsync(FileInfo, IDictionary<string, object>, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManagerBase-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManagerBase-1.html",
    "title": "Interface IApizrTransferManagerBase<TTransferApiBase> | Apizr",
    "keywords": "Interface IApizrTransferManagerBase<TTransferApiBase> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll public interface IApizrTransferManagerBase<TTransferApiBase> : IApizrManager where TTransferApiBase : ITransferApiBase Type Parameters TTransferApiBase"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManagerWith-2.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManagerWith-2.html",
    "title": "Interface IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Interface IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and a custom upload result type public interface IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> : IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>, IApizrTransferManagerBase<IDownloadApi<TDownloadParams>>, IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IApizrTransferManagerBase<IUploadApi<TUploadApiResultData>>, IApizrManager Type Parameters TDownloadParams TUploadApiResultData Inherited Members IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrUploadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrUploadManager-1.html",
    "title": "Interface IApizrUploadManager<TUploadApi> | Apizr",
    "keywords": "Interface IApizrUploadManager<TUploadApi> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The upload manager public interface IApizrUploadManager<TUploadApi> : IApizrUploadManager<TUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi<HttpResponseMessage> Type Parameters TUploadApi The upload api type to manage Inherited Members IApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrUploadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrUploadManager-2.html",
    "title": "Interface IApizrUploadManager<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Interface IApizrUploadManager<TUploadApi, TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The upload manager public interface IApizrUploadManager<TUploadApi, TUploadApiResultData> : IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters TUploadApi The upload api type to manage TUploadApiResultData The upload api result type Methods UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Task<TUploadApiResultData> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters byteArrayPart ByteArrayPart The file bytes data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Task<TUploadApiResultData> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters fileInfoPart FileInfoPart The file info data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData> UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Task<TUploadApiResultData> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters streamPart StreamPart The file stream data optionsBuilder Action<IApizrRequestOptionsBuilder> Some request options Returns Task<TUploadApiResultData>"
  },
  "api/Apizr.Transferring.Managing.IApizrUploadManager.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrUploadManager.html",
    "title": "Interface IApizrUploadManager | Apizr",
    "keywords": "Interface IApizrUploadManager Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The upload manager public interface IApizrUploadManager : IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager Inherited Members IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.IApizrUploadManagerWith-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrUploadManagerWith-1.html",
    "title": "Interface IApizrUploadManagerWith<TUploadApiResultData> | Apizr",
    "keywords": "Interface IApizrUploadManagerWith<TUploadApiResultData> Namespace Apizr.Transferring.Managing Assembly Apizr.Integrations.FileTransfer.dll The upload manager with type shortcut public interface IApizrUploadManagerWith<TUploadApiResultData> : IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IApizrTransferManagerBase<IUploadApi<TUploadApiResultData>>, IApizrManager Type Parameters TUploadApiResultData The upload api result type Inherited Members IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Transferring.Managing.html": {
    "href": "api/Apizr.Transferring.Managing.html",
    "title": "Namespace Apizr.Transferring.Managing | Apizr",
    "keywords": "Namespace Apizr.Transferring.Managing Classes ApizrDownloadManager ApizrDownloadManagerWith<TDownloadParams> ApizrDownloadManager<TDownloadApi> ApizrDownloadManager<TDownloadApi, TDownloadParams> ApizrTransferManager ApizrTransferManagerBase<TTransferApiBase> ApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> ApizrTransferManager<TTransferApi> ApizrTransferManager<TTransferApi, TDownloadParams> ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> ApizrUploadManager ApizrUploadManagerWith<TUploadApiResultData> ApizrUploadManager<TUploadApi> ApizrUploadManager<TUploadApi, TUploadApiResultData> Interfaces IApizrDownloadManager The download manager with a dictionary query parameters type IApizrDownloadManagerWith<TDownloadParams> The download manager with parameter shortcut IApizrDownloadManager<TDownloadApi> The download manager with a dictionary query parameters type IApizrDownloadManager<TDownloadApi, TDownloadParams> The download manager with a custom query parameters type IApizrTransferManager The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result IApizrTransferManagerBase<TTransferApiBase> IApizrTransferManagerWith<TDownloadParams, TUploadApiResultData> The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and a custom upload result type IApizrTransferManager<TTransferApi> The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result IApizrTransferManager<TTransferApi, TDownloadParams> The transfer manager to work with both downloads and uploads and with a custom download query parameters type and no result IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> The transfer manager to work with both downloads and uploads and with a custom download query parameters type and a custom upload result type IApizrUploadManager The upload manager IApizrUploadManagerWith<TUploadApiResultData> The upload manager with type shortcut IApizrUploadManager<TUploadApi> The upload manager IApizrUploadManager<TUploadApi, TUploadApiResultData> The upload manager"
  },
  "api/Apizr.Transferring.Requesting.IDownloadApi-1.html": {
    "href": "api/Apizr.Transferring.Requesting.IDownloadApi-1.html",
    "title": "Interface IDownloadApi<TDownloadParams> | Apizr",
    "keywords": "Interface IDownloadApi<TDownloadParams> Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll public interface IDownloadApi<in TDownloadParams> : ITransferApiBase Type Parameters TDownloadParams Methods DownloadAsync(string) [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName) Parameters filePathOrName string Returns Task<HttpResponseMessage> DownloadAsync(string, IApizrRequestOptions) [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, IApizrRequestOptions options) Parameters filePathOrName string options IApizrRequestOptions Returns Task<HttpResponseMessage> DownloadAsync(string, TDownloadParams) [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams) Parameters filePathOrName string downloadParams TDownloadParams Returns Task<HttpResponseMessage> DownloadAsync(string, TDownloadParams, IApizrRequestOptions) [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams, IApizrRequestOptions options) Parameters filePathOrName string downloadParams TDownloadParams options IApizrRequestOptions Returns Task<HttpResponseMessage>"
  },
  "api/Apizr.Transferring.Requesting.IDownloadApi.html": {
    "href": "api/Apizr.Transferring.Requesting.IDownloadApi.html",
    "title": "Interface IDownloadApi | Apizr",
    "keywords": "Interface IDownloadApi Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll public interface IDownloadApi : IDownloadApi<IDictionary<string, object>>, ITransferApiBase Inherited Members IDownloadApi<IDictionary<string, object>>.DownloadAsync(string) IDownloadApi<IDictionary<string, object>>.DownloadAsync(string, IApizrRequestOptions) IDownloadApi<IDictionary<string, object>>.DownloadAsync(string, IDictionary<string, object>) IDownloadApi<IDictionary<string, object>>.DownloadAsync(string, IDictionary<string, object>, IApizrRequestOptions)"
  },
  "api/Apizr.Transferring.Requesting.ITransferApi-1.html": {
    "href": "api/Apizr.Transferring.Requesting.ITransferApi-1.html",
    "title": "Interface ITransferApi<TDownloadParams> | Apizr",
    "keywords": "Interface ITransferApi<TDownloadParams> Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll public interface ITransferApi<in TDownloadParams> : ITransferApi<TDownloadParams, HttpResponseMessage>, IDownloadApi<TDownloadParams>, IUploadApi, IUploadApi<HttpResponseMessage>, ITransferApiBase Type Parameters TDownloadParams Inherited Members IDownloadApi<TDownloadParams>.DownloadAsync(string) IDownloadApi<TDownloadParams>.DownloadAsync(string, IApizrRequestOptions) IDownloadApi<TDownloadParams>.DownloadAsync(string, TDownloadParams) IDownloadApi<TDownloadParams>.DownloadAsync(string, TDownloadParams, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, string, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, string, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, string, IApizrRequestOptions)"
  },
  "api/Apizr.Transferring.Requesting.ITransferApi-2.html": {
    "href": "api/Apizr.Transferring.Requesting.ITransferApi-2.html",
    "title": "Interface ITransferApi<TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Interface ITransferApi<TDownloadParams, TUploadApiResultData> Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll public interface ITransferApi<in TDownloadParams, TUploadApiResultData> : IDownloadApi<TDownloadParams>, IUploadApi<TUploadApiResultData>, ITransferApiBase Type Parameters TDownloadParams TUploadApiResultData Inherited Members IDownloadApi<TDownloadParams>.DownloadAsync(string) IDownloadApi<TDownloadParams>.DownloadAsync(string, IApizrRequestOptions) IDownloadApi<TDownloadParams>.DownloadAsync(string, TDownloadParams) IDownloadApi<TDownloadParams>.DownloadAsync(string, TDownloadParams, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart, string) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart, string, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart, string) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart, string, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart, string) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart, string, IApizrRequestOptions)"
  },
  "api/Apizr.Transferring.Requesting.ITransferApi.html": {
    "href": "api/Apizr.Transferring.Requesting.ITransferApi.html",
    "title": "Interface ITransferApi | Apizr",
    "keywords": "Interface ITransferApi Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll public interface ITransferApi : ITransferApi<IDictionary<string, object>>, ITransferApi<IDictionary<string, object>, HttpResponseMessage>, IUploadApi, IUploadApi<HttpResponseMessage>, IDownloadApi, IDownloadApi<IDictionary<string, object>>, ITransferApiBase Inherited Members IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, string, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, string, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, string, IApizrRequestOptions) IDownloadApi<IDictionary<string, object>>.DownloadAsync(string) IDownloadApi<IDictionary<string, object>>.DownloadAsync(string, IApizrRequestOptions) IDownloadApi<IDictionary<string, object>>.DownloadAsync(string, IDictionary<string, object>) IDownloadApi<IDictionary<string, object>>.DownloadAsync(string, IDictionary<string, object>, IApizrRequestOptions)"
  },
  "api/Apizr.Transferring.Requesting.ITransferApiBase.html": {
    "href": "api/Apizr.Transferring.Requesting.ITransferApiBase.html",
    "title": "Interface ITransferApiBase | Apizr",
    "keywords": "Interface ITransferApiBase Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll [Cache(CacheMode.None)] public interface ITransferApiBase"
  },
  "api/Apizr.Transferring.Requesting.IUploadApi-1.html": {
    "href": "api/Apizr.Transferring.Requesting.IUploadApi-1.html",
    "title": "Interface IUploadApi<TApiResultData> | Apizr",
    "keywords": "Interface IUploadApi<TApiResultData> Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll public interface IUploadApi<TApiResultData> : ITransferApiBase Type Parameters TApiResultData Methods UploadAsync(ByteArrayPart) [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart) Parameters byteArrayPart ByteArrayPart Returns Task<TApiResultData> UploadAsync(ByteArrayPart, IApizrRequestOptions) [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, IApizrRequestOptions options) Parameters byteArrayPart ByteArrayPart options IApizrRequestOptions Returns Task<TApiResultData> UploadAsync(ByteArrayPart, string) [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, string path) Parameters byteArrayPart ByteArrayPart path string Returns Task<TApiResultData> UploadAsync(ByteArrayPart, string, IApizrRequestOptions) [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, string path, IApizrRequestOptions options) Parameters byteArrayPart ByteArrayPart path string options IApizrRequestOptions Returns Task<TApiResultData> UploadAsync(FileInfoPart) [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart) Parameters fileInfoPart FileInfoPart Returns Task<TApiResultData> UploadAsync(FileInfoPart, IApizrRequestOptions) [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, IApizrRequestOptions options) Parameters fileInfoPart FileInfoPart options IApizrRequestOptions Returns Task<TApiResultData> UploadAsync(FileInfoPart, string) [Multipart(\"----MyGreatBoundary\")] [Post(\"/{filePath}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, string filePath) Parameters fileInfoPart FileInfoPart filePath string Returns Task<TApiResultData> UploadAsync(FileInfoPart, string, IApizrRequestOptions) [Multipart(\"----MyGreatBoundary\")] [Post(\"/{filePath}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, string filePath, IApizrRequestOptions options) Parameters fileInfoPart FileInfoPart filePath string options IApizrRequestOptions Returns Task<TApiResultData> UploadAsync(StreamPart) [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(StreamPart streamPart) Parameters streamPart StreamPart Returns Task<TApiResultData> UploadAsync(StreamPart, IApizrRequestOptions) [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(StreamPart streamPart, IApizrRequestOptions options) Parameters streamPart StreamPart options IApizrRequestOptions Returns Task<TApiResultData> UploadAsync(StreamPart, string) [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(StreamPart streamPart, string path) Parameters streamPart StreamPart path string Returns Task<TApiResultData> UploadAsync(StreamPart, string, IApizrRequestOptions) [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(StreamPart streamPart, string path, IApizrRequestOptions options) Parameters streamPart StreamPart path string options IApizrRequestOptions Returns Task<TApiResultData>"
  },
  "api/Apizr.Transferring.Requesting.IUploadApi.html": {
    "href": "api/Apizr.Transferring.Requesting.IUploadApi.html",
    "title": "Interface IUploadApi | Apizr",
    "keywords": "Interface IUploadApi Namespace Apizr.Transferring.Requesting Assembly Apizr.Integrations.FileTransfer.dll public interface IUploadApi : IUploadApi<HttpResponseMessage>, ITransferApiBase Inherited Members IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, string, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, string, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, string) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, string, IApizrRequestOptions)"
  },
  "api/Apizr.Transferring.Requesting.html": {
    "href": "api/Apizr.Transferring.Requesting.html",
    "title": "Namespace Apizr.Transferring.Requesting | Apizr",
    "keywords": "Namespace Apizr.Transferring.Requesting Interfaces IDownloadApi IDownloadApi<TDownloadParams> ITransferApi ITransferApiBase ITransferApi<TDownloadParams> ITransferApi<TDownloadParams, TUploadApiResultData> IUploadApi IUploadApi<TApiResultData>"
  },
  "api/Apizr.WebApiAttribute.html": {
    "href": "api/Apizr.WebApiAttribute.html",
    "title": "Class WebApiAttribute | Apizr",
    "keywords": "Class WebApiAttribute Namespace Apizr Assembly Apizr.dll Define general web api settings (could be defined with options builder) [AttributeUsage(AttributeTargets.Interface)] public class WebApiAttribute : Attribute Inheritance object Attribute WebApiAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebApiAttribute() Define a web api without any base absolute address or relative path (has to be defined fluently) but discoverable for auto registration public WebApiAttribute() WebApiAttribute(bool) Define a web api without any base absolute address or relative path (has to be defined fluently) and make it discoverable for auto registration or not public WebApiAttribute(bool isAutoRegistrable) Parameters isAutoRegistrable bool Makes decorated interface registrable by assembly scanning WebApiAttribute(string) Define a web api with a base absolute address or relative path (if path, base address has to be defined fluently) and discoverable for auto registration public WebApiAttribute(string baseAddressOrPath) Parameters baseAddressOrPath string The web api base absolute address or relative path WebApiAttribute(string, bool) Define a web api with a base absolute address or relative path (if path, base address has to be defined fluently) and make it discoverable for auto registration or not public WebApiAttribute(string baseAddressOrPath, bool isAutoRegistrable) Parameters baseAddressOrPath string The web api base absolute address or relative path isAutoRegistrable bool Makes decorated interface registrable by assembly scanning Properties BaseAddressOrPath The web api base absolute address or relative path public string BaseAddressOrPath { get; } Property Value string IsAutoRegistrable Makes decorated interface registrable by assembly scanning public bool IsAutoRegistrable { get; } Property Value bool"
  },
  "api/Apizr.html": {
    "href": "api/Apizr.html",
    "title": "Namespace Apizr | Apizr",
    "keywords": "Namespace Apizr Classes AkavacheCacheHandler Akavache cache handler implementation AkavacheOptionsBuilderExtensions Akavache options builder extensions ApizrBuilder The builder ApizrException An exception with optional cached object ApizrExceptionHandler ApizrExceptionHandler<TResult> ApizrException<TResult> An exception with optional cached TResult ApizrHttpClient ApizrManager ApizrManager<TWebApi> The manager ApizrResponse ApizrResponseExtensions ApizrResponse extensions methods ApizrResponse<TResult> Interface used to represent an API response managed by Apizr. AutoMapperMappingHandler AutoMapper mapping handler implementation AutoMapperOptionsBuilderExtensions AutoMapper options builder extensions AutoRegisterAttribute Tells Apizr to auto register a Manager for the provided api (works only with IServiceCollection extensions registration) AutoRegisterAttribute<TWebApi> DistributedCacheHandler<TCache> Distributed cache handler implementation FileTransferExtendedOptionsBuilderExtensions File transfer options builder extensions FileTransferOptionsBuilderExtensions File transfer builder extensions FusilladeOptionsBuilderExtensions Fusillade options builder extensions InMemoryCacheHandler InMemory cache handler implementation LazyFactory<TInstance> A lazy instance MapsterMappingHandler Mapster mapping handler implementation MapsterOptionsBuilderExtensions Mapster options builder extensions MediationFileTransferOptionsBuilderExtensions MediationOptionsBuilderExtensions MediatR options builder extensions MicrosoftCachingOptionsBuilderExtensions Microsoft Caching options builder extensions MonkeyCacheHandler MonkeyCache cache handler implementation OptionalFileTransferOptionsBuilderExtensions Extensions for file transfer registration with optional result OptionalOptionsBuilderExtensions Optional with MediatR options builder extensions PriorityAttribute The Fusillade priority attribute PriorityHttpMessageHandler ReadAllPriorityAttribute The Fusillade priority attribute ReadPriorityAttribute The Fusillade priority attribute ServiceCollectionExtensions Apizr service collection extensions Interfaces IApizrBuilder The builder IApizrExceptionHandler IApizrManager The manager definition IApizrManager<TWebApi> The manager encapsulating TWebApi's task IApizrResponse Base interface used to represent an API response managed by Apizr. IApizrResponse<TResult> Interface used to represent an API response managed by Apizr. ILazyFactory<TInstance> A lazy instance Enums ApizrResponseDataSource"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Apizr",
    "keywords": "API Reference This API reference is auto generated by DocFX based on code summaries. Things may be missing so do not hesitate to let us know so that we can complete and fix it. Happy reading :)"
  },
  "articles/breakingchanges.html": {
    "href": "articles/breakingchanges.html",
    "title": "| Apizr",
    "keywords": "Breaking changes Please find here some breaking changes while upgrading from previous versions 6.0 Apizr [BaseAddress] Now we can set base address with the brand new BaseAddress attribure instead of the now removed WebApi, CrudEntity or MappedCrudEntity useless ones, and only if you need to set it at design time Warning Former WebApi, CrudEntity and MappedCrudEntity attributes have been dropped out to keep things simple and consistent. Classic CRUD Classic CRUD Don't write anymore: ```csharp [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } ``` Now write: ```csharp [BaseAddress(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } ``` Don't write anymore: ```csharp [CrudEntity(\"https://reqres.in/api/users\")] public record User { //[...] } ``` Now write: ```csharp [BaseAddress(\"https://reqres.in/api/users\")] public record User { //[...] } ``` *** [AutoRegister] Now we can tell Apizr to auto register apis with the brand new AutoRegister attribure instead of the now removed WebApi, CrudEntity or MappedCrudEntity useless ones Warning Former WebApi, CrudEntity and MappedCrudEntity attributes have been dropped out to keep things simple and consistent. Don't write anymore: ```csharp [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } ``` Now write: ```csharp [AutoRegister(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } ``` Don't write anymore: ```csharp [CrudEntity(\"https://reqres.in/api/users\")] // OR [MappedCrudEntity(\"https://reqres.in/api/users\")] public record User { //[...] } ``` Now write: ```csharp [AutoRegister(\"https://reqres.in/api/users\")] public record User { //[...] } ``` Note that `AutoRegister` attribute could take the api type as parameter or generic argument so that you could provide your own crud definition types if needed: ```csharp [AutoRegister<ICrudApi<User, int, PagedResult<User>, IDictionary<string, object>>>(\"https://reqres.in/api/users\")] public record User { //[...] } ``` *** [MappedWith] Now we can tell Apizr to map data while using MediatR/Optional thanks to the yet known MappedWith attribure instead of the now removed CrudEntity or MappedCrudEntity useless ones Warning Former CrudEntity and MappedCrudEntity attributes have been dropped out to keep things simple and consistent. Don't write anymore: ```csharp [CrudEntity<MinUser>(\"https://reqres.in/api/users\")] // OR [MappedCrudEntity<MinUser>(\"https://reqres.in/api/users\")] public record User { //[...] } ``` Now write: ```csharp [MappedWith<MinUser>] public record User { //[...] } ``` [Polly] Now supporting the brand new Polly v8+ Resilience Strategies/Pipelines instead of former Polly v7- Policies You'll have to rewrite your policies as strategies/pipelines. Here is an example of a former policy and its new equivalent strategy/pipeline: Don't write anymore: var policy = Policy .Handle<SomeExceptionType>() .Retry(3); Now write: var resiliencePipelineBuilder = new ResiliencePipelineBuilder() .AddRetry(new RetryStrategyOptions { ShouldHandle = new PredicateBuilder().Handle<SomeExceptionType>(), MaxRetryAttempts = 3, Delay = TimeSpan.Zero, }); You can't register your policies into a policy registry and provide it to Apizr anymore. You have to register your pipeline into a pipeline registry instead and provide it to Apizr: Extended Static Don't write anymore: var registry = new PolicyRegistry { { \"TransientHttpError\", policy } }; ... services.AddPolicyRegistry(registry); Now write: services.AddResiliencePipeline<string, HttpResponseMessage>(\"TransientHttpError\", builder => builder.AddPipeline(resiliencePipelineBuilder.Build())); Don't write anymore: var registry = new PolicyRegistry { { \"TransientHttpError\", policy } }; ... options => options.WithPolicyRegistry(registry) Now write: var resiliencePipelineRegistry = new ResiliencePipelineRegistry<string>(); resiliencePipelineRegistry.TryAddBuilder<HttpResponseMessage>(\"TransientHttpError\", (builder, _) => builder.AddPipeline(resiliencePipelineBuilder.Build())); ... options => options.WithResiliencePipelineRegistry(resiliencePipelineRegistry) You can't provide your own context instance anymore to carry some properties. But you can provide your properties directly instead: Don't write anymore: var context = new Context {{ \"TestKey1\", 1 }}; ... options => options.WithContext(context); Now write: ResiliencePropertyKey<string> testKey1 = new(\"TestKey1\"); ... options => options.WithResilienceProperty(testKey1, \"testValue1\") You'll have to change your PolicyAttribute to ResiliencePipelineAttribute. Don't write anymore: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } Now write: [assembly:ResiliencePipeline(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } [Headers] Now WithHeaders options take an enumerable parameter instead of a parameter array so that we could provide some more optional parameters Don't write anymore: // direct configuration options => options.AddHeaders(\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\") // OR factory configuration options => options.AddHeaders(() => $\"HeaderKey3: {YourHeaderValue3}\") // OR extended factory configuration with the service provider instance options => options.AddHeaders(serviceProvider => $\"HeaderKey3: {serviceProvider.GetRequiredService<IYourSettingsService>().YourHeaderValue3}\") Now write: // direct configuration options => options.AddHeaders([\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\"]) // OR factory configuration options => options.AddHeaders(() => [$\"HeaderKey3: {YourHeaderValue3}\"]) // OR extended factory configuration with the service provider instance options => options.AddHeaders(serviceProvider => [$\"HeaderKey3: {serviceProvider.GetRequiredService<IYourSettingsService>().YourHeaderValue3}\"]) // OR extended factory configuration with your service instance options => options.AddHeaders<IYourSettingsService>([settings => $\"HeaderKey3: {settings.YourHeaderValue3}\"]) [DelegatingHandler] Now we can register DelegatingHandlers thanks to WithDelegatingHandler fluent option instead of the AddDelegatingHandler deleted one for consistency Don't write anymore: // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.AddDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.AddDelegatingHandler((logger, options) => YourDelegatingHandler) // OR factory configuration with the service provider instance options => options.AddDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.AddDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) Now write: // direct configuration options => options.WithDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.WithDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.WithDelegatingHandler((logger, options) => YourDelegatingHandler) // OR factory configuration with the service provider instance options => options.WithDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.WithDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) [CacheMode] Now CacheMode.GetAndFetch enum option has been renamed to CacheMode.FetchOrGet so that it says what it actually does and improve consistency with the other CacheMode.GetOrFetch option Don't write anymore: // attribute configuration [Cache(CacheMode.GetAndFetch, ...)] // OR fluent configuration options => options.WithCaching(CacheMode.GetAndFetch, ...) Now write: // attribute configuration [Cache(CacheMode.FetchOrGet, ...)] // OR fluent configuration options => options.WithCaching(CacheMode.FetchOrGet, ...) 5.3 Apizr [HttpClient] Now we can configure the HttpClient instead of providing one (same as extended experience) with the brand new ConfigureHttpClient fluent option Don't write anymore: options => options.WithHttpClient((httpMessageHandler, baseUri) => new YourOwnHttpClient(httpMessageHandler, false){BaseAddress = baseUri, WhateverOption = whateverValue}); Now write: options => options.ConfigureHttpClient(httpClient => httpClient.WhateverOption = whateverValue) 5.0 Apizr Now ApizrBuilder static class exposes a single public property named Current and returning its own instance to get acces to its methods, so that it could be extended then by other packages Don't write anymore: ApizrBuilder.WhatEver(); Now write: ApizrBuilder.Current.WhatEver(); Some methods have been deprecated and moved as extension methods to a dedicated namespace, pointing to the new core ones Don't write anymore: // Designing [Get(\"/\")] Task<MyResult> WhatEver([Priority] int priority, [Context] Context context, CancellationToken cancellationToken); // Requesting myManager.ExecuteAsync((ctx, ct, api) => api.WhatEver((int)Priority.Background, ct), context, token, true, OnEx) Now write: // Designing [Get(\"/\")] Task<MyResult> WhatEver([RequestOptions] IApizrRequestOptions options); // Requesting myResult = await myManager.ExecuteAsync((opt, api) => api.WhatEver(opt), options => options.WithCacheClearing(true) .WithCancellation(token) .WithContext(context) .WithPriority(Priority.Background) .WithExCatcher(OnEx)); 4.1 Apizr Apizr static class renamed to ApizrBuilder to match its purpose and doesn't conflict with its namespace anymore ApizrBuilder's methods renamed to match their return type so that we know what we're about to build (e.g. CreateRegistry, AddManagerFor, CreateManagerFor) ApizrRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) Apizr.Extensions.Microsoft.DependencyInjection Extension methods renamed to match their return type so that we know what we're about to build (e.g. AddManagerFor, AddCrudManagerFor) ApizrExtendedRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) Apizr.Integrations.MediatR ApizrMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetMediatorFor, GetCrudMediatorFor, ContainsMediatorFor) Apizr.Integrations.Optional ApizrOptionalMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetOptionalMediatorFor, GetCrudOptionalMediatorFor, ContainsOptionalMediatorFor) 4.0 Apizr TraceAttribute has been renamed back to LogAttribute Now we can set a LogLevel value for each Low, Medium and High severity by attribute or fluent configuration Apizr.Integrations.MediatR Now Apizr.Integrations.MediatR targets .Net Standard 2.1 as MediatR v10+ does Apizr.Integrations.Optional Now Apizr.Integrations.Optional targets .Net Standard 2.1 as Apizr.Integrations.MediatR v4+ does Apizr.Integrations.AutoMapper Now Apizr.Integrations.AutoMapper targets .Net Standard 2.1 as AutoMapper v11+ does Warning Apizr.Integrations.Shiny has been discontinued This integration project has been dropped out as Shiny no longer provide built-in caching and logging feature anymore. Apizr now either relies on MS Caching extensions, Akavache or MonkeyCache for caching feature and MS Logging extensions for logging feature. You'll have to provide a connectivity handler if you want Apizr to check it. 3.0 Apizr Fusillade has been moved to an integration package. If you used to play with it, just install it from its brand new dedicated integration package and follow the new Readme instructions 2.0 Apizr TraceAttribute renamed to LogItAttribute to suits its tracing and logging both features activation CacheAttribute renamed to CacheItAttribute to keep things consistent No more cache and policy attribute decorating CRUD api by default. You can activate it fluently with the options builder. 1.4.0 Apizr.Integrations.MediatR WithCrudMediation renamed to WithMediation Apizr.Integrations.Optional WithCrudOptionalMediation renamed to WithOptionalMediation 1.2.0 Apizr Apizr instantiation/registration methods names standardized to Apizr.For and Apizr.CrudFor Apizr.Extensions.Microsoft.DependencyInjection Apizr instantiation/registration methods names standardized to services.AddApizrFor and services.AddApizrCrudFor Apizr.Integrations.Shiny Apizr instantiation/registration methods names standardized to services.UseApizrFor and services.UseApizrCrudFor"
  },
  "articles/config.html": {
    "href": "articles/config.html",
    "title": "| Apizr",
    "keywords": "Configuring Many options could be set by attribute decoration and much more by fluent contextualized configuration, depending on what you're asking and where. You can configure the way your api request will be managed by Apizr at 3 different stages: Design time, by attribute decoration, when you first create your api interface Register time, by fluent options, when you actually register your api interfaces Request time, by fluent options, when you finally send the request to the api At Design time, everything is set by attribute like we used to with Refit, decorating at different levels like assembly, interface/class or method. At Register time, you'll get the possibility to share some options or not with several api interfaces registrations or not. You can set options automatically with settings configuration loading (see Settings) or manually with fluent options. At Request time, you'll get your last chance to adjust configuration before the request to be sent. As you can mix stages and levels while configuring, here is the configuration pipeline: 1 (Design): The assembly attribute configuration level set a configuration to all api interfaces contained into the assembly. 2 (Register): The fluent common configuration option (automatic or manual) takes over the previous one and set a configuration to all registered api interfaces. 3 (Design): The interface attribute configuration level takes over all the previous ones and set a configuration to a specific api interface. 4 (Register): The fluent proper or manager configuration option (automatic or manual) takes over all the previous ones and set a configuration to the registered api interface. 5 (Design): The method attribute configuration level takes over all the previous ones and set a configuration to a specific api interface method. 6 (Register): The fluent proper or manager request configuration option (automatic or manual) takes over all the previous ones and set a configuration to the named api interface method. 7 (Request): The fluent request configuration option takes over all the previous ones and set a configuration to the called api interface method. Let's take a quite complexe and dummy but exhaustive timeout configuration example to illustrate that pipeline. First, the design: [assembly:OperationTimeout(\"00:02:00\")] namespace Apizr.Sample { [BaseAddress(\"https://reqres.in/api\")] [OperationTimeout(\"00:01:30\")] public interface IReqResService { [Get(\"/users\")] [RequestTimeout(\"00:01:00\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Post(\"/users\")] Task<User> CreateUserAsync(User user, [RequestOptions] IApizrRequestOptions options); } } Tip You should add the request options parameter [RequestOptions] IApizrRequestOptions options to your api methods to get all the Apizr goodness. If not, request time configuration won't be applied (such as Polly, Cancellation, Timeout, Priority, etc...). Then, the registration, the extended way: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>(properOptions => properOptions.WithOperationTimeout(new TimeSpan(0,1,15)) .WithRequestOptions(nameof(IReqResService.GetUsersAsync), requestOptions => requestOptions.WithRequestTimeout(new TimeSpan(0,0,50))) .AddManagerFor<IHttpBinService>()), commonOptions => commonOptions .WithOperationTimeout(new TimeSpan(0,1,45)) ); } Finally, the request: // reqResManager here is a resolved instance of IApizrManager<IReqResService>> var users = await reqResManager.ExecuteAsync((opt, api) => api.GetUsersAsync(opt), options => options.WithRequestTimeout(new TimeSpan(0,0,45))); Now, guess when the request will time out? Here is how Apizr will take its decision about that: It first detects we set a global operation timeout of 00:02:00 (assembly attribute decoration) Then it detects we registered another global operation timeout of 00:01:45 (fluent common options) Then it detects we set an api operation timeout of 00:01:30 (interface attribute decoration) Then it detects we registered another api operation timeout of 00:01:15 (fluent proper options) Then it detects we set a request timeout of 00:01:00 (method attribute decoration) Then it detects we registered another request timeout of 00:00:50 (fluent proper's request options) Then it detects we registered another request timeout of 00:00:45 (fluent request options) And the winner is allways the closest one to the request call, so here 00:00:45. If we had defined some Polly strategies handling request timeouts, it would have waited further for another try, but timed out definitly at 00:01:15 right before the retry, due to our operation timeout. Now you get the picture about the configuration pipeline, let's take a more meanful example. Here is what configuring with a registry, the extended way, could look like: public override void ConfigureServices(IServiceCollection services) { // Some Polly strategies to handle transient http errors services.AddResiliencePipeline<string, HttpResponseMessage>(\"TransientHttpError\", builder => builder.AddRetry( new RetryStrategyOptions<HttpResponseMessage> { ShouldHandle = new PredicateBuilder<HttpResponseMessage>() .Handle<HttpRequestException>() .HandleResult(response => response.StatusCode is >= HttpStatusCode.InternalServerError or HttpStatusCode.RequestTimeout), Delay = TimeSpan.FromSeconds(1), MaxRetryAttempts = 3, UseJitter = true, BackoffType = DelayBackoffType.Exponential })); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)) .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>( options => options .WithBaseAddress(\"https://reqres.in/api/users\"))), config => config .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } And here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Apply proper logging options dedicated to IHttpBinService's manager Add a manager for User entity with CRUD api interface and custom types into the registry, to register it into the container Apply proper address option dedicated to User's manager Apply common options to all managers by: Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) Are you still following? Don't worry! Every single option is detailed through this documentation, so let's browse it!"
  },
  "articles/config_address.html": {
    "href": "articles/config_address.html",
    "title": "| Apizr",
    "keywords": "Configuring base address You can configure base address and base path either by attribute decoration or by fluent configuration. Fluent configuration allows you to load options automatically from settings (see Settings), or set options manually. You can mix the configuration providing a base path by attribute and a base address/URI fluently. Attribute Fluent BaseAddress attribute You can set api interface or CRUD entity base address or path thanks to the BaseAddress attribute. It let you set the base address at design time and then register your api fluently without having to set it. You can do it like so: [BaseAddress(\"YOUR_API_INTERFACE_BASE_ADDRESS_OR_PATH\")] public interface IYourApiInterface { // Your api interface methods } // OR the same for CRUD api [BaseAddress(\"YOUR_CRUD_ENTITY_API_BASE_ADDRESS_OR_PATH\")] public record YourCrudEntity { // Your CRUD entity properties } Note that if you provided only a path, you still have to set the base address/URI fluently at registration time so that Apizr could merge it all together. AutoRegister attribute You can set api interface or CRUD entity base address or path thanks to the AutoRegister attribute. It let you set the base address at design time and then register apis by assembly scanning at register time. You can do it like so: [AutoRegister(\"YOUR_API_INTERFACE_BASE_ADDRESS_OR_PATH\")] public interface IYourApiInterface { // Your api interface methods } // OR the same for CRUD api [AutoRegister(\"YOUR_CRUD_ENTITY_API_BASE_ADDRESS_OR_PATH\")] public record YourCrudEntity { // Your CRUD entity properties } Note that if you provided only a path, you still have to set the base address/URI fluently at registration time so that Apizr could merge it all together. AutoRegister attribute comes with more options so you should read more about it from the Getting Started doc articles. Automatically Base address and base path could both be set automatically by providing an IConfiguration instance to Apizr like so: options => options.WithConfiguration(context.Configuration) We can set it at common level (shared by all apis) or specific level (dedicated to a named one). Please heads to the Settings) doc article to see how to configure the base address or base path automatically from settings. Manually Configuring the base address or base path fluently with manual option allows you to set it dynamically. You can set the base address or a base path thanks to these options: // Address options => options.WithBaseAddress(YourSettings.YourBaseAddress)) // Path options => options.WithBasePath(YourSettings.YourBasePath)) The extended world offers another option with a factory providing a service provider instance: // Address options => options.WithBaseAddress(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBaseAddress)) // Path options => options.WithBasePath(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBasePath)) In both cases, you can mix the configurations like providing a base path by attribute and a base address/URI fluently. WithBaseAddress and WithBasePath options are available at both common and specific configuration level, meanning that you can share a base address with several api interfaces and/or set a specific one for some others."
  },
  "articles/config_auth.html": {
    "href": "articles/config_auth.html",
    "title": "| Apizr",
    "keywords": "Configuring authentication Apizr provides its own AuthenticationHandler to manage the authentication workflow . Defining As Apizr is based on Refit, you can decorate your authenticated apis like so (here with bearer authorization): namespace Apizr.Sample { [BaseAddress(\"https://httpbin.org/\")] public interface IHttpBinService { [Get(\"/bearer\")] [Headers(\"Authorization: Bearer\")] Task<HttpResponseMessage> AuthBearerAsync(); } } Tip Fluent Headers Note that you can either define headers at registration time with some fluent options. Configuring To activate this feature, you have to configure it thanks to the options builder: Extended Static options => options.WithAuthenticationHandler<ISettingsService, ISignInService>( settingsService => settingsService.Token, signInService => signInService.SignInAsync) settingsService is your service managing settings signInService is your service managing your login flow. Both services should be container registered as it will be resolved. options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( YourSettingsServiceInstance, settingsService => settingsService.Token, YourSignInServiceInstance, signInService => signInService.SignInAsync) // OR with service factory options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, () => YourSignInServiceInstance, signInService => signInService.SignInAsync) YourSettingsServiceInstance should be replaced by whatever settings manager instance of your choice YourSignInServiceInstance should be replaced by your service managing your login flow. In details: settingsService.Token should be a public string property, saved locally on device. signInService.SignInAsync should be a method taking an HttpRequestMessage parameter and returning a refreshed access token. More You may want to deal with authentication configuration in some other ways. Here are all other authentication options: Extended Static When you don't want Apizr to save the token anywhere neither refresh it, but just want to load it when needed: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token) settingsService.Token should be here a public string property with a private setter, containing the token. When you don't want Apizr to save the token anywhere but want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshToken(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshToken(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (serviceProvider, options) => new YourAuthenticationHandler(...)) When you don't want Apizr to save the token anywhere neither refresh it, but just want to load it when needed: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token) // OR with service factory options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token) settingsService.Token should be here a public string property with a private setter, containing the token. When you don't want Apizr to save the token anywhere but want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshToken(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) // Or with service factory options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshToken(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (logger, options) => new YourAuthenticationHandler(...)) Processing There's nothing more to deal with. Protected requests will be authenticated by Apizr, otherwise it will ask user to sign in. Anyway, here is the AuthenticationHandler's SendAsync method FYI: protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { HttpRequestMessage clonedRequest = null; string token = null; var context = request.GetOrBuildApizrResilienceContext(); if (!context.TryGetLogger(out var logger, out var logLevel, out _, out _)) { logger = _logger; logLevel = _apizrOptions.LogLevel; } // See if the request has an authorize header var auth = request.Headers.Authorization; if (auth != null) { // Authorization required! Get the token from saved settings if available logger?.Log(logLevel, $\"{context.OperationKey}: Authorization required with scheme {auth.Scheme}\"); token = GetToken(); if (!string.IsNullOrWhiteSpace(token)) { // We have one, then clone the request in case we need to re-issue it with a refreshed token logger?.Log(logLevel, $\"{context.OperationKey}: Saved token will be used\"); clonedRequest = await this.CloneHttpRequestMessageAsync(request); } else { // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: No token saved yet. Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); } // Set the authentication header request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set\"); } // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request with authorization header...\"); var response = await base.SendAsync(request, cancellationToken).ConfigureAwait(false); // Check if we get an Unauthorized response with token from settings if (response.StatusCode == HttpStatusCode.Unauthorized && auth != null && clonedRequest != null) { logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized !\"); // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); // Set the authentication header with refreshed token clonedRequest.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set with refreshed token\"); // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request again but with refreshed authorization header...\"); response = await base.SendAsync(clonedRequest, cancellationToken).ConfigureAwait(false); } // Clear the token if unauthorized if (response.StatusCode == HttpStatusCode.Unauthorized) { token = null; logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized ! Token has been cleared\"); } // Save the refreshed token if succeed or clear it if not this.SetToken(token); logger?.Log(logLevel, $\"{context.OperationKey}: Token saved\"); return response; } The workflow: We check if the request needs to be authenticated If so, we try to load a previously saved token If there’s one, we clone the request in case we need to re-issue it with a refreshed token (as token could be rejected server side) If there’s not, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header with the token We finally send the request We check if we get an Unauthorized response If so and if it was sent with a saved token, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header of the cloned request with the refreshed token We send the cloned request We save the token if succeed or clear it if not We return the response"
  },
  "articles/config_cancellation.html": {
    "href": "articles/config_cancellation.html",
    "title": "| Apizr",
    "keywords": "Configuring Cancellation You may want to provide a CancellationToken, thanks to WithCancellation builder option, available at request time. First, add the request options parameter [RequestOptions] IApizrRequestOptions options to your api methods to provide your cancellation token. Then, you can set it thanks to this option: try { // With static builder here but works the same with the extended one var reqResManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(); // Create your token source var cts = new CancellationTokenSource(); // Send the request with your token into options var users = await reqResManager.ExecuteAsync((opt, api) => api.GetUsersAsync(opt), options => options.WithCancellation(cts.Token)); // Do whatever with users here... } // Catching ApizrException with data caching catch (ApizrException<ApiResult<User>> ex) when (ex.InnerException is OperationCanceledException cancelEx) { // Handle canceled exception here with cached data } // OR catching ApizrException without data caching catch (ApizrException ex) when (ex.InnerException is OperationCanceledException cancelEx) { // Handle canceled exception here } // AND catching other exceptions catch (Exception ex) { // Handle other exceptions here } You may notice that you don't have to pass the token itself directly to the request anymore. Just pass the resulting options instead and everything will be wired for you. Don't forget to handle the right exception, depending if you enabled data caching feature or not."
  },
  "articles/config_connectivity.html": {
    "href": "articles/config_connectivity.html",
    "title": "| Apizr",
    "keywords": "Configuring Connectivity Apizr can check network connectivity for you, right before sending any request. It will throw an ApizrException with an IOException as InnerException in case of network failure, which you can handle globally by showing a snack bar info or whatever. This way, your viewmodels are kept light and clear of it. With boolean factory You may want to provide just a simple boolean value to check connectivity. Here is the right option: Extended Static // Boolean factory options => options.WithConnectivityHandler(serviceProvider => YourConnectivityBoolean) // Boolean expression factory options => options.WithConnectivityHandler<IYourRegisteredConnectivityService>(service => service.YourConnectivityBoolean) options => options.WithConnectivityHandler(() => YourConnectivityBoolean) With Connectivity Handler You could also implement the IConnectivityHandler interface: public class YourConnectivityHandler : IConnectivityHandler { public bool IsConnected() { // Check connectivity here } } Then just register it with this option: Extended Static // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(serviceProvider => YourConnectivityHandler) // OR closed generic configuration options => options.WithConnectivityHandler<YourConnectivityHandler>() // OR type configuration options => options.WithConnectivityHandler(typeof(YourConnectivityHandler)) // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(() => YourConnectivityHandler)"
  },
  "articles/config_datacaching.html": {
    "href": "articles/config_datacaching.html",
    "title": "| Apizr",
    "keywords": "Configuring data caching You may want to cache data returned from your API. Apizr could handle it for you by providing an ICachingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install the integration package of your choice: Project Current Upcoming Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Where: Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler implementation for MonkeyCache Warning Apizr.Extensions.Microsoft.Caching This integration package offers you to work with any of MS Extension Caching compatible caching engines. It means that you still have to install the one of your choice right after Apizr.Extensions.Microsoft.Caching. Registering Please register the one corresponding to the package you just installed MS Extensions Caching As you can guess, MS Extensions Caching is available only with extended registration flavor. That said, you'll be able to register with one of the folowing options In-Memory Distributed // direct short configuration options => options.WithInMemoryCacheHandler() // OR closed type configuration options => options.WithCacheHandler<InMemoryCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(InMemoryCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new InMemoryCacheHandler(new YOUR_INMEMORY_CACHING_ENGINE())) // OR factory configuration with the service provider instance options => options.WithCacheHandler(serviceProvider => new InMemoryCacheHandler(serviceProvider.GetRequiredService<IMemoryCache>())) // direct short configuration options => options.WithDistributedCacheHandler<TCacheType>() // OR closed type configuration options => options.WithCacheHandler<DistributedCacheHandler<TCacheType>>() // OR type configuration options => options.WithCacheHandler(typeof(DistributedCacheHandler<TCacheType>)) // OR direct configuration options => options.WithCacheHandler(new DistributedCacheHandler<TCacheType>(new YOUR_DISTRIBUTED_CACHING_ENGINE())) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new DistributedCacheHandler<TCacheType>( serviceProvider.GetRequiredService<IDistributedCache>(), serviceProvider.GetRequiredService<IHttpContentSerializer>())) Where TCacheType could be either string or byte[], conforming to MS Extensions Distributed Cache definition. Warning Distributed cache Registering MS Extension Distributed Cache means that you have to install the distributed cache of your choice and register it too. Akavache You'll be able to register with one of the folowing options: Extended Static // direct short configuration options => options.WithAkavacheCacheHandler() // OR closed type configuration options => options.WithCacheHandler<AkavacheCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(AkavacheCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new AkavacheCacheHandler()) // direct short configuration options => options.WithAkavacheCacheHandler() // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(() => new AkavacheCacheHandler()) Where most of it get overloads so you could set: blobCacheFactory: The factory to init the blob cache of your choice (default: LocalMachine) applicationName: The application name used by Akavache (default: ApizrAkavacheCacheHandler) MonkeyCache Start by initializing Barrel.ApplicationId as you used to do with MonkeyCache: Barrel.ApplicationId = \"YOUR_APPLICATION_NAME\"; Then you'll be able to register with one of the folowing options: Extended Static // closed type configuration options => options.WithCacheHandler<MonkeyCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(MonkeyCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new MonkeyCacheHandler(Barrel.Current)) Warning Barrel.Current If you don't provide Barrel.Current to the MonkeyCacheHandler, don't forget to register it into your DI container. // direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) Activating You can activate caching either at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration Cache attribute Apizr comes with a Cache attribute which activate result data caching at any level (all Assembly apis, classic interface/crud class apis or specific classic interface api method). Here is classic api an example: namespace Apizr.Sample { [BaseAddress(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\"), Cache(CacheMode.FetchOrGet, \"01:00:00\")] Task<UserList> GetUsersAsync(); [Get(\"/users/{userId}\"), Cache(CacheMode.GetOrFetch, \"1.00:00:00\")] Task<UserDetails> GetUserAsync(int userId); } } You’ll find also cache attributes dedicated to CRUD apis like CacheRead and CacheReadAll, so you could define cache settings at any level for CRUD apis too. Here is CRUD api an example: namespace Apizr.Sample.Models { [BaseAddress(\"https://reqres.in/api/users\")] [CacheReadAll(CacheMode.FetchOrGet, \"01:00:00\")] [CacheRead(CacheMode.GetOrFetch, \"1.00:00:00\")] public record User { [JsonPropertyName(\"id\")] public int Id { get; init; } [JsonPropertyName(\"first_name\")] public string FirstName { get; init; } [JsonPropertyName(\"last_name\")] public string LastName { get; init; } [JsonPropertyName(\"avatar\")] public string Avatar { get; init; } [JsonPropertyName(\"email\")] public string Email { get; init; } } } Both (classic and CRUD) define the same thing about cache life time and cache mode. Life time is actually a TimeSpan string representation which is parsed then. Its optional and if you don’t provide it, the default cache provider settings will be applyed. Cache mode could be set to: None: no caching at all FetchOrGet (default): the result is returned from api request if it succeed, otherwise from cache if there’s some data already cached. In this specific case of request failing, cached data will be wrapped with the original exception into an ApizrException thrown by Apizr, so don’t forget to catch it. GetOrFetch: the result is returned from cache if there’s some data already cached, otherwise from the request. SetByHeader: let the server control the client cache mode and lifetime (works only with an IApiResponse<T> wrapped result relying on response headers such as Cache-Control, Expires, ETag and Last-Modified). In both FetchOrGet and GetOrFetch modes, cached data is updated after each successful request call. In the SetByHeader mode, the server control the mode which could ends to None, FetchOrGet or GetOrFetch. You also can define global caching settings by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the lowest level settings it could find. Back to the example, we are saying: When getting all users, let’s admit we could have many new users registered each hour, so: Try to fetch it from web first if fetch failed, try to load it from previous cached result if fetch succeed, update cached data but make it expire after 1 hour When getting a specific user, let’s admit its details won’t change so much each day, so: Try to load it from cache first if no previous cached data or cache expired after 1 day, fetch it and update cached data but make it expire after 1 day CacheKey attribute By default, Apizr will use all the method parameters (name and value) to generate a cache key (excepting property parameters, neither cancellation token parameters). But you may want to define your own cache key, choosing by yourself which parameter to include and which not. That's what the CacheKey attribute is made for. You can decorate one or more parameters with it, then it will be included in the cache key generation: namespace Apizr.Sample { [BaseAddress(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users/{userId}\"), Cache(CacheMode.GetOrFetch, \"1.00:00:00\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, int organizationId, [CacheKey] string serviceName); } } Tip Cache key generation supports complex type parameters so you can group your parameters into a single one to include them all. Fluent configuration Automatically Caching could be activated automatically by providing an IConfiguration instance containing cache settings to Apizr: options => options.WithConfiguration(context.Configuration) We can activate it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). Please heads to the Settings) doc article to see how to configure caching automatically from settings. Manually You can activate caching at any levels with this fluent option: // Address options => options.WithCaching(mode: CacheMode.FetchOrGet, lifeSpan: TimeSpan.FromHours(1), shouldInvalidateOnError: false) Using Reading From thrown ApizrException<T> Using Apizr caching feature is just about catching exceptions like for example: IList<User>? users = null; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList?.Data; } catch (ApizrException<UserList> e) { users = e.CachedResult?.Data; } finally { if (users != null && users.Any()) Users = new ObservableCollection<User>(users); } Here we catch an ApizrException<UserList> meaning that in case of exception, it will bring a typed object to you loaded from cache. From returned IApizrResponse<T> If your api methods return an IApiResponse<T> provided by Refit, you can handle the IApizrResponse<T> returned by Apizr to get your data from the cache, the safe way without throwing any exception. // Here we wrap the response into an IApiResponse<T> provided by Refit [BaseAddress(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<IApiResponse<UserList>> GetUsersAsync(); } ... // Then we can handle the IApizrResponse<T> response comming from Apizr var response = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); // Log potential unhandled exceptions and maybe inform the user about it if(!response.IsSuccess && !response.Exception.Handled) { _logger.LogError(response.Exception); Alert.Show(\"Error\", response.Exception.Message); } // Use the data, no matter the source if(response.Result?.Data?.Any() == true) { Users = new ObservableCollection<User>(response.Result.Data); // Inform the user that data comes from cache if so if(response.DataSource == ApizrResponseDataSource.Cache) Toast.Show(\"Data comes from cache\"); } Read the exception handling documentation to get more details about it. Clearing You may need to clear cache. Remeber that cache will be cleared when it will expire, thanks to what you set within the Cache attribute. Anyway, sometime we need to clear it explicitly, like in a Refresh scenario. Here are different ways to clear cache: // Clear on call to force fetch and update cache var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync(), options => options.WithCacheClearing(true)); // Clear a specific request cache var succeed = await _reqResManager.ClearCacheAsync(api => api.GetUsersAsync()); // Clear all cache var succeed = await _reqResManager.ClearCacheAsync(); Clearing all cache of all managers of entire app could also be done thanks to your cache engine api."
  },
  "articles/config_datamapping.html": {
    "href": "articles/config_datamapping.html",
    "title": "| Apizr",
    "keywords": "Configuring data mapping You may need to map data between some API types and Model types, known as DTO design pattern. Apizr could handle it for you by providing an IMappingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install this integration package of your choice: Project Current Upcoming Apizr.Integrations.AutoMapper Apizr.Integrations.Mapster Where: Apizr.Integrations.AutoMapper package brings an IMappingHandler implementation for AutoMapper Apizr.Integrations.Mapster package brings an IMappingHandler implementation for Mapster Defining AutoMapper As usually with AutoMapper, define your mapping profiles, like for example: public class UserMinUserProfile : Profile { public UserMinUserProfile() { CreateMap<User, MinUser>() .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.FirstName)); CreateMap<MinUser, User>() .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.Name)); } } Mapster No need to write your own DTO classes. Mapster provides Mapster.Tool to help you generating models. And if you would like to have explicit mapping, Mapster also generates mapper class for you. [AdaptTo(\"[name]Dto\"), GenerateMapper] public record Student { ... } Then Mapster will generate: public record StudentDto { ... } public static class StudentMapper { public static StudentDto AdaptToDto(this Student poco) { ... } public static StudentDto AdaptTo(this Student poco, StudentDto dto) { ... } public static Expression<Func<Student, StudentDto>> ProjectToDto => ... } But you can also write your own mapping configuration, like for example: TypeAdapterConfig<TSource, TDestination> .NewConfig() .Ignore(dest => dest.Age) .Map(dest => dest.FullName, src => string.Format(\"{0} {1}\", src.FirstName, src.LastName)); Advanced Warning Data Mapping with MediatR and/or Optional If you plan to use MediatR and/or Optional integrations, one more defining step has to be done. Only for those of you planning to use data mapping with MediatR and/or Optional, Apizr provide a MappedWith attribute telling it to map api object with model object. You’ll find another MappedCrudEntity attribute dedicated to CRUD apis, coming with auto-registration capabilities, in case of access restricted to only local client model. We could get a model class mapped to an api one like: [MappedWith(typeof(User))] public record MinUser { public int Id { get; init; } public string Name { get; init; } } Registering AutoMapper Extended Static First register AutoMapper as you used to do: services.AddAutoMapper(ASSEMBLIES_CONTAINING_PROFILES); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler() // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration with the service provider instance options => options.WithMappingHandler(serviceProvider => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR closed type configuration options => options.WithMappingHandler<AutoMapperMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(AutoMapperMappingHandler)) First create a MapperConfiguration with your profiles: var mapperConfig = new MapperConfiguration(config => { config.AddProfile<UserMinUserProfile>(); config.AddProfile<WhateverProfile>(); }); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler(mapperConfig) // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(mapperConfig.CreateMapper())) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(mapperConfig.CreateMapper())) Mapster Extended Static First register Mapster as you used to do: var config = new TypeAdapterConfig(); // Or // var config = TypeAdapterConfig.GlobalSettings; services.AddSingleton(config); services.AddScoped<IMapper, ServiceMapper>(); Then you'll be able to register with this option: // direct short configuration options => options.WithMapsterMappingHandler() // OR closed type configuration options => options.WithMappingHandler<MapsterMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(MapsterMappingHandler)) Register with one of the following options: // direct short configuration options => options.WithMapsterMappingHandler(new Mapper()) // OR direct configuration options => options.WithMappingHandler(new MapsterMappingHandler(new Mapper())) // OR factory configuration options => options.WithMappingHandler(() => new MapsterMappingHandler(new Mapper())) Using You can tell Apizr to map data just by providing types when executing a request. Something like: var result = await reqResManager.ExecuteAsync<MinUser, User>((api, user) => api.CreateUser(user, CancellationToken.None), minUser); Here we give a MinUser typed object to Apizr, which will be mapped to User type just before sending it. Then Apizr will map the User typed result back to MinUser type just before returning it. There are much more overloads so you can map objects the way you need. The same while using MediatR and/or Optional."
  },
  "articles/config_delegatinghandler.html": {
    "href": "articles/config_delegatinghandler.html",
    "title": "| Apizr",
    "keywords": "Configuring DelegatingHandlers You can add DelegatingHandlers thanks to this option: Extended Static // direct configuration options => options.WithDelegatingHandler(YourDelegatingHandler) // Or type configuration (has to be registered in the service collection) options => options.WithDelegatingHandler<YourDelegatingHandler>() // OR factory configuration with the service provider instance options => options.WithDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.WithDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) // direct configuration options => options.WithDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.WithDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.WithDelegatingHandler((logger, options) => YourDelegatingHandler) You may want to adjust duplicate strategy while registering a DelegatingHandler. You can do it by providing your own strategy thanks to the optional parameter (default: Add). Warning Inner DelegatingHandler Do not try to manage delegating handlers hierarchy by yourself, providing any inner handlers. Instead, just add your handlers thanks to the WithDelegatingHandler option the order you want and Apizr will do it for you."
  },
  "articles/config_exceptions.html": {
    "href": "articles/config_exceptions.html",
    "title": "| Apizr",
    "keywords": "Configuring Exception handling By Try-Catching Here is an example of how to send a request. Inject IApizrManager<IYourDefinedInterface> where you need it IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); Alert.Show(\"Error\", message); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request. Note that you can mix it with other handling solutions. By returning an Api Response Refit has different exception handling behavior depending on if your Refit interface methods return Task<T> or if they return Task<IApiResponse>, Task<IApiResponse<T>>, or Task<ApiResponse<T>>. When returning Task<IApiResponse>, Task<IApiResponse<T>>, or Task<ApiResponse<T>> (not Apizr but Api), Refit traps any ApiException raised by the ExceptionFactory when processing the response, and any errors that occur when attempting to deserialize the response to ApiResponse<T>, and populates the exception into the Error property on ApiResponse<T> without throwing the exception. Then, Apizr will wrap the ApiResponse<T> into an ApizrResponse<T> plus some cached data if any and some more infos and return it as a final response. You can then decide what to do like so: // Here we wrap the response into an IApiResponse<T> provided by Refit [BaseAddress(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<IApiResponse<UserList>> GetUsersAsync(); } ... // Then we can handle the IApizrResponse<T> response comming from Apizr var response = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); // Log potential unhandled exceptions and maybe inform the user about it if(!response.IsSuccess && !response.Exception.Handled) { _logger.LogError(response.Exception); Alert.Show(\"Error\", response.Exception.Message); } // Use the data, no matter the source if(response.Result?.Data?.Any() == true) { Users = new ObservableCollection<User>(response.Result.Data); // Inform the user that data comes from cache if so if(response.DataSource == ApizrResponseDataSource.Cache) Toast.Show(\"Data comes from cache\"); } Note that you can mix it with other handling solutions. By using a handling callback Instead of trycatching everything everywhere or even managing each Api Reponse locally, you may want to provide a handling callback, thanks to WithExCatching builder option, available at both register and request time. You can set it thanks to this option: // direct configuration options => options.WithExCatching(OnException) Registering Requesting Configuring an exception handling callback at register time allows you to get some Global Exception Handling concepts right in place. WithExCatching builder option is available with or without using registry. It means that you can share your handling callback globally by setting it at registry level and/or set some specific one at api level. Here is a quite simple scenario: var reqResUserManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(options => options .WithExCatching(OnException)); private bool OnException(ApizrException ex) { // this is a global exception handling callback if (ex.InnerException is IOException) { // handle no network exception globally for example Alert.Show(\"No network\", \"Please check your connection and try again\"); // Tell other exception handling callbacks that we handled it yet return true; } return false; } And here is a more complexe scenario: var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(), .AddGroup( group => group .AddManagerFor<IReqResResourceService>() .AddManagerFor<IReqResUserService>( // IReqResUserService dedicated exception handling callback options => options.WithExCatching(OnReqResUserException, strategy: ApizrDuplicateStrategy.Add)), // Group exception handling callback common to IReqResUserService & IReqResResourceService apis options => options.WithExCatching(OnGroupException, strategy: ApizrDuplicateStrategy.Add)) // Global exception handling callback common to all apis options => options.WithExCatching(OnGlobalException, strategy: ApizrDuplicateStrategy.Add)); private bool OnGlobalException(ApizrException ex) { // this is a global exception handling callback // called back in case of exception thrown // while requesting with any managed api from the registry if (ex.InnerException is IOException) { // handle no network exception globally for example Alert.Show(\"No network\", \"Please check your connection and try again\"); // Tell other exception handling callbacks that we handled it yet return true; } return false; } private bool OnGroupException(IServiceProvider serviceProvider, ApizrException ex) { // this is a group exception handling callback // called back in case of exception thrown // while requesting with any managed api from the group if(!ex.Handled) // Not yet handled ? { // handle it here at group level, like logging things var logger = serviceProvider.GetRequiredService<ILogger<Program>>(); logger.LogError(ex, \"An error occurred\"); return true; } return false; } private bool OnReqResUserException(ApizrException ex) { // this is a dedicated exception handling callback // called back in case of exception thrown // while requesting with IReqResUserService managed api if(!ex.Handled) // Not yet handled ? { // handle it here at api level ... return true; } return false; } Here, as I registered callbacks with Add strategy, I'm telling Apizr to: Call back OnGlobalException then OnGroupException then OnReqResUserException in case of any exception thrown while requesting with IReqResUserService api Call back OnGlobalException then OnGroupException in case of any exception thrown while requesting with IReqResResourceService api Call back only OnGlobalException in case of any exception thrown while requesting with IHttpBinService api or User CRUD api Feel free to configure your exception handling callbacks at the level of your choice, depending on your needs. You definitly can mix it all with request option exception handling. As I leaved the letThrowOnHandledException parameter to its default true value, Apizr will throw back the exception in the end to let you catch it for final specific handling. But you definitly can tell Apizr to not throw the final exception if yet handled, by setting letThrowOnHandledException parameter to false and then dealing with result default value. Note that you can mix it with other handling solutions. Configuring an exception handling callback at request time allows you to set it at the very end, just before sending the request, like trycatching does. public ObservableCollection<User> Users { get; set; } ... var reqResManager = apizrRegistry.GetManagerFor<IReqResUserService>(); try { var users = await reqResManager.ExecuteAsync((options, api) => api.GetUsersAsync(options), options => options.WithExCatching<ApiResult<User>>(OnGetUsersException, strategy: ApizrDuplicateStrategy.Add)); Users = new ObservableCollection<User>(users); } catch (ApizrException<ApiResult<User>> ex) { // handle it here at request level if(!ex.Handled) // Not yet handled ? { // handle it here at result level ... } } ... private async Task<bool> OnGetUsersException(ApizrException<ApiResult<User>> ex) { // this is a method dedicated exception handling callback // called back in case of exception thrown // while requesting with a specific managed api's request if(!ex.Handled) // Not yet handled ? { // handle it here at request level await NavigationService.ShowAlertAsync(\"Error\", ex.InnerException.Message ?? \"An error occurred\"); return true; } return false; } Here, as I set the callback with Add strategy, I'm telling Apizr to: Call back any other registered exception handling callbacks (see Registering tab) Then call back OnGetUsersException (e.g. to display a dedicated message or something) Then throw back the final exception to catch it for specific handling As I leaved the letThrowOnHandledException parameter to its default true value, Apizr will throw back the exception in the end to let you catch it for final specific handling. But you definitly can tell Apizr to not throw the final exception if yet handled, by setting letThrowOnHandledException parameter to false and then dealing with result default value. Note that you can mix it with other handling solutions. You may notice that: strategy parameter let you adjust the behavior in case of mixing (default: Replace): Ignore: if there's another callback yet configured, ignore this one Add: add/queue this callback, no matter of yet configured ones Replace: replace all yet configured callbacks by this one Merge: add/queue this callback, no matter of yet configured ones letThrowOnHandledException parameter tells Apizr to throw back the final exception even if it's been handled by callbacks (default: true) By registering an exception handler You may want to provide an exception handler class, thanks to WithExCatching builder option, available at register time. You can define it like so: public class MyExHandler : IApizrExceptionHandler { private readonly ILogger<MyExHandler> _logger; private readonly ICustomService _customService; public MyExHandler(ILogger<MyExHandler> logger, ICustomService customService) { _logger = logger; _customService = customService; } /// <inheritdoc /> public Task<bool> HandleAsync(ApizrException ex) { if(!ex.Handled) { // Maybe log the exception _logger.LogError(ex, \"An error occurred\"); // Do some other stuff here await _customService.DoSomethingAsync(); return true; } return false; } } Then you can register it like so: // static configuration var reqResUserManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(options => options .WithExCatching(new MyExHandler(LOGGER, CUSTOM_SERVICE))); // OR extended configuration services.AddApizrManagerFor<IReqResUserService>(options => options .WithExCatching<MyExHandler>()); services.AddSingleton<MyExHandler>(); You may notice that: strategy parameter let you adjust the behavior in case of mixing (default: Replace): Ignore: if there's another handler yet configured, ignore this one Add: add/queue this handler, no matter of yet configured ones Replace: replace all yet configured handlers by this one Merge: add/queue this handler, no matter of yet configured ones letThrowOnHandledException parameter tells Apizr to throw back the final exception even if it's been handled by callbacks (default: true) Note that you can mix it with other handling solutions. By relying on Optional.Async Here is how we could handle exceptions using Optional.Async: var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Optional is pretty cool when trying to handle nullables and exceptions, but what if we still want to write it shorter to get our request done and managed with as less code as possible. Even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result matching boilerplate. Fortunately, Apizr provides some dedicated extensions to help getting things as short as we can with exceptions handled. With OnResultAsync OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult: this action will be invoked just before throwing any exception that might have occurred during request execution await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync(userList => { users = userList?.Data; }); Func<TResult, ApizrException<TResult>, bool> onResult: this function will be invoked with the returned result and potential occurred exception await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Func<TResult, ApizrException<TResult>, Task<bool>> onResult: this function will be invoked async with the returned result and potential occurred exception var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); All give you a result returned from fetch if succeed, or cache if failed (if configured). The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Of course, remember to catch throwing exceptions. With CatchAsync CatchAsync let you provide these parameters: Action<Exception> onException: this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache: True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one returns result from fetch or cache (if configured), no matter of potential exception handled on the other side by an action callback var userList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There’s some cached data? AsyncErrorHandler will handle the exception like to inform the user that call just failed Apizr will return the previous result from cache There’s no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal behavior) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled then One line of code to get all the thing done safely and shorter than ever!"
  },
  "articles/config_headers.html": {
    "href": "articles/config_headers.html",
    "title": "| Apizr",
    "keywords": "Configuring Headers You can set headers with static or dynamic values and with clear or redacted logged values (if logging is enabled with headers included). First, add the request options parameter [RequestOptions] IApizrRequestOptions options to your api methods to ensure your headers will be applied and don't forget to pass the options to your api methods at request time. Static headers Designing Registering Requesting You can set headers with static values at design time by decorating interfaces or methods with the Headers attribute provided by Refit. [Headers(\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\")] public interface IYourApi { [Headers(\"HeaderKey3: HeaderValue3\")] [Get(\"/your-endpoint\")] Task<YourData> GetYourDataAsync([RequestOptions] IApizrRequestOptions options); } Note Please refer to Refit official documentation about Headers attribute with static values. Note that decorating assembly to share headers between several api interfaces is not available with Refit's Headers attribute, but you can do it with fluent configuration at register time. You’ll find some more header attributes but dedicated to CRUD apis (the ones starting with Read, ReadAll, Create, Update or Delete prefix), so you could define header settings at method/request level for CRUD apis too. Here is CRUD api an example: namespace Apizr.Sample.Models { [BaseAddress(\"https://reqres.in/api/users\")] [ReadHeaders(\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\")] [ReadAllHeaders(\"HeaderKey3: HeaderValue3\")] public record User { [JsonPropertyName(\"id\")] public int Id { get; init; } [JsonPropertyName(\"first_name\")] public string FirstName { get; init; } [JsonPropertyName(\"last_name\")] public string LastName { get; init; } [JsonPropertyName(\"avatar\")] public string Avatar { get; init; } [JsonPropertyName(\"email\")] public string Email { get; init; } } } Automatically Headers could be set automatically by providing an IConfiguration instance containing the headers settings: options => options.WithConfiguration(context.Configuration) We can set it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). Please heads to the Settings) doc article to see how to configure headers automatically from loaded settings configuration. Manually You can set headers with static values at register time by configuring fluent options: // direct configuration options => options.WithHeaders([\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\"]) // OR static factory configuration options => options.WithHeaders(() => [\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\"]) // OR extended factory configuration options => options.WithHeaders(_ => [\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\"]) Tip You can share headers between several api interfaces by configuring fluent options at registry common level. You can set headers with static values at request time by configuring fluent options: options => options.WithHeaders([\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\"]) You definitly can mix it all as Apiz will merge your headers at the very end while sending the request. Dynamic headers Setting dynamic headers Designing Registering You can set headers with dynamic values at design time by: Decorating an api method parameter with the Header or HeaderCollection attribute Decorating interfaces or methods with the Headers attribute using key matching Parameter header You can set headers with dynamic values at design time by decorating an api method parameter with the Header attribute: public interface IYourApi { [Get(\"/your-endpoint\")] Task<YourData> GetYourDataAsync([Header(\"HeaderKey1\")] string headerValue1, [RequestOptions] IApizrRequestOptions options); } or HeaderCollection attribute: public interface IYourApi { [Get(\"/your-endpoint\")] Task<YourData> GetYourDataAsync([HeaderCollection] IDictionary<string, string> headers, [RequestOptions] IApizrRequestOptions options); } Please refer to Refit official documentation about Header and HeaderCollection attributes with dynamic values. Key matching header You can set headers with dynamic values at design time by decorating interfaces or methods with the Headers attribute and using key matching: [Headers(\"HeaderKey1: {0}\", \"HeaderKey2: {0}\")] public interface IYourApi { [Headers(\"HeaderKey3: {0}\")] [Get(\"/your-endpoint\")] Task<YourData> GetYourFirstDataAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/your-endpoint\")] Task<YourData> GetYourSecondDataAsync([RequestOptions] IApizrRequestOptions options); } Here we are asking Apizr to set headers 1, 2 and 3 to GetYourFirstDataAsync and the same but 3 to GetYourSecondDataAsync. It's here to let you choose at design time which request needs which headers, but provide values later in another place. So we don't provide any value here but the {0} string placeholder and let Apizr set it at request time from its headers store if keys match. Tip CRUD api headers could be set using provided dedicted method headers attributes (ReadAllHeaders, ...) Warning Key matching headers need you to provide values fluently at register time with Store registration mode (see Registering tab). Setting headers You can set headers with dynamic values at register time by configuring fluent options: // expression factory configuration options => options.WithHeaders(settingsService, [settings => settings.Header1, settings => settings.Header2]) // OR extended expression factory configuration options => options.WithHeaders<IOptions<TestSettings>>([settings => settings.Value.Header1, settings => settings.Value.Header2]) Tip You can share headers between several api interfaces by configuring fluent options at registry common level. Storing headers By storing headers, Apizr will set it at request time only if keys match from Headers attribute decoration. It lets you provide values once fluently at register time, but apply it only where you actually decided to put the Headers attribute with the same key. Warning Don't forget to design your api interfaces with key matching headers (see Designing tab). To store values for further headers attribute key match use, you have to tell it to Apizr by registering it with the Store registration mode: // expression factory configuration options => options.WithHeaders(settingsService, [settings => settings.Header1, settings => settings.Header2], mode: ApizrRegistrationMode.Store) // OR extended expression factory configuration options => options.WithHeaders<IOptions<TestSettings>>([settings => settings.Value.Header1, settings => settings.Value.Header2], mode: ApizrRegistrationMode.Store) You definitly can mix it all as Apiz will merge your headers at the very end while sending the request. Refreshing dynamic header values You may want to refresh your dynamic header values on each request. If so, you can set your header values at register time with the Request lifetime scope (instead of the Api default one): // expression factory configuration options => options.WithHeaders(settingsService, [settings => settings.Header1, settings => settings.Header2], scope: ApizrLifetimeScope.Request) // OR extended expression factory configuration options => options.WithHeaders<IOptions<TestSettings>>([settings => settings.Value.Header1, settings => settings.Value.Header2], scope: ApizrLifetimeScope.Request) Redacting logged header values You may want to log http traces, including headers, but be concerned about its values sensitivity. In such ssenario, you should redact header values so that logs would never contain any header sensitive value but a * replacement. Designing Registering Requesting You can tell Apizr to do so by surrounding values with a * and * star symbol into the Headers attribute: [Headers(\"HeaderKey1: *HeaderValue1*\", \"HeaderKey2: HeaderValue2\")] public interface IYourApi { [Headers(\"HeaderKey3: *HeaderValue3*\", \"HeaderKey4: *{0}*)] [Get(\"/your-endpoint\")] Task<YourData> GetYourDataAsync([RequestOptions] IApizrRequestOptions options); } Here we are asking Apizr to redact both headers 1 and 3 values, but also key matching header 4 value. Tip CRUD api headers could be set using provided dedicted method headers attributes (ReadAllHeaders, ...) Automatically Headers redaction names could be set automatically by providing an IConfiguration instance containing the headers settings: options => options.WithConfiguration(context.Configuration) We can set it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). Please heads to the Settings) doc article to see how to configure headers automatically from loaded settings configuration. Manually You can tell Apizr to do so by surrounding values with a * and * star symbol while adding headers fluently: options => options.WithHeaders([\"HeaderKey1: *HeaderValue1*\", \"HeaderKey2: HeaderValue2\"]) Here we are asking Apizr to redact header 1 value, but leave the 2 clear in logs. Or you can tell the same with dedicated fluent options: // By header names options => options.WithLoggedHeadersRedactionNames([\"testKey2\"]) // OR by any rules options => options.WithLoggedHeadersRedactionRule(header => header == \"testKey3\") You can tell Apizr to do so by surrounding values with * and * star symbol while adding headers fluently: options => options.WithHeaders([\"HeaderKey1: *HeaderValue1*\", \"HeaderKey2: HeaderValue2\"]) Here we are asking Apizr to redact header 1 value, but leave the 2 clear in logs. Or you can tell the same with dedicated fluent options: // By header names options => options.WithLoggedHeadersRedactionNames([\"testKey2\"]) // OR by any rules options => options.WithLoggedHeadersRedactionRule(header => header == \"testKey3\")"
  },
  "articles/config_httpclient.html": {
    "href": "articles/config_httpclient.html",
    "title": "| Apizr",
    "keywords": "Configuring HttpClient You can configure HttpClient by its Builder thanks to this option: Extended Static options => options.ConfigureHttpClientBuilder(httpClientBuilder => httpClientBuilder.WhateverOption()) options => options.ConfigureHttpClient(httpClient => httpClient.WhateverOption = whateverValue) Warning HttpClient Apizr makes use of its own HttpClient with its own primary handler, so keep in mind that you may override some of its features depending of what you're trying to do with it. Use with caution."
  },
  "articles/config_httpclienthandler.html": {
    "href": "articles/config_httpclienthandler.html",
    "title": "| Apizr",
    "keywords": "Configuring HttpClientHandler You can provide your own HttpClientHandler thanks to this option: Extended Static // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(serviceProvider => YourOwnHttpClientHandler) // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(() => YourOwnHttpClientHandler)"
  },
  "articles/config_httpmessagehandler.html": {
    "href": "articles/config_httpmessagehandler.html",
    "title": "| Apizr",
    "keywords": "Configuring HttpMessageHandler You can add an HttpMessageHandler thanks to this option: Extended Static // direct configuration options => options.WithHttpMessageHandler(YourHttpMessageHandler) // Or type configuration (has to be registered in the service collection) options => options.WithHttpMessageHandler<YourHttpMessageHandler>() // OR factory configuration with the service provider instance options => options.WithHttpMessageHandler(serviceProvider => YourHttpMessageHandler) // OR factory configuration with the service provider and options instances options => options.WithHttpMessageHandler((serviceProvider, options) => YourHttpMessageHandler) // direct configuration options => options.WithHttpMessageHandler(YourHttpMessageHandler) // OR factory configuration with the logger instance options => options.WithHttpMessageHandler(logger => YourHttpMessageHandler) // OR factory configuration with the logger and options instances options => options.WithHttpMessageHandler((logger, options) => YourHttpMessageHandler)"
  },
  "articles/config_logger.html": {
    "href": "articles/config_logger.html",
    "title": "| Apizr",
    "keywords": "Configuring logger Apizr v4+ relies on Microsoft.Extensions.Logging, which relies on any compatible logger of your choice. Apizr comes with a quite simple built-in Debug logger by default, but you'd better provide your own obviously. You can configure logger only by fluent configuration. Extended Static There's nothing specific to do with Apizr about logger when using the extended approach. Just don't forget to configure it like you usualy do: loggingBuilder.AddConsole() wherever in your app you get access to ILoggingBuilder. You can set logger configuration thanks to this option: options => options.WithLoggerFactory(LoggerFactory.Create(loggingBuilder => { loggingBuilder.AddConsole(); loggingBuilder.AddDebug(); })) LoggerFactory.Create method is provided by Microsoft.Extensions.Logging which lets you add any compatible logger."
  },
  "articles/config_logging.html": {
    "href": "articles/config_logging.html",
    "title": "| Apizr",
    "keywords": "Configuring logging You can adjust logging configuration with: httpTracerMode (default: Everything) Http traffic tracing mode: ExceptionsOnly logs only when an exception occurs ErrorsAndExceptionsOnly logs only when an exception or any error occurs Everything logs all, anytime trafficVerbosity (default: All) Http traffic tracing verbosity (see HttpTracer), with: None RequestBody RequestHeaders RequestCookies RequestAllButBody = RequestHeaders | RequestCookies, RequestAll = RequestBody | RequestHeaders | RequestCookies ResponseBody ResponseHeaders ResponseAll = ResponseBody | ResponseHeaders HeadersOnly = ResponseHeaders | RequestHeaders, AllButRequestBody = RequestAllButBody | ResponseAll, AllButResponseBody = RequestAll | ResponseHeaders, AllButBodies = ResponseAll | RequestAllButBody, All = ResponseAll | RequestAll logLevels (default: [Low] Trace, [Medium] Information and [High] Critical) Log levels to apply while writing logs (see Microsoft.Enxtension.Logging), with: Trace Debug Information Warning Error Critical None Note that parameter logLevels is an array. It lets you provide from 0 to 3 different levels, as Apizr needs to get corresponding log level to each internal severity: Low: logs any internal and normal execution step Medium: logs all missconfigured things, like asking for cache without providing any cache provider High: logs errors and exceptions Obviously, providing more than 3 log levels would be pointless. It means that: if you don't provide any log level at all, default levels will be applied ([Low] Trace, [Medium] Information and [High] Critical) if you provide only 1 log level like Information, it will be applied to all log entries ([Low] Information, [Medium] Information and [High] Information). Up to you to catch exceptions and to log it at any level of your choice. if you provide only 2 log levels like Debug and Error, the lowest will be applied to both Low and Medium ([Low] Debug, [Medium] Debug and [High] Error) if you provide 3 log levels like Debug, Warning and Critical, it will be applied like you said ([Low] Debug, [Medium] Warning and [High] Critical) if you provide more than 3 log levels, the lowest goes to Low, the highest to High and it will take the middle one for Medium if you provide a None at some point, it will disable logging for corresponding severity You can configure logging at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration. Designing Registering Requesting You can set logging configuration at design time, decorating with the provided Log attribute. Configuring logging with attribute allows you to use assembly scanning auto registration feature. The Log attribute could decorate: Assembly: to set logging configuration to all assembly api interfaces/entities Interface/Class: to set logging configuration to all request methods of the decorated api interface/entity Method: to set logging configuration to a specific request method of an api interface or entity (with dedicated attribtes) You also can mix decoration levels to set a common logging configuration to all assembly api interfaces, and/or a specific to all api interface methods, and/or a specific to an api interface method. [assembly:Log] namespace Apizr.Sample { [BaseAddress(\"https://reqres.in/\"), Log(HttpMessageParts.RequestAll, HttpTracerMode.ErrorsAndExceptionsOnly, LogLevel.Information)] public interface IReqResService { [Get(\"/api/users\"), Log(HttpMessageParts.RequestBody, HttpTracerMode.ExceptionsOnly, LogLevel.Warning)] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } In this classic api example, we decided to apply the default logging configuration ([Low] Trace, [Medium] Information and [High] Critical) to all assembly api interfaces/entities. Then some custom log settings about this specific api. You’ll find some more log attributes but dedicated to CRUD apis (the ones ending with Read, ReadAll, Create, Update or Delete suffix), so you could define log settings at any level for CRUD apis too. Here is CRUD api an example: [assembly:Log] namespace Apizr.Sample.Models { [BaseAddress(\"https://reqres.in/api/users\")] [LogReadAll(HttpMessageParts.RequestAll, HttpTracerMode.ErrorsAndExceptionsOnly, LogLevel.Information)] [LogRead(HttpMessageParts.AllButBodies, HttpTracerMode.ExceptionsOnly, LogLevel.Debug)] public record User { [JsonPropertyName(\"id\")] public int Id { get; init; } [JsonPropertyName(\"first_name\")] public string FirstName { get; init; } [JsonPropertyName(\"last_name\")] public string LastName { get; init; } [JsonPropertyName(\"avatar\")] public string Avatar { get; init; } [JsonPropertyName(\"email\")] public string Email { get; init; } } } Again, in this CRUD api example, we decided to apply the default logging configuration ([Low] Trace, [Medium] Information and [High] Critical) to all assembly api interfaces/entities. Then some custom log settings about this specific api. Automatically Logging parameters could be set automatically by providing an IConfiguration instance containing the logging settings: options => options.WithConfiguration(context.Configuration) We can set it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). Please heads to the Settings) doc article to see how to configure logging automatically from loaded settings configuration. Manually Configuring the logging fluently at register time allows you to set it dynamically. You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) // OR static individual factory configuration options => options.WithLogging(() => Settings.HttpTracerMode, () => Settings.TrafficVerbosity, () => Settings.LogLevels) // OR static single factory configuration options => options.WithLogging(() => (Settings.HttpTracerMode, Settings.TrafficVerbosity, Settings.LogLevels)) // OR extended individual factory configuration options => options.WithLogging( serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().HttpTracerMode, serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().TrafficVerbosity serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().LogLevels) // OR extended single factory configuration options => options.WithLogging(servieProvider => { var settings = servieProvider.GetRequiredService<IYourSettingsService>(); return (settings.HttpTracerMode, settings.TrafficVerbosity, settings.LogLevels); }); All logging fluent options are available with or without using registry. It means that you can share logging configuration, setting it at registry level and/or set some specific one at api level. Configuring the logging fluently at request time allows you to set it at the very end, just before sending the request. First, add the request options parameter [RequestOptions] IApizrRequestOptions options to your api methods to provide your logging configuration at request time. Then, you can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) Note that you can mix design, register and request time logging configurations. In case of mixed configurations, the internal duplicate strategy will be to take the closest one to the request. Logging configuration duplicate strategy order: take fluent request configuration first if defined (request options) otherwise the request attribute decoration one (method) otherwise the fluent proper resgistration one (api proper options) otherwise the api attribute decoration one (interface) otherwise the fluent common resgistration one (registry common options) otherwise the global attribute decoration one (assembly) Redacting You may want to hide some header sensitive data from logs. You can set which header values should be redacted before logging with this option: // direct configuration options => options.WithLoggedHeadersRedactionNames(new[]{ \"MyHeaderKey\" }) // factory configuration options => options.WithLoggedHeadersRedactionRule(header => header == \"MyHeaderKey\") From there, you should see your logs redacted like so: ==================== HTTP REQUEST: [GET] ==================== GET https://reqres.in/api/users Request Headers: MyHeaderKey: * Note that you can mix register and request time redaction configurations. Also, the ApizrDuplicateStrategy optional parameter let you tell Apizr whether to override or not any parent redaction rules."
  },
  "articles/config_mediatr.html": {
    "href": "articles/config_mediatr.html",
    "title": "| Apizr",
    "keywords": "Configuring MediatR Apizr offers an integration with MediatR, following the Mediator pattern, available only with the extended approach. Mediator pattern ensures to keep all the thing as loosely coupled as we can between our ViewModel/ViewControler and our Data Access Layer. As everything should be loosely coupled between Views and ViewModels (MVVM) or ViewControlers (MVC) thanks to data binding, MediatR offers you to keep it all loosely coupled between your VM/VC and your DAL too. Please read the official documentation to know more about MediatR. The main benefit in using it with Apizr is to offer you a very simple and unified way to send your request, no matter from where or about what. Simple and unified because instead of injecting/resolving each api interface you need to get your data, you just have to use the IMediator interface, everywhere, every time. Registering Please first install this integration package: Project Current Upcoming Apizr.Integrations.MediatR Then you'll be able to register with this option: options => options.WithMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using Note Sending the safe way We are sometime talking about Safe request meaning that Refit will handle exceptions and return an IApiResponse to Apizr and then Apizr will return it as an IApizrResponse without throwing. Please read the exception handling doc to get more info. IMediator IApizrMediator IApizrMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteUnitRequest<TWebApi>: execute any method from TWebApi ExecuteSafeUnitRequest<TWebApi>: execute any method from TWebApi, the safe way with IApizrResponse handling ExecuteUnitRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData ExecuteSafeUnitRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData, the safe way with IApizrResponse handling With result: ExecuteResultRequest<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data ExecuteSafeResultRequest<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data, the safe way with IApizrResponse<TApiData> handling ExecuteResultRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteSafeResultRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData, the safe way with IApizrResponse<TModelData> handling ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData ExecuteSafeResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData, the safe way with IApizrResponse<TModelResultData> handling CRUD API: Read: ReadQuery<TResultData>: get the TResultData entity matching an int key SafeReadQuery<TResultData>: get the TResultData entity matching an int key, the safe way with IApizrResponse<TApiData> handling ReadQuery<TResultData, TKey>: get the TResultData entity matching a TKey SafeReadQuery<TResultData, TKey>: get the TResultData entity matching a TKey , the safe way with IApizrResponse<TApiData> handling ReadAll: ReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters SafeReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters, the safe way with IApizrResponse<TReadAllResult> handling ReadAllQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters SafeReadAllQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters, the safe way with IApizrResponse<TReadAllResult> handling Create: CreateCommand<TModelData>: create a TModelData entity SafeCreateCommand<TModelData>: create a TModelData entity, the safe way with IApizrResponse<TModelData> handling Update: UpdateCommand<TRequestData>: update the TRequestData entity matching an int key SafeUpdateCommand<TRequestData>: update the TRequestData entity matching an int key, the safe way with IApizrResponse handling UpdateCommand<TKey, TRequestData>: update the TRequestData entity matching a TKey SafeUpdateCommand<TKey, TRequestData>: update the TRequestData entity matching a TKey, the safe way with IApizrResponse handling Delete: DeleteCommand<T>: delete the T entity matching an int key SafeDeleteCommand<T>: delete the T entity matching an int key, the safe way with IApizrResponse handling DeleteCommand<T, TKey>: delete the T entity matching a TKey SafeDeleteCommand<T, TKey>: delete the T entity matching a TKey, the safe way with IApizrResponse handling Writting things shorter, instead of injecting/resolving IMediator, you could do it with IApizrMediator or IApizrCrudMediator. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic mediator methods: No result: SendFor<TWebApi>: execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData Tip Sending the safe way Note that if your api returns an IApiResponse<T>, Apizr mediator will send a safe request so you can handle an IApizrResponse<T> back from it. CRUD mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey>: get the TApiEntity matching a TApiEntityKey SendSafeReadQuery<TApiEntity, TApiEntityKey>: get the TApiEntity matching a TApiEntityKey, the safe way with IApizrResponse<TApiEntity> handling SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey SendSafeReadQuery<TModelEntity, TApiEntity, TApiEntityKey>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey, the safe way with IApizrResponse<TModelEntity> handling ReadAll: SendReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters SendSafeReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters, the safe way with IApizrResponse<TReadAllResult> handling SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult, the safe way with IApizrResponse<TModelReadAllResult> handling SendReadAllQuery<TReadAllResult, TReadAllParams>: get TReadAllResult with TReadAllParams optional query parameters SendSafeReadAllQuery<TReadAllResult, TReadAllParams>: get TReadAllResult with TReadAllParams optional query parameters, the safe way with IApizrResponse<TReadAllResult> handling SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters SendSafeReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters, the safe way with IApizrResponse<TModelReadAllResult> handling Create: SendCreateCommand<TApiEntity>: create a TApiEntity SendSafeCreateCommand<TApiEntity>: create a TApiEntity, the safe way with IApizrResponse<TApiEntity> handling SendCreateCommand<TModelEntity, TApiEntity>: create a TApiEntity mapped from TModelEntity SendSafeCreateCommand<TModelEntity, TApiEntity>: create a TApiEntity mapped from TModelEntity, the safe way with IApizrResponse<TModelEntity> handling Update: SendUpdateCommand<TApiEntity, TApiEntityKey>: update the TApiEntity entity matching a TApiEntityKey SendSafeUpdateCommand<TApiEntity, TApiEntityKey>: update the TApiEntity entity matching a TApiEntityKey, the safe way with IApizrResponse handling SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey SendSafeUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey, the safe way with IApizrResponse handling Delete: SendDeleteCommand<TApiEntity, TApiEntityKey>: delete the TApiEntity matching a TApiEntityKey SendSafeDeleteCommand<TApiEntity, TApiEntityKey>: delete the TApiEntity matching a TApiEntityKey, the safe way with IApizrResponse handling Writting things shorter than ever, instead of injecting/resolving IMediator, IApizrMediator or IApizrCrudMediator, you could do it with IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>. Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrMediationRegistry instead and then just get an IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its Get methods. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery(); Classic typed mediator methods: No result: SendFor: execute any method from TWebApi SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData Tip Sending the safe way Note that if your api returns an IApiResponse<T>, Apizr mediator will send a safe request so you can handle an IApizrResponse<T> back from it. CRUD typed mediator methods: Read: SendReadQuery: get the TApiEntity matching a TApiEntityKey SendSafeReadQuery: get the TApiEntity matching a TApiEntityKey, the safe way with IApizrResponse<TApiEntity> handling SendReadQuery<TModelEntity>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey SendSafeReadQuery<TModelEntity>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey, the safe way with IApizrResponse<TModelEntity> handling ReadAll: SendReadAllQuery: get TReadAllResult with TReadAllParams optional query parameters SendSafeReadAllQuery: get TReadAllResult with TReadAllParams optional query parameters, the safe way with IApizrResponse<TReadAllResult> handling SendReadAllQuery<TModelReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters SendSafeReadAllQuery<TModelReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters, the safe way with IApizrResponse<TModelReadAllResult> handling Create: SendCreateCommand: create a TApiEntity SendSafeCreateCommand: create a TApiEntity, the safe way with IApizrResponse<TApiEntity> handling SendCreateCommand<TModelEntity>: create a TApiEntity mapped from TModelEntity SendSafeCreateCommand<TModelEntity>: create a TApiEntity mapped from TModelEntity, the safe way with IApizrResponse<TModelEntity> handling Update: SendUpdateCommand: update the TApiEntity entity matching a TApiEntityKey SendSafeUpdateCommand: update the TApiEntity entity matching a TApiEntityKey, the safe way with IApizrResponse handling SendUpdateCommand<TModelEntity>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey SendSafeUpdateCommand<TModelEntity>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey, the safe way with IApizrResponse handling Delete: SendDeleteCommand: delete the TApiEntity matching a TApiEntityKey SendSafeDeleteCommand: delete the TApiEntity matching a TApiEntityKey, the safe way with IApizrResponse handling"
  },
  "articles/config_optional.html": {
    "href": "articles/config_optional.html",
    "title": "| Apizr",
    "keywords": "Configuring Optional.Async Apizr offers an integration with Optional.Async, following the Optional pattern, available only with the extended approach with MediatR integration activated. Optional.Async offers a strongly typed alternative to null values that lets you: Avoid those pesky null-reference exceptions Signal intent and model your data more explicitly Cut down on manual null checks and focus on your domain It allows you to chain Task<Option<T>> and Task<Option<T, TException>> without having to use await Registering Please first install this integration package: Project Current Upcoming Apizr.Integrations.Optional Then you'll be able to register with this option: options => options.WithOptionalMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrOptionalMediator IApizrOptionalMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var optionalResult = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteOptionalUnitRequest<TWebApi>: execute any method from TWebApi ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteOptionalResultRequest<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadOptionalQuery<TResultData>: get the TResultData entity matching an int key ReadOptionalQuery<TResultData, TKey>: get the TResultData entity matching a TKey ReadAll: ReadAllOptionalQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllOptionalQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters Create: CreateOptionalCommand<TModelData>: create a TModelData entity Update: UpdateOptionalCommand<TRequestData>: update the TRequestData entity matching an int key UpdateOptionalCommand<TKey, TRequestData>: update the TRequestData entity matching a TKey Delete: DeleteOptionalCommand<T>: delete the T entity matching an int key DeleteOptionalCommand<T, TKey>: delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator, you could do it with IApizrMediator or IApizrCrudMediator. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrOptionalCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic Optional mediator methods: No result: SendFor<TWebApi>: execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD Optional mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey>: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams>: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity>: create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey>: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey>: delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator, IApizrOptionalMediator or IApizrCrudOptionalMediator, you could do it with IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>. Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrOptionalMediationRegistry instead and then just get an IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its GetFor and GetCrudFor methods. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrCrudOptionalMediator.SendReadAllQuery(); Classic Optional typed mediator methods: No result: SendFor: execute any method from TWebApi SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand: create a TApiEntity SendCreateCommand<TModelEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand: delete the TApiEntity matching a TApiEntityKey You should finaly end with something like: optionalResult.Match(result => { // Oh yeah, you get a result! }, e => { // Oh no, something went wrong! });"
  },
  "articles/config_polly.html": {
    "href": "articles/config_polly.html",
    "title": "| Apizr",
    "keywords": "Configuring Polly If you are referencing the Apizr.Extensions.Microsoft.DependencyInjection package (extended registration), you may want to reference the Microsoft.Extensions.Http.Resilience optional package too, so that you can use all the Microsoft Resilience goodness. Anyway, both extended and static registrations let you configure Polly behaviors straight the way with the yet referenced Polly.Extensions package. Using Microsoft Resilience With the extended registration approach only (not available with the static one), the Microsoft.Extensions.Http.Resilience optional package offers a pre-configured way to handle requests resilience, applied globally to all methods of an api interface. Installing First, you should read more about it from the official documentation. Then, please install this package: Project Current Upcoming Microsoft.Extensions.Http.Resilience Registering Finally, just register it using ConfigureHttpClientBuilder then AddStandardResilienceHandler methods like so: options => options.ConfigureHttpClientBuilder(builder => builder .AddStandardResilienceHandler()) If you need more control over pipeline scope, like per method tunning, you should use the Polly.Extensions integration instead or even mix both approaches, applying some global resilience handling with Microsoft.Extensions.Http.Resilience and some specific ones with Polly.Extensions. Configuring If you need more control over resilience settings, you can provide your configuration. You can do it either automatically from settings or manually with options. Automatically First, define your resilience settings like so: \"ResilienceOptions\": { \"Retry\": { \"BackoffType\": \"Exponential\", \"UseJitter\": true, \"MaxRetryAttempts\": 3 } } Then provide it to the Resilience Handler: options => options.ConfigureHttpClientBuilder(builder => builder .AddStandardResilienceHandler(configuration.GetSection(\"ResilienceOptions\"))) Manually Just provide your configuration thanks to the dedicated builder: options => options.ConfigureHttpClientBuilder(builder => builder .AddStandardResilienceHandler(resilienceOptions => { resilienceOptions.CircuitBreaker.MinimumThroughput = 10; // and so on... })) Using Polly Extensions With both extended and static registrations, the Polly.Extensions integration offers many ways to handle requests resilience, individually or globally, and can be configured at design, register or request time. Apizr comes with a ResiliencePipeline attribute to apply some resilience strategies on apis, handled by Polly. You’ll find also resilience pipeline attributes dedicated to each Http methods like GetResiliencePipeline, PostResiliencePipeline and so on, and some others to CRUD apis like CreateResiliencePipeline, ReadResiliencePipeline and so on… Polly will help you to manage some retry scenarios but can do more. Please refer to its official documentation if you’d like to know more about it. First, add the request options parameter [RequestOptions] IApizrRequestOptions options to your api methods to ensure your pipelines will be applied and don't forget to pass the options to your api methods at request time. Registering Here is how to define a resilience pipeline with some strategies. var resiliencePipelineBuilder = new ResiliencePipelineBuilder<HttpResponseMessage>() .AddRetry( new RetryStrategyOptions<HttpResponseMessage> { ShouldHandle = new PredicateBuilder<HttpResponseMessage>() .Handle<HttpRequestException>() .HandleResult(response => response.StatusCode is >= HttpStatusCode.InternalServerError or HttpStatusCode.RequestTimeout), Delay = TimeSpan.FromSeconds(1), MaxRetryAttempts = 3, UseJitter = true, BackoffType = DelayBackoffType.Exponential }); Now we have to register our pipeline: Extended Static There's nothing specific to do with Apizr about Polly when using the extended approach. Just don't forget to register it into your container like you usualy do: // (Polly) Add the resilience pipeline with its key to your container services.AddResiliencePipeline<string, HttpResponseMessage>(\"TransientHttpError\", builder => builder.AddPipeline(resiliencePipelineBuilder.Build())); Note that TransientHttpError here is a key that will be used to identify the pipeline to apply to apis. First, build a registry and register your pipeline into it: var resiliencePipelineRegistry = new ResiliencePipelineRegistry<string>(); resiliencePipelineRegistry.TryAddBuilder<HttpResponseMessage>(\"TransientHttpError\", (builder, _) => builder.AddPipeline(resiliencePipelineBuilder.Build())); Note that TransientHttpError here is a key that will be used to identify the pipeline to apply to apis. You'll be able to provide your registry to Apizr with this option: // direct configuration options => options.WithResiliencePipelineRegistry(resiliencePipelineRegistry) // OR factory configuration options => options.WithResiliencePipelineRegistry(() => resiliencePipelineRegistry) Activating You can activate resiliencing either at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration ResiliencePipeline attribute Apizr comes with a ResiliencePipeline attribute which activate resiliencing at any level (all Assembly apis, classic interface/crud class apis or specific classic interface api method). Here is classic api an example: [assembly:ResiliencePipeline(\"TransientHttpError\")] namespace Apizr.Sample { [BaseAddress(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } Here we are using the ResiliencePipeline attribute at assembly level (all methods of all apis), but you can use it at interface/class level (all methods of one api) or method level (decorated api methods only). You may want to set pipelines scoped to a group of methods instead, like all Get http methods or Post ones. You can do it at assembly or interface/class levels thanks to one of the provided scoped attributes: Http methods grouping: GetResiliencePipeline PostResiliencePipeline PutResiliencePipeline DeleteResiliencePipeline PatchResiliencePipeline OptionsResiliencePipeline HeadResiliencePipeline You’ll find some more resilience pipeline attributes but dedicated to CRUD apis (the ones starting with Read, ReadAll, Create, Update or Delete prefix), so you could activate resiliencing at method/request level for CRUD apis too. Here is CRUD api an example: namespace Apizr.Sample.Models { [BaseAddress(\"https://reqres.in/api/users\")] [ReadAllResiliencePipeline(\"TransientHttpError\")] [ReadResiliencePipeline(\"AnotherHttpError\")] public record User { [JsonPropertyName(\"id\")] public int Id { get; init; } [JsonPropertyName(\"first_name\")] public string FirstName { get; init; } [JsonPropertyName(\"last_name\")] public string LastName { get; init; } [JsonPropertyName(\"avatar\")] public string Avatar { get; init; } [JsonPropertyName(\"email\")] public string Email { get; init; } } } As usual, you can mix levels and pipelines as all will be wrapped in the end. Fluent configuration Automatically Resiliencing could be activated automatically by providing an IConfiguration instance containing resilience pipeline settings to Apizr: options => options.WithConfiguration(context.Configuration) We can activate it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). Please heads to the Settings) doc article to see how to configure resiliencing automatically from settings. Manually You can activate resiliencing at any levels by providing pipeline keys with this fluent option : // pipeline keys options => options.WithResiliencePipelineKeys([\"TransientHttpError\"]) // OR the same with method scope options => options.WithResiliencePipelineKeys([\"TransientHttpError\"], [ApizrRequestMethod.HttpGet, ApizrRequestMethod.CrudRead]) Using Apizr will automatically tell Polly to handle request with pipelines that get a key matching the one provided by attributes or fluent options. Tunning Polly Context Automatically Context parameters could be set automatically by providing an IConfiguration instance containing the context settings: options => options.WithConfiguration(context.Configuration) We can set it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). Please heads to the Settings) doc article to see how to configure context automatically from loaded settings configuration. Manually Some advanced options are also available to configure Polly context itself at any level: options => options.WithResilienceContextOptions(contextOptions => contextOptions.ReturnToPoolOnComplete(false) // true by default .ContinueOnCapturedContext(false)) Here is the one to provide Resilience Properties to Polly context at any level: // direct configuration options => options.WithResilienceProperty(testKey2, \"testValue2.2\") // OR factory configuration options => options.WithResilienceProperty(testKey2, () => \"testValue2.2\") // OR extended factory configuration options => options.WithResilienceProperty(testKey2, serviceProvider => serviceProvider.GetRequiredService<ISettingsService>().MyTestValue) Note that if you provide a property with the same key at different levels, the closest one to the request will be the one used by Apizr."
  },
  "articles/config_priority.html": {
    "href": "articles/config_priority.html",
    "title": "| Apizr",
    "keywords": "Configuring Priority Apizr could use Fusillade to offer some api priority management on calls. To be short, Fusillade is about: Auto-deduplication of relevant requests Request Limiting Request Prioritization Speculative requests Please refer to its official documentation if you’d like to know more about it. Installing Please first install this integration package: Project Current Upcoming Apizr.Integrations.Fusillade You can configure priority at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration Designing Registering Requesting The first thing to do while designing your api interfaces using Apizr to send a request, is to add an IApizrRequestOptions param decorated with the provided RequestOptions attribute to your methods like: [BaseAddress(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/users/{userId}\")] Task<UserDetails> GetUserAsync(int userId, [RequestOptions] IApizrRequestOptions options); } This way you'll make sure to pass your priority to the priority handler, defined thanks to request options builder at request time. Another way to deal with priority at design time is to use the PriorityAttribute: [assembly:Priority(Priority.UserInitiated)] namespace Your.Namespace { [BaseAddress(\"https://reqres.in/api\"), Priority(Priority.Background)] public interface IReqResService { [Get(\"/users\"), Priority(Priority.Speculative)] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/users/{userId}\")] Task<UserDetails> GetUserAsync(int userId, [RequestOptions] IApizrRequestOptions options); } } Here I'm saying: Send all requests of all apis with a default UserInitiated priority (the assembly one) Excepted for all the requests of the IReqResService with a Background priority instead (the interface one) Excepted for any GetUsersAsync request with a Speculative priority instead (the method one) Of course, you could (should) mix it with the RequestOptions method parameter implementation, so you could change your mind at request time with the request options builder. Designing your apis using PriorityAttribute or not, you still have to activate priority management at register time. By activating it, you're free to provide a priority or not. Here is how to activate it, thanks to the WithPriority extension method: // activation configuration only (minimum requirement) options => options.WithPriority() // OR activation configuration // and configured priority (see Settings article) options => options .WithConfiguration(context.Configuration) .WithPriority() // OR activation with default priority configuration options => options.WithPriority(Priority.Background) // OR activation with default custom priority configuration options => options.WithPriority(70) All priority fluent options are available with and without using registry. It means that you can share priority configuration, setting it at registry level and/or set some specific one at api level, something like: var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry .AddGroup(group => group .AddManagerFor<IReqResUserService>(options => options .WithPriority(Priority.UserInitiated)) .AddManagerFor<IReqResResourceService>(), options => options.WithPriority(Priority.Background)) .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(options => options .WithBaseAddress(\"https://reqres.in/api/users\") .WithPriority(Priority.Speculative)), options => options.WithPriority()); In this quite complexe example, we can see we defined some default priorities to apply at deferent levels. Just call your api with your priority thanks to the request options builder (extension method): var result = await _reqResManager.ExecuteAsync((opt, api) => api.GetUsersAsync(opt), options => options.WithPriority(Priority.Background)); Note that you can mix design, register and request time priority configurations. In case of mixed configurations, the internal duplicate strategy will be to take the closest one to the request. Priority configuration duplicate strategy order: take fluent request configuration first if defined (request options) otherwise the request attribute decoration one (method) otherwise the fluent proper resgistration one (api proper options) otherwise the api attribute decoration one (interface) otherwise the fluent common resgistration one (registry common options) otherwise the global attribute decoration one (assembly)"
  },
  "articles/config_refitsettings.html": {
    "href": "articles/config_refitsettings.html",
    "title": "| Apizr",
    "keywords": "Configuring RefitSettings You can set RefitSettings thanks to this option: Extended Static // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(serviceProvider => YourOwnRefitSettings) // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(() => YourOwnRefitSettings) Warning AuthorizationHeaderValue Apizr provides its own AuthenticationHandler to manage authorization (see Configuring > Authentication). There's no need to use AuthorizationHeaderValue properties."
  },
  "articles/config_settings.html": {
    "href": "articles/config_settings.html",
    "title": "| Apizr",
    "keywords": "Settings Most of Apizr settings could be set by providing an IConfiguration instance. We can set it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). The following doc article will focus on appsettings.json configuration. Tip You must add the request options parameter [RequestOptions] IApizrRequestOptions options to your api methods to get all the Apizr goodness. If not, some configurations may not be applied (such as Polly, Cancellation, Timeout, Priority, etc...). Non hosted environments (like MAUI) could definitly use appsettings.json goodness too, but by using both embedded resource file loading and compile time conditional file copying. Look at both csproj and MauiProgram files from the MAUI Sample to get a picture of the workaround and note that appsettings files won't be merged in that case but replaced. Defining Here is an example of an appsettings.json file with some of the settings that could be set: { \"Logging\": { \"LogLevel\": { // No provider, LogLevel applies to all the enabled providers. \"Default\": \"Trace\", // Default, application level if no other level applies \"Microsoft\": \"Warning\", // Log level for log category which starts with text 'Microsoft' (i.e. 'Microsoft.*') \"Microsoft.Extensions.Http.DefaultHttpClientFactory\": \"Information\" } }, \"ResilienceOptions\": { // Root Microsoft Resilience configuration section key (see Polly article) \"Retry\": { // Retry configuration section key \"BackoffType\": \"Exponential\", \"UseJitter\": true, \"MaxRetryAttempts\": 3 } }, \"Apizr\": { // Root Apizr configuration section key \"CommonOptions\": { // Common options shared by all apis \"Logging\": { // Common logging settings \"HttpTracerMode\": \"Everything\", \"TrafficVerbosity\": \"All\", \"LogLevels\": [\"Trace\", \"Information\", \"Critical\"] }, \"OperationTimeout\": \"00:00:10\", // Common operation timeout \"LoggedHeadersRedactionNames\": [\"testSettingsKey1\"], // Headers to common redact in logs \"ResilienceContext\": { // Common resilience context settings \"ContinueOnCapturedContext\": false, \"ReturnContextToPoolOnComplete\": true }, \"Headers\": [// Common headers applied to all apis \"testSettingsKey6: testSettingsValue6.1\" ], \"ResiliencePipelineOptions\": { // Common resilience pipeline applied to all apis \"HttpGet\": [\"TestPipeline3\"]// Resilience pipelines scoped to specific request method group }, \"Caching\": { // Common caching settings \"Mode\": \"FetchOrGet\", \"LifeSpan\": \"00:15:00\", \"ShouldInvalidateOnError\": false }, \"Priority\": \"UserInitiated\" }, \"ProperOptions\": { // Options specific to some apis \"IReqResSimpleService\": { // Options specific to IReqResSimpleService api \"BaseAddress\": \"https://reqres.in/api\", // Specific base address \"RequestTimeout\": \"00:00:03\", // Specific request timeout \"Headers\": [// Specific headers applied to the IReqResSimpleService api \"testSettingsKey2: testSettingsValue2.1\", // Clear static header \"testSettingsKey3: *testSettingsValue3.1*\", // Redacted static header \"testSettingsKey4: {0}\", // Clear runtime header \"testSettingsKey5: *{0}*\" // Redacted runtime header ], \"Caching\": { // Specific caching settings overriding common ones \"Mode\": \"FetchOrGet\", \"LifeSpan\": \"00:12:00\", \"ShouldInvalidateOnError\": true }, \"ResiliencePipelineKeys\": [\"TestPipeline3\"], // Specific resilience pipelines applied to all IReqResSimpleService api methods \"RequestOptions\": { // Options specific to some IReqResSimpleService api methods \"GetUsersAsync\": { // Options specific to GetUsersAsync method \"Caching\": { \"Mode\": \"FetchOrGet\", \"LifeSpan\": \"00:10:00\", \"ShouldInvalidateOnError\": false }, \"Headers\": [ \"testSettingsKey7: testSettingsValue7.1\" ], \"Priority\": \"Speculative\" } }, \"Priority\": \"Background\" }, \"User\": { // Options specific to User CRUD api \"BaseAddress\": \"https://reqres.in/api/users\", // Specific base address \"RequestTimeout\": \"00:00:05\", // Specific request timeout \"Headers\": [// Specific headers applied to the User CRUD api \"testSettingsKey8: testSettingsValue8.1\" // Clear static header ], \"Priority\": 70 } } } } You first have to start with the Apizr root section key. Then you can define settings at: Common level to set shared settings with the CommonOptions section key Proper level to set api specific settings with the ProperOptions section key followed by the name of apis as section keys (here IReqResSimpleService classic api and User CRUD api) Request level to set api method settings with the RequestOptions section key into the named api section (here GetUsersAsync method of IReqResSimpleService api) Finally you can set following available settings: BaseAddress (string): specifies the base API address BasePath (string): specifies the base API address path Logging (section): contains settings related to logging HttpTracerMode (enum member name): specifies the mode for HTTP tracing TrafficVerbosity (enum member name): specifies the verbosity level for traffic logging LogLevels (enum member names array): specifies the log levels to use OperationTimeout (TimeSpan representation): specifies the timeout for an API operation of multiple requests RequestTimeout (TimeSpan representation): specifies the timeout for an API request LoggedHeadersRedactionNames (string array): specifies the header keys to be redacted in logs ResilienceContext (section): contains settings related to the resilience context ContinueOnCapturedContext (bool): specifies whether to continue on the captured context ReturnContextToPoolOnComplete (bool): specifies whether to return the context to the pool on completion Headers (string array): specifies custom headers to be added to requests (supporting either clear static, redacted static, clear runtime and redacted runtime values) ResiliencePipelineKeys (string array): specifies the resilience pipeline keys to use ResiliencePipelineOptions (dictionary): specifies the resilience pipeline keys to use but scoped to specific request method groups Caching (section): contains settings related to caching Mode (enum member name): specifies the caching mode LifeSpan (TimeSpan representation): specifies the lifespan of cached responses ShouldInvalidateOnError (bool): specifies whether to invalidate the cache on error Priority (enum member name or int): specifies the priority level for the request Registering Once settings has been adjusted to your needs, you just have to provide an IConfiguration instance to Apizr with the dedicated fluent option at any registration level: options => options.WithConfiguration(context.Configuration) Note Apizr will first load common settings, then specific settings, so specific settings will override or be merged with the common ones. The same behavior as usual with fluent options registration actually. Order matters, meaning that you should first register the configuration from settings, then override it with fluent options if needed . If you want to organize your settings in a more custom way, you can provide custom configuration section keys to Apizr at any registration level: options => options.WithConfiguration(context.Configuration.GetSection(\"My:Custom:Section\")) But you still have to conform to the settings structure described above."
  },
  "articles/config_timeout.html": {
    "href": "articles/config_timeout.html",
    "title": "| Apizr",
    "keywords": "Configuring Timeout There's actually two kind of client timeout: Request timeout which is set to each request try Operation timeout which is set to overall request tries Both of it will throw a TimeoutRejectedException when time is out. If you configured a retry policy handling TimeoutRejectedException: with a request timeout, the request will be sent again by Polly with your defined request timeout set to each individual try. with an operation timeout, Polly will stop sending retries if the operation timeout timed out. Otherwise, if you didn't configure any retry policy handling TimeoutRejectedException, request timeout will behave like an operation timeout, so it doesn't matter which one you defined. You can configure a timeout at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration Designing Registering Requesting Apizr comes with a RequestTimeout and an OperationTimeout attribute which set a timeout at any level (all Assembly apis, interface apis or specific api method). Also, please add the request options parameter [RequestOptions] IApizrRequestOptions options to your api methods to ensure your timeouts will be applied and don't forget to pass the options to your api methods at request time. Here is classic api an example: namespace Apizr.Sample { [BaseAddress(\"https://reqres.in/api\"), OperationTimeout(\"00:03:00\")] public interface IReqResService { [Get(\"/users\"), RequestTimeout(\"00:01:00\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/users/{userId}\"), RequestTimeout(\"00:00:30\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, [RequestOptions] IApizrRequestOptions options); } } You’ll find the same timeout attributes dedicated to CRUD apis (the ones starting with Read, ReadAll, Create, Update and Delete prefix), so you could define timeout settings at any level for CRUD apis too. Here is CRUD api an example: namespace Apizr.Sample.Models { [BaseAddress(\"https://reqres.in/api/users\")] [OperationTimeout(\"00:03:00\")] [ReadAllRequestTimeout(\"00:01:00\")] [ReadRequestTimeout(\"00:00:30\")] public record User { [JsonPropertyName(\"id\")] public int Id { get; init; } [JsonPropertyName(\"first_name\")] public string FirstName { get; init; } [JsonPropertyName(\"last_name\")] public string LastName { get; init; } [JsonPropertyName(\"avatar\")] public string Avatar { get; init; } [JsonPropertyName(\"email\")] public string Email { get; init; } } } Both (classic and CRUD) attributes define the same thing about timeout. The attribute value is actually a TimeSpan string representation which is parsed then. You definitly can set a global timeout by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the closest timeout settings to the request it could find. Back to previous examples, we are saying that: in details, any request try shouldn't take longer than: 1 min for GetUsers/ReadAll 30 sec for GetUser/Read in general, we don't want the user to wait too much, so let's retry if needed, but not longer than 3 min overall. Automatically Timeout could be set automatically by providing an IConfiguration instance containing the timeout settings: options => options.WithConfiguration(context.Configuration) We can set it at common level (to all apis), specific level (dedicated to a named api) or even request level (dedicated to a named api's method). Please heads to the Settings) doc article to see how to configure timeouts automatically from loaded settings configuration. Manually You can set a request timeout thanks to this option: // direct configuration options => options.WithRequestTimeout(YOUR_TIMESPAN) // OR factory configuration options => options.WithRequestTimeout(() => YOUR_TIMESPAN) // OR extended factory configuration with the service provider instance options => options.WithRequestTimeout(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YOUR_TIMESPAN) And/or you can set an operation timeout thanks to this option: // direct configuration options => options.WithOperationTimeout(YOUR_TIMESPAN) // OR factory configuration options => options.WithOperationTimeout(() => YOUR_TIMESPAN) // OR extended factory configuration with the service provider instance options => options.WithOperationTimeout(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YOUR_TIMESPAN) All timeout fluent options are available with or without using registry. It means that you can share timeout configuration, setting it at registry level and/or set some specific one at api level. Configuring a timeout fluently at request time allows you to set it at the very end, just before sending the request. First, please add the request options parameter to your api methods: [RequestOptions] IApizrRequestOptions options You can set a request timeout thanks to this option: // direct configuration options => options.WithRequestTimeout(YOUR_TIMESPAN) And/or you can set an operation timeout thanks to this option: // direct configuration options => options.WithOperationTimeout(YOUR_TIMESPAN)"
  },
  "articles/config_transfer.html": {
    "href": "articles/config_transfer.html",
    "title": "| Apizr",
    "keywords": "Configuring file transfer Apizr could extend its core features with file transfer management thanks to a dedicated integration package. Once installed, you'll be able to: Register upload, download or transfer (both) managers Upload files with dedicated methods Download files with dedicated methods Track transfer progress with a dedicated progress handler Installing Please first install one of these integration packages, depending of your needs: Project Registration Current Upcoming Apizr.Integrations.FileTransfer Static Apizr.Extensions.Microsoft.FileTransfer MS Extensions Apizr.Integrations.FileTransfer.MediatR MS Extensions with MediatR Apizr.Integrations.FileTransfer.Optional MS Extensions with MediatR & Optional Designing File Transfer package comes with some built-in apis son you don't have to create it yourself. Here is what the provided apis look like then: Upload Download Transfer public interface IUploadApi<TApiResultData> : ITransferApiBase { #region ByteArrayPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart, string path); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart, string path, [RequestOptions] IApizrRequestOptions options); #endregion #region StreamPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart, string path); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart, string path, [RequestOptions] IApizrRequestOptions options); #endregion #region FileInfoPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart); [Multipart] [Post(\"/{filePath}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart, string filePath); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{filePath}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart, string filePath, [RequestOptions] IApizrRequestOptions options); #endregion } public interface IUploadApi : IUploadApi<HttpResponseMessage> { } The Upload api offers you the choice between ByteArray, Stream or FileInfo sources. You can set your own return type or use the default HttpResponseMessage one. filePath is an unesacped uri file path optionaly provided at request time, in case you want to use the same api for different uris. public interface IDownloadApi<in TDownloadParams> : ITransferApiBase { [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, [RequestOptions] IApizrRequestOptions options); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams, [RequestOptions] IApizrRequestOptions options); } public interface IDownloadApi : IDownloadApi<IDictionary<string, object>> { } The Download api could be used with IDictionary<string, object> parameter type by default thanks to IDownloadApi or any provided custom type thanks to IDownloadApi<TDownloadParams>. If you don't need it you'll definitly be able to ignore it. filePathOrName is an unesacped uri file path provided at request time, so you could use the same api for different uris. public interface ITransferApi<in TDownloadParams, TUploadApiResultData> : IDownloadApi<TDownloadParams>, IUploadApi<TUploadApiResultData> { } public interface ITransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage>, IDownloadApi, IUploadApi { } The Transfer api inherits from both the upload and the download one, in case you want to deal with the both of it from the same api. One may have only one transfer endpoint with no dynamic path to deal with, so there's nothing more to design here. Other may have several transfer endpoints or some dynamic paths to deal with: feeling confortable with setting it at request time, so there's nothing more to design here. preferring getting a dedicated api with preconfigured base uri, so he should: create his own named and blank api interface make sure to inherit from one of the above apis define its base uri thanks to the WebApi attribute decoration Registering Designing your custom transfer apis or using the built-in ones directly, you still have to register you apis. Where you could register it as we used to do it with any other apis, FileTransfer package comes with some wrapping managers helping you to get things short and simple. Note Upload/Download/Transfer Following exemples use the Transfer manager but you definitly can use the Upload or the Download ones instead. Registering a single manager Extended MediatR Optional Static // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>(); Then, get your Transfer manager instance by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferMediation()); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferMediation()); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>( options => options.WithFileTransferMediation()); Then, get an Apizr mediator instance by resolving/injecting IApizrMediator to send some transfer requests. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferOptionalMediation()); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferOptionalMediation()); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>( options => options.WithFileTransferOptionalMediation()); Then, get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator to send some transfer requests returning optional results. // register the built-in transfer api var transferManager = ApizrBuilder.Current.CreateTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // Or register the built-in transfer api with custom types var transferManager = ApizrBuilder.Current.CreateTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register a custom transfer api var transferManager = ApizrBuilder.Current.CreateTransferManagerFor<ITransferSampleApi>(); Here you go with your Transfer manager instance. Registering multiple managers Extended MediatR Optional Static services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>()); Then, get your Transfer manager instance directly by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one. You otherwise can resolve/inject IApizrExtendedRegistry to get the regisrty instance itself and then get your Transfer manager instance by calling: // for the built-in transfer api var transferManager = apizrRegistry.GetTransferManager(); // OR for the built-in transfer api with custom types var transferManager = apizrRegistry.GetTransferManagerWith<MyDownloadParamType, MyUploadResultType>(); // OR for a custom transfer api var transferManager = apizrRegistry.GetTransferManagerFor<ITransferSampleApi>(); services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>(), config => config.WithFileTransferMediation()); Then, get an Apizr mediator instance by resolving/injecting IApizrMediator to send some transfer requests. For more info about MediatR intergration, see Configuring MediatR. services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>(), config => config.WithFileTransferOptionalMediation()); Then, get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator to send some transfer requests returning optional results. For more info about Optional.Async intergration, see Configuring Optional.Async. var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>()); Then, get your Transfer manager instance by calling: // for the built-in transfer api var transferManager = apizrRegistry.GetTransferManager(); // OR for a custom transfer api var transferManager = apizrRegistry.GetTransferManagerFor<ITransferSampleApi>(); You definitly can group registrations if needed like illustrated into the Getting started. Note that auto registration thanks to assembly scanning is not yet available for this package. Requesting Extended MediatR Optional Static Once you get an instance of your manager by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one, here is how to play with it: var transferResult = await transferManager.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Note that if you're in that case where you need to set a custom path dynamically at request time, here is how to do that: var transferResult = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithDynamicPath(\"YOUR_DYNAMIC_PATH_HERE\")); If you registered with the registry, some provided shortcut methods could help you to write things without the need of the manager. You can call download or upload methods directly from the registry itself. // for the built-in transfer api var transferResult = await registry.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await registry.DownloadWithAsync<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await registry.DownloadAsync<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Once you get an Apizr mediator instance by resolving/injecting IApizrMediator, here is how to play with it: // for the built-in transfer api var transferResult = await apizrMediator.SendDownloadQuery( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await apizrMediator.SendDownloadWithQuery<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await apizrMediator.SendDownloadQuery<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); For more info about MediatR intergration, see Configuring MediatR. Once you get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator, here is how to play with it: // for the built-in transfer api var transferOptionalResult = await apizrOptionalMediator.SendDownloadOptionalQuery( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await apizrMediator.SendDownloadWithOptionalQuery<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferOptionalResult = await apizrOptionalMediator.SendDownloadOptionalQuery<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); For more info about Optional.Async intergration, see Configuring Optional.Async. Once you get an instance of your manager, here is how to play with it: var transferResult = await transferManager.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Note that if you're in that case where you need to set a custom path dynamically at request time, here is how to do that: var transferResult = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithDynamicPath(\"YOUR_DYNAMIC_PATH_HERE\")); If you registered with the registry, some provided shortcut methods could help you to write things without the need of the manager. You can call download or upload methods directly from the registry itself. // for the built-in transfer api var transferResult = await registry.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await registry.DownloadWithAsync<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await registry.DownloadAsync<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Tracking progress This package can let you track any progress while downloading or uploading a file. First, create an ApizrProgress instance like so: var progress = new ApizrProgress(); progress.ProgressChanged += (sender, args) => { // Do whatever you want when progress reported var percentage = args.ProgressPercentage; }; From here, you may want to track all transfer requests globally or some of it locally when ask for. Globally Locally Just provide your ApizrProgress instance with options builder at registration time: options => options.WithProgress(progress); And that's it, you'll be notified when any transfer progress of any transfer request occcured, like for: var fileInfo = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); You have to tell Apizr that you want to track progress with options builder at registration time: options => options.WithProgress() Then you can track progress of any transfer request of your choice, by providing your ApizrProgress instance with options builder at request time: var fileInfo = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithProgress(progress));"
  },
  "articles/gettingstarted_classic.html": {
    "href": "articles/gettingstarted_classic.html",
    "title": "| Apizr",
    "keywords": "Watching Please find this getting started video tutorial on YouTube about how to get started with Apizr: Defining We could define our web api service just like: // (Polly) Define a resilience pipeline key // OR use Microsoft Resilience instead [assembly:ResiliencePipeline(\"TransientHttpError\")] namespace Apizr.Sample { // (Apizr) Define your web api base url and ask for cache and logs [BaseAddress(\"https://reqres.in/\"), Cache(CacheMode.FetchOrGet, \"01:00:00\"), Log(HttpMessageParts.AllButBodies)] public interface IReqResService { // (Refit) Define your web api interface methods [Get(\"/api/users\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, [RequestOptions] IApizrRequestOptions options); [Post(\"/api/users\")] Task<User> CreateUser(User user, [RequestOptions] IApizrRequestOptions options); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Registering It's not required to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Extended Static Here is an example of how to register a managed api interface: public override void ConfigureServices(IServiceCollection services) { // (Logger) Configure logging the way you want, like services.AddLogging(loggingBuilder => loggingBuilder.AddDebug()); // (Apizr) Add an Apizr manager for the defined api to your container services.AddApizrManagerFor<IReqResService>( options => options // With a cache handler .WithAkavacheCacheHandler() // If using Microsoft Resilience .ConfigureHttpClientBuilder(builder => builder .AddStandardResilienceHandler())); // (Polly) Add the resilience pipeline (if not using Microsoft Resilience) services.AddResiliencePipeline<string, HttpResponseMessage>(\"TransientHttpError\", builder => builder.AddRetry( new RetryStrategyOptions<HttpResponseMessage> { ShouldHandle = new PredicateBuilder<HttpResponseMessage>() .Handle<HttpRequestException>() .HandleResult(response => response.StatusCode is >= HttpStatusCode.InternalServerError or HttpStatusCode.RequestTimeout), Delay = TimeSpan.FromSeconds(1), MaxRetryAttempts = 3, UseJitter = true, BackoffType = DelayBackoffType.Exponential })); } We registered a resilience pipeline registry and a logger factory and provided a cache handler here as we asked for it with cache, log and resilience pipeline attributes while designing the api interface. Here is an example of how to register a managed instance of an api interface: // (Polly) Create a resilience pipeline registry with some strategies var resiliencePipelineRegistry = new ResiliencePipelineRegistry<string>(); resiliencePipelineRegistry.TryAddBuilder<HttpResponseMessage>(\"TransientHttpError\", (builder, _) => // Configure telemetry to get some logs from Polly process builder.ConfigureTelemetry(LoggerFactory.Create(loggingBuilder => loggingBuilder.Debug())) // Add a retry strategy with some options .AddRetry( new RetryStrategyOptions<HttpResponseMessage> { ShouldHandle = new PredicateBuilder<HttpResponseMessage>() .Handle<HttpRequestException>() .HandleResult(response => response.StatusCode is >= HttpStatusCode.InternalServerError or HttpStatusCode.RequestTimeout), Delay = TimeSpan.FromSeconds(1), MaxRetryAttempts = 3, UseJitter = true, BackoffType = DelayBackoffType.Exponential })); // Apizr registration myContainer.RegistrationMethodFactory(() => ApizrBuilder.Current.CreateManagerFor<IReqResService>(options => options // With a logger .WithLoggerFactory(LoggerFactory.Create(loggingBuilder => loggingBuilder.Debug())) // With the defined resilience pipeline registry .WithResiliencePipelineRegistry(resiliencePipelineRegistry) // And with a cache handler .WithAkavacheCacheHandler()) ); We provided a resilience pipeline registry, a cache handler and a logger factory here as we asked for it with cache, log and resilience pipeline attributes while designing the api interface. Also, you could use the manager directly instead of registering it. Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Extended Static public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could resolve it to get its managers, instead of resolving each managers. // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry Add a manager for IHttpBinService api interface into the registry Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here is how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Extended Static public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (users), to register it into the container Add a manager for IReqResResourceService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (resources), to register it into the container Add a manager for IHttpBinService api interface into the registry with a speific base address (https://httpbin.org), to register it into the container Apply common configuration to all managers by: Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithAkavacheCacheHandler() .WithLogging(HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (users) Add a manager for IReqResResourceService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (resources) Add a manager for IHttpBinService api interface into the registry with a speific base address (https://httpbin.org) Apply common configuration to all managers by: Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: var reqResUserManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var reqResResourceManager = apizrRegistry.GetManagerFor<IReqResResourceService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Registering all scanned interfaces Extended Static First you have to tell Apizr which api to auto register by assembly scanning thanks to the AutoRegister attribute: [AutoRegister(\"YOUR_API_INTERFACE_BASE_ADDRESS_OR_PATH\")] public interface IYourApiInterface { // Your api interface methods } Then fluently just write: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrManagerFor([ASSEMBLIES_CONTAINING_INTERFACES]); } Apizr will scan assemblies to auto register managers for decorated api interfaces. Not available. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a MAUI mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; //private readonly IApizrRegistry _apizrRegistry; public YouViewModel(IApizrManager<IReqResService> reqResManager) // OR registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _reqResManager = reqResManager; // OR registry injection //_apizrRegistry = apizrRegistry; // Or registry injection AND getting the manager //_reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); // OR with dedicated registry shortcut extension // var userList = await _apizrRegistry.ExecuteAsync<IReqResService>(api => api.GetUsersAsync()); // OR with some option adjustments // var userList = await _reqResManager.ExecuteAsync((options, api) => api.GetUsersAsync(options), // options => options.WithPriority(Priority.Background)); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request."
  },
  "articles/gettingstarted_crud.html": {
    "href": "articles/gettingstarted_crud.html",
    "title": "| Apizr",
    "keywords": "Watching Please find this getting started video tutorial on YouTube about how to get started with Apizr: Defining As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what the provided interface looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { // ==== Create ==== // [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<IApiResponse<T>> SafeCreate([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, [RequestOptions] IApizrRequestOptions options); [Post(\"\")] Task<IApiResponse<T>> SafeCreate([Body] T payload, [RequestOptions] IApizrRequestOptions options); // ==== ReadAll ==== // [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([RequestOptions] IApizrRequestOptions options); [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll([RequestOptions] IApizrRequestOptions options); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [RequestOptions] IApizrRequestOptions options); [Get(\"\")] Task<IApiResponse<TReadAllResult>> SafeReadAll([CacheKey] TReadAllParams readAllParams, [RequestOptions] IApizrRequestOptions options); // ==== Read ==== // [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<IApiResponse<T>> SafeRead([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [RequestOptions] IApizrRequestOptions options); [Get(\"/{key}\")] Task<IApiResponse<T>> SafeRead([CacheKey] TKey key, [RequestOptions] IApizrRequestOptions options); // ==== Update ==== // [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task<IApiResponse> SafeUpdate(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [RequestOptions] IApizrRequestOptions options); [Put(\"/{key}\")] Task<IApiResponse> SafeUpdate(TKey key, [Body] T payload, [RequestOptions] IApizrRequestOptions options); // ==== Delete ==== // [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task<IApiResponse> SafeDelete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, [RequestOptions] IApizrRequestOptions options); [Delete(\"/{key}\")] Task<IApiResponse> SafeDelete(TKey key, [RequestOptions] IApizrRequestOptions options); } We can see that it comes with or without request options, allowing some option adjustments later at request time. It comes with or whithout an ApiResponse too, allowing to handle errors or throw exceptions. About generic types: T and TKey (optional - default: int) meanings are obvious TReadAllResult (optional - default: IEnumerable<T>) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object>) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. You still can read the api documentation about it here. Registering It's not mandatory to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Extended Static Here is an example of how to register a managed CRUD api interface: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Here is an example of how to register a managed instance of the CRUD api interface: // Apizr registration myContainer.RegistrationMethod(() => ApizrBuilder.Current.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")) ); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Also, you could use the manager directly instead of registering it. Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Extended Static public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizr( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Extended Static public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a common base address (https://crud.io/api) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a common base address (https://crud.io/api) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific base address (https://crud.com/api) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a common base address (https://crud.io/api) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a common base address (https://crud.io/api) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry Set a specific base address (https://crud.com/api) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); // T3 with default registered types var t3Manager = apizrRegistry.GetCrudManagerFor<T3>(); Registering all scanned interfaces Extended Static First you have to tell Apizr which entity to auto register a crud api for by assembly scanning thanks to the AutoRegister attribute: [AutoRegister(\"https://mybaseuri.com/api/myentity\")] public record MyEntity { [JsonPropertyName(\"id\")] public int Id { get; init; } ... } // OR with custom arguments [AutoRegister<ICrudApi<MyEntity, string, MyPagedResult<MyEntity>, MyReadAllParamsType>>(\"https://mybaseuri.com/api/myentity\")] public record MyEntity { [JsonPropertyName(\"id\")] public int Id { get; init; } ... } Thanks to this attribute: (Optional) We can specify the crud api with custom arguments if needed (otherwise default arguments will be int, IEnumerable<T> and IDictionary<string, object>) (Mandatory) We have to provide the specific entity crud base uri (no more fluent declaration) Then fluently just write: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor([ASSEMBLIES_CONTAINING_ENTITIES]); } Apizr will scan assemblies to auto register managers for decorated entities. Not available. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a MAUI mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _userCrudManager = userCrudManager; // Or registry injection //_userCrudManager = apizrRegistry.GetCrudManagerFor<User, int, PagedResult<User>, ReadAllUsersParams>>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync(api => api.ReadAll()); // OR with some option adjustments // var userList = await _userCrudManager.ExecuteAsync((options, api) => api.ReadAll(options), // options => options.WithPriority(Priority.Background)); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "| Apizr",
    "keywords": "Intro Note Versions Following documentation is all about the latest packages versions available on NuGet . Please read potential breaking changes if you're about to update libs. Find older versions into the Legacy section. Apizr aims to provide a resilient and feature-rich web API client for .NET applications based on Refit, with the more resiliency we can, but without the boilerplate. It comes among other things with built-in support for retrying failed requests, handling network connectivity issues, caching responses, managing authentication, logging, and request prioritization, but there's more. Watching Please find an Apizr playlist to watch Apizr in action on"
  },
  "articles/legacy/v3_readme.html": {
    "href": "articles/legacy/v3_readme.html",
    "title": "| Apizr",
    "keywords": "Apizr V3 Readme This readme is all about v3 Libraries Install the NuGet package of your choice: Apizr package comes with the For and CrudFor static instantiation approach (which you can register in your DI container then) Apizr.Extensions.Microsoft.DependencyInjection package extends your IServiceCollection with AddApizrFor and AddApizrCrudFor registration methods (ASP.Net Core, etc) Apizr.Integrations.Shiny package brings ICacheHandler, ILogHandler and IConnectivityHandler method mapping implementations for Shiny, extending your IServiceCollection with a UseApizr and UseApizrCrudFor registration methods Apizr.Integrations.Fusillade package enables request priority management using Fusillade Apizr.Integrations.Akavache package brings an ICacheHandler method mapping implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler method mapping implementation for MonkeyCache Apizr.Integrations.MediatR package enables request auto handling with mediation using MediatR Apizr.Integrations.Optional package enables Optional result from mediation requests (requires MediatR integration) using Optional.Async Apizr.Integrations.AutoMapper package enables auto mapping for mediation requests (requires MediatR integration and could work with Optional integration) using AutoMapper Apizr core package make use of well known nuget packages to make the magic appear: Package Features Refit Auto-implement web api interface and deal with HttpClient Polly Apply some policies like Retry, CircuitBreaker, etc... HttpTracer Trace Http(s) request/response traffic to log it It also comes with some handling interfaces to let you provide your own services for: Caching with ICacheHandler, which comes with its default VoidCacheHandler (no cache), but also with: AkavacheCacheHandler: Akavache method mapping interface (Integration package referenced above) MonkeyCacheHandler: MonkeyCache method mapping interface (Integration package referenced above) ShinyCacheHandler: Shiny chaching method mapping interface (Integration package referenced above) Logging with ILogHandler, which comes with its default DefaultLogHandler (Console and Debug), but also with: ShinyLogHandler: Shiny logging method mapping interface (Integration package referenced above) Connectivity with IConnectivityHandler, which comes with its default VoidConnectivityHandler (no connectivity check), but also with: ShinyConnectivityHandler: Shiny connectivity method mapping interface (Integration package referenced above) Mapping with IMappingHandler, which comes with its default VoidMappingHandler (no mapping conversion), but also with: AutoMapperMappingHandler: AutoMapper mapping method mapping interface (Integration package referenced above) How to: Classic APIs Defining Registering Static approach Extensions approach Manually Automatically Using CRUD APIs Defining Registering Static approach Extensions approach Manually Automatically Using Advanced configurations Service handlers Authentication DelegatingHandler Custom DelegatingHandler Refit settings Policy registry HttpClient External integrations Shiny MonkeyCache Akavache Fusillade MediatR OptionalAsync Optional helper extentions OnResultAsync CatchAsync AutoMapper AutoMapper with Crud apis Manually Automatically Using AutoMapper with classic apis Using Classic APIs: Defining: We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample.Api { [WebApi(\"https://reqres.in/\"), CacheIt, LogIt] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(CancellationToken cancellationToken); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); [Post(\"/api/users\")] Task<User> CreateUser(User user, CancellationToken cancellationToken); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Registering: As it's not mandatory to register anything in a container for DI purpose (you can use a static instance directly), I'll describe here how to use it with DI. Static approach: Somewhere where you can add services to your container, add the following: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.SomeInstanceRegistrationMethod(Apizr.For<IReqResService>(optionsBuilder => optionsBuilder.WithPolicyRegistry(registry) .WithCacheHandler(new AkavacheCacheHandler()))); I provided a policy registry and a cache handler here as I asked for it with cache and policy attributes in my web api example. Extensions approach: For this one, two options : Manually: register calling AddApizrFor<TWebApi> service collection extension method or overloads for each service you want to manage Automatically: decorate your services with WebApiAttribute and let Apizr auto register it all for you Manually: Here is an example: public override void ConfigureServices(IServiceCollection services) { var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrFor<IReqResService>(optionsBuilder => optionsBuilder.WithCacheHandler<AkavacheCacheHandler>()); // Or if you use Shiny //services.UseApizrFor<IReqResService>(); } Automatically: Decorate your api services like we did before (but with your own settings): [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample.Api { [WebApi(\"https://reqres.in/\"), CacheIt, LogIt] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(CancellationToken cancellationToken); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); [Post(\"/api/users\")] Task<User> CreateUser(User user, CancellationToken cancellationToken); } } Then, register in your Startup class like so: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrFor(typeof(AnyClassFromServicesAssembly)); // Or if you use Shiny //services.UseApizrFor(typeof(AnyClassFromServicesAssembly)); } There are 4 AddApizrFor/UseApizrFor flavors for classic automatic registration, depending on what you want to do and provide. This one is the simplest. Using: Sending web request from your app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<YourWebApiInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; public YouViewModel(IApizrManager<IReqResService> reqResManager) { _reqResManager = reqResManager; } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync((ct, api) => api.GetUsersAsync(ct), CancellationToken.None); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } I catch execution into an ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request. CRUD APIs: When playing with RESTful CRUD api, you've got a couple of options: Define a web api interface like we just did before with each crud method (each entity into one interface or one interface for each entity) Use the built-in ICrudApi As the first option is described already, here we'll talk about the ICrudApi option Defining: As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what it looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll(CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken); [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, CancellationToken cancellationToken); } We can see that it comes with some CacheKey and Priority attribute decorations, but it won't do anything until you ask Apizr to. Caching, Logging, Policing, Prioritizing... everything is activable fluently with the options builder. About generic types: T and TKey (optional - default: int) meanings are obvious TReadAllResult (optional - default: IEnumerable<T>) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object>) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering: Static approach: Somewhere where you can add services to your container, add the following: // Apizr registration myContainer.SomeInstanceRegistrationMethod(Apizr.CrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\"))); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder. There are 5 CrudFor flavors, depending on what you want to do and provide. One of it is the simple Apizr.CrudFor<T>(), which as you can expect, define TKey as int, TReadAllResult as IEnumerable<T> and TReadAllParams as IDictionary<string, object>. Extensions approach: Ok, for this one, two options again: Manually: register calling AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams> service collection extension method or overloads for each entity you want to manage Automatically: decorate your entities with CrudEntityAttribute and let Apizr auto register it all for you Manually: In your Startup class, add the following: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\")); // Or if you use Shiny //services.UseApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder. There are 10 AddApizrCrudFor/UseApizrCrudFor flavors for crud manual registration, depending on what you want to do and provide. One of it is the simple services.AddApizrCrudFor<T>() or services.UseApizrCrudFor<T>(), which as you can expect, define TKey as int, TReadAllResult as IEnumerable<T> and TReadAllParams as IDictionary<string, object>. Automatically: You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://myapi.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T>) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object>) Then, register in your Startup class like so: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudFor(typeof(MyEntity)); // Or if you use Shiny //services.UseApizrCrudFor(typeof(MyEntity)); } There are 4 AddApizrCrudFor/UseApizrCrudFor flavors for crud automatic registration, depending on what you want to do and provide. This is the simplest. Using: Sending web request from your app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) { _userCrudManager = userCrudManager; } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync((ct, api) => api.ReadAll(ct), CancellationToken.None); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } I catch execution into an ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request. Advanced configurations: There're some advanced scenarios where you want to adjust some settings and behaviors. This is where the options builder comes in. Each registration approach comes with its optionsBuilder optional parameter: optionsBuilder => optionsBuilder.SomeOptionsHere(someParametersThere) Service handlers: The options builder let you provide your own method mapping implementations for: ICacheHandler (thanks to WithCacheHandler) ILogHandler (thanks to WithLogHandler) IConnectivityHandler (thanks to WithConnectivityHandler) IMappingHandler (thanks to WithMappingHandler). Authentication DelegatingHandler: For autorized request calls, you can provide some properties and/or methods (thanks to WithAuthenticationHandler) to help Apizr to authenticate user when needed. Custom DelegatingHandler: The options builder let you add any custom delegating handler thanks to AddDelegatingHandler method Refit settings: You can adjust some specific Refit settings providing an instance of RefitSettings (thanks to WithRefitSettings). Note that for this one, only constructor parameters will be used (IContentSerializer, IUrlParameterFormatter and IFormUrlEncodedParameterFormatter). Please don't use AuthorizationHeaderValueGetter, AuthorizationHeaderValueWithParamGetter and HttpMessageHandlerFactory, as they'll be ignored. Prefer using WithAuthenticationHandler builder method to manage request authorization and AddDelegatingHandler builder method to add some other custom delegating handlers. Policy registry: If you plan to use the PoliciesAttribute, Apizr needs to know where to find your policy registry: With static instantiation, you have to provide it thanks to WithPolicyRegistry builder method. With extensions registration, you have to register it thanks to AddPolicyRegistry service collection extension method. In any case, you may want to log what's going on during policies excecution. To do so, there's an OnRetry helper action which provide your ILogHandler method mapping implementation to Polly. Here's how to use it: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; LoggedPolicies.OnLoggedRetry could also execute your own specific action if needed. HttpClient: With extensions registration, you can adjust some more HttpClient settings thanks to ConfigureHttpClientBuilder builder method. This one could interfere with all Apizr http client auto configuration, so please use it with caution. External integrations: Shiny: If you're a Shiny user, with the right extension package installed, just register Apizr calling UseApizr instead of AddApizr. Then, everything will be in place, ready to use, relying on Shiny features (Logging, Caching, Connectivity). MonkeyCache: If you're a MonkeyCache user, with the right extension package installed: Set the Barrel's ApplicationId: Barrel.ApplicationId = \"YOUR_APPLICATION_ID\"; Then tell Apizr you want to use MonkeyCache as caching layer: optionsBuilder => optionsBuilder.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) Akavache: If you're an Akavache user, with the right extension package installed: Just tell Apizr you want to use Akavahe as caching layer: optionsBuilder => optionsBuilder.WithCacheHandler(() => new AkavacheCacheHandler()) Fusillade: Starting Apizr v3, Fusillade has been moved from core project to its dedicated integration package. If you plan to use it, you now have to install this package. Once installed, you should be able to activate it fluently with the provided extension: optionsBuilder => optionsBuilder.WithPriorityManagement() From there, everything will be user initiated. When you need to specify another priority, what you need to do is just adding the priority parameter into your api interface method definition: [Get(\"/api/users\")] Task<UserList> GetUsersAsync([Priority] int priority, CancellationToken cancellationToken); Mediation: In extensions registration approach and with the dedicated integration nuget package referenced, the options builder let you enable mediation by calling: optionsBuilder => optionsBuilder.WithMediation() Don't forget to register MediatR itself as usual: services.AddMediatR(typeof(Startup)); When activated, you don't have to inject/resolve anything else than an IMediator instance, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be, with classic api interfaces: ExecuteRequest<TWebApi>: execute any method from TWebApi defined by an expression parameter ExecuteRequest<TWebApi, TApiResponse>: execute any method from TWebApi with a TApiResponse result and defined by an expression parameter ExecuteRequest<TWebApi, TModelResponse, TApiResponse>: execute any method from TWebApi with a TApiResponse mapped to a TModelResponse result and defined by an expression parameter NOTE - Mapping: When I say \"mapped\", I talk about the mapping integration feature Please refer to AutoMapper section for more info Or with crud api interfaces: ReadQuery<T>: get the T entity with int ReadQuery<T, TKey>: get the T entity with TKey ReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters CreateCommand<T>: create a T entity UpdateCommand<T>: update the T entity with int UpdateCommand<TKey, T>: update the T entity with TKey DeleteCommand<T>: delete the T entity with int DeleteCommand<T, TKey>: delete the T entity with TKey There's also a typed mediator available for each api interface (classic or crud), to help you write things shorter. With classic api interfaces, resolving IMediator<TWebApi> give you access to: SendFor(YOUR_API_METHOD_EXPRESSION): send an ExecuteRequest<TWebApi> for you SendFor<TApiResponse>(YOUR_API_METHOD_EXPRESSION): send an ExecuteRequest<TWebApi, TApiResponse> for you SendFor<TModelResponse, TApiResponse>(YOUR_API_METHOD_EXPRESSION): send an ExecuteRequest<TWebApi, TModelResponse, TApiResponse> for you With crud api interfaces, resolving ICrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> give you access to: SendReadQuery(TApiEntityKey key): send a ReadQuery<TApiEntity, TApiEntityKey> for you SendReadQuery<TModelEntity>(TApiEntityKey key): send a ReadQuery<TModelEntity, TApiEntityKey> for you, with TModelEntity mapped with TApiEntity SendReadAllQuery(): send a ReadAllQuery<TReadAllResult> for you SendReadAllQuery<TModelEntityReadAllResult>(): send a ReadAllQuery<TModelEntityReadAllResult> for you, with TModelEntityReadAllResult mapped with TReadAllResult SendCreateCommand(TApiEntity payload): send a CreateCommand<TApiEntity> for you SendCreateCommand<TModelEntity>(TModelEntity payload): send a CreateCommand<TModelEntity> for you, with TModelEntity mapped with TApiEntity SendUpdateCommand(TApiEntityKey key, TApiEntity payload): send an UpdateCommand<TApiEntityKey, TApiEntity> for you SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload): send an UpdateCommand<TApiEntityKey, TModelEntity> for you, with TModelEntity mapped with TApiEntity SendDeleteCommand(TApiEntityKey key): send a DeleteCommand<TApiEntity, TApiEntityKey> for you Most of all requests get some overloads to provide some more parameters. Apizr will intercept your request and handle it to send the result back to you, thanks to MediatR. From there, our ViewModel can look like (only one interface necessary in real world): public class YourViewModel { private readonly IMediator _mediator; private readonly IMediator<IReqResService> _reqResMediator; private readonly ICrudMediator<User, int, PagedResult<User>, IDictionary<string, object>> _userMediator; public YouViewModel(IMediator mediator, IMediator<IReqResService> reqResMediator, ICrudMediator<User, int, PagedResult<User>, IDictionary<string, object>> userMediator) { _mediator = mediator; _reqResMediator = reqResMediator; _userMediator = userMediator; } public ObservableCollection<User>? Users { get; set; } // This won't compile obviously // It's an example presenting all ways to play with MediatR // You should choose one of these ways private async Task GetUsersAsync() { IList<User>? users; try { // The classic api interface way var userList = await _mediator.Send(new ExecuteRequest<IReqResService, UserList>((ct, api) => api.GetUsersAsync(ct)), CancellationToken.None); users = userList.Data; // The classic api interface way with typed mediator var userList = await _reqResMediator.SendFor(api => api.GetUsersAsync()); users = userList.Data; // The crud api interface way var pagedUsers = await _mediator.Send(new ReadAllQuery<PagedResult<User>>(), CancellationToken.None); users = pagedUsers.Data?.ToList(); // The crud api interface way with typed mediator var pagedUsers = await _userMediator.SendReadAllQuery(); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } Optional: In extensions registration approach and with the dedicated integration nuget package referenced, the options builder let you enable mediation with Optional result by calling: optionsBuilder => optionsBuilder.WithOptionalMediation() Again, don't forget to register MediatR itself as usual : services.AddMediatR(typeof(Startup)); When activated, you don't have to inject/resolve anything else than an IMediator instance, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be, with classic api interfaces: ExecuteOptionalRequest<TWebApi>: execute any method from TWebApi defined by an expression parameter which returns Option<Unit, ApizrException> ExecuteOptionalRequest<TWebApi, TApiResponse>: execute any method from TWebApi defined by an expression parameter which returns Option<TApiResponse, ApizrException<TApiResponse>> ExecuteOptionalRequest<TWebApi, TModelResponse, TApiResponse>: execute any method from TWebApi defined by an expression parameter which returns Option<TModelResponse, ApizrException<TModelResponse>> where TModelResponse mapped from TApiResponse NOTE - Mapping: When I say \"mapped\", I talk about the mapping integration feature Please refer to AutoMapper section for more info Or with crud api interfaces: ReadOptionalQuery<T>: get the T entity with int and returns Option<T, ApizrException<T>> ReadOptionalQuery<T, TKey>: get the T entity with TKey and returns Option<T, ApizrException<T>> ReadAllOptionalQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters and returns Option<TReadAllResult, ApizrException<TReadAllResult>> ReadAllOptionalQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters and returns Option<TReadAllResult, ApizrException<TReadAllResult>> CreateOptionalCommand<T>: create a T entity and returns Option<Unit, ApizrException> UpdateOptionalCommand<T>: update the T entity with int and returns Option<Unit, ApizrException> UpdateOptionalCommand<TKey, T>: update the T entity with TKey and returns Option<Unit, ApizrException> DeleteOptionalCommand<T>: delete the T entity with int and returns Option<Unit, ApizrException> DeleteOptionalCommand<T, TKey>: delete the T entity with TKey and returns Option<Unit, ApizrException> There's also a typed optional mediator available for each api interface (classic or crud), to help you write things shorter. With classic api interfaces, resolving IOptionalMediator<TWebApi> give you access to: SendFor(YOUR_API_METHOD_EXPRESSION): send an ExecuteOptionalRequest<TWebApi> for you SendFor<TApiResponse>(YOUR_API_METHOD_EXPRESSION): send an ExecuteOptionalRequest<TWebApi, TApiResponse> for you SendFor<TModelResponse, TApiResponse>(YOUR_API_METHOD_EXPRESSION): send an ExecuteOptionalRequest<TWebApi, TModelResponse, TApiResponse> for you With crud api interfaces, resolving ICrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> give you access to: SendReadOptionalQuery(TApiEntityKey key): send a ReadOptionalQuery<TApiEntity, TApiEntityKey> for you SendReadOptionalQuery<TModelEntity>(TApiEntityKey key): send a ReadOptionalQuery<TModelEntity, TApiEntityKey> for you, with TModelEntity mapped with TApiEntity SendReadAllOptionalQuery(): send a ReadAllOptionalQuery<TReadAllResult> for you SendReadAllOptionalQuery<TModelEntityReadAllResult>(): send a ReadAllOptionalQuery<TModelEntityReadAllResult> for you, with TModelEntityReadAllResult mapped with TReadAllResult SendCreateOptionalCommand(TApiEntity payload): send a CreateOptionalCommand<TApiEntity> for you SendCreateOptionalCommand<TModelEntity>(TModelEntity payload): send a CreateOptionalCommand<TModelEntity> for you, with TModelEntity mapped with TApiEntity SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload): send an UpdateOptionalCommand<TApiEntityKey, TApiEntity> for you SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload): send an UpdateOptionalCommand<TApiEntityKey, TModelEntity> for you, with TModelEntity mapped with TApiEntity SendDeleteOptionalCommand(TApiEntityKey key): send a DeleteOptionalCommand<TApiEntity, TApiEntityKey> for you Apizr will intercept it and handle it to send the result back to you, thanks to MediatR and Optional. From there, our ViewModel can look like (only one interface necessary in real world): public class YourViewModel { private readonly IMediator _mediator; private readonly IOptionalMediator<IReqResService> _reqResOptionalMediator; private readonly ICrudOptionalMediator<User, int, PagedResult<User>, IDictionary<string, object>> _userOptionalMediator; public YouViewModel(IMediator mediator, IOptionalMediator<IReqResService> reqResOptionalMediator, ICrudOptionalMediator<User, int, PagedResult<User>, IDictionary<string, object>> userOptionalMediator) { _mediator = mediator; _reqResOptionalMediator = reqResOptionalMediator; _userOptionalMediator = userOptionalMediator; } public ObservableCollection<User>? Users { get; set; } // This won't compile obviously // It's an example presenting all ways to play with Optional // You should choose one of these ways private async Task GetUsersAsync() { // The classic api interface way with mediator and optional request var optionalUserList = await _mediator.Send(new ExecuteOptionalRequest<IReqResService, UserList>((ct, api) => api.GetUsersAsync(ct)), CancellationToken.None); // The classic api interface way with typed optional mediator (the same but shorter) var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); // Handling the optional result for both previous ways optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); // The crud api interface way with mediator and optional request var optionalPagedResult = await _mediator.Send(new ReadAllOptionalQuery<PagedResult<User>>(), CancellationToken.None); // The crud api interface way with typed crud optional mediator var optionalPagedResult = await _userOptionalMediator.SendReadAllOptionalQuery(); // Handling the optional result for both previous ways optionalPagedResult.Match(pagedUsers => { if (pagedUsers.Data != null && pagedUsers.Data.Any()) Users = new ObservableCollection<User>(pagedUsers.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); } } Same advantages than classic mediation but with exception handling. Both \"classic\" and \"optional\" mediation are compatibles with each other. It means that if you call both methods during registration, both request collection will be available, so you can decide which one suits to you when you need it. Optional helper extentions: Optional and MediatR are pretty cool. But even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result boilerplate: // The classic api interface way with typed optional mediator (the same but shorter) var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); // Handling the optional result for both previous ways optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Let's cut down the optional result handling thing, to get something as short as we can. OnResultAsync and CatchAsync are extension methods to handle optional result fluently. OnResultAsync: OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult: this action will be invoked just before throwing any exception that might have occurred during request execution Func<TResult, ApizrException<TResult>, bool> onResult: this function will be invoked with the returned result and potential occurred exception Func<TResult, ApizrException<TResult>, Task<bool>> onResult: this function will be invoked async with the returned result and potential occurred exception All give you a result returned from fetch if succeed, or cache if failed. The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Here is what our final request looks like with Action (auto throwing after invocation on excpetion): await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync(userList => { users = userList?.Data; }); Or with Func and throw: await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Or with Func and success flag: var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); We could combine the first two with AsyncErrorHandler, to catch them all globally and show any information dialog to the user, like: public static class AsyncErrorHandler { public static void HandleException(Exception exception) { var message = exception is IOException || exception.InnerException is IOException ? \"No network\" : (exception.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); Log.Write(exception); } } CatchAsync: CatchAsync let you provide these parameters: Action<Exception> onException: this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache: True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one is to return result from fetch or cache, no matter of execption handled on the other side by an action callback to inform the user var users = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There's some cached data? AsyncErrorHandler will handle the exception to inform the user call just failed Apizr will return the previous result from cache There's no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal Fody usage) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled further Safe and shorter than ever! AutoMapper: You can define your own model entities and then, your AutoMapper mapping profiles between api entities and model entities. Then, you have to tell Apizr which entities must use the mapping feature. AutoMapper with Crud apis: Manually: services.AddApizrCrudFor<MappedEntity<TModelEntity, TApiEntity>>(optionsBuilder => optionsBuilder.WithBaseAddress(\"https://myapi.com/api/myentity\") .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>()); Manual registration makes use of MappedEntity<TModelEntity, TApiEntity> just in place of our usual T. You'll have to enable one or both mediation feature to handle requests (classic and/or optional) and provide a mapping handler. You'll have to repeat this registration for each crud mapping. Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Automatically: Why not let Apizr do it for you? To do so, you have do decorate one of those two entities (api vs model) with corresponding attribute: CrudEntityAttribute above the api entity, with modelEntityType parameter set to the mapped model entity type MappedCrudEntityAttribute above the model entity, with apiEntityType parameter set to the mapped api entity type If you get access to both entities, it doesn't matter which one you decorate, just do it for one of it (if you decorate both, it will take the first found). If you don't get any access to the api entities, just decorate your model one with the MappedCrudEntityAttribute From here, let's write: services.AddApizrCrudFor(optionsBuilder => optionsBuilder .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>(), typeof(AnyTApiEntity), typeof(AnyTModelEntity)); In this example, I provided both api entity and model entity assemblies to the attribute scanner, but actually you just have to provide the one containing your attribute decorated entities (api or model, depending of your scenario/access rights). Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Using: Nothing different here but direct using of your model entities when sending mediation requests, like: var createdModelEntity = await _mediator.Send(new CreateCommand<TModelEntity>(myModelEntity), CancellationToken.None); Apizr will map myModelEntity to TApiEntity, send it to the server, map the result to TModelEntity and send it back to you. And yes, it works also with Optional. AutoMapper with classic apis: You have do decorate one among the api method, the model entity or the api entity with MappedWithAttribute, with mappedWithType set to the other mapped entity. From here, let's write: services.AddApizrFor(optionsBuilder => optionsBuilder .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>(), typeof(AnyTApiEntity), typeof(AnyTModelEntity), typeof(AnyTWebApi)); Actually, the number of typeof depends on where your attribute decorations are defined. Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Using: Nothing different here but direct using of your model entities when sending mediation requests, like: // Classic auto mapped result only var userInfos = await _mediator.Send(new ExecuteRequest<IReqResService, UserInfos, UserDetails>((ct, api) => api.GetUserAsync(userChoice, ct)), CancellationToken.None); Apizr will send the request to the server, map the api result from UserDetails to UserInfos and send it back to you. You can also map the request before being sent, like so: // Classic auto mapped request and result var minUser = new MinUser {Name = \"John\"}; var createdMinUser = await _mediator.Send( new ExecuteRequest<IReqResService, MinUser, User>((ct, api, mapper) => api.CreateUser(mapper.Map<MinUser, User>(minUser), ct)), CancellationToken.None); minUser will be mapped from MinUser to User just before being sent, then Apizr will map the api result back from User to MinUser and send it back to you. And yes, all the mapping feature works also with Optional."
  },
  "articles/legacy/v4/config.html": {
    "href": "articles/legacy/v4/config.html",
    "title": "| Apizr",
    "keywords": "Configuring Many options could be set by attribute decoration. It allows you to use assembly scanning auto registration feature. Much more options could be set by fluent configuration. All fluent configuration flavors offer a contextualized options builder, depending on what you're asking and where. The option types: Proper: options available at api configuration level only and applied to it exclusively (e.g. BaseAddress obviously) Common: options available at global configuration level only and applied to all registered apis (e.g. RefitSettings, PolicyRegistry) There're also some Shared options available at both api (proper) and global (common) configuration level (e.g. LogLevel) Here is what using it with a registry, the extended way, could look like: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)) .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>( options => options .WithBaseAddress(\"https://reqres.in/api/users\"))), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } And here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Apply proper logging options dedicated to IHttpBinService's manager Add a manager for User entity with CRUD api interface and custom types into the registry, to register it into the container Apply proper address option dedicated to User's manager Apply common options to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) Note that fluent configuration almost allways wins over the attribute one (if both set) and the same for proper over common. For example, if you decorated your api interface with a Log attribute, but also set some common logging options fluently plus some proper logging options, the proper logging options will be applied to the api manager. But, if you decorated the api method itself instead of the interface with this Log attribute, it will win over all others :) Actualy, the closer the option is defined from the api method, the more chance it will have to be applied over all others. Are you still following? Don't worry! Every single option is detailed through this documentation, so let's browse it!"
  },
  "articles/legacy/v4/config_address.html": {
    "href": "articles/legacy/v4/config_address.html",
    "title": "| Apizr",
    "keywords": "Configuring base address You can configure base address either by attribute decoration or by fluent configuration. Attribute Fluent Configuring the base address with attribute allows you to use assembly scanning auto registration feature. Classic api You can set api interface base address thanks to the WebApi attribute like so: [WebApi(\"https://YOUR_API_INTERFACE_BASE_ADDRESS/\")] public interface IYourApiInterface { // Your api interface methods } Optional parameters: isAutoRegistrable (default: true) tells Apizr to ignore this specific interface while scanning assemblies for auto registration. It could be usefull when you ask for auto registration but want to do it fluently some specific interfaces. CRUD api You can set CRUD entity api base address thanks to the CrudEntity attribute like so: [CrudEntity(\"https://YOUR_CRUD_ENTITY_API_BASE_ADDRESS\")] public class YourCrudEntity { // Your CRUD entity properties } Optional parameters: keyType: entity key type (default: null = typeof(int)) readAllResultType: ReadAll query result type (default: null = typeof(IEnumerable{})) readAllParamsType: ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) modelEntityType: Model entity type mapped with this api entity type (default: null = decorated api entity type) Configuring the base address fluently allows you to set it dynamically (e.g. based on settings) You can set the base address thanks to this option: options => options.WithBaseAddress(YourStaticSettings.YourBaseAddress)) The extended world offers another option with a factory providing a service provider instance. It could help you to resolve the setting at runtime: options => options.WithBaseAddress(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBaseAddress)) The WithBaseAddress option is available at both common and specific configuration level, meanning that you can share a base address with several api interfaces and/or set a specific one for some others."
  },
  "articles/legacy/v4/config_auth.html": {
    "href": "articles/legacy/v4/config_auth.html",
    "title": "| Apizr",
    "keywords": "Configuring authentication Apizr provides its own AuthenticationHandler to manage the authentication workflow . Defining As Apizr is based on Refit, you can decorate your authenticated apis like so (here with bearer authorization): namespace Apizr.Sample { [WebApi(\"https://httpbin.org/\")] public interface IHttpBinService { [Get(\"/bearer\")] [Headers(\"Authorization: Bearer\")] Task<HttpResponseMessage> AuthBearerAsync(); } } Configuring To activate this feature, you have to configure it thanks to the options builder: Static Extended options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( YourSettingsServiceInstance, settingsService => settingsService.Token, YourSignInServiceInstance, signInService => signInService.SignInAsync) YourSettingsServiceInstance should be replaced by whatever settings manager instance of your choice YourSignInServiceInstance should be replaced by your service managing your login flow. options => options.WithAuthenticationHandler<ISettingsService, ISignInService>( settingsService => settingsService.Token, signInService => signInService.SignInAsync) settingsService is your service managing settings signInService is your service managing your login flow. Both services should be container registered as it will be resolved. In details: settingsService.Token should be a public string property, saved locally on device. signInService.SignInAsync should be a method taking an HttpRequestMessage parameter and returning a refreshed access token. More You may want to deal with authentication configuration in some other ways. Here are all other authentication options: Static Extended When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide the settings service by a factory and deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide both settings service and sign in service by a factory: options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, () => YourSignInServiceInstance, signInService => signInService.SignInAsync) When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (logger, options) => new YourAuthenticationHandler(...)) When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (serviceProvider, options) => new YourAuthenticationHandler(...)) Processing There's nothing more to deal with. Protected requests will be authenticated by Apizr, otherwise it will ask user to sign in. Anyway, here is the AuthenticationHandler's SendAsync method FYI: protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { HttpRequestMessage clonedRequest = null; string token = null; var context = request.GetOrBuildPolicyExecutionContext(); if (!context.TryGetLogger(out var logger, out var logLevel, out _, out _)) { logger = _logger; logLevel = _apizrOptions.LogLevel; } // See if the request has an authorize header var auth = request.Headers.Authorization; if (auth != null) { // Authorization required! Get the token from saved settings if available logger?.Log(logLevel, $\"{context.OperationKey}: Authorization required with scheme {auth.Scheme}\"); token = GetToken(); if (!string.IsNullOrWhiteSpace(token)) { // We have one, then clone the request in case we need to re-issue it with a refreshed token logger?.Log(logLevel, $\"{context.OperationKey}: Saved token will be used\"); clonedRequest = await this.CloneHttpRequestMessageAsync(request); } else { // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: No token saved yet. Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); } // Set the authentication header request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set\"); } // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request with authorization header...\"); var response = await base.SendAsync(request, cancellationToken).ConfigureAwait(false); // Check if we get an Unauthorized response with token from settings if (response.StatusCode == HttpStatusCode.Unauthorized && auth != null && clonedRequest != null) { logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized !\"); // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); // Set the authentication header with refreshed token clonedRequest.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set with refreshed token\"); // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request again but with refreshed authorization header...\"); response = await base.SendAsync(clonedRequest, cancellationToken).ConfigureAwait(false); } // Clear the token if unauthorized if (response.StatusCode == HttpStatusCode.Unauthorized) { token = null; logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized ! Token has been cleared\"); } // Save the refreshed token if succeed or clear it if not this.SetToken(token); logger?.Log(logLevel, $\"{context.OperationKey}: Token saved\"); return response; } The workflow: We check if the request needs to be authenticated If so, we try to load a previously saved token If there’s one, we clone the request in case we need to re-issue it with a refreshed token (as token could be rejected server side) If there’s not, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header with the token We finally send the request We check if we get an Unauthorized response If so and if it was sent with a saved token, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header of the cloned request with the refreshed token We send the cloned request We save the token if succeed or clear it if not We return the response"
  },
  "articles/legacy/v4/config_connectivity.html": {
    "href": "articles/legacy/v4/config_connectivity.html",
    "title": "| Apizr",
    "keywords": "Configuring Connectivity Apizr can check network connectivity for you, right before sending any request. It will throw an ApizrException with an IOException as InnerException in case of network failure, which you can handle globally by showing a snack bar info or whatever. This way, your viewmodels are kept light and clear of it. With boolean factory You may want to provide just a simple boolean value to check connectivity. Here is the right option: Static Extended options => options.WithConnectivityHandler(() => YourConnectivityBoolean) // Boolean factory options => options.WithConnectivityHandler(serviceProvider => YourConnectivityBoolean) // Boolean expression factory options => options.WithConnectivityHandler<IYourRegisteredConnectivityService>(service => service.YourConnectivityBoolean) With Connectivity Handler You could also implement the IConnectivityHandler interface: public class YourConnectivityHandler : IConnectivityHandler { public bool IsConnected() { // Check connectivity here } } Then just register it with this option: Static Extended // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(() => YourConnectivityHandler) // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(serviceProvider => YourConnectivityHandler) // OR closed generic configuration options => options.WithConnectivityHandler<YourConnectivityHandler>() // OR type configuration options => options.WithConnectivityHandler(typeof(YourConnectivityHandler))"
  },
  "articles/legacy/v4/config_datacaching.html": {
    "href": "articles/legacy/v4/config_datacaching.html",
    "title": "| Apizr",
    "keywords": "Configuring data caching You may want to cache data returned from your API. Apizr could handle it for you by providing an ICachingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install the integration package of your choice: Project Current V-Next Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Where: Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler implementation for MonkeyCache Warning Apizr.Extensions.Microsoft.Caching This integration package offers you to work with any of MS Extension Caching compatible caching engines. It means that you still have to install the one of your choice right after Apizr.Extensions.Microsoft.Caching. Defining Apizr comes with a Cache attribute which activate result data caching at any level (all Assembly apis, interface apis or specific api method). Here is classic api an example: namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\"), Cache(CacheMode.GetAndFetch, \"01:00:00\")] Task<UserList> GetUsersAsync(); [Get(\"/users/{userId}\"), Cache(CacheMode.GetOrFetch, \"1.00:00:00\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); } } You’ll find also cache attributes dedicated to CRUD apis like CacheRead and CacheReadAll, so you could define cache settings at any level (all Assembly apis, interface apis or specific CRUD method). Here is CRUD api an example: namespace Apizr.Sample.Models { [CrudEntity(\"https://reqres.in/api/users\", typeof(int), typeof(PagedResult<>))] [CacheReadAll(CacheMode.GetAndFetch, \"01:00:00\")] [CacheRead(CacheMode.GetOrFetch, \"1.00:00:00\")] public class User { [JsonProperty(\"id\")] public int Id { get; set; } [JsonProperty(\"first_name\")] public string FirstName { get; set; } [JsonProperty(\"last_name\")] public string LastName { get; set; } [JsonProperty(\"avatar\")] public string Avatar { get; set; } [JsonProperty(\"email\")] public string Email { get; set; } } } Both (classic and CRUD) define the same thing about cache life time and cache mode. Life time is actually a TimeSpan string representation which is parsed then. Its optional and if you don’t provide it, the default cache provider settings will be applyed. Cache mode could be set to: GetAndFetch (default): the result is returned from request if it succeed, otherwise from cache if there’s some data already cached. In this specific case of request failing, cached data will be wrapped with the original exception into an ApizrException thrown by Apizr, so don’t forget to catch it. GetOrFetch: the result is returned from cache if there’s some data already cached, otherwise from the request. In both cases, cached data is updated after each successful request call. You also can define global caching settings by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the lowest level settings it could find. Back to the example, we are saying: When getting all users, let’s admit we could have many new users registered each hour, so: Try to fetch it from web first if fetch failed, try to load it from previous cached result if fetch succeed, update cached data but make it expire after 1 hour When getting a specific user, let’s admit its details won’t change so much each day, so: Try to load it from cache first if no previous cached data or cache expired after 1 day, fetch it and update cached data but make it expire after 1 day Registering Please register the one corresponding to the package you just installed MS Extensions Caching As you can guess, MS Extensions Caching is available only with extended registration flavor. That said, you'll be able to register with one of the folowing options In-Memory Distributed // direct short configuration options => options.WithInMemoryCacheHandler() // OR closed type configuration options => options.WithCacheHandler<InMemoryCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(InMemoryCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new InMemoryCacheHandler(new YOUR_INMEMORY_CACHING_ENGINE())) // OR factory configuration with the service provider instance options => options.WithCacheHandler(serviceProvider => new InMemoryCacheHandler(serviceProvider.GetRequiredService<IMemoryCache>())) // direct short configuration options => options.WithDistributedCacheHandler<TCacheType>() // OR closed type configuration options => options.WithCacheHandler<DistributedCacheHandler<TCacheType>>() // OR type configuration options => options.WithCacheHandler(typeof(DistributedCacheHandler<TCacheType>)) // OR direct configuration options => options.WithCacheHandler(new DistributedCacheHandler<TCacheType>(new YOUR_DISTRIBUTED_CACHING_ENGINE())) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new DistributedCacheHandler<TCacheType>( serviceProvider.GetRequiredService<IDistributedCache>(), serviceProvider.GetRequiredService<IHttpContentSerializer>())) Where TCacheType could be either string or byte[], conforming to MS Extensions Distributed Cache definition. Warning Distributed cache Registering MS Extension Distributed Cache means that you have to install the distributed cache of your choice and register it too. Akavache You'll be able to register with one of the folowing options: Static Extended // direct short configuration options => options.WithAkavacheCacheHandler() // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(() => new AkavacheCacheHandler()) // direct short configuration options => options.WithAkavacheCacheHandler() // OR closed type configuration options => options.WithCacheHandler<AkavacheCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(AkavacheCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new AkavacheCacheHandler()) Where most of it get overloads so you could set: blobCacheFactory: The factory to init the blob cache of your choice (default: LocalMachine) applicationName: The application name used by Akavache (default: ApizrAkavacheCacheHandler) MonkeyCache Start by initializing Barrel.ApplicationId as you used to do with MonkeyCache: Barrel.ApplicationId = \"YOUR_APPLICATION_NAME\"; Then you'll be able to register with one of the folowing options: Static Extended // direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) // closed type configuration options => options.WithCacheHandler<MonkeyCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(MonkeyCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new MonkeyCacheHandler(Barrel.Current)) Warning Barrel.Current If you don't provide Barrel.Current to the MonkeyCacheHandler, don't forget to register it into your DI container. Using Reading Using Apizr caching feature is just about catching exceptions like for example: IList<User>? users = null; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList?.Data; } catch (ApizrException<UserList> e) { users = e.CachedResult?.Data; } finally { if (users != null && users.Any()) Users = new ObservableCollection<User>(users); } Here we catch an ApizrException<UserList> meaning that in case of exception, it will bring a typed object to you loaded from cache. Clearing You may need to clear cache. Remeber that cache will be cleared when it will expire, thanks to what you set within the Cache attribute. Anyway, sometime we need to clear it explicitly, like in a Refresh scenario. Here are different ways to clear cache: // Clear on call to force fetch and update cache var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync(), true); // Clear a specific request cache var succeed = await _reqResManager.ClearCacheAsync(api => api.GetUsersAsync()); // Clear all cache var succeed = await _reqResManager.ClearCacheAsync(); Clearing all cache of all managers of entire app could also be done thanks to your cache engine api."
  },
  "articles/legacy/v4/config_datamapping.html": {
    "href": "articles/legacy/v4/config_datamapping.html",
    "title": "| Apizr",
    "keywords": "Configuring data mapping You may need to map data between some API types and Model types, known as DTO design pattern. Apizr could handle it for you by providing an IMappingHandler interface implementation to it. Fortunately, there's an integration Nuget package called Apizr.Integration.AutoMapper to integrate... AutoMapper obviously. Of course, you can implement your own integration, but here we'll talk about the provided AutoMapper one. Please first install this integration package: Project Current V-Next Apizr.Integrations.AutoMapper Defining As usually with AutoMapper, define your mapping profiles, like for example: public class UserMinUserProfile : Profile { public UserMinUserProfile() { CreateMap<User, MinUser>() .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.FirstName)); CreateMap<MinUser, User>() .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.Name)); } } Warning Data Mapping with MediatR and/or Optional If you plan to use MediatR and/or Optional integrations, one more defining step need to be done. Only for those of you planning to use data mapping with MediatR and/or Optional, Apizr provide a MappedWith attribute telling it to map api object with model object. You’ll find another MappedCrudEntity attribute dedicated to CRUD apis, coming with auto-registration capabilities, in case of access restricted to only local client model. We could get a model class mapped to an api one like: [MappedWith(typeof(User))] public class MinUser { public int Id { get; set; } public string Name { get; set; } } Registering Static Extended First create a MapperConfiguration with your profiles: var mapperConfig = new MapperConfiguration(config => { config.AddProfile<UserMinUserProfile>(); config.AddProfile<WhateverProfile>(); }); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler(mapperConfig) // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(mapperConfig.CreateMapper())) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(mapperConfig.CreateMapper())) First register AutoMapper as you used to do: services.AddAutoMapper(ASSEMBLIES_CONTAINING_PROFILES); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler() // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration with the service provider instance options => options.WithMappingHandler(serviceProvider => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR closed type configuration options => options.WithMappingHandler<AutoMapperMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(AutoMapperMappingHandler)) Using You can tell Apizr to map data just by providing types when executing a request. Something like: var result = await reqResManager.ExecuteAsync<MinUser, User>((api, user) => api.CreateUser(user, CancellationToken.None), minUser); Here we give a MinUser typed object to Apizr, which will be mapped to User type just before sending it. Then Apizr will map the User typed result back to MinUser type just before returning it. There are much more overloads so you can map objects the way you need. The same while using MediatR and/or Optional."
  },
  "articles/legacy/v4/config_delegatinghandler.html": {
    "href": "articles/legacy/v4/config_delegatinghandler.html",
    "title": "| Apizr",
    "keywords": "Configuring DelegatingHandlers You can add DelegatingHandlers thanks to this option: Static Extended // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.AddDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.AddDelegatingHandler((logger, options) => YourDelegatingHandler) // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the service provider instance options => options.AddDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.AddDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) Warning Inner DelegatingHandler Don't manage delegating handlers hierarchy by yourself, providing any inner handlers. Instead, just add your handlers thanks to the AddDelegatingHandler option the order you want and Apizr will do it for you."
  },
  "articles/legacy/v4/config_exceptions.html": {
    "href": "articles/legacy/v4/config_exceptions.html",
    "title": "| Apizr",
    "keywords": "Configuring Exception handling Using Try/Catch Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request. Using Action<Exception> onException Instead of trycatching all the things, you may want to provide an exception handling action on call, thanks to Action<Exception> onException optional parameter. Something like: reqResManager.ExecuteAsync(api => api.GetUsersAsync(), clearCache: false, onException: OnGetUsersException); ... private void OnGetUsersException(Exception ex) { ... } Using Optional.Async Here is how we could handle exceptions using Optional.Async: var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Optional is pretty cool when trying to handle nullables and exceptions, but what if we still want to write it shorter to get our request done and managed with as less code as possible. Even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result matching boilerplate. Fortunately, Apizr provides some dedicated extensions to help getting things as short as we can with exceptions handled. With OnResultAsync OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult: this action will be invoked just before throwing any exception that might have occurred during request execution await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync(userList => { users = userList?.Data; }); Func<TResult, ApizrException<TResult>, bool> onResult: this function will be invoked with the returned result and potential occurred exception await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Func<TResult, ApizrException<TResult>, Task<bool>> onResult: this function will be invoked async with the returned result and potential occurred exception var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); All give you a result returned from fetch if succeed, or cache if failed (if configured). The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Of course, remember to catch throwing exceptions. With CatchAsync CatchAsync let you provide these parameters: Action<Exception> onException: this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache: True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one returns result from fetch or cache (if configured), no matter of potential exception handled on the other side by an action callback var userList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There’s some cached data? AsyncErrorHandler will handle the exception like to inform the user that call just failed Apizr will return the previous result from cache There’s no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal behavior) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled then One line of code to get all the thing done safely and shorter than ever!"
  },
  "articles/legacy/v4/config_httpclientbuilder.html": {
    "href": "articles/legacy/v4/config_httpclientbuilder.html",
    "title": "| Apizr",
    "keywords": "Configuring HttpClientBuilder With the extended approach only, you can configure HttpClientBuilder thanks to this option: options => options.ConfigureHttpClientBuilder(httpClientBuilder => httpClientBuilder.WhateverOption()) Warning HttpClientBuilder Apizr makes use of HttpClientBuilder so keep in mind that you may override some of its features depending of what you're trying to do with HttpClientBuilder. Use with caution."
  },
  "articles/legacy/v4/config_httpclienthandler.html": {
    "href": "articles/legacy/v4/config_httpclienthandler.html",
    "title": "| Apizr",
    "keywords": "Configuring HttpClientHandler You can provide your own HttpClientHandler thanks to this option: Static Extended // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(() => YourOwnHttpClientHandler) // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(serviceProvider => YourOwnHttpClientHandler)"
  },
  "articles/legacy/v4/config_logger.html": {
    "href": "articles/legacy/v4/config_logger.html",
    "title": "| Apizr",
    "keywords": "Configuring logger Apizr v4+ relies on Microsoft.Extensions.Logging, which relies on any compatible logger of your choice. Apizr comes with a quite simple built-in Debug logger by default, but you'd better provide your own obviously. You can configure logger only by fluent configuration. Static Extended You can set logger configuration thanks to this option: options => options.WithLoggerFactory(LoggerFactory.Create(loggingBuilder => { loggingBuilder.AddConsole(); loggingBuilder.AddDebug(); })) LoggerFactory.Create method is provided by Microsoft.Extensions.Logging which lets you add any compatible logger. There's nothing specific to do with Apizr about logger when using the extended approach. Just don't forget to configure it like you usualy do: loggingBuilder.AddConsole() wherever in your app you get access to ILoggingBuilder."
  },
  "articles/legacy/v4/config_logging.html": {
    "href": "articles/legacy/v4/config_logging.html",
    "title": "| Apizr",
    "keywords": "Configuring logging You can adjust logging configuration with: httpTracerMode (default: Everything) Http traffic tracing mode: ExceptionsOnly logs only when an exception occurs ErrorsAndExceptionsOnly logs only when an exception or any error occurs Everything logs all, anytime trafficVerbosity (default: All) Http traffic tracing verbosity (see HttpTracer), with: None RequestBody RequestHeaders RequestCookies RequestAll = RequestBody | RequestHeaders | RequestCookies ResponseBody ResponseHeaders ResponseAll = ResponseBody | ResponseHeaders All = ResponseAll | RequestAll logLevels (default: [Low] Trace, [Medium] Information and [High] Critical) Log levels to apply while writing logs (see Microsoft.Enxtension.Logging), with: Trace Debug Information Warning Error Critical None You can configure logging either by attribute decoration or by fluent configuration. In both cases, logLevels is a parameter array. It lets you provide from 0 to 3 different levels, as Apizr needs to get corresponding log level to each internal severity: Low: logs any internal and normal execution step Medium: logs all missconfigured things, like asking for cache without providing any cache provider High: logs errors and exceptions Obviously, providing more than 3 log levels would be pointlees. It means that: if you don't provide any log level at all, default levels will be applied ([Low] Trace, [Medium] Information and [High] Critical) if you provide only 1 log level like Information, it will be applied to all log entries ([Low] Information, [Medium] Information and [High] Information). Up to you to catch exceptions and to log it at any level of your choice. if you provide only 2 log levels like Debug and Error, the lowest will be applied to both Low and Medium ([Low] Debug, [Medium] Debug and [High] Error) if you provide 3 log levels like Debug, Warning and Critical, it will be applied like you said ([Low] Debug, [Medium] Warning and [High] Critical) if you provide more than 3 log levels, the lowest goes to Low, the highest to High and it will take the middle one for Medium if you provide a None at some point, it will disable logging for corresponding severity Attribute Fluent You can set logging configuration thanks to Log attribute. Configuring logging with attribute allows you to use assembly scanning auto registration feature. The Log attribute could decorate: Assembly: to set logging configuration to all assembly api interfaces/entities Interface/Class: to set logging configuration to all request methods of the decorated api interface/entity Method: to set logging configuration to a specific request method of an api interface or entity (with dedicated attribtes) You also can mix decoration levels to set a common logging configuration to all assembly api interfaces, and/or a specific to all api interface methods, and/or a specific to an api interface method. [assembly:Log] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\")] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } In this example, we decided to apply the default logging configuration ([Low] Trace, [Medium] Information and [High] Critical) to all assembly api interfaces/entities. But you can adjust logging configuration thanks to attribute parameters. Configuring the logging fluently allows you to set it dynamically (e.g. based on settings) You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) // OR static factory configuration options => options.WithLogging(() => Settings.HttpTracerMode, () => Settings.TrafficVerbosity, () => Settings.LogLevels) // OR extended factory configuration options => options.WithLogging( serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().HttpTracerMode, serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().TrafficVerbosity serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().LogLevels) All logging fluent options are available with and without using registry. It means that you can share logging configuration, setting it at registry level and/or set some specific one at api level."
  },
  "articles/legacy/v4/config_mediatr.html": {
    "href": "articles/legacy/v4/config_mediatr.html",
    "title": "| Apizr",
    "keywords": "Configuring MediatR Apizr offers an integration with MediatR, following the Mediator pattern, available only with the extended approach. Mediator pattern ensures to keep all the thing as loosely coupled as we can between our ViewModel/ViewControler and our Data Access Layer. As everything should be loosely coupled between Views and ViewModels (MVVM) or ViewControlers (MVC) thanks to data binding, MediatR offers you to keep it all loosely coupled between your VM/VC and your DAL too. Please read the official documentation to know more about MediatR. The main benefit in using it with Apizr is to offer you a very simple and unified way to send your request, no matter from where or about what. Simple and unified because instead of injecting/resolving each api interface you need to get your data, you just have to use the IMediator interface, everywhere, every time. Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.MediatR Then you'll be able to register with this option: options => options.WithMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrMediator IApizrMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteUnitRequest<TWebApi>: execute any method from TWebApi ExecuteUnitRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteResultRequest<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data ExecuteResultRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadQuery<TResultData>: get the TResultData entity matching an int key ReadQuery<TResultData, TKey>: get the TResultData entity matching a TKey ReadAll: ReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters Create: CreateCommand<TModelData>: create a TModelData entity Update: UpdateCommand<TRequestData>: update the TRequestData entity matching an int key UpdateCommand<TKey, TRequestData>: update the TRequestData entity matching a TKey Delete: DeleteCommand<T>: delete the T entity matching an int key DeleteCommand<T, TKey>: delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator, you could do it with IApizrMediator or IApizrCrudMediator. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic mediator methods: No result: SendFor<TWebApi>: execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey>: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams>: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity>: create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey>: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey>: delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator, IApizrMediator or IApizrCrudMediator, you could do it with IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>. Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrMediationRegistry instead and then just get an IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its Get methods. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery(); Classic typed mediator methods: No result: SendFor: execute any method from TWebApi SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand: create a TApiEntity SendCreateCommand<TModelEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand: delete the TApiEntity matching a TApiEntityKey"
  },
  "articles/legacy/v4/config_optional.html": {
    "href": "articles/legacy/v4/config_optional.html",
    "title": "| Apizr",
    "keywords": "Configuring Optional.Async Apizr offers an integration with Optional.Async, following the Optional pattern, available only with the extended approach with MediatR integration activated. Optional.Async offers a strongly typed alternative to null values that lets you: Avoid those pesky null-reference exceptions Signal intent and model your data more explicitly Cut down on manual null checks and focus on your domain It allows you to chain Task<Option<T>> and Task<Option<T, TException>> without having to use await Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.Optional Then you'll be able to register with this option: options => options.WithOptionalMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrOptionalMediator IApizrOptionalMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var optionalResult = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteOptionalUnitRequest<TWebApi>: execute any method from TWebApi ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteOptionalResultRequest<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadOptionalQuery<TResultData>: get the TResultData entity matching an int key ReadOptionalQuery<TResultData, TKey>: get the TResultData entity matching a TKey ReadAll: ReadAllOptionalQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllOptionalQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters Create: CreateOptionalCommand<TModelData>: create a TModelData entity Update: UpdateOptionalCommand<TRequestData>: update the TRequestData entity matching an int key UpdateOptionalCommand<TKey, TRequestData>: update the TRequestData entity matching a TKey Delete: DeleteOptionalCommand<T>: delete the T entity matching an int key DeleteOptionalCommand<T, TKey>: delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator, you could do it with IApizrMediator or IApizrCrudMediator. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrOptionalCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic Optional mediator methods: No result: SendFor<TWebApi>: execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD Optional mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey>: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams>: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity>: create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey>: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey>: delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator, IApizrOptionalMediator or IApizrCrudOptionalMediator, you could do it with IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>. Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrOptionalMediationRegistry instead and then just get an IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its GetFor and GetCrudFor methods. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrCrudOptionalMediator.SendReadAllQuery(); Classic Optional typed mediator methods: No result: SendFor: execute any method from TWebApi SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand: create a TApiEntity SendCreateCommand<TModelEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand: delete the TApiEntity matching a TApiEntityKey You should finaly end with something like: optionalResult.Match(result => { // Oh yeah, you get a result! }, e => { // Oh no, something went wrong! });"
  },
  "articles/legacy/v4/config_policies.html": {
    "href": "articles/legacy/v4/config_policies.html",
    "title": "| Apizr",
    "keywords": "Configuring Policies Apizr comes with a Policy attribute to apply some policies on apis, handled by Polly. You’ll find also policy attributes dedicated to CRUD apis like CreatePolicy, ReadPolicy and so on… Polly will help you to manage some retry scenarios but can do more. Please refer to its official documentation if you’d like to know more about it. Registering Here is how to define a policy, adding it to a policy registry. var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; TransiantHttpError policy is actually provided by Polly itself, so we jsut call its HttpPolicyExtensions.HandleTransientHttpError() method. We're also giving here an OnLoggedRetry method provided by Apizr, so we coud get some logging outputs when Polly comes in the party in case of handled failures. PolicyRegistry is where you register all your named policies to be used by Polly thanks to attribute decoration, TransiantHttpError is just an example. Now we have to register our policy registry: Static Extended You'll be able to register your policy registry with this option: // direct configuration options => options.WithPolicyRegistry(registry) // OR factory configuration options => options.WithPolicyRegistry(() => registry) There's nothing specific to do with Apizr about Polly when using the extended approach. Just don't forget to register it like you usualy do: services.AddPolicyRegistry(registry); Defining Now we can use it thanks to attribute decoration: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } Here we are using it at assembly level, telling Apizr to apply TransiantHttpError policy to all apis. You can mix levels and mix policies as all will be wrapped. Using Apizr will automatically tell Polly to handle request of any decorated api method."
  },
  "articles/legacy/v4/config_priority.html": {
    "href": "articles/legacy/v4/config_priority.html",
    "title": "| Apizr",
    "keywords": "Configuring Priority Apizr could use Fusillade to offer some api priority management on calls. To be short, Fusillade is about: Auto-deduplication of relevant requests Request Limiting Request Prioritization Speculative requests Please refer to its official documentation if you’d like to know more about it. Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.Fusillade Then you'll be able to register with this option: options => options.WithPriorityManagement() Defining While defining your api interfaces using Apizr to send a request, you can add an int property param decorated with the provided Property attribute to your methods like: [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync([Priority] int priority); } Using Just call your api with your priority: var result = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync((int)Priority.Background));"
  },
  "articles/legacy/v4/config_refitsettings.html": {
    "href": "articles/legacy/v4/config_refitsettings.html",
    "title": "| Apizr",
    "keywords": "Configuring RefitSettings You can set RefitSettings thanks to this option: Static Extended // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(() => YourOwnRefitSettings) // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(serviceProvider => YourOwnRefitSettings) Warning AuthorizationHeaderValue Apizr provides its own AuthenticationHandler to manage authorization (see Configuring > Authentication). There's no need to use AuthorizationHeaderValue properties."
  },
  "articles/legacy/v4/gettingstarted_classic.html": {
    "href": "articles/legacy/v4/gettingstarted_classic.html",
    "title": "| Apizr",
    "keywords": "Defining We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Registering It's not required to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of an api interface: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.RegistrationMethodFactory(() => ApizrBuilder.CreateManagerFor<IReqResService>(options => options .WithPolicyRegistry(registry) .WithAkavacheCacheHandler()) ); We provided a policy registry and a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed api interface: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor<IReqResService>(options => options.WithAkavacheCacheHandler()); } We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Registering multiple interfaces Static Extended You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register a managed instance of multiple api interfaces: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry Add a manager for IHttpBinService api interface into the registry Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register multiple managed api interfaces manually: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Registering all scanned interfaces Static Extended Not available. Here is an example of how to auto register all scanned interfaces: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_INTERFACES); } Apizr will scan assemblies to auto register managers for decorated api interfaces. We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; public YouViewModel(IApizrManager<IReqResService> reqResManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _reqResManager = reqResManager; // Or registry injection //_reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request."
  },
  "articles/legacy/v4/gettingstarted_crud.html": {
    "href": "articles/legacy/v4/gettingstarted_crud.html",
    "title": "| Apizr",
    "keywords": "Defining As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what the provided interface looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { #region Create [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context); [Post(\"\")] Task<T> Create([Body] T payload, CancellationToken cancellationToken); [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context, CancellationToken cancellationToken); #endregion #region ReadAll [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll(CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, [Context] Context context, CancellationToken cancellationToken); #endregion #region Read [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Context] Context context); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, [Context] Context context, CancellationToken cancellationToken); #endregion #region Update [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context, CancellationToken cancellationToken); #endregion #region Delete [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context); [Delete(\"/{key}\")] Task Delete(TKey key, CancellationToken cancellationToken); [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context, CancellationToken cancellationToken); #endregion } We can see that it comes with many parameter combinations, but it won't do anything until you ask Apizr to. Caching, Logging, Policing, Prioritizing... everything is activable fluently with the options builder. About generic types: T and TKey (optional - default: int) meanings are obvious TReadAllResult (optional - default: IEnumerable<T>) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object>) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering It's not mandatory to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of the CRUD api interface: // Apizr registration myContainer.RegistrationMethod(() => ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")) ); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed CRUD api interface: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Registering multiple interfaces Static Extended You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register a managed instance of multiple api interfaces: // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddCrudManagerFor<T1>( options => options .WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options .WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); You may want to register multiple managed CRUD api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register multiple managed CRUD api interfaces manually: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddCrudManagerFor<T1>( options => options .WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options .WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); Registering all scanned interfaces Static Extended Not available. You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://mybaseuri.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (no more fluent declaration) (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T>) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object>) Then, here is a registration example: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_ENTITIES); } Apizr will scan assemblies to auto register managers for decorated entities. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _userCrudManager = userCrudManager; // Or registry injection //_userCrudManager = apizrRegistry.GetCrudManagerFor<User, int, PagedResult<User>, ReadAllUsersParams>>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync(api => api.ReadAll()); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request."
  },
  "articles/legacy/v5/config.html": {
    "href": "articles/legacy/v5/config.html",
    "title": "| Apizr",
    "keywords": "Configuring Many options could be set by attribute decoration and much more by fluent contextualized configuration, depending on what you're asking and where. You can configure the way your api request will be managed by Apizr at 3 different stages: Design time, by attribute decoration, when you first create your api interface Register time, by fluent options, when you actually register your api interfaces Request time, by fluent options, when you finally send the request to the api At Design time, everything is set by attribute like we used to with Refit, decorating at different levels like assembly, interface or method. At Register time, you'll get the possibility to share some options or not with several api interfaces registrations or not. At Request time, you'll get your last chance to adjust configuration before the request to be sent. As you can mix stages and levels while configuring, here is the configuration pipeline: 1 (Design): The assembly attribute configuration level set a configuration to all api interfaces contained into the assembly. 2 (Register): The fluent common configuration option takes over the previous one and set a configuration to all registered api interfaces. 3 (Design): The interface attribute configuration level takes over all the previous ones and set a configuration to a specific api interface. 4 (Register): The fluent proper or manager configuration option takes over all the previous ones and set a configuration to the registered api interface. 5 (Design): The method attribute configuration level takes over all the previous ones and set a configuration to a specific api interface method. 6 (Request): The fluent request configuration option takes over all the previous ones and set a configuration to the called api interface method. Let's take a quite complexe and dummy but exhaustive timeout configuration example to illustrate that pipeline. First, the design: [assembly:Timeout(\"00:02:00\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] [Timeout(\"00:01:30\")] public interface IReqResService { [Get(\"/users\")] [Timeout(\"00:01:00\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); } } Then, the registration: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>(properOptions => properOptions.WithTimeout(new TimeSpan(0,1,15))) .AddManagerFor<IHttpBinService>()), commonOptions => commonOptions .WithTimeout(new TimeSpan(0,1,45)) ); } Finally, the request: // reqResManager here is a resolved instance of IApizrManager<IReqResService>> var users = await reqResManager.ExecuteAsync((opt, api) => api.GetUsersAsync(opt), options => options.WithTimeout(new TimeSpan(0,0,45))); Now, guess when the request will time out? Here is how Apizr will take its decision about that: It first detects we set a global timeout of 00:02:00 (assembly attribute decoration) Then it detects we registered another global timeout of 00:01:45 (fluent common options) Then it detects we set an api timeout of 00:01:30 (interface attribute decoration) Then it detects we registered another api timeout of 00:01:15 (fluent proper options) Then it detects we set a request timeout of 00:01:00 (method attribute decoration) Then it detects we registered another request timeout of 00:00:45 (fluent request options) And the winner is allways the closest one to the request call, so here 00:00:45. Now you get the picture about the configuration pipeline, let's take a more meanful example. Here is what configuring with a registry, the extended way, could look like: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)) .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>( options => options .WithBaseAddress(\"https://reqres.in/api/users\"))), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } And here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Apply proper logging options dedicated to IHttpBinService's manager Add a manager for User entity with CRUD api interface and custom types into the registry, to register it into the container Apply proper address option dedicated to User's manager Apply common options to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) Are you still following? Don't worry! Every single option is detailed through this documentation, so let's browse it!"
  },
  "articles/legacy/v5/config_address.html": {
    "href": "articles/legacy/v5/config_address.html",
    "title": "| Apizr",
    "keywords": "Configuring base address You can configure base address either by attribute decoration or by fluent configuration. You can mix the configuration providing a base path by attribute and a base address/URI fluently. Attribute Fluent Configuring the base address by attribute allows you to use assembly scanning auto registration feature. Classic api You can set api interface base address or path thanks to the WebApi attribute like so: [WebApi(\"YOUR_API_INTERFACE_BASE_ADDRESS_OR_PATH/\")] public interface IYourApiInterface { // Your api interface methods } If you provided only a path, you must set the base address/URI fluently so that Apizr could merge it all together. Optional parameters: isAutoRegistrable (default: true) tells Apizr to include or not this specific interface while scanning assemblies for auto registration. It could be usefull when you ask for auto registration but want to do it fluently some specific interfaces. CRUD api You can set CRUD entity api base address thanks to the CrudEntity attribute like so: [CrudEntity(\"YOUR_CRUD_ENTITY_API_BASE_ADDRESS_OR_PATH_\")] public class YourCrudEntity { // Your CRUD entity properties } If you provided only a path, you must set the base address/URI fluently so that Apizr could merge it all together. Optional parameters: keyType: entity key type (default: null = typeof(int)) readAllResultType: ReadAll query result type (default: null = typeof(IEnumerable{})) readAllParamsType: ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) modelEntityType: Model entity type mapped with this api entity type (default: null = decorated api entity type) Configuring the base address fluently allows you to set it dynamically (e.g. based on settings) You can set the base address or a base path thanks to these options: // Address options => options.WithBaseAddress(YourSettings.YourBaseAddress)) // Path options => options.WithBasePath(YourSettings.YourBasePath)) The extended world offers another option with a factory providing a service provider instance. It could help you to resolve the setting at runtime: // Address options => options.WithBaseAddress(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBaseAddress)) // Path options => options.WithBasePath(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBasePath)) In both cases, you can mix the configurations like providing a base path by attribute and a base address/URI fluently. WithBaseAddress and WithBasePath options are available at both common and specific configuration level, meanning that you can share a base address with several api interfaces and/or set a specific one for some others."
  },
  "articles/legacy/v5/config_auth.html": {
    "href": "articles/legacy/v5/config_auth.html",
    "title": "| Apizr",
    "keywords": "Configuring authentication Apizr provides its own AuthenticationHandler to manage the authentication workflow . Defining As Apizr is based on Refit, you can decorate your authenticated apis like so (here with bearer authorization): namespace Apizr.Sample { [WebApi(\"https://httpbin.org/\")] public interface IHttpBinService { [Get(\"/bearer\")] [Headers(\"Authorization: Bearer\")] Task<HttpResponseMessage> AuthBearerAsync(); } } Tip Fluent Headers Note that you can either define headers at registration time with some fluent options. Configuring To activate this feature, you have to configure it thanks to the options builder: Static Extended options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( YourSettingsServiceInstance, settingsService => settingsService.Token, YourSignInServiceInstance, signInService => signInService.SignInAsync) // OR with service factory options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, () => YourSignInServiceInstance, signInService => signInService.SignInAsync) YourSettingsServiceInstance should be replaced by whatever settings manager instance of your choice YourSignInServiceInstance should be replaced by your service managing your login flow. options => options.WithAuthenticationHandler<ISettingsService, ISignInService>( settingsService => settingsService.Token, signInService => signInService.SignInAsync) settingsService is your service managing settings signInService is your service managing your login flow. Both services should be container registered as it will be resolved. In details: settingsService.Token should be a public string property, saved locally on device. signInService.SignInAsync should be a method taking an HttpRequestMessage parameter and returning a refreshed access token. More You may want to deal with authentication configuration in some other ways. Here are all other authentication options: Static Extended When you don't want Apizr to save the token anywhere neither refresh it, but just want to load it when needed: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token) // OR with service factory options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token) settingsService.Token should be here a public string property with a private setter, containing the token. When you don't want Apizr to save the token anywhere but want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) // Or with service factory options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (logger, options) => new YourAuthenticationHandler(...)) When you don't want Apizr to save the token anywhere neither refresh it, but just want to load it when needed: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token) settingsService.Token should be here a public string property with a private setter, containing the token. When you don't want Apizr to save the token anywhere but want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (serviceProvider, options) => new YourAuthenticationHandler(...)) Processing There's nothing more to deal with. Protected requests will be authenticated by Apizr, otherwise it will ask user to sign in. Anyway, here is the AuthenticationHandler's SendAsync method FYI: protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { HttpRequestMessage clonedRequest = null; string token = null; var context = request.GetOrBuildPolicyExecutionContext(); if (!context.TryGetLogger(out var logger, out var logLevel, out _, out _)) { logger = _logger; logLevel = _apizrOptions.LogLevel; } // See if the request has an authorize header var auth = request.Headers.Authorization; if (auth != null) { // Authorization required! Get the token from saved settings if available logger?.Log(logLevel, $\"{context.OperationKey}: Authorization required with scheme {auth.Scheme}\"); token = GetToken(); if (!string.IsNullOrWhiteSpace(token)) { // We have one, then clone the request in case we need to re-issue it with a refreshed token logger?.Log(logLevel, $\"{context.OperationKey}: Saved token will be used\"); clonedRequest = await this.CloneHttpRequestMessageAsync(request); } else { // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: No token saved yet. Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); } // Set the authentication header request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set\"); } // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request with authorization header...\"); var response = await base.SendAsync(request, cancellationToken).ConfigureAwait(false); // Check if we get an Unauthorized response with token from settings if (response.StatusCode == HttpStatusCode.Unauthorized && auth != null && clonedRequest != null) { logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized !\"); // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); // Set the authentication header with refreshed token clonedRequest.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set with refreshed token\"); // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request again but with refreshed authorization header...\"); response = await base.SendAsync(clonedRequest, cancellationToken).ConfigureAwait(false); } // Clear the token if unauthorized if (response.StatusCode == HttpStatusCode.Unauthorized) { token = null; logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized ! Token has been cleared\"); } // Save the refreshed token if succeed or clear it if not this.SetToken(token); logger?.Log(logLevel, $\"{context.OperationKey}: Token saved\"); return response; } The workflow: We check if the request needs to be authenticated If so, we try to load a previously saved token If there’s one, we clone the request in case we need to re-issue it with a refreshed token (as token could be rejected server side) If there’s not, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header with the token We finally send the request We check if we get an Unauthorized response If so and if it was sent with a saved token, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header of the cloned request with the refreshed token We send the cloned request We save the token if succeed or clear it if not We return the response"
  },
  "articles/legacy/v5/config_cancellation.html": {
    "href": "articles/legacy/v5/config_cancellation.html",
    "title": "| Apizr",
    "keywords": "Configuring Cancellation You may want to provide a CancellationToken, thanks to WithCancellation builder option, available at request time. try { // With static builder here but works the same with the extended one var reqResManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(); // Create your token source var cts = new CancellationTokenSource(); // Send the request with your token into options var users = await reqResManager.ExecuteAsync((opt, api) => api.GetUsersAsync(opt), options => options.WithCancellation(cts.Token)); // Do whatever with users here... } // Catching ApizrException with data caching catch (ApizrException<ApiResult<User>> ex) when (ex.InnerException is OperationCanceledException cancelEx) { // Handle canceled exception here with cached data } // OR catching ApizrException without data caching catch (ApizrException ex) when (ex.InnerException is OperationCanceledException cancelEx) { // Handle canceled exception here } // AND catching other exceptions catch (Exception ex) { // Handle other exceptions here } You may notice that you don't have to pass the token itself directly to the request anymore. Just pass the resulting options instead and everything will be wired for you. Don't forget to handle the right exception, depending if you enabled data caching feature or not."
  },
  "articles/legacy/v5/config_connectivity.html": {
    "href": "articles/legacy/v5/config_connectivity.html",
    "title": "| Apizr",
    "keywords": "Configuring Connectivity Apizr can check network connectivity for you, right before sending any request. It will throw an ApizrException with an IOException as InnerException in case of network failure, which you can handle globally by showing a snack bar info or whatever. This way, your viewmodels are kept light and clear of it. With boolean factory You may want to provide just a simple boolean value to check connectivity. Here is the right option: Static Extended options => options.WithConnectivityHandler(() => YourConnectivityBoolean) // Boolean factory options => options.WithConnectivityHandler(serviceProvider => YourConnectivityBoolean) // Boolean expression factory options => options.WithConnectivityHandler<IYourRegisteredConnectivityService>(service => service.YourConnectivityBoolean) With Connectivity Handler You could also implement the IConnectivityHandler interface: public class YourConnectivityHandler : IConnectivityHandler { public bool IsConnected() { // Check connectivity here } } Then just register it with this option: Static Extended // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(() => YourConnectivityHandler) // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(serviceProvider => YourConnectivityHandler) // OR closed generic configuration options => options.WithConnectivityHandler<YourConnectivityHandler>() // OR type configuration options => options.WithConnectivityHandler(typeof(YourConnectivityHandler))"
  },
  "articles/legacy/v5/config_context.html": {
    "href": "articles/legacy/v5/config_context.html",
    "title": "| Apizr",
    "keywords": "Configuring Context You may want to provide a Polly Context, thanks to WithContext builder option, available at both register and request time. Registering Requesting Configuring a context at register time allows you to get a pre-defined one while requesting. WithContext builder option is available with or without using registry. It means that you can share a context globally by setting it at registry level and/or set some specific one at api level. As it's not recomended to share the same context instance between requests, WithContext registration option comes with a factory registration only. Here is a quite simple scenario: var reqResUserManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(options => options .WithContext(() => new Context { { \"testKey1\", \"testValue1\" } })); And here is a pretty complexe scenario: private Context FirstContextFactory() => new() { { \"testKey1\", \"testValue1\" } }; private Context SecondContextFactory() => new() { { \"testKey2\", \"testValue2\" } }; private Context ThirdContextFactory() => new() { { \"testKey3\", \"testValue3\" } }; var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry .AddGroup(group => group .AddManagerFor<IReqResUserService>(options => options .WithContext(ThirdContextFactory)) .AddManagerFor<IReqResResourceService>(), options => options.WithContext(SecondContextFactory)) .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(), options => options.WithContext(FirstContextFactory)); Here I'm telling Apizr to: Merge all 3 context together and pass it while requesting with IReqResUserService api Merge first and second context and pass it while requesting with IReqResResourceService api Pass the first context while requesting with IHttpBinService api or User CRUD api Feel free to configure your context at the level of your choice, depending on your needs. You definitly can mix it all with request option context providing. Keep in mind that the closest key/value to the request will be the one used by Apizr. Configuring a context at request time allows you to set it at the very end, just before sending the request. var reqResManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var users = await reqResManager.ExecuteAsync(api => api.GetUsersAsync(), options => options.WithContext(() => new Context { { testKey4, testValue4 } })); You definitly can mix it with registration option context. You may notice that: strategy parameter let you adjust the behavior in case of mixing (default: Merge): Ignore: if there's another context yet configured, ignore this one Add: add or merge this context with any yet configured ones Replace: replace all yet configured context by this one Merge: add or merge this context with any yet configured ones"
  },
  "articles/legacy/v5/config_datacaching.html": {
    "href": "articles/legacy/v5/config_datacaching.html",
    "title": "| Apizr",
    "keywords": "Configuring data caching You may want to cache data returned from your API. Apizr could handle it for you by providing an ICachingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install the integration package of your choice: Project Current Upcoming Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Where: Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler implementation for MonkeyCache Warning Apizr.Extensions.Microsoft.Caching This integration package offers you to work with any of MS Extension Caching compatible caching engines. It means that you still have to install the one of your choice right after Apizr.Extensions.Microsoft.Caching. Defining Apizr comes with a Cache attribute which activate result data caching at any level (all Assembly apis, interface apis or specific api method). Here is classic api an example: namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\"), Cache(CacheMode.GetAndFetch, \"01:00:00\")] Task<UserList> GetUsersAsync(); [Get(\"/users/{userId}\"), Cache(CacheMode.GetOrFetch, \"1.00:00:00\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); } } You’ll find also cache attributes dedicated to CRUD apis like CacheRead and CacheReadAll, so you could define cache settings at any level (all Assembly apis, interface apis or specific CRUD method). Here is CRUD api an example: namespace Apizr.Sample.Models { [CrudEntity(\"https://reqres.in/api/users\", typeof(int), typeof(PagedResult<>))] [CacheReadAll(CacheMode.GetAndFetch, \"01:00:00\")] [CacheRead(CacheMode.GetOrFetch, \"1.00:00:00\")] public class User { [JsonProperty(\"id\")] public int Id { get; set; } [JsonProperty(\"first_name\")] public string FirstName { get; set; } [JsonProperty(\"last_name\")] public string LastName { get; set; } [JsonProperty(\"avatar\")] public string Avatar { get; set; } [JsonProperty(\"email\")] public string Email { get; set; } } } Both (classic and CRUD) define the same thing about cache life time and cache mode. Life time is actually a TimeSpan string representation which is parsed then. Its optional and if you don’t provide it, the default cache provider settings will be applyed. Cache mode could be set to: GetAndFetch (default): the result is returned from request if it succeed, otherwise from cache if there’s some data already cached. In this specific case of request failing, cached data will be wrapped with the original exception into an ApizrException thrown by Apizr, so don’t forget to catch it. GetOrFetch: the result is returned from cache if there’s some data already cached, otherwise from the request. In both cases, cached data is updated after each successful request call. You also can define global caching settings by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the lowest level settings it could find. Back to the example, we are saying: When getting all users, let’s admit we could have many new users registered each hour, so: Try to fetch it from web first if fetch failed, try to load it from previous cached result if fetch succeed, update cached data but make it expire after 1 hour When getting a specific user, let’s admit its details won’t change so much each day, so: Try to load it from cache first if no previous cached data or cache expired after 1 day, fetch it and update cached data but make it expire after 1 day Registering Please register the one corresponding to the package you just installed MS Extensions Caching As you can guess, MS Extensions Caching is available only with extended registration flavor. That said, you'll be able to register with one of the folowing options In-Memory Distributed // direct short configuration options => options.WithInMemoryCacheHandler() // OR closed type configuration options => options.WithCacheHandler<InMemoryCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(InMemoryCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new InMemoryCacheHandler(new YOUR_INMEMORY_CACHING_ENGINE())) // OR factory configuration with the service provider instance options => options.WithCacheHandler(serviceProvider => new InMemoryCacheHandler(serviceProvider.GetRequiredService<IMemoryCache>())) // direct short configuration options => options.WithDistributedCacheHandler<TCacheType>() // OR closed type configuration options => options.WithCacheHandler<DistributedCacheHandler<TCacheType>>() // OR type configuration options => options.WithCacheHandler(typeof(DistributedCacheHandler<TCacheType>)) // OR direct configuration options => options.WithCacheHandler(new DistributedCacheHandler<TCacheType>(new YOUR_DISTRIBUTED_CACHING_ENGINE())) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new DistributedCacheHandler<TCacheType>( serviceProvider.GetRequiredService<IDistributedCache>(), serviceProvider.GetRequiredService<IHttpContentSerializer>())) Where TCacheType could be either string or byte[], conforming to MS Extensions Distributed Cache definition. Warning Distributed cache Registering MS Extension Distributed Cache means that you have to install the distributed cache of your choice and register it too. Akavache You'll be able to register with one of the folowing options: Static Extended // direct short configuration options => options.WithAkavacheCacheHandler() // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(() => new AkavacheCacheHandler()) // direct short configuration options => options.WithAkavacheCacheHandler() // OR closed type configuration options => options.WithCacheHandler<AkavacheCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(AkavacheCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new AkavacheCacheHandler()) Where most of it get overloads so you could set: blobCacheFactory: The factory to init the blob cache of your choice (default: LocalMachine) applicationName: The application name used by Akavache (default: ApizrAkavacheCacheHandler) MonkeyCache Start by initializing Barrel.ApplicationId as you used to do with MonkeyCache: Barrel.ApplicationId = \"YOUR_APPLICATION_NAME\"; Then you'll be able to register with one of the folowing options: Static Extended // direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) // closed type configuration options => options.WithCacheHandler<MonkeyCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(MonkeyCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new MonkeyCacheHandler(Barrel.Current)) Warning Barrel.Current If you don't provide Barrel.Current to the MonkeyCacheHandler, don't forget to register it into your DI container. Using Reading Using Apizr caching feature is just about catching exceptions like for example: IList<User>? users = null; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList?.Data; } catch (ApizrException<UserList> e) { users = e.CachedResult?.Data; } finally { if (users != null && users.Any()) Users = new ObservableCollection<User>(users); } Here we catch an ApizrException<UserList> meaning that in case of exception, it will bring a typed object to you loaded from cache. Clearing You may need to clear cache. Remeber that cache will be cleared when it will expire, thanks to what you set within the Cache attribute. Anyway, sometime we need to clear it explicitly, like in a Refresh scenario. Here are different ways to clear cache: // Clear on call to force fetch and update cache var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync(), options => options.WithCacheClearing(true)); // Clear a specific request cache var succeed = await _reqResManager.ClearCacheAsync(api => api.GetUsersAsync()); // Clear all cache var succeed = await _reqResManager.ClearCacheAsync(); Clearing all cache of all managers of entire app could also be done thanks to your cache engine api."
  },
  "articles/legacy/v5/config_datamapping.html": {
    "href": "articles/legacy/v5/config_datamapping.html",
    "title": "| Apizr",
    "keywords": "Configuring data mapping You may need to map data between some API types and Model types, known as DTO design pattern. Apizr could handle it for you by providing an IMappingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install this integration package of your choice: Project Current Upcoming Apizr.Integrations.AutoMapper Apizr.Integrations.Mapster Where: Apizr.Integrations.AutoMapper package brings an IMappingHandler implementation for AutoMapper Apizr.Integrations.Mapster package brings an IMappingHandler implementation for Mapster Defining AutoMapper As usually with AutoMapper, define your mapping profiles, like for example: public class UserMinUserProfile : Profile { public UserMinUserProfile() { CreateMap<User, MinUser>() .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.FirstName)); CreateMap<MinUser, User>() .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.Name)); } } Mapster No need to write your own DTO classes. Mapster provides Mapster.Tool to help you generating models. And if you would like to have explicit mapping, Mapster also generates mapper class for you. [AdaptTo(\"[name]Dto\"), GenerateMapper] public class Student { ... } Then Mapster will generate: public class StudentDto { ... } public static class StudentMapper { public static StudentDto AdaptToDto(this Student poco) { ... } public static StudentDto AdaptTo(this Student poco, StudentDto dto) { ... } public static Expression<Func<Student, StudentDto>> ProjectToDto => ... } But you can also write your own mapping configuration, like for example: TypeAdapterConfig<TSource, TDestination> .NewConfig() .Ignore(dest => dest.Age) .Map(dest => dest.FullName, src => string.Format(\"{0} {1}\", src.FirstName, src.LastName)); Advanced Warning Data Mapping with MediatR and/or Optional If you plan to use MediatR and/or Optional integrations, one more defining step has to be done. Only for those of you planning to use data mapping with MediatR and/or Optional, Apizr provide a MappedWith attribute telling it to map api object with model object. You’ll find another MappedCrudEntity attribute dedicated to CRUD apis, coming with auto-registration capabilities, in case of access restricted to only local client model. We could get a model class mapped to an api one like: [MappedWith(typeof(User))] public class MinUser { public int Id { get; set; } public string Name { get; set; } } Registering AutoMapper Static Extended First create a MapperConfiguration with your profiles: var mapperConfig = new MapperConfiguration(config => { config.AddProfile<UserMinUserProfile>(); config.AddProfile<WhateverProfile>(); }); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler(mapperConfig) // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(mapperConfig.CreateMapper())) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(mapperConfig.CreateMapper())) First register AutoMapper as you used to do: services.AddAutoMapper(ASSEMBLIES_CONTAINING_PROFILES); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler() // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration with the service provider instance options => options.WithMappingHandler(serviceProvider => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR closed type configuration options => options.WithMappingHandler<AutoMapperMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(AutoMapperMappingHandler)) Mapster Static Extended Register with one of the following options: // direct short configuration options => options.WithMapsterMappingHandler(new Mapper()) // OR direct configuration options => options.WithMappingHandler(new MapsterMappingHandler(new Mapper())) // OR factory configuration options => options.WithMappingHandler(() => new MapsterMappingHandler(new Mapper())) First register Mapster as you used to do: var config = new TypeAdapterConfig(); // Or // var config = TypeAdapterConfig.GlobalSettings; services.AddSingleton(config); services.AddScoped<IMapper, ServiceMapper>(); Then you'll be able to register with this option: // direct short configuration options => options.WithMapsterMappingHandler() // OR closed type configuration options => options.WithMappingHandler<MapsterMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(MapsterMappingHandler)) Using You can tell Apizr to map data just by providing types when executing a request. Something like: var result = await reqResManager.ExecuteAsync<MinUser, User>((api, user) => api.CreateUser(user, CancellationToken.None), minUser); Here we give a MinUser typed object to Apizr, which will be mapped to User type just before sending it. Then Apizr will map the User typed result back to MinUser type just before returning it. There are much more overloads so you can map objects the way you need. The same while using MediatR and/or Optional."
  },
  "articles/legacy/v5/config_delegatinghandler.html": {
    "href": "articles/legacy/v5/config_delegatinghandler.html",
    "title": "| Apizr",
    "keywords": "Configuring DelegatingHandlers You can add DelegatingHandlers thanks to this option: Static Extended // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.AddDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.AddDelegatingHandler((logger, options) => YourDelegatingHandler) // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the service provider instance options => options.AddDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.AddDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) Warning Inner DelegatingHandler Do not try to manage delegating handlers hierarchy by yourself, providing any inner handlers. Instead, just add your handlers thanks to the AddDelegatingHandler option the order you want and Apizr will do it for you."
  },
  "articles/legacy/v5/config_exceptions.html": {
    "href": "articles/legacy/v5/config_exceptions.html",
    "title": "| Apizr",
    "keywords": "Configuring Exception handling Using Try/Catch Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request. Using Action<Exception> Instead of trycatching all the things, you may want to provide an exception handling action, thanks to WithExCatching builder option, available at both register and request time. You can set it thanks to this option: // direct configuration options => options.WithExCatching(OnException) Registering Requesting Configuring an exception handler at register time allows you to get some Global Exception Handling concepts right in place. WithExCatching builder option is available with or without using registry. It means that you can share your exception handler globally by setting it at registry level and/or set some specific one at api level. Here is a quite simple scenario: var reqResUserManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(options => options .WithExCatching(OnException)); private void OnException(ApizrException ex) { // this is a global exception handler // called back in case of exception thrown // while requesting with IReqResUserService managed api } And here is a pretty complexe scenario: var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry .AddGroup(group => group .AddManagerFor<IReqResUserService>(options => options .WithExCatching(OnReqResUserException, strategy: ApizrDuplicateStrategy.Add)) .AddManagerFor<IReqResResourceService>(), options => options.WithExCatching(OnReqResException, strategy: ApizrDuplicateStrategy.Add)) .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(), options => options.WithExCatching(OnException, strategy: ApizrDuplicateStrategy.Add)); private void OnException(ApizrException ex) { // this is a global exception handler // called back in case of exception thrown // while requesting with any managed api from the registry } private void OnReqResException(ApizrException ex) { // this is a group exception handler // called back in case of exception thrown // while requesting with any managed api from the group } private void OnReqResUserException(ApizrException ex) { // this is a dedicated exception handler // called back in case of exception thrown // while requesting with a specific managed api } Here I'm telling Apizr to: Call back all exception handlers in case of any exception thrown while requesting with IReqResUserService api Call back OnReqResException and OnException handlers in case of any exception thrown while requesting with IReqResResourceService api Call back only OnException handler in case of any exception thrown while requesting with IHttpBinService api or User CRUD api Feel free to configure your exception handlers at the level of your choice, depending on your needs. You definitly can mix it all with request option exception handling. Configuring an exception handler at request time allows you to set it at the very end, just before sending the request, like trycatching does. var reqResManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var users = await reqResManager.ExecuteAsync((options, api) => api.GetUsersAsync(options), options => options.WithExCatching(OnGetUsersException, strategy: ApizrDuplicateStrategy.Add)); private void OnGetUsersException(ApizrException<ApiResult<User>> ex) { // this is a dedicated exception handler // called back in case of exception thrown // while requesting with a specific managed api } Here I'm telling Apizr in case of exception while resting to: Call back any other registered exception handlers if any, thanks to Add duplicate strategy Call back OnGetUsersException (e.g. to display a dedicated message or something) Return result from cache to users if any You definitly can mix it with registration option exception handling. You may notice that: strategy parameter let you adjust the behavior in case of mixing (default: Replace): Ignore: if there's another handler yet configured, ignore this one Add: add/queue this handler, no matter of yet configured ones Replace: replace all yet configured handlers by this one Merge: add/queue this handler, no matter of yet configured ones letThrowOnExceptionWithEmptyCache parameter tells Apizr to throw the actual exception if there's no cached data to return Using Optional.Async Here is how we could handle exceptions using Optional.Async: var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Optional is pretty cool when trying to handle nullables and exceptions, but what if we still want to write it shorter to get our request done and managed with as less code as possible. Even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result matching boilerplate. Fortunately, Apizr provides some dedicated extensions to help getting things as short as we can with exceptions handled. With OnResultAsync OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult: this action will be invoked just before throwing any exception that might have occurred during request execution await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync(userList => { users = userList?.Data; }); Func<TResult, ApizrException<TResult>, bool> onResult: this function will be invoked with the returned result and potential occurred exception await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Func<TResult, ApizrException<TResult>, Task<bool>> onResult: this function will be invoked async with the returned result and potential occurred exception var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); All give you a result returned from fetch if succeed, or cache if failed (if configured). The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Of course, remember to catch throwing exceptions. With CatchAsync CatchAsync let you provide these parameters: Action<Exception> onException: this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache: True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one returns result from fetch or cache (if configured), no matter of potential exception handled on the other side by an action callback var userList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There’s some cached data? AsyncErrorHandler will handle the exception like to inform the user that call just failed Apizr will return the previous result from cache There’s no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal behavior) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled then One line of code to get all the thing done safely and shorter than ever!"
  },
  "articles/legacy/v5/config_headers.html": {
    "href": "articles/legacy/v5/config_headers.html",
    "title": "| Apizr",
    "keywords": "Configuring Headers You can configure headers at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration Designing Registering Requesting You can set headers at design time, decorating interfaces or methods with the Headers attribute provided by Refit. You definitly can set a global header by decorating an interface, then manage specific scenarios at method level. Apizr will apply the closest header value to the request it could find. Tip Please refer to Refit official documentation about header attribute. Note that decorating assembly is not available with Headers attribute. Configuring the headers fluently at register time allows you to set it dynamically (e.g. based on settings). First, please add the request options parameter to your api methods: [RequestOptions] IApizrRequestOptions options Now you can set headers thanks to this option: // direct configuration options => options.AddHeaders(\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\") // OR factory configuration options => options.AddHeaders(() => $\"HeaderKey3: {YourHeaderValue3}\") // OR extended factory configuration with the service provider instance options => options.AddHeaders(serviceProvider => $\"HeaderKey3: {serviceProvider.GetRequiredService<IYourSettingsService>().YourHeaderValue3}\") All headers fluent options are available with or without using registry. It means that you can share headers configuration, setting it at registry level and/or set some specific one at api level. Configuring the headers fluently at request time allows you to set it at the very end, just before sending the request. First, please add the request options parameter to your api methods: [RequestOptions] IApizrRequestOptions options You can now set headers thanks to this option: // direct configuration options => options.AddHeaders(\"HeaderKey1: HeaderValue1\", \"HeaderKey2: HeaderValue2\")"
  },
  "articles/legacy/v5/config_httpclient.html": {
    "href": "articles/legacy/v5/config_httpclient.html",
    "title": "| Apizr",
    "keywords": "Configuring HttpClient You can configure HttpClient by its Builder thanks to this option: Static Extended options => options.ConfigureHttpClient(httpClient => httpClient.WhateverOption = whateverValue) options => options.ConfigureHttpClientBuilder(httpClientBuilder => httpClientBuilder.WhateverOption()) Warning HttpClient Apizr makes use of its own HttpClient with its own primary handler, so keep in mind that you may override some of its features depending of what you're trying to do with it. Use with caution."
  },
  "articles/legacy/v5/config_httpclienthandler.html": {
    "href": "articles/legacy/v5/config_httpclienthandler.html",
    "title": "| Apizr",
    "keywords": "Configuring HttpClientHandler You can provide your own HttpClientHandler thanks to this option: Static Extended // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(() => YourOwnHttpClientHandler) // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(serviceProvider => YourOwnHttpClientHandler)"
  },
  "articles/legacy/v5/config_logger.html": {
    "href": "articles/legacy/v5/config_logger.html",
    "title": "| Apizr",
    "keywords": "Configuring logger Apizr v4+ relies on Microsoft.Extensions.Logging, which relies on any compatible logger of your choice. Apizr comes with a quite simple built-in Debug logger by default, but you'd better provide your own obviously. You can configure logger only by fluent configuration. Static Extended You can set logger configuration thanks to this option: options => options.WithLoggerFactory(LoggerFactory.Create(loggingBuilder => { loggingBuilder.AddConsole(); loggingBuilder.AddDebug(); })) LoggerFactory.Create method is provided by Microsoft.Extensions.Logging which lets you add any compatible logger. There's nothing specific to do with Apizr about logger when using the extended approach. Just don't forget to configure it like you usualy do: loggingBuilder.AddConsole() wherever in your app you get access to ILoggingBuilder."
  },
  "articles/legacy/v5/config_logging.html": {
    "href": "articles/legacy/v5/config_logging.html",
    "title": "| Apizr",
    "keywords": "Configuring logging You can adjust logging configuration with: httpTracerMode (default: Everything) Http traffic tracing mode: ExceptionsOnly logs only when an exception occurs ErrorsAndExceptionsOnly logs only when an exception or any error occurs Everything logs all, anytime trafficVerbosity (default: All) Http traffic tracing verbosity (see HttpTracer), with: None RequestBody RequestHeaders RequestCookies RequestAll = RequestBody | RequestHeaders | RequestCookies ResponseBody ResponseHeaders ResponseAll = ResponseBody | ResponseHeaders All = ResponseAll | RequestAll logLevels (default: [Low] Trace, [Medium] Information and [High] Critical) Log levels to apply while writing logs (see Microsoft.Enxtension.Logging), with: Trace Debug Information Warning Error Critical None Note that parameter logLevels is an array. It lets you provide from 0 to 3 different levels, as Apizr needs to get corresponding log level to each internal severity: Low: logs any internal and normal execution step Medium: logs all missconfigured things, like asking for cache without providing any cache provider High: logs errors and exceptions Obviously, providing more than 3 log levels would be pointlees. It means that: if you don't provide any log level at all, default levels will be applied ([Low] Trace, [Medium] Information and [High] Critical) if you provide only 1 log level like Information, it will be applied to all log entries ([Low] Information, [Medium] Information and [High] Information). Up to you to catch exceptions and to log it at any level of your choice. if you provide only 2 log levels like Debug and Error, the lowest will be applied to both Low and Medium ([Low] Debug, [Medium] Debug and [High] Error) if you provide 3 log levels like Debug, Warning and Critical, it will be applied like you said ([Low] Debug, [Medium] Warning and [High] Critical) if you provide more than 3 log levels, the lowest goes to Low, the highest to High and it will take the middle one for Medium if you provide a None at some point, it will disable logging for corresponding severity You can configure logging at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration. Designing Registering Requesting You can set logging configuration at design time, decorating with the provided Log attribute. Configuring logging with attribute allows you to use assembly scanning auto registration feature. The Log attribute could decorate: Assembly: to set logging configuration to all assembly api interfaces/entities Interface/Class: to set logging configuration to all request methods of the decorated api interface/entity Method: to set logging configuration to a specific request method of an api interface or entity (with dedicated attribtes) You also can mix decoration levels to set a common logging configuration to all assembly api interfaces, and/or a specific to all api interface methods, and/or a specific to an api interface method. [assembly:Log] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Log(HttpMessageParts.RequestAll, HttpTracerMode.ErrorsAndExceptionsOnly, LogLevel.Information)] public interface IReqResService { [Get(\"/api/users\"), Log(HttpMessageParts.RequestBody, HttpTracerMode.ExceptionsOnly, LogLevel.Warning)] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } In this example, we decided to apply the default logging configuration ([Low] Trace, [Medium] Information and [High] Critical) to all assembly api interfaces/entities. But you can adjust logging configuration thanks to attribute parameters. Configuring the logging fluently at register time allows you to set it dynamically (e.g. based on settings) You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) // OR static individual factory configuration options => options.WithLogging(() => Settings.HttpTracerMode, () => Settings.TrafficVerbosity, () => Settings.LogLevels) // OR static single factory configuration options => options.WithLogging(() => (Settings.HttpTracerMode, Settings.TrafficVerbosity, Settings.LogLevels)) // OR extended individual factory configuration options => options.WithLogging( serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().HttpTracerMode, serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().TrafficVerbosity serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().LogLevels) // OR extended single factory configuration options => options.WithLogging(servieProvider => { var settings = servieProvider.GetRequiredService<IYourSettingsService>(); return (settings.HttpTracerMode, settings.TrafficVerbosity, settings.LogLevels); }); All logging fluent options are available with or without using registry. It means that you can share logging configuration, setting it at registry level and/or set some specific one at api level. Configuring the logging fluently at request time allows you to set it at the very end, just before sending the request. You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) Note that you can mix design, register and request time logging configurations. In case of mixed configurations, the internal duplicate strategy will be to take the closest one to the request. Logging configuration duplicate strategy order: take fluent request configuration first if defined (request options) otherwise the request attribute decoration one (method) otherwise the fluent proper resgistration one (api proper options) otherwise the api attribute decoration one (interface) otherwise the fluent common resgistration one (registry common options) otherwise the global attribute decoration one (assembly)"
  },
  "articles/legacy/v5/config_mediatr.html": {
    "href": "articles/legacy/v5/config_mediatr.html",
    "title": "| Apizr",
    "keywords": "Configuring MediatR Apizr offers an integration with MediatR, following the Mediator pattern, available only with the extended approach. Mediator pattern ensures to keep all the thing as loosely coupled as we can between our ViewModel/ViewControler and our Data Access Layer. As everything should be loosely coupled between Views and ViewModels (MVVM) or ViewControlers (MVC) thanks to data binding, MediatR offers you to keep it all loosely coupled between your VM/VC and your DAL too. Please read the official documentation to know more about MediatR. The main benefit in using it with Apizr is to offer you a very simple and unified way to send your request, no matter from where or about what. Simple and unified because instead of injecting/resolving each api interface you need to get your data, you just have to use the IMediator interface, everywhere, every time. Registering Please first install this integration package: Project Current Upcoming Apizr.Integrations.MediatR Then you'll be able to register with this option: options => options.WithMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrMediator IApizrMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteUnitRequest<TWebApi>: execute any method from TWebApi ExecuteUnitRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteResultRequest<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data ExecuteResultRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadQuery<TResultData>: get the TResultData entity matching an int key ReadQuery<TResultData, TKey>: get the TResultData entity matching a TKey ReadAll: ReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters Create: CreateCommand<TModelData>: create a TModelData entity Update: UpdateCommand<TRequestData>: update the TRequestData entity matching an int key UpdateCommand<TKey, TRequestData>: update the TRequestData entity matching a TKey Delete: DeleteCommand<T>: delete the T entity matching an int key DeleteCommand<T, TKey>: delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator, you could do it with IApizrMediator or IApizrCrudMediator. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic mediator methods: No result: SendFor<TWebApi>: execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey>: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams>: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity>: create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey>: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey>: delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator, IApizrMediator or IApizrCrudMediator, you could do it with IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>. Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrMediationRegistry instead and then just get an IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its Get methods. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery(); Classic typed mediator methods: No result: SendFor: execute any method from TWebApi SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand: create a TApiEntity SendCreateCommand<TModelEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand: delete the TApiEntity matching a TApiEntityKey"
  },
  "articles/legacy/v5/config_optional.html": {
    "href": "articles/legacy/v5/config_optional.html",
    "title": "| Apizr",
    "keywords": "Configuring Optional.Async Apizr offers an integration with Optional.Async, following the Optional pattern, available only with the extended approach with MediatR integration activated. Optional.Async offers a strongly typed alternative to null values that lets you: Avoid those pesky null-reference exceptions Signal intent and model your data more explicitly Cut down on manual null checks and focus on your domain It allows you to chain Task<Option<T>> and Task<Option<T, TException>> without having to use await Registering Please first install this integration package: Project Current Upcoming Apizr.Integrations.Optional Then you'll be able to register with this option: options => options.WithOptionalMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrOptionalMediator IApizrOptionalMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var optionalResult = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteOptionalUnitRequest<TWebApi>: execute any method from TWebApi ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteOptionalResultRequest<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadOptionalQuery<TResultData>: get the TResultData entity matching an int key ReadOptionalQuery<TResultData, TKey>: get the TResultData entity matching a TKey ReadAll: ReadAllOptionalQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllOptionalQuery<TReadAllParams, TReadAllResult>: get TReadAllResult with TReadAllParams optional query parameters Create: CreateOptionalCommand<TModelData>: create a TModelData entity Update: UpdateOptionalCommand<TRequestData>: update the TRequestData entity matching an int key UpdateOptionalCommand<TKey, TRequestData>: update the TRequestData entity matching a TKey Delete: DeleteOptionalCommand<T>: delete the T entity matching an int key DeleteOptionalCommand<T, TKey>: delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator, you could do it with IApizrMediator or IApizrCrudMediator. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrOptionalCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic Optional mediator methods: No result: SendFor<TWebApi>: execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD Optional mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey>: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult>: get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams>: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity>: create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey>: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey>: delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator, IApizrOptionalMediator or IApizrCrudOptionalMediator, you could do it with IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>. Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrOptionalMediationRegistry instead and then just get an IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its GetFor and GetCrudFor methods. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrCrudOptionalMediator.SendReadAllQuery(); Classic Optional typed mediator methods: No result: SendFor: execute any method from TWebApi SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData>: execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData>: execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>: execute any method from TWebApi, sending TApiRequestData mapped from TModelRequestData, then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery: get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity>: get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery: get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult>: get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand: create a TApiEntity SendCreateCommand<TModelEntity>: create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand: update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity>: update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand: delete the TApiEntity matching a TApiEntityKey You should finaly end with something like: optionalResult.Match(result => { // Oh yeah, you get a result! }, e => { // Oh no, something went wrong! });"
  },
  "articles/legacy/v5/config_policies.html": {
    "href": "articles/legacy/v5/config_policies.html",
    "title": "| Apizr",
    "keywords": "Configuring Policies Apizr comes with a Policy attribute to apply some policies on apis, handled by Polly. You’ll find also policy attributes dedicated to CRUD apis like CreatePolicy, ReadPolicy and so on… Polly will help you to manage some retry scenarios but can do more. Please refer to its official documentation if you’d like to know more about it. Registering Here is how to define a policy, adding it to a policy registry. var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; TransiantHttpError policy is actually provided by Polly itself, so we jsut call its HttpPolicyExtensions.HandleTransientHttpError() method. We're also giving here an OnLoggedRetry method provided by Apizr, so we coud get some logging outputs when Polly comes in the party in case of handled failures. PolicyRegistry is where you register all your named policies to be used by Polly thanks to attribute decoration, TransiantHttpError is just an example. Now we have to register our policy registry: Static Extended You'll be able to register your policy registry with this option: // direct configuration options => options.WithPolicyRegistry(registry) // OR factory configuration options => options.WithPolicyRegistry(() => registry) There's nothing specific to do with Apizr about Polly when using the extended approach. Just don't forget to register it like you usualy do: services.AddPolicyRegistry(registry); Defining Now we can use it thanks to attribute decoration: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } Here we are using it at assembly level, telling Apizr to apply TransiantHttpError policy to all apis. You can mix levels and mix policies as all will be wrapped. Using Apizr will automatically tell Polly to handle request of any decorated api method."
  },
  "articles/legacy/v5/config_priority.html": {
    "href": "articles/legacy/v5/config_priority.html",
    "title": "| Apizr",
    "keywords": "Configuring Priority Apizr could use Fusillade to offer some api priority management on calls. To be short, Fusillade is about: Auto-deduplication of relevant requests Request Limiting Request Prioritization Speculative requests Please refer to its official documentation if you’d like to know more about it. Installing Please first install this integration package: Project Current Upcoming Apizr.Integrations.Fusillade You can configure priority at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration Designing Registering Requesting The first thing to do while designing your api interfaces using Apizr to send a request, is to add an IApizrRequestOptions param decorated with the provided RequestOptions attribute to your methods like: [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/users/{userId}\")] Task<UserDetails> GetUserAsync(int userId, [RequestOptions] IApizrRequestOptions options); } This way you'll make sure to pass your priority to the priority handler, defined thanks to request options builder at request time. Another way to deal with priority at design time is to use the PriorityAttribute: [assembly:Priority(Priority.UserInitiated)] namespace Your.Namespace { [WebApi(\"https://reqres.in/api\"), Priority(Priority.Background)] public interface IReqResService { [Get(\"/users\"), Priority(Priority.Speculative)] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/users/{userId}\")] Task<UserDetails> GetUserAsync(int userId, [RequestOptions] IApizrRequestOptions options); } } Here I'm saying: Send all requests of all apis with a default UserInitiated priority (the assembly one) Excepted for all the requests of the IReqResService with a Background priority instead (the interface one) Excepted for any GetUsersAsync request with a Speculative priority instead (the method one) Of course, you could (should) mix it with the RequestOptions method parameter implementation, so you could change your mind at request time with the request options builder. Designing your apis using PriorityAttribute or not, you still have to activate priority management at register time. By activating it, you're free to provide a priority or not. Here is how to activate it, thanks to the WithPriority extension method: // activation configuration only options => options.WithPriority() // activation with default priority configuration options => options.WithPriority(Priority.Background) // activation with default custom priority configuration options => options.WithPriority(70) All priority fluent options are available with and without using registry. It means that you can share priority configuration, setting it at registry level and/or set some specific one at api level, something like: var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry .AddGroup(group => group .AddManagerFor<IReqResUserService>(options => options .WithPriority(Priority.UserInitiated)) .AddManagerFor<IReqResResourceService>(), options => options.WithPriority(Priority.Background)) .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(options => options .WithBaseAddress(\"https://reqres.in/api/users\") .WithPriority(Priority.Speculative)), options => options.WithPriority()); In this quite complexe example, we can see we defined some default priorities to apply at deferent levels. Just call your api with your priority thanks to the request options builder (extension method): var result = await _reqResManager.ExecuteAsync((opt, api) => api.GetUsersAsync(opt), options => options.WithPriority(Priority.Background)); Note that you can mix design, register and request time priority configurations. In case of mixed configurations, the internal duplicate strategy will be to take the closest one to the request. Priority configuration duplicate strategy order: take fluent request configuration first if defined (request options) otherwise the request attribute decoration one (method) otherwise the fluent proper resgistration one (api proper options) otherwise the api attribute decoration one (interface) otherwise the fluent common resgistration one (registry common options) otherwise the global attribute decoration one (assembly)"
  },
  "articles/legacy/v5/config_refitsettings.html": {
    "href": "articles/legacy/v5/config_refitsettings.html",
    "title": "| Apizr",
    "keywords": "Configuring RefitSettings You can set RefitSettings thanks to this option: Static Extended // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(() => YourOwnRefitSettings) // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(serviceProvider => YourOwnRefitSettings) Warning AuthorizationHeaderValue Apizr provides its own AuthenticationHandler to manage authorization (see Configuring > Authentication). There's no need to use AuthorizationHeaderValue properties."
  },
  "articles/legacy/v5/config_timeout.html": {
    "href": "articles/legacy/v5/config_timeout.html",
    "title": "| Apizr",
    "keywords": "Configuring Timeout There's actually two kind of client timeout: Request timeout which is set to each request try Operation timeout which is set to overall request tries Both of it will throw a TimeoutRejectedException when time is out. If you configured a retry policy handling TimeoutRejectedException: with a request timeout, the request will be sent again by Polly with your defined request timeout set to each individual try. with an operation timeout, Polly will stop sending retries if the operation timeout timed out. Otherwise, if you didn't configure any retry policy handling TimeoutRejectedException, request timeout will behave like an operation timeout, so it doesn't matter which one you defined. You can configure a timeout at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration Designing Registering Requesting Apizr comes with a RequestTimeout and an OperationTimeout attribute which set a timeout at any level (all Assembly apis, interface apis or specific api method). Here is classic api an example: namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\"), OperationTimeout(\"00:03:00\")] public interface IReqResService { [Get(\"/users\"), RequestTimeout(\"00:01:00\")] Task<UserList> GetUsersAsync(); [Get(\"/users/{userId}\"), RequestTimeout(\"00:00:30\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); } } You’ll find the same timeout attributes dedicated to CRUD apis (the ones starting with Read, ReadAll, Create, Update and Delete prefix), so you could define timeout settings at any level (all Assembly apis, interface apis or specific CRUD method). Here is CRUD api an example: namespace Apizr.Sample.Models { [CrudEntity(\"https://reqres.in/api/users\", typeof(int), typeof(PagedResult<>))] [OperationTimeout(\"00:03:00\")] [ReadAllRequestTimeout(\"00:01:00\")] [ReadRequestTimeout(\"00:00:30\")] public class User { [JsonProperty(\"id\")] public int Id { get; set; } [JsonProperty(\"first_name\")] public string FirstName { get; set; } [JsonProperty(\"last_name\")] public string LastName { get; set; } [JsonProperty(\"avatar\")] public string Avatar { get; set; } [JsonProperty(\"email\")] public string Email { get; set; } } } Both (classic and CRUD) attributes define the same thing about timeout. The attribute value is actually a TimeSpan string representation which is parsed then. You definitly can set a global timeout by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the closest timeout settings to the request it could find. Back to previous examples, we are saying that: in details, any request try shouldn't take longer than: 1 min for GetUsers/ReadAll 30 sec for GetUser/Read in general, we don't want the user to wait too much, so let's retry if needed, but not longer than 3 min overall. Configuring a timeout fluently at register time allows you to set it dynamically (e.g. based on settings). You can set a request timeout thanks to this option: // direct configuration options => options.WithRequestTimeout(YOUR_TIMESPAN) // OR factory configuration options => options.WithRequestTimeout(() => YOUR_TIMESPAN) // OR extended factory configuration with the service provider instance options => options.WithRequestTimeout(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YOUR_TIMESPAN) And/or you can set an operation timeout thanks to this option: // direct configuration options => options.WithOperationTimeout(YOUR_TIMESPAN) // OR factory configuration options => options.WithOperationTimeout(() => YOUR_TIMESPAN) // OR extended factory configuration with the service provider instance options => options.WithOperationTimeout(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YOUR_TIMESPAN) All timeout fluent options are available with or without using registry. It means that you can share timeout configuration, setting it at registry level and/or set some specific one at api level. Configuring a timeout fluently at request time allows you to set it at the very end, just before sending the request. First, please add the request options parameter to your api methods: [RequestOptions] IApizrRequestOptions options You can set a request timeout thanks to this option: // direct configuration options => options.WithRequestTimeout(YOUR_TIMESPAN) And/or you can set an operation timeout thanks to this option: // direct configuration options => options.WithOperationTimeout(YOUR_TIMESPAN)"
  },
  "articles/legacy/v5/config_transfer.html": {
    "href": "articles/legacy/v5/config_transfer.html",
    "title": "| Apizr",
    "keywords": "Configuring file transfer Apizr could extend its core features with file transfer management thanks to a dedicated integration package. Once installed, you'll be able to: Register upload, download or transfer (both) managers Upload files with dedicated methods Download files with dedicated methods Track transfer progress with a dedicated progress handler Installing Please first install one of these integration packages, depending of your needs: Project Registration Current Upcoming Apizr.Integrations.FileTransfer Static Apizr.Extensions.Microsoft.FileTransfer MS Extensions Apizr.Integrations.FileTransfer.MediatR MS Extensions with MediatR Apizr.Integrations.FileTransfer.Optional MS Extensions with MediatR & Optional Designing File Transfer package comes with some built-in apis son you don't have to create it yourself. Here is what the provided apis look like then: Upload Download Transfer public interface IUploadApi<TApiResultData> : ITransferApiBase { #region ByteArrayPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart, string path); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] ByteArrayPart byteArrayPart, string path, [RequestOptions] IApizrRequestOptions options); #endregion #region StreamPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart, string path); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] StreamPart streamPart, string path, [RequestOptions] IApizrRequestOptions options); #endregion #region FileInfoPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart); [Multipart] [Post(\"/{filePath}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart, string filePath); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{filePath}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync([AliasAs(\"file\")] FileInfoPart fileInfoPart, string filePath, [RequestOptions] IApizrRequestOptions options); #endregion } public interface IUploadApi : IUploadApi<HttpResponseMessage> { } The Upload api offers you the choice between ByteArray, Stream or FileInfo sources. You can set your own return type or use the default HttpResponseMessage one. filePath is an unesacped uri file path optionaly provided at request time, in case you want to use the same api for different uris. public interface IDownloadApi<in TDownloadParams> : ITransferApiBase { [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, [RequestOptions] IApizrRequestOptions options); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams, [RequestOptions] IApizrRequestOptions options); } public interface IDownloadApi : IDownloadApi<IDictionary<string, object>> { } The Download api could be used with IDictionary<string, object> parameter type by default thanks to IDownloadApi or any provided custom type thanks to IDownloadApi<TDownloadParams>. If you don't need it you'll definitly be able to ignore it. filePathOrName is an unesacped uri file path provided at request time, so you could use the same api for different uris. public interface ITransferApi<in TDownloadParams, TUploadApiResultData> : IDownloadApi<TDownloadParams>, IUploadApi<TUploadApiResultData> { } public interface ITransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage>, IDownloadApi, IUploadApi { } The Transfer api inherits from both the upload and the download one, in case you want to deal with the both of it from the same api. One may have only one transfer endpoint with no dynamic path to deal with, so there's nothing more to design here. Other may have several transfer endpoints or some dynamic paths to deal with: feeling confortable with setting it at request time, so there's nothing more to design here. preferring getting a dedicated api with preconfigured base uri, so he should: create his own named and blank api interface make sure to inherit from one of the above apis define its base uri thanks to the WebApi attribute decoration Registering Designing your custom transfer apis or using the built-in ones directly, you still have to register you apis. Where you could register it as we used to do it with any other apis, FileTransfer package comes with some wrapping managers helping you to get things short and simple. Note Upload/Download/Transfer Following exemples use the Transfer manager but you definitly can use the Upload or the Download ones instead. Registering a single manager Static Extended MediatR Optional // register the built-in transfer api var transferManager = ApizrBuilder.Current.CreateTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // Or register the built-in transfer api with custom types var transferManager = ApizrBuilder.Current.CreateTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register a custom transfer api var transferManager = ApizrBuilder.Current.CreateTransferManagerFor<ITransferSampleApi>(); Here you go with your Transfer manager instance. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>(); Then, get your Transfer manager instance by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferMediation()); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferMediation()); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>( options => options.WithFileTransferMediation()); Then, get an Apizr mediator instance by resolving/injecting IApizrMediator to send some transfer requests. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferOptionalMediation()); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferOptionalMediation()); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>( options => options.WithFileTransferOptionalMediation()); Then, get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator to send some transfer requests returning optional results. Registering multiple managers Static Extended MediatR Optional var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>()); Then, get your Transfer manager instance by calling: // for the built-in transfer api var transferManager = apizrRegistry.GetTransferManager(); // OR for a custom transfer api var transferManager = apizrRegistry.GetTransferManagerFor<ITransferSampleApi>(); services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>()); Then, get your Transfer manager instance directly by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one. You otherwise can resolve/inject IApizrExtendedRegistry to get the regisrty instance itself and then get your Transfer manager instance by calling: // for the built-in transfer api var transferManager = apizrRegistry.GetTransferManager(); // OR for the built-in transfer api with custom types var transferManager = apizrRegistry.GetTransferManagerWith<MyDownloadParamType, MyUploadResultType>(); // OR for a custom transfer api var transferManager = apizrRegistry.GetTransferManagerFor<ITransferSampleApi>(); services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>(), config => config.WithFileTransferMediation()); Then, get an Apizr mediator instance by resolving/injecting IApizrMediator to send some transfer requests. For more info about MediatR intergration, see Configuring MediatR. services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>(), config => config.WithFileTransferOptionalMediation()); Then, get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator to send some transfer requests returning optional results. For more info about Optional.Async intergration, see Configuring Optional.Async. You definitly can group registrations if needed like illustrated into the Getting started. Note that auto registration thanks to assembly scanning is not yet available for this package. Requesting Static Extended MediatR Optional Once you get an instance of your manager, here is how to play with it: var transferResult = await transferManager.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Note that if you're in that case where you need to set a custom path dynamically at request time, here is how to do that: var transferResult = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithDynamicPath(\"YOUR_DYNAMIC_PATH_HERE\")); If you registered with the registry, some provided shortcut methods could help you to write things without the need of the manager. You can call download or upload methods directly from the registry itself. // for the built-in transfer api var transferResult = await registry.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await registry.DownloadWithAsync<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await registry.DownloadAsync<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Once you get an instance of your manager by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one, here is how to play with it: var transferResult = await transferManager.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Note that if you're in that case where you need to set a custom path dynamically at request time, here is how to do that: var transferResult = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithDynamicPath(\"YOUR_DYNAMIC_PATH_HERE\")); If you registered with the registry, some provided shortcut methods could help you to write things without the need of the manager. You can call download or upload methods directly from the registry itself. // for the built-in transfer api var transferResult = await registry.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await registry.DownloadWithAsync<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await registry.DownloadAsync<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Once you get an Apizr mediator instance by resolving/injecting IApizrMediator, here is how to play with it: // for the built-in transfer api var transferResult = await apizrMediator.SendDownloadQuery( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await apizrMediator.SendDownloadWithQuery<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await apizrMediator.SendDownloadQuery<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); For more info about MediatR intergration, see Configuring MediatR. Once you get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator, here is how to play with it: // for the built-in transfer api var transferOptionalResult = await apizrOptionalMediator.SendDownloadOptionalQuery( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await apizrMediator.SendDownloadWithOptionalQuery<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferOptionalResult = await apizrOptionalMediator.SendDownloadOptionalQuery<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); For more info about Optional.Async intergration, see Configuring Optional.Async. Tracking progress This package can let you track any progress while downloading or uploading a file. First, create an ApizrProgress instance like so: var progress = new ApizrProgress(); progress.ProgressChanged += (sender, args) => { // Do whatever you want when progress reported var percentage = args.ProgressPercentage; }; From here, you may want to track all transfer requests globally or some of it locally when ask for. Globally Locally Just provide your ApizrProgress instance with options builder at registration time: options => options.WithProgress(progress); And that's it, you'll be notified when any transfer progress of any transfer request occcured, like for: var fileInfo = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); You have to tell Apizr that you want to track progress with options builder at registration time: options => options.WithProgress() Then you can track progress of any transfer request of your choice, by providing your ApizrProgress instance with options builder at request time: var fileInfo = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithProgress(progress));"
  },
  "articles/legacy/v5/gettingstarted_classic.html": {
    "href": "articles/legacy/v5/gettingstarted_classic.html",
    "title": "| Apizr",
    "keywords": "Defining We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Actually, you should consider to add a special parameter called RequestOptions to each methods, allowing some option adjustments later at request time: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, [RequestOptions] IApizrRequestOptions options); [Post(\"/api/users\")] Task<User> CreateUser(User user, [RequestOptions] IApizrRequestOptions options); } } Registering It's not required to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of an api interface: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.RegistrationMethodFactory(() => ApizrBuilder.Current.CreateManagerFor<IReqResService>(options => options .WithPolicyRegistry(registry) .WithAkavacheCacheHandler()) ); We provided a policy registry and a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed api interface: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor<IReqResService>(options => options.WithAkavacheCacheHandler()); } We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Static Extended // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry Add a manager for IHttpBinService api interface into the registry Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could resolve it to get its managers, instead of resolving each managers. Here is how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Static Extended // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging(HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (users) Add a manager for IReqResResourceService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (resources) Add a manager for IHttpBinService api interface into the registry with a speific base address (https://httpbin.org) Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (users), to register it into the container Add a manager for IReqResResourceService api interface into the registry with a common base address (https://reqres.in/api) and a specific base path (resources), to register it into the container Add a manager for IHttpBinService api interface into the registry with a speific base address (https://httpbin.org), to register it into the container Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: var reqResUserManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var reqResResourceManager = apizrRegistry.GetManagerFor<IReqResResourceService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Registering all scanned interfaces Static Extended Not available. Here is an example of how to auto register all scanned interfaces: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_INTERFACES); } Apizr will scan assemblies to auto register managers for decorated api interfaces. We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; //private readonly IApizrRegistry _apizrRegistry; public YouViewModel(IApizrManager<IReqResService> reqResManager) // OR registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _reqResManager = reqResManager; // OR registry injection //_apizrRegistry = apizrRegistry; // Or registry injection AND getting the manager //_reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); // OR with dedicated registry shortcut extension // var userList = await _apizrRegistry.ExecuteAsync<IReqResService>(api => api.GetUsersAsync()); // OR with some option adjustments // var userList = await _reqResManager.ExecuteAsync((options, api) => api.GetUsersAsync(options), // options => options.WithPriority(Priority.Background)); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request."
  },
  "articles/legacy/v5/gettingstarted_crud.html": {
    "href": "articles/legacy/v5/gettingstarted_crud.html",
    "title": "| Apizr",
    "keywords": "Defining As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what the provided interface looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, [RequestOptions] IApizrRequestOptions options); [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([RequestOptions] IApizrRequestOptions options); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [RequestOptions] IApizrRequestOptions options); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [RequestOptions] IApizrRequestOptions options); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [RequestOptions] IApizrRequestOptions options); [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, [RequestOptions] IApizrRequestOptions options); } We can see that it comes with or without request options, allowing some option adjustments later at request time. About generic types: T and TKey (optional - default: int) meanings are obvious TReadAllResult (optional - default: IEnumerable<T>) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object>) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering It's not mandatory to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of the CRUD api interface: // Apizr registration myContainer.RegistrationMethod(() => ApizrBuilder.Current.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")) ); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed CRUD api interface: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int. TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T>. TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object>. You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Static Extended // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Static Extended // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a common base address (https://crud.io/api) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a common base address (https://crud.io/api) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry Set a specific base address (https://crud.com/api) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a common base address (https://crud.io/api) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a common base address (https://crud.io/api) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific base address (https://crud.com/api) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); // T3 with default registered types var t3Manager = apizrRegistry.GetCrudManagerFor<T3>(); Registering all scanned interfaces Static Extended Not available. You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://mybaseuri.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (no more fluent declaration) (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T>) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object>) Then, here is a registration example: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_ENTITIES); } Apizr will scan assemblies to auto register managers for decorated entities. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _userCrudManager = userCrudManager; // Or registry injection //_userCrudManager = apizrRegistry.GetCrudManagerFor<User, int, PagedResult<User>, ReadAllUsersParams>>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync(api => api.ReadAll()); // OR with some option adjustments // var userList = await _userCrudManager.ExecuteAsync((options, api) => api.ReadAll(options), // options => options.WithPriority(Priority.Background)); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request."
  },
  "articles/legacy/v5/tools.html": {
    "href": "articles/legacy/v5/tools.html",
    "title": "| Apizr",
    "keywords": "Tools You'll find here some tools around Apizr helping to get things up and runing, the quick and easy way"
  },
  "articles/legacy/v5/tools_nswag.html": {
    "href": "articles/legacy/v5/tools_nswag.html",
    "title": "| Apizr",
    "keywords": "NSwag Apizr comes with a tool called Apizr.Tools.NSwag that offers to get all files generated by a couple of command lines. It relies on the well known NSwag CLI, letting define all we need in a json configuration file, and generating models, services and a registration helper class. Installing The first time you plan to use the tool, start by installing it: Project Current Upcoming Apizr.Tools.NSwag > dotnet tool install --global Apizr.Tools.NSwag Configuring With Apizr.Tools.NSwag installed, navigate to the directory of your choice (the one where you want to generate files). Create a configuration file The first time you plan to use the tool for an api, you need to navigate to your target output folder and then run the new command: > apizr new From here, you'll get your apizr.json default configuration file into your current directory, looking like: { \"codeGenerators\": { \"openApiToApizrClient\": { \"registrationType\": \"Both\", \"withPriority\": false, \"withRetry\": false, \"withLogs\": false, \"withRequestOptions\": false, \"withCacheProvider\": \"None\", \"withMediation\": false, \"withOptionalMediation\": false, \"withMapping\": \"None\", \"className\": \"{controller}\", \"operationGenerationMode\": \"MultipleClientsFromOperationId\", \"additionalNamespaceUsages\": [], \"additionalContractNamespaceUsages\": [], \"generateOptionalParameters\": false, \"generateJsonMethods\": false, \"enforceFlagEnums\": false, \"parameterArrayType\": \"System.Collections.Generic.IEnumerable\", \"parameterDictionaryType\": \"System.Collections.Generic.IDictionary\", \"responseArrayType\": \"System.Collections.Generic.ICollection\", \"responseDictionaryType\": \"System.Collections.Generic.IDictionary\", \"wrapResponses\": false, \"wrapResponseMethods\": [], \"generateResponseClasses\": true, \"responseClass\": \"SwaggerResponse\", \"namespace\": \"MyNamespace\", \"requiredPropertiesMustBeDefined\": true, \"dateType\": \"System.DateTimeOffset\", \"jsonConverters\": null, \"anyType\": \"object\", \"dateTimeType\": \"System.DateTimeOffset\", \"timeType\": \"System.TimeSpan\", \"timeSpanType\": \"System.TimeSpan\", \"arrayType\": \"System.Collections.Generic.List\", \"arrayInstanceType\": \"System.Collections.Generic.List\", \"dictionaryType\": \"System.Collections.Generic.IDictionary\", \"dictionaryInstanceType\": \"System.Collections.Generic.Dictionary\", \"arrayBaseType\": \"System.Collections.ObjectModel.Collection\", \"dictionaryBaseType\": \"System.Collections.Generic.Dictionary\", \"classStyle\": \"Poco\", \"jsonLibrary\": \"NewtonsoftJson\", \"generateDefaultValues\": true, \"generateDataAnnotations\": true, \"excludedTypeNames\": [], \"excludedParameterNames\": [], \"handleReferences\": false, \"generateImmutableArrayProperties\": false, \"generateImmutableDictionaryProperties\": false, \"jsonSerializerSettingsTransformationMethod\": null, \"inlineNamedArrays\": false, \"inlineNamedDictionaries\": false, \"inlineNamedTuples\": true, \"inlineNamedAny\": false, \"generateDtoTypes\": true, \"generateOptionalPropertiesAsNullable\": false, \"generateNullableReferenceTypes\": false, \"templateDirectory\": null, \"typeNameGeneratorType\": null, \"propertyNameGeneratorType\": null, \"enumNameGeneratorType\": null, \"serviceHost\": null, \"serviceSchemes\": null, \"output\": null, \"newLineBehavior\": \"Auto\" } }, \"runtime\": \"Net70\", \"defaultVariables\": null, \"documentGenerator\": { \"fromDocument\": { \"url\": \"http://redocly.github.io/redoc/openapi.yaml\", \"output\": null, \"newLineBehavior\": \"Auto\" } } } Adjust configuration in file Open your apizr.json file to edit the configuration. Most of its settings are coming from NSwag configuration document definition as OpenApiToApizrClient comes from OpenApiToCSharpClient. It means that you can adjust everything you used to with classic NSwag generation. Some of it must be adjusted: into the openApiToApizrClient section: namespace: the namespace used into generated files output: a sub directory where to put generated files into the fromDocument section: url: the openapi json or yaml definition url Warning Minimal adjustments Like for classic NSwag generation, you must at least complete these 3 settings. If not, nothing wil be generated. That said, let's focus on Apizr dedicated settings into the openApiToApizrClient section: registrationType (default: Both): generate a fluent registration helper class or not None: do not generate Static: generate with the static builder method Extended: generate with the service collection extending method Both: generate both methods (could be interesting to read but not relevant for production) withPriority (default: false): include priority management into registration process withRetry (default: false): add a Policy assembly attribute handling transient http error and a policy registry into registration process withLogs (default: false): add a Log assembly attribute and a logger factory into static only registration process withRequestOptions (default: false): add a RequestOptions parameter to your api methods so that you can adjust configuration at request time withCacheProvider (default: None): None: do not cache Akavache: use Akavache MonkeyCache: use MonkeyCache InMemory: use Microsoft.Extensions.Caching.Memory (extended registration only) Distributed: use any caching engine compatible with Microsoft.Extensions.Caching.Distributed.IDistributedCache (extended registration only) Custom: use your own ICachingHandler implementation withMediation (default: false): add mediation into extended registration process (extended registration only) withOptionalMediation (default: false): add optional mediation into extended registration process (extended registration only) withMapping (default: None): None: do not map data AutoMapper: use AutoMapper Mapster: use Mapster Generating Once configuration file has been adjusted to your needs, execute the run command from the same directory where your apizr.json stands: > apizr run Note Optional arguments You can provide optional arguments: Input argument if you'd like to set a specific json configuration file path to run with. Ignore it as long as your directory contains only one of it. Variables argument if you need to set some dynamic values. Ignore it if you don't know what you're doing or read the NSwag doc about it. You should now get all your generated files right in place in your configured output folder. While you'll be including these files in your project, don't forget to install Nuget package dependencies as listed into the generated comments."
  },
  "articles/tools.html": {
    "href": "articles/tools.html",
    "title": "| Apizr",
    "keywords": "Tools You'll find here some tools around Apizr helping to get things up and runing, the quick and easy way"
  },
  "articles/tools_nswag.html": {
    "href": "articles/tools_nswag.html",
    "title": "| Apizr",
    "keywords": "NSwag Warning Deprecated As Apizr.Tools.NSwag is now deprecated and will be removed in a future version, please consider using Refitter (v1.2+) instead which now can generate all the Apizr (v6+) boilerplate and more. Apizr (v5.4-) comes with a now deprecated tool called Apizr.Tools.NSwag that offers to get all files generated by a couple of command lines. It relies on the well known NSwag CLI, letting define all we need in a json configuration file, and generating models, services and a registration helper class. Installing The first time you plan to use the tool, start by installing it: Project Current Upcoming Apizr.Tools.NSwag > dotnet tool install --global Apizr.Tools.NSwag Configuring With Apizr.Tools.NSwag installed, navigate to the directory of your choice (the one where you want to generate files). Create a configuration file The first time you plan to use the tool for an api, you need to navigate to your target output folder and then run the new command: > apizr new From here, you'll get your apizr.json default configuration file into your current directory, looking like: { \"codeGenerators\": { \"openApiToApizrClient\": { \"registrationType\": \"Both\", \"withPriority\": false, \"withRetry\": false, \"withLogs\": false, \"withRequestOptions\": false, \"withCacheProvider\": \"None\", \"withMediation\": false, \"withOptionalMediation\": false, \"withMapping\": \"None\", \"className\": \"{controller}\", \"operationGenerationMode\": \"MultipleClientsFromOperationId\", \"additionalNamespaceUsages\": [], \"additionalContractNamespaceUsages\": [], \"generateOptionalParameters\": false, \"generateJsonMethods\": false, \"enforceFlagEnums\": false, \"parameterArrayType\": \"System.Collections.Generic.IEnumerable\", \"parameterDictionaryType\": \"System.Collections.Generic.IDictionary\", \"responseArrayType\": \"System.Collections.Generic.ICollection\", \"responseDictionaryType\": \"System.Collections.Generic.IDictionary\", \"wrapResponses\": false, \"wrapResponseMethods\": [], \"generateResponseClasses\": true, \"responseClass\": \"SwaggerResponse\", \"namespace\": \"MyNamespace\", \"requiredPropertiesMustBeDefined\": true, \"dateType\": \"System.DateTimeOffset\", \"jsonConverters\": null, \"anyType\": \"object\", \"dateTimeType\": \"System.DateTimeOffset\", \"timeType\": \"System.TimeSpan\", \"timeSpanType\": \"System.TimeSpan\", \"arrayType\": \"System.Collections.Generic.List\", \"arrayInstanceType\": \"System.Collections.Generic.List\", \"dictionaryType\": \"System.Collections.Generic.IDictionary\", \"dictionaryInstanceType\": \"System.Collections.Generic.Dictionary\", \"arrayBaseType\": \"System.Collections.ObjectModel.Collection\", \"dictionaryBaseType\": \"System.Collections.Generic.Dictionary\", \"classStyle\": \"Poco\", \"jsonLibrary\": \"NewtonsoftJson\", \"generateDefaultValues\": true, \"generateDataAnnotations\": true, \"excludedTypeNames\": [], \"excludedParameterNames\": [], \"handleReferences\": false, \"generateImmutableArrayProperties\": false, \"generateImmutableDictionaryProperties\": false, \"jsonSerializerSettingsTransformationMethod\": null, \"inlineNamedArrays\": false, \"inlineNamedDictionaries\": false, \"inlineNamedTuples\": true, \"inlineNamedAny\": false, \"generateDtoTypes\": true, \"generateOptionalPropertiesAsNullable\": false, \"generateNullableReferenceTypes\": false, \"templateDirectory\": null, \"typeNameGeneratorType\": null, \"propertyNameGeneratorType\": null, \"enumNameGeneratorType\": null, \"serviceHost\": null, \"serviceSchemes\": null, \"output\": null, \"newLineBehavior\": \"Auto\" } }, \"runtime\": \"Net70\", \"defaultVariables\": null, \"documentGenerator\": { \"fromDocument\": { \"url\": \"http://redocly.github.io/redoc/openapi.yaml\", \"output\": null, \"newLineBehavior\": \"Auto\" } } } Adjust configuration in file Open your apizr.json file to edit the configuration. Most of its settings are coming from NSwag configuration document definition as OpenApiToApizrClient comes from OpenApiToCSharpClient. It means that you can adjust everything you used to with classic NSwag generation. Some of it must be adjusted: into the openApiToApizrClient section: namespace: the namespace used into generated files output: a sub directory where to put generated files into the fromDocument section: url: the openapi json or yaml definition url Warning Minimal adjustments Like for classic NSwag generation, you must at least complete these 3 settings. If not, nothing wil be generated. That said, let's focus on Apizr dedicated settings into the openApiToApizrClient section: registrationType (default: Both): generate a fluent registration helper class or not None: do not generate Static: generate with the static builder method Extended: generate with the service collection extending method Both: generate both methods (could be interesting to read but not relevant for production) withPriority (default: false): include priority management into registration process withRetry (default: false): add a Policy assembly attribute handling transient http error and a policy registry into registration process withLogs (default: false): add a Log assembly attribute and a logger factory into static only registration process withRequestOptions (default: false): add a RequestOptions parameter to your api methods so that you can adjust configuration at request time withCacheProvider (default: None): None: do not cache Akavache: use Akavache MonkeyCache: use MonkeyCache InMemory: use Microsoft.Extensions.Caching.Memory (extended registration only) Distributed: use any caching engine compatible with Microsoft.Extensions.Caching.Distributed.IDistributedCache (extended registration only) Custom: use your own ICachingHandler implementation withMediation (default: false): add mediation into extended registration process (extended registration only) withOptionalMediation (default: false): add optional mediation into extended registration process (extended registration only) withMapping (default: None): None: do not map data AutoMapper: use AutoMapper Mapster: use Mapster Generating Once configuration file has been adjusted to your needs, execute the run command from the same directory where your apizr.json stands: > apizr run Note Optional arguments You can provide optional arguments: Input argument if you'd like to set a specific json configuration file path to run with. Ignore it as long as your directory contains only one of it. Variables argument if you need to set some dynamic values. Ignore it if you don't know what you're doing or read the NSwag doc about it. You should now get all your generated files right in place in your configured output folder. While you'll be including these files in your project, don't forget to install Nuget package dependencies as listed into the generated comments."
  },
  "articles/tools_refitter.html": {
    "href": "articles/tools_refitter.html",
    "title": "| Apizr",
    "keywords": "Refitter Refitter (Documentation | GitHub) is a tool for generating a C# REST API Client using the Refit library. Refitter can generate the Refit interface and contracts from OpenAPI specifications. Refitter (v1.2+) could also format the generated Refit interface to be managed by Apizr (v6+) and generate some registration helpers too. It comes in 2 forms: A .NET CLI Tool distributed via nuget.org that outputs a single C# file on disk A C# Source Generator via the Refitter.SourceGenerator package that generates code on compile time based on a .refitter within the project directory. Installing the package Choose which generating approach suites to your needs by installing either: Project Current Upcoming Refitter Refitter.SourceGenerator Generating the interfaces Refitter (v1.2+) supports generating Apizr formatted Refit interfaces that can be managed then by Apizr (v6+). You can enable Apizr formatted Refit interface generation either: With the --use-apizr command line argument By setting the apizrSettings section in the .refitter settings file Note that --use-apizr uses default Apizr settings with withRequestOptions set to true as recommended, while the .refitter settings file allows you to configure it deeper. In both cases, it will format the generated Refit interfaces to be Apizr ready by: Adding a final IApizrRequestOptions options parameter to all generated methods (if withRequestOptions is set to true) Providing cancellation tokens by Apizr request options instead of a dedicated parameter (if withRequestOptions is set to true) Using method overloads instead of optional parameters (note that setting useDynamicQuerystringParameters to true improve overloading experience) From here, you're definitly free to use the formatted interface with Apizr by registering, configuring and using it following the Apizr documentation. But Refitter (v1.2+) can go further by generating some helpers to make the configuration easier. Generating the helpers Refitter (v1.2+) supports generating Apizr (v6+) bootstrapping code that allows the user to conveniently configure all generated Apizr formatted Refit interfaces by calling a single method. It could be either an extension method to IServiceCollection if DependencyInjectionSettings are set, or a static builder method if not. Extended Static To enable Apizr registration code generation for IServiceCollection, you need at least to set the withRegistrationHelper property to true and configure the DependencyInjectionSettings section in the .refitter settings file. This is what the .refitter settings file may look like, depending on you configuration: { \"openApiPath\": \"https://petstore3.swagger.io/api/v3/openapi.yaml\", \"namespace\": \"Petstore\", \"useDynamicQuerystringParameters\": true, \"dependencyInjectionSettings\": { \"baseUrl\": \"https://petstore3.swagger.io/api/v3\", \"httpMessageHandlers\": [ \"MyDelegatingHandler\" ], \"transientErrorHandler\": \"HttpResilience\", \"maxRetryCount\": 3, \"firstBackoffRetryInSeconds\": 0.5 }, \"apizrSettings\": { \"withRequestOptions\": true, // Recommended to include an Apizr request options parameter to Refit interface methods \"withRegistrationHelper\": true, // Mandatory to actually generate the Apizr registration extended method \"withCacheProvider\": \"InMemory\", // Optional, default is None \"withPriority\": true, // Optional, default is false \"withMediation\": true, // Optional, default is false \"withOptionalMediation\": true, // Optional, default is false \"withMappingProvider\": \"AutoMapper\", // Optional, default is None \"withFileTransfer\": true // Optional, default is false } } which will generate an extension method to IServiceCollection called ConfigurePetstoreApiApizrManager(). The generated extension method depends on Apizr.Extensions.Microsoft.DependencyInjection library and looks like this: public static IServiceCollection ConfigurePetstoreApiApizrManager( this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder>? optionsBuilder = null) { optionsBuilder ??= _ => { }; // Default empty options if null optionsBuilder += options => options .WithBaseAddress(\"https://petstore3.swagger.io/api/v3\", ApizrDuplicateStrategy.Ignore) .WithDelegatingHandler<MyDelegatingHandler>() .ConfigureHttpClientBuilder(builder => builder .AddStandardResilienceHandler(config => { config.Retry = new HttpRetryStrategyOptions { UseJitter = true, MaxRetryAttempts = 3, Delay = TimeSpan.FromSeconds(0.5) }; })) .WithInMemoryCacheHandler() .WithAutoMapperMappingHandler() .WithPriority() .WithOptionalMediation() .WithFileTransferOptionalMediation(); return services.AddApizrManagerFor<IPetstoreApi>(optionsBuilder); } This comes in handy especially when generating multiple interfaces, by tag or endpoint. For example, the following .refitter settings file { \"openApiPath\": \"https://petstore3.swagger.io/api/v3/openapi.yaml\", \"namespace\": \"Petstore\", \"useDynamicQuerystringParameters\": true, \"multipleInterfaces\": \"ByTag\", \"naming\": { \"useOpenApiTitle\": false, \"interfaceName\": \"Petstore\" }, \"dependencyInjectionSettings\": { \"baseUrl\": \"https://petstore3.swagger.io/api/v3\", \"httpMessageHandlers\": [ \"MyDelegatingHandler\" ], \"transientErrorHandler\": \"HttpResilience\", \"maxRetryCount\": 3, \"firstBackoffRetryInSeconds\": 0.5 }, \"apizrSettings\": { \"withRequestOptions\": true, // Recommended to include an Apizr request options parameter to Refit interface methods \"withRegistrationHelper\": true, // Mandatory to actually generate the Apizr registration extended method \"withCacheProvider\": \"InMemory\", // Optional, default is None \"withPriority\": true, // Optional, default is false \"withMediation\": true, // Optional, default is false \"withOptionalMediation\": true, // Optional, default is false \"withMappingProvider\": \"AutoMapper\", // Optional, default is None \"withFileTransfer\": true // Optional, default is false } } Will generate a single ConfigurePetstoreApizrManagers() extension method that may contain dependency injection configuration code for multiple interfaces like this public static IServiceCollection ConfigurePetstoreApizrManagers( this IServiceCollection services, Action<IApizrExtendedCommonOptionsBuilder>? optionsBuilder = null) { optionsBuilder ??= _ => { }; // Default empty options if null optionsBuilder += options => options .WithBaseAddress(\"https://petstore3.swagger.io/api/v3\", ApizrDuplicateStrategy.Ignore) .WithDelegatingHandler<MyDelegatingHandler>() .ConfigureHttpClientBuilder(builder => builder .AddStandardResilienceHandler(config => { config.Retry = new HttpRetryStrategyOptions { UseJitter = true, MaxRetryAttempts = 3, Delay = TimeSpan.FromSeconds(0.5) }; })) .WithInMemoryCacheHandler() .WithAutoMapperMappingHandler() .WithPriority() .WithOptionalMediation() .WithFileTransferOptionalMediation(); return services.AddApizr( registry => registry .AddManagerFor<IPetApi>() .AddManagerFor<IStoreApi>() .AddManagerFor<IUserApi>(), optionsBuilder); } Here, IPetApi, IStoreApi and IUserApi are the generated interfaces which share the same common configuration defined from the .refitter file. To enable Apizr static builder code generation, you need at least to set the withRegistrationHelper property to true and leave the DependencyInjectionSettings section to null in the .refitter settings file. This is what the .refitter settings file may look like, depending on you configuration: { \"openApiPath\": \"../OpenAPI/v3.0/petstore.json\", \"namespace\": \"Petstore\", \"useDynamicQuerystringParameters\": true, \"apizrSettings\": { \"withRequestOptions\": true, // Recommended to include an Apizr request options parameter to Refit interface methods \"withRegistrationHelper\": true, // Mandatory to actually generate the Apizr registration extended method \"withCacheProvider\": \"Akavache\", // Optional, default is None \"withPriority\": true, // Optional, default is false \"withMappingProvider\": \"AutoMapper\", // Optional, default is None \"withFileTransfer\": true // Optional, default is false } } which will generate a static builder method called BuildPetstore30ApizrManager(). The generated builder method depends on Apizr library and looks like this: public static IApizrManager<ISwaggerPetstoreOpenAPI30> BuildPetstore30ApizrManager(Action<IApizrManagerOptionsBuilder> optionsBuilder) { optionsBuilder ??= _ => { }; // Default empty options if null optionsBuilder += options => options .WithAkavacheCacheHandler() .WithAutoMapperMappingHandler(new MapperConfiguration(config => { /* YOUR_MAPPINGS_HERE */ })) .WithPriority(); return ApizrBuilder.Current.CreateManagerFor<ISwaggerPetstoreOpenAPI30>(optionsBuilder); } This comes in handy especially when generating multiple interfaces, by tag or endpoint. For example, the following .refitter settings file { \"openApiPath\": \"../OpenAPI/v3.0/petstore.json\", \"namespace\": \"Petstore\", \"multipleInterfaces\": \"ByTag\", \"naming\": { \"useOpenApiTitle\": false, \"interfaceName\": \"Petstore\" }, \"dependencyInjectionSettings\": { \"baseUrl\": \"https://petstore3.swagger.io/api/v3\", \"httpMessageHandlers\": [ \"MyDelegatingHandler\" ], \"transientErrorHandler\": \"HttpResilience\", \"maxRetryCount\": 3, \"firstBackoffRetryInSeconds\": 0.5 }, \"apizrSettings\": { \"withRequestOptions\": true, // Recommended to include an Apizr request options parameter to Refit interface methods \"withRegistrationHelper\": true, // Mandatory to actually generate the Apizr registration extended method \"withCacheProvider\": \"InMemory\", // Optional, default is None \"withPriority\": true, // Optional, default is false \"withMediation\": true, // Optional, default is false \"withOptionalMediation\": true, // Optional, default is false \"withMappingProvider\": \"AutoMapper\", // Optional, default is None \"withFileTransfer\": true // Optional, default is false } } Will generate a single BuildPetstoreApizrManagers() builder method that may contain configuration code for multiple interfaces like this public static IApizrRegistry BuildPetstoreApizrManagers(Action<IApizrCommonOptionsBuilder> optionsBuilder) { optionsBuilder ??= _ => { }; // Default empty options if null optionsBuilder += options => options .WithAkavacheCacheHandler() .WithAutoMapperMappingHandler(new MapperConfiguration(config => { /* YOUR_MAPPINGS_HERE */ })) .WithPriority(); return ApizrBuilder.Current.CreateRegistry( registry => registry .AddManagerFor<IPetApi>() .AddManagerFor<IStoreApi>() .AddManagerFor<IUserApi>(), optionsBuilder); } Here, IPetApi, IStoreApi and IUserApi are the generated interfaces which share the same common configuration defined from the .refitter file. You now just have to call the generated helper method to get all the thing ready to use. Customizing the configuration You may want to adjust apis configuration, for example, to add a custom header to requests. This can be done using the Action<TApizrOptionsBuilder> parameter while calling the generated method. Here is the recommended way to customize the configuration using IConfiguration, as it lets you do it from the top assembly common level down to the api specific method one: Extended Static services.ConfigurePetstoreApizrManager(options => options .WithConfiguration(Your_Configuration)); ApizrRegistrationHelper.BuildPetstoreApizrManager(options => options .WithConfiguration(Your_Configuration)); To know how to make it fit your needs, please refer to the current Apizr documentation. Using the managers Once you called the generated method, you will get an IApizrManager<T> instance that you can use to make requests to the API. Here's an example of how to use it: var result = await petstoreManager.ExecuteAsync((api, opt) => api.GetPetById(1, opt), options => options // Whatever final request options you want to apply .WithPriority(Priority.Background) .WithHeaders([\"HeaderKey1: HeaderValue1\"]) .WithRequestTimeout(\"00:00:10\") .WithCancellation(cts.Token));"
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "| Apizr",
    "keywords": "6.2.0 All [New][Exceptions] Now we can catch exceptions with a Func callback returning a handled boolean flag thanks to WithExCatching fluent option [New][Exceptions] Now we can check for a handled boolean flag right from the exception to adjust the handling behavior [New][Exceptions] Now we can let the exception throw even if it's yet been handled by registered handlers thanks to the letThrowOnHandledException parameter [Deprecated][Exceptions] Now catching exceptions with an Action callback is deprecated in favor of the new Func one [Update][NuGet] Now Polly.Extensions package reference has been updated to latest v8.4.2 [Update][Doc] Now Doc website supports dark theme, larger code blocks and some other improvements 6.1.0 All [New][Cache] Now we can let the server control the client cache mode and lifetime thanks to the brand new SetByHeader cache mode (see Cache-Control, Expires, ETag and Last-Modified headers) [New][Transfer] Now we can finally use the ITransferApi<TDownloadParams> shortcut api thanks to latest Refit updates [Update][NuGet] Now all package references are up to date with the latest versions 6.0.0 All [New][Exceptions] Now we can handle IApizrResponse safe response (based on Refit's IApiResponse) instead of catching exceptions [New][Configuration] Now we can configure Apizr thanks to IConfiguration from Microsoft.Extensions (e.g. from appsetings.json) [New][Configuration] Now we can configure request options at register time thanks to the brand new WithRequestOptions fluent option [New][Refitter] Now we can generate all the boilerplate thanks to Refitter v1.2+ external package instead of the deprecated Apizr.Tools.NSwag one [New/Breaking][Polly] Now supporting only the brand new Polly v8+ Resilience Strategies/Pipelines/Registry instead of former Polly v7- Policies [New][Polly] Now we can set resilience pipelines to apply fluently to the request thanks to the brand new WithResiliencePipelineKeys fluent option [New][Polly] Now we can scope resilience pipelines executions to specific http method groups thanks to the brand new WithResiliencePipelineKeys's ApizrRequestMethod[] optional parameter [New][Polly] Now we can scope resilience pipelines executions to specific http method groups thanks to all brand new scoped {RequestMethod}ResiliencePipeline attributes like GetResiliencePipeline [New][Cache] Now we can set caching options to apply fluently to the request thanks to the brand new WithCaching fluent option [New][HttpTracer] Now we can filter out unwanted http message parts with the brand new IgnoreMessageParts fluent option [New][HttpTracer] Now we can pick RequestAllButBody, HeadersOnly, AllButRequestBody, AllButResponseBody or AllButBodies http message parts when configuring logging options fluently or using attribute [New][HttpTracer/Headers] Now we can redact any header sensitive values from logs at design time by surrounding header values with a * star symbol rigth into the Headers attribute [New][HttpTracer/Headers] Now we can redact any header sensitive values from logs at register time thanks to WithLoggedHeadersRedactionNames or WithLoggedHeadersRedactionRule fluent options [New][Headers] Now we can choose to refresh a header value at request time or not, depending on the brand new WithHeaders's ApizrLifetimeScope optional parameter [New][Headers] Now we can choose to set headers values straight to the request or store it for further headers attribute key match use, depending on the brand new WithHeaders's ApizrRegistrationMode optional parameter [New][Headers] Now we can set headers values thanks to an expression tree [New][Attributes] Now we can provide types to attributes thanks to generic arguments instead of using typeof() as constructor parameters [New][DelegatingHandler] Now we can adjust the duplicate strategy while registering a DelegatingHandler [New][DelegatingHandler] Now we can register the extended way a DelegatingHandler by its type [New][HttpMessageHandler] Now we can register an HttpMessageHandler thanks to WithHttpMessageHandler fluent option [New][HttpMessageHandler] Now we can register the extended way a HttpMessageHandler by its type [New][Cache] Now CacheKey attribute allows composite cache key generation from multiple decorated parameters [New][Registry] Now we can add multiple registry to the container and resolve a single merged one [New][BaseAddress/Path] Now we can set a base address or path with a duplicate strategy [New][Target] Now targeting multiple frameworks based on Refit targets: netstandard2.0;netstandard2.1;net462;net6.0;net7.0;net8.0 [New/Breaking][BaseAddress] Now we can set base address with the brand new BaseAddress attribure instead of the now removed WebApi, CrudEntity or MappedCrudEntity useless ones, and only if you need to set it at design time [New/Breaking][AutoRegister] Now we can tell Apizr to auto register apis with the brand new AutoRegister attribure instead of the now removed WebApi, CrudEntity or MappedCrudEntity useless ones [New/Breaking][MappedWith] Now we can tell Apizr to map data while using MediatR/Optional thanks to the yet known MappedWith attribure instead of the now removed CrudEntity or MappedCrudEntity useless ones [Breaking][CacheMode] Now CacheMode.GetAndFetch enum option has been renamed to CacheMode.FetchOrGet so that it says what it actually does and improve consistency with the other CacheMode.GetOrFetch option [Breaking][Headers] Now WithHeaders options take an enumerable parameter instead of a parameter array so that we could provide some more optional parameters [Breaking][Removed] Previsoulsy deprecated extensions methods for backward compatibility have been removed as they were not suitable anymore [Breaking][DelegatingHandler] Now we can register DelegatingHandlers thanks to WithDelegatingHandler fluent option instead of the AddDelegatingHandler deleted one for consistency. [Fix][Cache] Now parameters decorated with CacheKey attribute are included no matter of position or index [Fix][Cache] Parameter based cache keys are now allways computed to integrate value changes (skiping cachekey methodset) [Fix][Attributes] Now Apizr finally can get attributes decorating parent api interfaces or crud classes [Fix][Polly] Now Apizr wraps correctly resilience strategies, including typed result ones [Fix][Manager] ApizrManager has been optimized and refactored to improve performances Apizr.Extensions.Microsoft.Caching [New] WithDistributedCacheHandler & WithInMemoryCacheHandler fluent shortcut options are now both available for single api registration too (no more limited to Registry) [Fix] Cache handlers now relies on content serializer to get xml serialization work too [Fix] Distributed cache handler serialization is now null protected to get it work without throwing exceptions Apizr.Integrations.MediatR [New][Exceptions] Now we can send safe request returning an IApizrResponse response to handle (based on Refit's IApiResponse) instead of catching exceptions Apizr.Integrations.FileTransfer [Fix] Now file data is no more logged by default while uploading or downloading Warning Apizr.Tools.NSwag has been discontinued This tool project has been dropped out as Apizr now relies on Refitter to generate the boilerplate. 5.4.0 All [Unified][Cancellation] Now cancelling a request on Android trows an OperationCanceledException instead of a WebException/SocketClosedException [Unified][Cancellation] Now cancelling a request on iOS trows an OperationCanceledException instead of a TimeoutException/TaskCanceledException [New][Timeout] Now we can set a request timeout (each request try) and/or an operation timeout (overall request tries) thanks to both dedicated attributes or fluent options [Unified][Timeout] Now a request that times out on client side throws a TimeoutRejectedException provided by Polly instead of a TimeoutException [Fix][Headers] Now the headers feature fully support composite configuration [Fix][Context] Now the context feature fully support composite configuration 5.3.0 All [New][Timeout] Now we can set a request timeout thanks to both dedicated attributes or fluent option [New][Headers] Now we can set global headers without passing any options request parameter (HttpClient's DefaultRequestHeaders) [New][Auth] Now we can access to a dedicated logger instance while inheriting from AuthenticationHadlerBase [Fix][Cancellation] Now we really can cancel a request by providing a token trough the options [Fix][Log] CRUD's log attributes now target Class only Apizr [Breaking][HttpClient] Now we can configure the HttpClient instead of providing one (same as extended experience) with the brand new ConfigureHttpClient fluent option Apizr.Extensions.Microsoft.DependencyInjection [Fix][HttpClient] Now HttpClientBuilder really apply composite configurations Apizr.Integrations.FileTransfer.MediatR [Fix] Now default upload command returns HttpResponseMessage Apizr.Integrations.FileTransfer.Optional [Fix] Now default upload optional command returns Option<HttpResponseMessage, ApizrException> 5.2.0 Apizr.Integrations.FileTransfer [New] Now Upload api uses the \"file\" alias [New] Now we can create transfer managers with shortcuts Apizr.Extensions.Microsoft.FileTransfer [New] Now we can get transfer managers with shortcuts Apizr.Integrations.FileTransfer.MediatR [New] Now we can send requests with shortcuts Apizr.Integrations.FileTransfer.Optional [New] Now we can send optional requests with shortcuts 5.1.0 All [Bump] NuGet reference packages updated Apizr [New][Polly] Now providing a PolicyRegistry is not mandatory anymore so that Polly could be turned off by default 5.0.1 Apizr [Fix] No more NullRefEx when getting cookies from CookieContainer [Fix] Typo fix 5.0 All [New] Now we can group registry common configurations at any level to share configurations without any limit [New] Now we can set a base path with the brand new WithBasePath fluent option or using attribute [New] Now we can set options at request time with the brand new fluent request options builder [New] Now we can execute api requests directly from the registry containing the managed api [New] Now we can set headers with the brand new WithHeaders fluent option [New] Now we can set a default readonly authentication token with a dedicated WithAuthenticationHandler fluent option Apizr [New] [Core] Now we can set a custom HttpClient with the brand new WithHttpClient fluent option [Improvement] [Core] No more dependency to Microsoft.Extensions.Http.Polly from the core package [Breaking] [Naming] Now ApizrBuilder static class offers only a Current property returning its own instance to get acces to its methods, so that it could be extended then by other packages [Fix] Some bugs and performance issues fixed Apizr.Integrations.Mapster [New] Brand new integration with Mapster Apizr.Integrations.FileTransfer [New] Brand new integration package to manage file transfers like a breeze with static registration/instanciation [New] We can track file transfer progress with the brand new WithProgress fluent option Apizr.Extensions.Microsoft.FileTransfer [New] Brand new integration package to manage file transfers like a breeze with extended registration Apizr.Integrations.FileTransfer.MediatR [New] Brand new integration package to manage file transfers like a breeze with mediator pattern Apizr.Integrations.FileTransfer.Optional [New] Brand new integration package to manage file transfers like a breeze with mediator pattern and optional result Apizr.Tools.NSwag [New] Brand new CLI tool so that Apizr files can now be generated by command line (Models, Apis and Registrations) from an OpenApi/Swagger definition using NSwag 4.1 Apizr [Breaking] [Naming] Apizr static class renamed to ApizrBuilder to match its purpose and doesn't conflict with its namespace anymore [Breaking] [Naming] ApizrBuilder's methods renamed to match their return type so that we know what we're about to build (e.g. CreateRegistry, AddManagerFor, CreateManagerFor) [Breaking] [Naming] ApizrRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) [Fix] [Connectivity] No more exception while using Apizr the extended way but without providing any IConnectivityHandler implementation with Fusillade priority management enabled [Improvement] [Address] Now we can set base address at both common and proper levels so we can define a base address shared by all apis, but also a specific one if needed Apizr.Extensions.Microsoft.DependencyInjection [Breaking] [Naming] Extension methods renamed to match their return type so that we know what we're about to build (e.g. AddManagerFor, AddCrudManagerFor) [Breaking] [Naming] ApizrExtendedRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) Apizr.Integrations.MediatR [Breaking] [Naming] ApizrMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetMediatorFor, GetCrudMediatorFor, ContainsMediatorFor) Apizr.Integrations.Optional [Breaking] [Naming] ApizrOptionalMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetOptionalMediatorFor, GetCrudOptionalMediatorFor, ContainsOptionalMediatorFor) 4.0 Apizr [New] [Logging] Now fully relies on MS Logging extensions [New] [Logging] Static fluent configuration now offers a WithLoggerFactory option to provide a custom logger factory [Breaking] [Logging] TraceAttribute has been renamed back to LogAttribute [Breaking] [Logging] Now we can set a LogLevel value for each Low, Medium and High severity by attribute or fluent configuration [New] [Logging] Now we can set logging settings within LogAttribute at method level [New] [Logging] Now we can set http tracing mode within LogAttribute to ajust log writting conditions (ExceptionsOnly, ErrorsAndExceptionsOnly or Everything) [New] [Logging] No more HttpTracer NuGet package dependency as source code has been integrated and largely adjusted to Apizr needs [New] [Configuring] Both static and extended fluent configuration now offers a Registry to set common options once for all registered apis, while keeping proper options applied to selected apis [New] [Configuring] Static fluent configuration could return the registry that expose a Populate method to register each generated Apizr manager in a container [New] [Configuring] Generated registry exposes GetFor, TryGetFor, GetCrudFor and TryGetCrudFor methods so that it could be used everywhere to get managers, instead of direct access [New] [Policing] Now we can provide a custom PollyContext if defined into the called api interface method, it will carry all logging settings for DelegatingHandler use. [New] [Mapping] Now we can enjoy data mapping with both static and extended configurations [Improvement] [Mapping] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on ExecuteAsync call [New] [Caching] Now we can ask for clearing request cache before executing [New] [Exceptions] Brand new onException Action parameter to handle it globally (e.g. user dialog/toast) and let potential cached data return to caller as expected (e.g. refreshing UI) Apizr.Extensions.Microsoft.DependencyInjection [New] We can now auto register crud managers for all scanned classes decorated by crud attributes Apizr.Extensions.Microsoft.Caching [New] Brand new integration project to set MS Caching extensions as caching handler Apizr.Integrations.Akavache [Improvement] Now we can ajust Akavache settings while configuring [New] Now we can register Akavache directly with the brand new WithAkavacheCacheHandler option Apizr.Integrations.MediatR [Breaking] Now Apizr.Integrations.MediatR targets .Net Standard 2.1 as MediatR v10+ does [New] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on Apizr mediators Send call [New] Brand new IApizrMediator & IApizrCrudMediator interfaces to get things shorter than IMediator [New] Now we can ask for clearing request cache before executing [New] Brand new onException Action parameter to handle it globally (e.g. user dialog/toast) and let potential cached data return to caller as expected (e.g. refreshing UI) Apizr.Integrations.Optional [Breaking] Now Apizr.Integrations.Optional targets .Net Standard 2.1 as Apizr.Integrations.MediatR v4+ does [New] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on Apizr optional mediators Send call [New] Brand new IApizrOptionalMediator & IApizrCrudOptionalMediator interfaces to get things shorter than IMediator [New] Now we can ask for clearing request cache before executing Apizr.Integrations.AutoMapper [Breaking] Now Apizr.Integrations.AutoMapper targets .Net Standard 2.1 as AutoMapper v11+ does [New] Now we can register AutoMapper directly with the brand new WithAutoMapperMappingHandler option [Improvement] No more extended package dependency to enjoy data mapping with both static and extended configurations Warning Apizr.Integrations.Shiny has been discontinued This integration project has been dropped out as Shiny no longer provide built-in caching and logging feature anymore. Apizr now either relies on MS Caching extensions, Akavache or MonkeyCache for caching feature and MS Logging extensions for logging feature. You'll have to provide a connectivity handler if you want Apizr to check it. 3.0 Apizr [New] Now based on Refit v6+ which introduce properties parameter provided to DelegateHandlers by the Http message. This is used by the new Fusillade priority management package. [New] Now based on Refit v6+ which introduce dynamic headers dictionary parameter allowing adding multiple dynamic headers in a single parameter thanks to [HeaderCollection] IDictionary<string, string> headers [New] Now based on Refit v6+ which now relies on System.Text.Json instead of Newtonsoft.Json. If you'd like to continue to use Newtonsoft.Json, add the Refit.Newtonsoft.Json NuGet package and follow the new Readme instructions [New] Now AuthenticationHandler is log level sensitive so we could tell it to keep quiet while using it heavily [New] Now caching could be disabled with CacheIt attribute thanks to CacheMode.None parameter to compose with assembly, interface and method level cache rules all together (e.g. you could now enable Cache globaly at assembly level but turn it off for a specific method like the login one) [New] Now you can initialize parameters directly from the managed method. No more pitfalls [Improvement] Cache key generator has been deeply reshaped to support all scenarios, including path parameters [Improvement] Nuget references have been updated to latest versions [BreakingChange] Fusillade has been moved to an integration package. If you used to play with it, just install it from its brand new dedicated integration package and follow the new Readme instructions [Fix] No more exception while using Apizr with Prism.Magician with Fusillade priority management enabled Apizr.Integrations.Fusillade [New] Brand new integration package to use Apizr with Fusillade, only if you need it (no more core references and NuGet dependencies) 2.0 Apizr [New] Now initialization options are typed to be dedicated to each api interface manager. It means you can now get a specific configuration for each Apizr manager instance, like for caching, logging, and so on... [New] Now caching could be defined at method level for CRUD api to. It means you can define specific cache settings for each Read and ReadAll request for each your CRUD model class [New] Now caching could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific cache settings for both Read and ReadAll requests for each your CRUD model class [New] Now caching could be defined at assembly level for global cache settings. It means you can define global cache settings for all your apis in one place, and then define specific settings at sub-levels to override this behavior when needed [New] Now policy keys could be defined at method level for CRUD api to. It means you can define specific policy keys for each request of each CRUD model class [New] Now policy keys could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific policy keys for all requests of each CRUD model class [New] Now logging could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific logging settings for all requests of each CRUD model class [New] Now logging could be defined at assembly level for global logging settings. It means you can define global logging settings for all your apis in one place, and then define specific settings at sub-levels to override this behavior when needed [BreakingChange] TraceAttribute renamed to LogItAttribute to suits its tracing and logging both features activation [BreakingChange] CacheAttribute renamed to CacheItAttribute to keep things consistent [BreakingChange] No more cache and policy attribute decorating CRUD api by default. You can activate it fluently with the options builder. 1.9 Apizr [New] Handling complex type as CacheKey [New] Now we can set Apizr log level within TraceAttribute to manage execution tracing verbosity Apizr.Integrations.MediatR [Change] Mediation's ICommand interface renamed to IMediationCommand, avoiding conflict with System.Windows.Input.ICommand 1.8.1 Apizr [Fix] Parsing life span representation as TimeSpan from CacheAttribute 1.8 Apizr.Integrations.Optional [New] Introducing CatchAsync optional extension method to return result from fetch or cache, no matter of execption handled on the other side by an action callback to inform the user 1.7 Apizr [New] Now we can toggle Fusillade priority management activation [New] Now we can provide a base uri factory (e.g. depending on config) Apizr.Extensions.Microsoft.DependencyInjection [New] Now we can toggle Fusillade priority management activation [New] Now we can provide a base uri factory (e.g. depending on DI resovled settings) 1.6 [Fix] Preserve attribute added Apizr [New] Now we can provide a custom HttpClientHandler instance Apizr.Extensions.Microsoft.DependencyInjection [New] Now we can provide a custom HttpClientHandler instance 1.5 Apizr [Fix] Now the manager waits for task with no result to handle exceptions properly Apizr.Integrations.MediatR [New] Introducing typed mediator and typed crud mediator for shorter request [Fix] Now MediatR handlers are registered correctly when asked from a manual registration context [Fix] Mapping null object now works correctly [Fix] Now MediatR handlers wait for its handling task to handle exceptions properly Apizr.Integrations.Optional [New] Introducing typed optional mediator and typed crud optional mediator for shorter request [New] Introducing OnResultAsync optional extension method to make all the thing shorter than ever [Fix] Now Optional handlers are registered correctly when asked from a manual registration context [Fix] Optional request handlers now handle exceptions as expected [Fix] Now Optional handlers wait for its handling task to handle exceptions properly 1.4.2 Apizr.Integrations.MediatR [Fix] Now nuget package as library both reference MediatR.Extensions.Microsoft.DependencyInjection nuget package for assembly version compatibility 1.4.1 Apizr.Extensions.Microsoft.DependencyInjection [Fix] Now Apizr works with DryIoc and Unity containers, returning a single UserInitiated instance, while waiting for external issues beeing fixed Apizr.Integrations.MediatR [Workaround] Doc updated to work with MediatR alongside DryIoc or Unity container, while waiting for external issues beeing fixed [Fix] No more WithCrudMediation method available but only WithMediation 1.4.0 Apizr.Extensions.Microsoft.DependencyInjection [New] We can now auto register both crud and classic api interfaces Apizr.Integrations.MediatR [New] We can now use mediation with both crud and classic api interfaces [New] We can now use execution priority with both crud and classic api mediation [BreakingChange] WithCrudMediation renamed to WithMediation Apizr.Integrations.Optional [New] We can now use optional mediation with both crud and classic api interfaces [New] We can now use execution priority with both crud and classic api optional mediation [BreakingChange] WithCrudOptionalMediation renamed to WithOptionalMediation Apizr.Integrations.Shiny [New] Shiny integration now offers all the same registration extensions methods Apizr.Integrations.AutoMapper [New] We can now use auto mapping with both crud and classic api mediation and optional mediation 1.3.0 Apizr [New] We can now define mapped model entity type from the CrudEntityAttribute above api entities for automatic crud registration Apizr.Extensions.Microsoft.DependencyInjection [New] We can now provide an IMappingHandler implementation to the options builder for auto mapping [New] We can now decorate model entities with MappedCrudEntityAttribute to define mapped crud settings for automatic crud registration [New] We can now associate api and model entities with MappedEntity<TModelEntity, TApiEntity> during manual crud registration Apizr.Integrations.MediatR [Fix] Cacheable ReadQuery now use the key value when defining cache key [Fix] Auto handling now works as expected with manual crud registration Apizr.Integrations.Optional [Fix] Cacheable ReadOptionalQuery now use the key value when defining cache key Apizr.Integrations.AutoMapper [New] Brand new integration with AutoMapper, to let Apizr handle crud entity mapping during mediation handling 1.2.0 Apizr [BreakingChange] Apizr instantiation/registration methods names standardized to Apizr.For and Apizr.CrudFor [New] Introducing ICrudApi service to manage standard CRUD api calls built-in Apizr.Extensions.Microsoft.DependencyInjection [BreakingChange] Apizr instantiation/registration methods names standardized to services.AddApizrFor and services.AddApizrCrudFor [New] Enabling ICrudApi auto registration feature with CrudEntityAttribute and assembly scanning Apizr.Integrations.Shiny [BreakingChange] Apizr instantiation/registration methods names standardized to services.UseApizrFor and services.UseApizrCrudFor [New] Enabling ICrudApi auto registration feature with CrudEntityAttribute and assembly scanning Apizr.Integrations.MediatR [New] Brand new integration with MediatR, to let Apizr handle crud requests execution with mediation Apizr.Integrations.Optional [New] Brand new integration with Optional, to let Apizr handle crud requests execution with mediation and optional result 1.1.0 Apizr [New] Aibility to manage generic web apis by setting base address with the options builder Apizr.Extensions.Microsoft.DependencyInjection [New] Same as Apizr Apizr.Integrations.Shiny [New] Same as Apizr 1.0.0 Initial Release for Apizr Apizr.Extensions.Microsoft.DependencyInjection Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Apizr.Integrations.Shiny"
  },
  "index.html": {
    "href": "index.html",
    "title": "Apizr | Apizr",
    "keywords": "Apizr Refit based web api client management, but resilient (retry, connectivity, cache, auth, log, priority, etc...) What The Apizr project was motivated by this 2015 famous blog post about resilient networking. Its main focus was to address at least everything explained into this article, meanning: Easy access to restful services Work offline with cache management Handle errors with retry pattern and global catching Handle request priority Check connectivity Fast development time Easy maintenance Reuse existing libraries But also, some more core features like: Trace http traffic Handle authentication And more integration/extension independent optional features like: Choose cache, log and connectivity providers Register it as an MS DI extension Map model with DTO Use Mediator pattern Use Optional pattern Manage file transfers The list is not exhaustive, there’s more, but what we wanted was playing with all of it with as less code as we could, not worrying about plumbing things and being sure everything is wired and handled by design or almost. Inspired by Refit.Insane.PowerPack, we wanted to make it simple to use, mixing attribute decorations and fluent configuration. How An api definition with some attributes: // (Polly) Define a resilience pipeline key // OR use Microsoft Resilience instead [assembly:ResiliencePipeline(\"TransientHttpError\")] namespace Apizr.Sample { // (Apizr) Define your web api base url and ask for cache and logs [BaseAddress(\"https://reqres.in/\"), Cache(CacheMode.FetchOrGet, \"01:00:00\"), Log(HttpMessageParts.AllButBodies)] public interface IReqResService { // (Refit) Define your web api interface methods [Get(\"/api/users\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, [RequestOptions] IApizrRequestOptions options); [Post(\"/api/users\")] Task<User> CreateUser(User user, [RequestOptions] IApizrRequestOptions options); } } Some resilience strategies: // (Polly) Create a resilience pipeline (if not using Microsoft Resilience) var resiliencePipelineBuilder = new ResiliencePipelineBuilder<HttpResponseMessage>() .AddRetry( new RetryStrategyOptions<HttpResponseMessage> { ShouldHandle = new PredicateBuilder<HttpResponseMessage>() .Handle<HttpRequestException>() .HandleResult(response => response.StatusCode is >= HttpStatusCode.InternalServerError or HttpStatusCode.RequestTimeout), Delay = TimeSpan.FromSeconds(1), MaxRetryAttempts = 3, UseJitter = true, BackoffType = DelayBackoffType.Exponential }); An instance of this managed api: Extended Static Relies on IServiceCollection extension methods approach. // (Logger) Configure logging the way you want, like services.AddLogging(loggingBuilder => loggingBuilder.AddDebug()); // (Apizr) Add an Apizr manager for the defined api to your container services.AddApizrManagerFor<IReqResService>( options => options // With a cache handler .WithAkavacheCacheHandler() // If using Microsoft Resilience .ConfigureHttpClientBuilder(builder => builder .AddStandardResilienceHandler())); // (Polly) Register the resilience pipeline (if not using Microsoft Resilience) services.AddResiliencePipeline<string, HttpResponseMessage>(\"TransientHttpError\", builder => builder.AddPipeline(resiliencePipelineBuilder.Build())); ... // (Apizr) Get your manager instance the way you want, like var reqResManager = serviceProvider.GetRequiredService<IApizrManager<IReqResService>>(); Relies on static builder instantiation approach. // (Polly) Add the resilience pipeline with its key to a registry var resiliencePipelineRegistry = new ResiliencePipelineRegistry<string>(); resiliencePipelineRegistry.TryAddBuilder<HttpResponseMessage>(\"TransientHttpError\", (builder, _) => builder.AddPipeline(resiliencePipelineBuilder.Build())); // (Apizr) Get your manager instance var reqResManager = ApizrBuilder.Current.CreateManagerFor<IReqResService>( options => options // With a logger .WithLoggerFactory(LoggerFactory.Create(loggingBuilder => loggingBuilder.Debug())) // With the defined resilience pipeline registry .WithResiliencePipelineRegistry(resiliencePipelineRegistry) // And with a cache handler .WithAkavacheCacheHandler()); And then you're good to go: var userList = await reqResManager.ExecuteAsync((api, opt) => api.GetUsersAsync(opt)); This request will be managed with the defined resilience strategies, data cached and all logged. Apizr has a lot more to offer, just read the doc! Please read the Change Log to get a picture of what's in. Please read the Breaking changes to get a picture of what's changed. Where Managing (Core) Project Current Upcoming Apizr Apizr.Extensions.Microsoft.DependencyInjection Caching Project Current Upcoming Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Handling Project Current Upcoming Apizr.Integrations.Fusillade Apizr.Integrations.MediatR Apizr.Integrations.Optional Mapping Project Current Upcoming Apizr.Integrations.AutoMapper Apizr.Integrations.Mapster Transferring Project Current Upcoming Apizr.Integrations.FileTransfer Apizr.Extensions.Microsoft.FileTransfer Apizr.Integrations.FileTransfer.MediatR Apizr.Integrations.FileTransfer.Optional Generating Project Current Upcoming Refitter Refitter.SourceGenerator Install the NuGet reference package of your choice: Apizr package comes with the static builder instantiation approach (which you can register in your DI container then) Apizr.Extensions.Microsoft.DependencyInjection package extends your IServiceCollection with AddApizr, AddApizrFor and AddApizrCrudFor registration methods Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler method mapping implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler method mapping implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler method mapping implementation for MonkeyCache Apizr.Integrations.Fusillade package enables request priority management using Fusillade Apizr.Integrations.MediatR package enables request auto handling with mediation using MediatR Apizr.Integrations.Optional package enables Optional result from mediation requests (requires MediatR integration) using Optional.Async Apizr.Integrations.AutoMapper package enables data mapping using AutoMapper Apizr.Integrations.Mapster package enables data mapping using Mapster Apizr.Integrations.FileTransfer package enables file transfer management for static registration Apizr.Extensions.Microsoft.FileTransfer package enables file transfer management for extended registration Apizr.Integrations.FileTransfer.MediatR package enables file transfer management for mediation requests (requires MediatR integration and could work with Optional integration) using MediatR Apizr.Integrations.FileTransfer.Optional package enables file transfer management for mediation requests with optional result (requires MediatR integration and could work with Optional integration) using Optional.Async Choose which generating approach suites to your needs by installing either: Refitter .NET CLI Tool distributed via nuget.org that outputs a single C# file on disk Refiiter C# Source Generator via the Refitter.SourceGenerator package that generates code on compile time based on a .refitter within the project directory. Apizr core package make use of well known nuget packages to make the magic appear: Package Features Refit Auto-implement web api interface and deal with HttpClient Polly.Extensions Apply some policies like Retry, CircuitBreaker, etc... Microsoft.Extensions.Logging.Abstractions Delegate logging layer to MS Extensions Logging It also comes with some handling interfaces to let you provide your own services for: Caching with ICacheHandler, which comes with its default VoidCacheHandler (no cache), but also with: InMemoryCacheHandler & DistributedCacheHandler: MS Extensions Caching methods mapping interface (Integration package referenced above), meaning you can provide any compatible caching engine AkavacheCacheHandler: Akavache methods mapping interface (Integration package referenced above) MonkeyCacheHandler: MonkeyCache methods mapping interface (Integration package referenced above) Logging As Apizr relies on official MS ILogger interface, you may want to provide any compatible logging engine (built-in DebugLogger activated by default) Connectivity with IConnectivityHandler, which comes with its default VoidConnectivityHandler (no connectivity check) Mapping with IMappingHandler, which comes with its default VoidMappingHandler (no mapping conversion), but also with: AutoMapperMappingHandler: AutoMapper mapping methods mapping interface (Integration package referenced above) MapsterMappingHandler: Mapster mapping methods mapping interface (Integration package referenced above)"
  }
}