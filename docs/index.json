{
  "api/Apizr.AkavacheCacheHandler.html": {
    "href": "api/Apizr.AkavacheCacheHandler.html",
    "title": "Class AkavacheCacheHandler | Apizr",
    "keywords": "Class AkavacheCacheHandler Inheritance System.Object AkavacheCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Akavache.dll Syntax public class AkavacheCacheHandler : ICacheHandler Constructors AkavacheCacheHandler() Set Akavache as CacheHandler with LocalMachine blob cache and ApizrAkavacheCacheHandler name Declaration public AkavacheCacheHandler() AkavacheCacheHandler(Func<IBlobCache>) Set Akavache as CacheHandler with your blob cache and ApizrAkavacheCacheHandler name Declaration public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory) Parameters Type Name Description System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice AkavacheCacheHandler(Func<IBlobCache>, String) Set Akavache as CacheHandler with your blob cache and your provided name Declaration public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory, string applicationName) Parameters Type Name Description System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice System.String applicationName The application name used by Akavache AkavacheCacheHandler(String) Set Akavache as CacheHandler with LocalMachine blob cache and your provided name Declaration public AkavacheCacheHandler(string applicationName) Parameters Type Name Description System.String applicationName The application name used by Akavache Methods ClearAsync(CancellationToken) Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T RemoveAsync(String, CancellationToken) Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Declaration public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Object value System.Nullable < System.TimeSpan > lifeSpan System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.AkavacheOptionsBuilderExtensions.html": {
    "href": "api/Apizr.AkavacheOptionsBuilderExtensions.html",
    "title": "Class AkavacheOptionsBuilderExtensions | Apizr",
    "keywords": "Class AkavacheOptionsBuilderExtensions Inheritance System.Object AkavacheOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Akavache.dll Syntax public static class AkavacheOptionsBuilderExtensions Methods WithAkavacheCacheHandler<TBuilder>(TBuilder) Set Akavache as CacheHandler with LocalMachine blob cache and ApizrAkavacheCacheHandler name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) Set Akavache as CacheHandler with your blob cache and ApizrAkavacheCacheHandler name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, Func<IBlobCache> blobCacheFactory) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) Set Akavache as CacheHandler with your blob cache and your provided name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, Func<IBlobCache> blobCacheFactory, string applicationName) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice System.String applicationName The application name used by Akavache Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, String) Set Akavache as CacheHandler with LocalMachine blob cache and your provided name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, string applicationName) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder System.String applicationName The application name used by Akavache Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.ApizrBuilder.html": {
    "href": "api/Apizr.ApizrBuilder.html",
    "title": "Class ApizrBuilder | Apizr",
    "keywords": "Class ApizrBuilder Inheritance System.Object ApizrBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax public static class ApizrBuilder Methods CreateCrudManagerFor<T>(Action<IApizrOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T>(Action<IApizrOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) CreateCrudManagerFor<T, TKey>(Action<IApizrOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey>(Action<IApizrOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} Declaration public static IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrOptionsBuilder> optionsBuilder = null) where T : class where TReadAllParams : class Parameters Type Name Description System.Action < IApizrOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>, Action<IApizrOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static TApizrManager CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptionsBase, TApizrManager> apizrManagerFactory, Action<IApizrOptionsBuilder> optionsBuilder = null) where T : class where TReadAllParams : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Func < ILazyFactory < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrOptionsBase , TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description TApizrManager Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation CreateManagerFor<TWebApi>(Action<IApizrOptionsBuilder>) Create a ApizrManager<TWebApi> instance Declaration public static IApizrManager<TWebApi> CreateManagerFor<TWebApi>(Action<IApizrOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager <TWebApi> Type Parameters Name Description TWebApi The web api interface to manage CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>, Action<IApizrOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi Declaration public static TApizrManager CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description System.Func < ILazyFactory <TWebApi>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrOptions <TWebApi>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description TApizrManager Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation CreateRegistry(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options Declaration public static IApizrRegistry CreateRegistry(Action<IApizrRegistryBuilder> registryBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrRegistryBuilder > registryBuilder The registry builder with access to proper options System.Action < IApizrCommonOptionsBuilder > commonOptionsBuilder The common options shared by all managers Returns Type Description IApizrRegistry"
  },
  "api/Apizr.ApizrDefaults.html": {
    "href": "api/Apizr.ApizrDefaults.html",
    "title": "Class ApizrDefaults | Apizr",
    "keywords": "Class ApizrDefaults Inheritance System.Object ApizrDefaults Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrDefaults Fields DefaultCrudKeyType Declaration public static readonly Type DefaultCrudKeyType Field Value Type Description System.Type DefaultCrudReadAllParamsType Declaration public static readonly Type DefaultCrudReadAllParamsType Field Value Type Description System.Type DefaultCrudReadAllResultType Declaration public static readonly Type DefaultCrudReadAllResultType Field Value Type Description System.Type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.ApizrException.html": {
    "href": "api/Apizr.ApizrException.html",
    "title": "Class ApizrException | Apizr",
    "keywords": "Class ApizrException An exception with optional cached object Inheritance System.Object System.Exception ApizrException ApizrException<TResult> Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrException : Exception, ISerializable Constructors ApizrException(Exception) Declaration public ApizrException(Exception innerException) Parameters Type Name Description System.Exception innerException ApizrException(Exception, Object) Declaration public ApizrException(Exception innerException, object cachedResult) Parameters Type Name Description System.Exception innerException System.Object cachedResult Properties CachedResult Declaration public object CachedResult { get; } Property Value Type Description System.Object Implements System.Runtime.Serialization.ISerializable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.ApizrException-1.html": {
    "href": "api/Apizr.ApizrException-1.html",
    "title": "Class ApizrException<TResult> | Apizr",
    "keywords": "Class ApizrException<TResult> An exception with optional cached TResult Inheritance System.Object System.Exception ApizrException ApizrException<TResult> Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrException<TResult> : ApizrException, ISerializable Type Parameters Name Description TResult Constructors ApizrException(Exception) Declaration public ApizrException(Exception innerException) Parameters Type Name Description System.Exception innerException ApizrException(Exception, TResult) Declaration public ApizrException(Exception innerException, TResult cachedResult) Parameters Type Name Description System.Exception innerException TResult cachedResult Properties CachedResult Declaration public TResult CachedResult { get; } Property Value Type Description TResult Implements System.Runtime.Serialization.ISerializable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.ApizrManager-1.html": {
    "href": "api/Apizr.ApizrManager-1.html",
    "title": "Class ApizrManager<TWebApi> | Apizr",
    "keywords": "Class ApizrManager<TWebApi> Inheritance System.Object ApizrManager<TWebApi> Implements IApizrManager <TWebApi> IApizrManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrManager<TWebApi> : IApizrManager<TWebApi>, IApizrManager Type Parameters Name Description TWebApi Constructors ApizrManager(ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>) Declaration public ApizrManager(ILazyFactory<TWebApi> lazyWebApi, IConnectivityHandler connectivityHandler, ICacheHandler cacheHandler, IMappingHandler mappingHandler, IReadOnlyPolicyRegistry<string> policyRegistry, IApizrOptions<TWebApi> apizrOptions) Parameters Type Name Description ILazyFactory <TWebApi> lazyWebApi IConnectivityHandler connectivityHandler ICacheHandler cacheHandler IMappingHandler mappingHandler Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry IApizrOptions <TWebApi> apizrOptions Properties Api Declaration public TWebApi Api { get; } Property Value Type Description TWebApi Options Declaration public IApizrOptionsBase Options { get; } Property Value Type Description IApizrOptionsBase Methods ClearCacheAsync(CancellationToken) Declaration public async Task<bool> ClearCacheAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>>) Declaration public Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken) Declaration public async Task<bool> ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult ExecuteAsync(Expression<Func<TWebApi, Task>>, Action<Exception>) Declaration public async Task ExecuteAsync(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Declaration public async Task ExecuteAsync(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Declaration public async Task ExecuteAsync(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Declaration public async Task ExecuteAsync(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task ExecuteAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>>, Boolean, Action<Exception>) Declaration public async Task<TResult> ExecuteAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult ExecuteAsync<TResult>(Expression<Func<Context, TWebApi, Task<TResult>>>, Context, Boolean, Action<Exception>) Declaration public async Task<TResult> ExecuteAsync<TResult>(Expression<Func<Context, TWebApi, Task<TResult>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult ExecuteAsync<TResult>(Expression<Func<Context, CancellationToken, TWebApi, Task<TResult>>>, Context, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TResult> ExecuteAsync<TResult>(Expression<Func<Context, CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult ExecuteAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TResult> ExecuteAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration public async Task ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration public async Task ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Declaration public async Task ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Declaration public async Task ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration public async Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration public async Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Declaration public async Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData Implements IApizrManager<TWebApi> IApizrManager Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Authenticating.AuthenticationHandler.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler.html",
    "title": "Class AuthenticationHandler | Apizr",
    "keywords": "Class AuthenticationHandler Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler Implements System.IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public class AuthenticationHandler : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Constructors AuthenticationHandler(ILogger, IApizrOptionsBase, Func<HttpRequestMessage, Task<String>>) Declaration public AuthenticationHandler(ILogger logger, IApizrOptionsBase apizrOptions, Func<HttpRequestMessage, Task<string>> refreshToken) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger IApizrOptionsBase apizrOptions System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshToken Methods GetToken() Declaration public override string GetToken() Returns Type Description System.String Overrides AuthenticationHandlerBase.GetToken() RefreshTokenAsync(HttpRequestMessage) Declaration public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > Overrides AuthenticationHandlerBase.RefreshTokenAsync(HttpRequestMessage) SetToken(String) Declaration public override void SetToken(string token) Parameters Type Name Description System.String token Overrides AuthenticationHandlerBase.SetToken(String) Implements System.IDisposable IAuthenticationHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Authenticating.AuthenticationHandler-1.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler-1.html",
    "title": "Class AuthenticationHandler<TSettingsService> | Apizr",
    "keywords": "Class AuthenticationHandler<TSettingsService> Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler<TSettingsService> Implements System.IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public class AuthenticationHandler<TSettingsService> : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Type Parameters Name Description TSettingsService Constructors AuthenticationHandler(ILogger, IApizrOptionsBase, Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public AuthenticationHandler(ILogger logger, IApizrOptionsBase apizrOptions, Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> settingsTokenProperty, Func<HttpRequestMessage, Task<string>> refreshToken) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger IApizrOptionsBase apizrOptions System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> settingsTokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshToken Methods GetToken() Declaration public override string GetToken() Returns Type Description System.String Overrides AuthenticationHandlerBase.GetToken() RefreshTokenAsync(HttpRequestMessage) Declaration public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > Overrides AuthenticationHandlerBase.RefreshTokenAsync(HttpRequestMessage) SetToken(String) Declaration public override void SetToken(string token) Parameters Type Name Description System.String token Overrides AuthenticationHandlerBase.SetToken(String) Implements System.IDisposable IAuthenticationHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Authenticating.AuthenticationHandler-2.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler-2.html",
    "title": "Class AuthenticationHandler<TSettingsService, TTokenService> | Apizr",
    "keywords": "Class AuthenticationHandler<TSettingsService, TTokenService> Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler<TSettingsService, TTokenService> Implements System.IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public class AuthenticationHandler<TSettingsService, TTokenService> : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Type Parameters Name Description TSettingsService TTokenService Constructors AuthenticationHandler(ILogger, IApizrOptionsBase, Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public AuthenticationHandler(ILogger logger, IApizrOptionsBase apizrOptions, Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> settingsTokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger IApizrOptionsBase apizrOptions System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> settingsTokenProperty System.Func <TTokenService> tokenServiceFactory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Methods GetToken() Declaration public override string GetToken() Returns Type Description System.String Overrides AuthenticationHandlerBase.GetToken() RefreshTokenAsync(HttpRequestMessage) Declaration public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > Overrides AuthenticationHandlerBase.RefreshTokenAsync(HttpRequestMessage) SetToken(String) Declaration public override void SetToken(string token) Parameters Type Name Description System.String token Overrides AuthenticationHandlerBase.SetToken(String) Implements System.IDisposable IAuthenticationHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Authenticating.AuthenticationHandlerBase.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandlerBase.html",
    "title": "Class AuthenticationHandlerBase | Apizr",
    "keywords": "Class AuthenticationHandlerBase Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler AuthenticationHandler<TSettingsService> AuthenticationHandler<TSettingsService, TTokenService> Implements System.IDisposable IAuthenticationHandler Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public abstract class AuthenticationHandlerBase : DelegatingHandler, IDisposable, IAuthenticationHandler Constructors AuthenticationHandlerBase(ILogger, IApizrOptionsBase) Declaration protected AuthenticationHandlerBase(ILogger logger, IApizrOptionsBase apizrOptions) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger IApizrOptionsBase apizrOptions Methods CloneHttpRequestMessageAsync(HttpRequestMessage) Clone a HttpRequestMessage Credit: http://stackoverflow.com/questions/25044166/how-to-clone-a-httprequestmessage-when-the-original-request-has-content Declaration protected async Task<HttpRequestMessage> CloneHttpRequestMessageAsync(HttpRequestMessage req) Parameters Type Name Description System.Net.Http.HttpRequestMessage req The request Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpRequestMessage > A copy of the request GetToken() Declaration public abstract string GetToken() Returns Type Description System.String RefreshTokenAsync(HttpRequestMessage) Declaration public abstract Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) SetToken(String) Declaration public abstract void SetToken(string token) Parameters Type Name Description System.String token Implements System.IDisposable IAuthenticationHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Authenticating.html": {
    "href": "api/Apizr.Authenticating.html",
    "title": "Namespace Apizr.Authenticating | Apizr",
    "keywords": "Namespace Apizr.Authenticating Classes AuthenticationHandler AuthenticationHandler<TSettingsService> AuthenticationHandler<TSettingsService, TTokenService> AuthenticationHandlerBase Interfaces IAuthenticationHandler"
  },
  "api/Apizr.Authenticating.IAuthenticationHandler.html": {
    "href": "api/Apizr.Authenticating.IAuthenticationHandler.html",
    "title": "Interface IAuthenticationHandler | Apizr",
    "keywords": "Interface IAuthenticationHandler Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public interface IAuthenticationHandler Methods GetToken() The method called to get token from settings Declaration string GetToken() Returns Type Description System.String RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty Declaration Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request to authenticate Returns Type Description System.Threading.Tasks.Task < System.String > SetToken(String) The method called to save token into settings Declaration void SetToken(string token) Parameters Type Name Description System.String token The token to save Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.AutoMapperMappingHandler.html": {
    "href": "api/Apizr.AutoMapperMappingHandler.html",
    "title": "Class AutoMapperMappingHandler | Apizr",
    "keywords": "Class AutoMapperMappingHandler Inheritance System.Object AutoMapperMappingHandler Implements IMappingHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.AutoMapper.dll Syntax public class AutoMapperMappingHandler : IMappingHandler Constructors AutoMapperMappingHandler(IMapper) Declaration public AutoMapperMappingHandler(IMapper mapper) Parameters Type Name Description AutoMapper.IMapper mapper Methods Map(Object, Object, Type, Type) Declaration public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source System.Object destination System.Type sourceType System.Type destinationType Returns Type Description System.Object Map(Object, Type, Type) Declaration public object Map(object source, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source System.Type sourceType System.Type destinationType Returns Type Description System.Object Map<TDestination>(Object) Declaration public TDestination Map<TDestination>(object source) Parameters Type Name Description System.Object source Returns Type Description TDestination Type Parameters Name Description TDestination Map<TSource, TDestination>(TSource) Declaration public TDestination Map<TSource, TDestination>(TSource source) Parameters Type Name Description TSource source Returns Type Description TDestination Type Parameters Name Description TSource TDestination Map<TSource, TDestination>(TSource, TDestination) Declaration public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters Type Name Description TSource source TDestination destination Returns Type Description TDestination Type Parameters Name Description TSource TDestination Implements IMappingHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.AutoMapperOptionsBuilderExtensions.html": {
    "href": "api/Apizr.AutoMapperOptionsBuilderExtensions.html",
    "title": "Class AutoMapperOptionsBuilderExtensions | Apizr",
    "keywords": "Class AutoMapperOptionsBuilderExtensions Inheritance System.Object AutoMapperOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.AutoMapper.dll Syntax public static class AutoMapperOptionsBuilderExtensions Methods WithAutoMapperMappingHandler<TBuilder>(TBuilder) Set AutoMapper as MappingHandler Declaration public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) Set AutoMapper as MappingHandler Declaration public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder, IConfigurationProvider configuration) where TBuilder : IApizrCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder AutoMapper.IConfigurationProvider configuration Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.Caching.Attributes.CacheAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheAttribute.html",
    "title": "Class CacheAttribute | Apizr",
    "keywords": "Class CacheAttribute Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature Inheritance System.Object System.Attribute CacheAttributeBase CacheAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class CacheAttribute : CacheAttributeBase Constructors CacheAttribute() Declaration public CacheAttribute() CacheAttribute(CacheMode) Declaration public CacheAttribute(CacheMode mode) Parameters Type Name Description CacheMode mode CacheAttribute(CacheMode, Boolean) Declaration public CacheAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode System.Boolean shouldInvalidateOnError CacheAttribute(CacheMode, String) Declaration public CacheAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode System.String lifeSpanRepresentation CacheAttribute(CacheMode, String, Boolean) Declaration public CacheAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode System.String lifeSpanRepresentation System.Boolean shouldInvalidateOnError CacheAttribute(Boolean) Declaration public CacheAttribute(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError CacheAttribute(String) Declaration public CacheAttribute(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation CacheAttribute(TimeSpan, Boolean) Declaration public CacheAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan System.Boolean shouldInvalidateOnError Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Caching.Attributes.CacheAttributeBase.html": {
    "href": "api/Apizr.Caching.Attributes.CacheAttributeBase.html",
    "title": "Class CacheAttributeBase | Apizr",
    "keywords": "Class CacheAttributeBase Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature Inheritance System.Object System.Attribute CacheAttributeBase CacheAttribute CacheReadAllAttribute CacheReadAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax public abstract class CacheAttributeBase : Attribute Constructors CacheAttributeBase() Cache with no specific lifetime, default GetAndFetch mode and no invalidation on error Declaration protected CacheAttributeBase() CacheAttributeBase(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode Declaration protected CacheAttributeBase(CacheMode mode) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheAttributeBase(CacheMode, Boolean) Cache with a specific cache and invalidation on error, but no specific lifetime Declaration protected CacheAttributeBase(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttributeBase(CacheMode, String) Cache with a specific cache and mode specific lifetime, but no invalidation on error Declaration protected CacheAttributeBase(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation TimeSpan representation to parse CacheAttributeBase(CacheMode, String, Boolean) Cache with a specific cache mode, a specific lifetime and invalidation on error Declaration protected CacheAttributeBase(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttributeBase(Boolean) Cache with no specific lifetime, default GetAndFetch mode but with or without invalidation on error Declaration protected CacheAttributeBase(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttributeBase(String) Cache with default GetAndFetch mode, no invalidation on error but with a specific lifetime Declaration protected CacheAttributeBase(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation TimeSpan representation to parse CacheAttributeBase(TimeSpan, Boolean) Cache with a specific lifetime and invalidation on error, but default GetAndFetch mode Declaration protected CacheAttributeBase(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error Properties LifeSpan This specific caching life time Declaration public TimeSpan? LifeSpan { get; } Property Value Type Description System.Nullable < System.TimeSpan > Mode Tells Apizr to return a value if we get a cached result for it (GetOrFetch) or to try fetching fresh data every time (GetAndFetch) Declaration public CacheMode Mode { get; } Property Value Type Description CacheMode ShouldInvalidateOnError Tells Apizr to remove the cache on error Declaration public bool ShouldInvalidateOnError { get; } Property Value Type Description System.Boolean Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Caching.Attributes.CacheKeyAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheKeyAttribute.html",
    "title": "Class CacheKeyAttribute | Apizr",
    "keywords": "Class CacheKeyAttribute Tells Apizr the key to cache value at Inheritance System.Object System.Attribute CacheKeyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class CacheKeyAttribute : Attribute Constructors CacheKeyAttribute() The decorated parameter will be used as cache key (should be primitive otherwise ToString() method will be used, unless providing a property name) Declaration public CacheKeyAttribute() CacheKeyAttribute(String) If you use non primitive type (like your ModelClass object) as Cache Primary key you should provide property name of primitive primary Id, otherwise ToString() method will be used. Declaration public CacheKeyAttribute(string propertyName) Parameters Type Name Description System.String propertyName Property name. Properties PropertyName Declaration public string PropertyName { get; } Property Value Type Description System.String Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Caching.Attributes.CacheReadAllAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheReadAllAttribute.html",
    "title": "Class CacheReadAllAttribute | Apizr",
    "keywords": "Class CacheReadAllAttribute Inheritance System.Object System.Attribute CacheAttributeBase CacheReadAllAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CacheReadAllAttribute : CacheAttributeBase Constructors CacheReadAllAttribute() Declaration public CacheReadAllAttribute() CacheReadAllAttribute(CacheMode) Declaration public CacheReadAllAttribute(CacheMode mode) Parameters Type Name Description CacheMode mode CacheReadAllAttribute(CacheMode, Boolean) Declaration public CacheReadAllAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode System.Boolean shouldInvalidateOnError CacheReadAllAttribute(CacheMode, String) Declaration public CacheReadAllAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode System.String lifeSpanRepresentation CacheReadAllAttribute(CacheMode, String, Boolean) Declaration public CacheReadAllAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode System.String lifeSpanRepresentation System.Boolean shouldInvalidateOnError CacheReadAllAttribute(Boolean) Declaration public CacheReadAllAttribute(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError CacheReadAllAttribute(String) Declaration public CacheReadAllAttribute(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation CacheReadAllAttribute(TimeSpan, Boolean) Declaration public CacheReadAllAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan System.Boolean shouldInvalidateOnError Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Caching.Attributes.CacheReadAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheReadAttribute.html",
    "title": "Class CacheReadAttribute | Apizr",
    "keywords": "Class CacheReadAttribute Inheritance System.Object System.Attribute CacheAttributeBase CacheReadAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CacheReadAttribute : CacheAttributeBase Constructors CacheReadAttribute() Declaration public CacheReadAttribute() CacheReadAttribute(CacheMode) Declaration public CacheReadAttribute(CacheMode mode) Parameters Type Name Description CacheMode mode CacheReadAttribute(CacheMode, Boolean) Declaration public CacheReadAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode System.Boolean shouldInvalidateOnError CacheReadAttribute(CacheMode, String) Declaration public CacheReadAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode System.String lifeSpanRepresentation CacheReadAttribute(CacheMode, String, Boolean) Declaration public CacheReadAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode System.String lifeSpanRepresentation System.Boolean shouldInvalidateOnError CacheReadAttribute(Boolean) Declaration public CacheReadAttribute(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError CacheReadAttribute(String) Declaration public CacheReadAttribute(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation CacheReadAttribute(TimeSpan, Boolean) Declaration public CacheReadAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan System.Boolean shouldInvalidateOnError Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Caching.Attributes.html": {
    "href": "api/Apizr.Caching.Attributes.html",
    "title": "Namespace Apizr.Caching.Attributes | Apizr",
    "keywords": "Namespace Apizr.Caching.Attributes Classes CacheAttribute Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheAttributeBase Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheKeyAttribute Tells Apizr the key to cache value at CacheReadAllAttribute CacheReadAttribute"
  },
  "api/Apizr.Caching.CacheMode.html": {
    "href": "api/Apizr.Caching.CacheMode.html",
    "title": "Enum CacheMode | Apizr",
    "keywords": "Enum CacheMode Namespace : Apizr.Caching Assembly : Apizr.dll Syntax public enum CacheMode Fields Name Description GetAndFetch Returns fresh data when request succeed otherwise cached one if exist (dynamic data) GetOrFetch Returns cached data if we get some otherwise fresh one if request succeed (static data) None Returns fresh data when request succeed (no cache) Extension Methods ObjectExtensions.ToString(String, String)"
  },
  "api/Apizr.Caching.html": {
    "href": "api/Apizr.Caching.html",
    "title": "Namespace Apizr.Caching | Apizr",
    "keywords": "Namespace Apizr.Caching Classes VoidCacheHandler Interfaces ICacheHandler The cache handler method mapping interface Implement it to provide some caching features to Apizr Enums CacheMode"
  },
  "api/Apizr.Caching.ICacheHandler.html": {
    "href": "api/Apizr.Caching.ICacheHandler.html",
    "title": "Interface ICacheHandler | Apizr",
    "keywords": "Interface ICacheHandler The cache handler method mapping interface Implement it to provide some caching features to Apizr Namespace : Apizr.Caching Assembly : Apizr.dll Syntax public interface ICacheHandler Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Declaration Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Map Apizr cache getting method to your cache handler method Declaration Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to get from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T The expected value type RemoveAsync(String, CancellationToken) Map Apizr cache removing method to your cache handler method Declaration Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to remove from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Map Apizr cache saving method to your cache handler method Declaration Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to cache at System.Object value The value to cache System.Nullable < System.TimeSpan > lifeSpan The optional life span System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Caching.VoidCacheHandler.html": {
    "href": "api/Apizr.Caching.VoidCacheHandler.html",
    "title": "Class VoidCacheHandler | Apizr",
    "keywords": "Class VoidCacheHandler Inheritance System.Object VoidCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching Assembly : Apizr.dll Syntax public class VoidCacheHandler : ICacheHandler Methods ClearAsync(CancellationToken) Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T RemoveAsync(String, CancellationToken) Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Declaration public Task SetAsync(string key, object obj, TimeSpan? timeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Object obj System.Nullable < System.TimeSpan > timeSpan System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.ApizrOptions.html": {
    "href": "api/Apizr.Configuring.ApizrOptions.html",
    "title": "Class ApizrOptions | Apizr",
    "keywords": "Class ApizrOptions Inheritance System.Object ApizrSharedOptionsBase ApizrOptionsBase ApizrOptions Implements IApizrOptions IApizrOptionsBase IApizrCommonOptions IApizrCommonOptionsBase IApizrProperOptions IApizrProperOptionsBase IApizrSharedOptions IApizrSharedOptionsBase Inherited Members ApizrOptionsBase.WebApiType ApizrOptionsBase.PolicyRegistryKeys ApizrOptionsBase.Logger ApizrOptionsBase.RefitSettings ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public class ApizrOptions : ApizrOptionsBase, IApizrOptions, IApizrOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedOptions, IApizrSharedOptionsBase Constructors ApizrOptions(IApizrCommonOptions, IApizrProperOptions) Declaration public ApizrOptions(IApizrCommonOptions commonOptions, IApizrProperOptions properOptions) Parameters Type Name Description IApizrCommonOptions commonOptions IApizrProperOptions properOptions Properties BaseAddressFactory Declaration public Func<string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.String > BasePathFactory Declaration public Func<string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.String > BaseUriFactory Declaration public Func<Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.Uri > CacheHandlerFactory Declaration public Func<ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < ICacheHandler > ConnectivityHandlerFactory Declaration public Func<IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < IConnectivityHandler > DelegatingHandlersFactories Declaration public IList<Func<ILogger, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandlerFactory Declaration public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Declaration public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < HttpTracerMode > LoggerFactory Declaration public Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory , System.String , Microsoft.Extensions.Logging.ILogger > LoggerFactoryFactory Declaration public Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > LogLevelsFactory Declaration public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Declaration public Func<IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < IMappingHandler > PolicyRegistryFactory Declaration public Func<IReadOnlyPolicyRegistry<string>> PolicyRegistryFactory { get; set; } Property Value Type Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> RefitSettingsFactory Declaration public Func<RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < Refit.RefitSettings > TrafficVerbosityFactory Declaration public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < HttpMessageParts > Implements IApizrOptions IApizrOptionsBase IApizrCommonOptions IApizrCommonOptionsBase IApizrProperOptions IApizrProperOptionsBase IApizrSharedOptions IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.ApizrOptions-1.html": {
    "href": "api/Apizr.Configuring.ApizrOptions-1.html",
    "title": "Class ApizrOptions<TWebApi> | Apizr",
    "keywords": "Class ApizrOptions<TWebApi> Inheritance System.Object ApizrOptions<TWebApi> ApizrExtendedOptions<TWebApi> Implements IApizrOptions <TWebApi> IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public class ApizrOptions<TWebApi> : IApizrOptions<TWebApi>, IApizrOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Type Parameters Name Description TWebApi Constructors ApizrOptions(IApizrOptionsBase) Declaration public ApizrOptions(IApizrOptionsBase apizrOptions) Parameters Type Name Description IApizrOptionsBase apizrOptions Fields Options Declaration protected readonly IApizrOptionsBase Options Field Value Type Description IApizrOptionsBase Properties BaseAddress Declaration public string BaseAddress { get; } Property Value Type Description System.String BasePath Declaration public string BasePath { get; } Property Value Type Description System.String BaseUri Declaration public Uri BaseUri { get; } Property Value Type Description System.Uri HttpTracerMode Declaration public HttpTracerMode HttpTracerMode { get; } Property Value Type Description HttpTracerMode Logger Declaration public ILogger Logger { get; } Property Value Type Description Microsoft.Extensions.Logging.ILogger LogLevels Declaration public LogLevel[] LogLevels { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] PolicyRegistryKeys Declaration public string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] RefitSettings Declaration public RefitSettings RefitSettings { get; } Property Value Type Description Refit.RefitSettings TrafficVerbosity Declaration public HttpMessageParts TrafficVerbosity { get; } Property Value Type Description HttpMessageParts WebApiType Declaration public Type WebApiType { get; } Property Value Type Description System.Type Implements IApizrOptions<TWebApi> IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.ApizrOptionsBase.html": {
    "href": "api/Apizr.Configuring.ApizrOptionsBase.html",
    "title": "Class ApizrOptionsBase | Apizr",
    "keywords": "Class ApizrOptionsBase Inheritance System.Object ApizrSharedOptionsBase ApizrOptionsBase ApizrOptions ApizrExtendedOptionsBase Implements IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Inherited Members ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class ApizrOptionsBase : ApizrSharedOptionsBase, IApizrOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Constructors ApizrOptionsBase(IApizrCommonOptionsBase, IApizrProperOptionsBase) Declaration protected ApizrOptionsBase(IApizrCommonOptionsBase commonOptions, IApizrProperOptionsBase properOptions) Parameters Type Name Description IApizrCommonOptionsBase commonOptions IApizrProperOptionsBase properOptions Properties Logger Declaration public ILogger Logger { get; protected set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger PolicyRegistryKeys Declaration public string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] RefitSettings Declaration public RefitSettings RefitSettings { get; protected set; } Property Value Type Description Refit.RefitSettings WebApiType Declaration public Type WebApiType { get; } Property Value Type Description System.Type Implements IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.ApizrOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.ApizrOptionsBuilder.html",
    "title": "Class ApizrOptionsBuilder | Apizr",
    "keywords": "Class ApizrOptionsBuilder Inheritance System.Object ApizrOptionsBuilder Implements IApizrOptionsBuilder IApizrOptionsBuilder < IApizrOptions , IApizrOptionsBuilder > IApizrOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrGlobalOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrOptionsBuilderBase IApizrGlobalOptionsBuilderBase IApizrCommonOptionsBuilder < IApizrOptions , IApizrOptionsBuilder > IApizrCommonOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrProperOptionsBuilder < IApizrOptions , IApizrOptionsBuilder > IApizrProperOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrGlobalProperOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedOptionsBuilder < IApizrOptions , IApizrOptionsBuilder > IApizrSharedOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrOptions , IApizrOptionsBuilder > IApizrSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public class ApizrOptionsBuilder : IApizrOptionsBuilder, IApizrOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options Declaration protected readonly ApizrOptions Options Field Value Type Description ApizrOptions Properties ApizrOptions Declaration public IApizrOptions ApizrOptions { get; } Property Value Type Description IApizrOptions Methods AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) Declaration public IApizrOptionsBuilder AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler>) Declaration public IApizrOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrOptionsBuilder AddDelegatingHandler(DelegatingHandler) Declaration public IApizrOptionsBuilder AddDelegatingHandler(DelegatingHandler delegatingHandler) Parameters Type Name Description System.Net.Http.DelegatingHandler delegatingHandler Returns Type Description IApizrOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Declaration public IApizrOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshToken) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshToken Returns Type Description IApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshToken) Parameters Type Name Description TSettingsService settingsService System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshToken Returns Type Description IApizrOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshToken) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshToken Returns Type Description IApizrOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) Declaration public IApizrOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler> authenticationHandler) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , TAuthenticationHandler> authenticationHandler Returns Type Description IApizrOptionsBuilder Type Parameters Name Description TAuthenticationHandler WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty TTokenService tokenService System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func <TTokenService> tokenServiceFactory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithBaseAddress(Func<String>) Declaration public IApizrOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Returns Type Description IApizrOptionsBuilder WithBaseAddress(Func<Uri>) Declaration public IApizrOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Returns Type Description IApizrOptionsBuilder WithBaseAddress(String) Declaration public IApizrOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Returns Type Description IApizrOptionsBuilder WithBaseAddress(Uri) Declaration public IApizrOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Returns Type Description IApizrOptionsBuilder WithBasePath(Func<String>) Declaration public IApizrOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Returns Type Description IApizrOptionsBuilder WithBasePath(String) Declaration public IApizrOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Returns Type Description IApizrOptionsBuilder WithCacheHandler(ICacheHandler) Declaration public IApizrOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler Returns Type Description IApizrOptionsBuilder WithCacheHandler(Func<ICacheHandler>) Declaration public IApizrOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < ICacheHandler > cacheHandlerFactory Returns Type Description IApizrOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Declaration public IApizrOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler Returns Type Description IApizrOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Declaration public IApizrOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < IConnectivityHandler > connectivityHandlerFactory Returns Type Description IApizrOptionsBuilder WithConnectivityHandler(Func<Boolean>) Declaration public IApizrOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction Returns Type Description IApizrOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Declaration public IApizrOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory Returns Type Description IApizrOptionsBuilder WithHttpClientHandler(HttpClientHandler) Declaration public IApizrOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler Returns Type Description IApizrOptionsBuilder WithLoggerFactory(ILoggerFactory) Declaration public IApizrOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggerFactory loggerFactory Returns Type Description IApizrOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Declaration public IApizrOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > loggerFactory Returns Type Description IApizrOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Declaration public IApizrOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Returns Type Description IApizrOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Declaration public IApizrOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory System.Func < HttpMessageParts > trafficVerbosityFactory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Returns Type Description IApizrOptionsBuilder WithMappingHandler(IMappingHandler) Declaration public IApizrOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler Returns Type Description IApizrOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Declaration public IApizrOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < IMappingHandler > mappingHandlerFactory Returns Type Description IApizrOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) Declaration public IApizrOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<string> policyRegistry) Parameters Type Name Description Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry Returns Type Description IApizrOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) Declaration public IApizrOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<string>> policyRegistryFactory) Parameters Type Name Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> policyRegistryFactory Returns Type Description IApizrOptionsBuilder WithRefitSettings(RefitSettings) Declaration public IApizrOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings Returns Type Description IApizrOptionsBuilder WithRefitSettings(Func<RefitSettings>) Declaration public IApizrOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < Refit.RefitSettings > refitSettingsFactory Returns Type Description IApizrOptionsBuilder Implements IApizrOptionsBuilder IApizrOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> IApizrOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrOptionsBuilderBase IApizrGlobalOptionsBuilderBase IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedOptionsBuilder<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptions.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptions.html",
    "title": "Class ApizrCommonOptions | Apizr",
    "keywords": "Class ApizrCommonOptions Inheritance System.Object ApizrSharedOptionsBase ApizrCommonOptionsBase ApizrCommonOptions Implements IApizrCommonOptions IApizrCommonOptionsBase IApizrSharedOptions IApizrSharedOptionsBase Inherited Members ApizrCommonOptionsBase.RefitSettings ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public class ApizrCommonOptions : ApizrCommonOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrSharedOptions, IApizrSharedOptionsBase Constructors ApizrCommonOptions() Declaration public ApizrCommonOptions() Properties BaseAddressFactory Declaration public Func<string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.String > BasePathFactory Declaration public Func<string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.String > BaseUriFactory Declaration public Func<Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.Uri > CacheHandlerFactory Declaration public Func<ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < ICacheHandler > ConnectivityHandlerFactory Declaration public Func<IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < IConnectivityHandler > DelegatingHandlersFactories Declaration public IList<Func<ILogger, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandlerFactory Declaration public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Declaration public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < HttpTracerMode > LoggerFactoryFactory Declaration public Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > LogLevelsFactory Declaration public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Declaration public Func<IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < IMappingHandler > PolicyRegistryFactory Declaration public Func<IReadOnlyPolicyRegistry<string>> PolicyRegistryFactory { get; set; } Property Value Type Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> RefitSettingsFactory Declaration public Func<RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < Refit.RefitSettings > TrafficVerbosityFactory Declaration public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < HttpMessageParts > Implements IApizrCommonOptions IApizrCommonOptionsBase IApizrSharedOptions IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptionsBase.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptionsBase.html",
    "title": "Class ApizrCommonOptionsBase | Apizr",
    "keywords": "Class ApizrCommonOptionsBase Inheritance System.Object ApizrSharedOptionsBase ApizrCommonOptionsBase ApizrCommonOptions ApizrExtendedCommonOptions Implements IApizrCommonOptionsBase IApizrSharedOptionsBase Inherited Members ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public abstract class ApizrCommonOptionsBase : ApizrSharedOptionsBase, IApizrCommonOptionsBase, IApizrSharedOptionsBase Constructors ApizrCommonOptionsBase() Declaration protected ApizrCommonOptionsBase() Properties RefitSettings Declaration public RefitSettings RefitSettings { get; protected set; } Property Value Type Description Refit.RefitSettings Implements IApizrCommonOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptionsBuilder.html",
    "title": "Class ApizrCommonOptionsBuilder | Apizr",
    "keywords": "Class ApizrCommonOptionsBuilder Inheritance System.Object ApizrCommonOptionsBuilder Implements IApizrCommonOptionsBuilder IApizrCommonOptionsBuilder < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrCommonOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrSharedOptionsBuilder < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrSharedOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public class ApizrCommonOptionsBuilder : IApizrCommonOptionsBuilder, IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options Declaration protected readonly ApizrCommonOptions Options Field Value Type Description ApizrCommonOptions Properties ApizrOptions Declaration public IApizrCommonOptions ApizrOptions { get; } Property Value Type Description IApizrCommonOptions Methods AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) Declaration public IApizrCommonOptionsBuilder AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrCommonOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler>) Declaration public IApizrCommonOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrCommonOptionsBuilder AddDelegatingHandler(DelegatingHandler) Declaration public IApizrCommonOptionsBuilder AddDelegatingHandler(DelegatingHandler delegatingHandler) Parameters Type Name Description System.Net.Http.DelegatingHandler delegatingHandler Returns Type Description IApizrCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description TSettingsService settingsService System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , TAuthenticationHandler> authenticationHandlerFactory Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TAuthenticationHandler WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty TTokenService tokenService System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func <TTokenService> tokenServiceFactory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithBaseAddress(Func<String>) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Returns Type Description IApizrCommonOptionsBuilder WithBaseAddress(Func<Uri>) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Returns Type Description IApizrCommonOptionsBuilder WithBaseAddress(String) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Returns Type Description IApizrCommonOptionsBuilder WithBaseAddress(Uri) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Returns Type Description IApizrCommonOptionsBuilder WithBasePath(Func<String>) Declaration public IApizrCommonOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Returns Type Description IApizrCommonOptionsBuilder WithBasePath(String) Declaration public IApizrCommonOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Returns Type Description IApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler) Declaration public IApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler Returns Type Description IApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler>) Declaration public IApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < ICacheHandler > cacheHandlerFactory Returns Type Description IApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Declaration public IApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler Returns Type Description IApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Declaration public IApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < IConnectivityHandler > connectivityHandlerFactory Returns Type Description IApizrCommonOptionsBuilder WithConnectivityHandler(Func<Boolean>) Declaration public IApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction Returns Type Description IApizrCommonOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Declaration public IApizrCommonOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory Returns Type Description IApizrCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler) Declaration public IApizrCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler Returns Type Description IApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory) Declaration public IApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggerFactory loggerFactory Returns Type Description IApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Declaration public IApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > loggerFactory Returns Type Description IApizrCommonOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Declaration public IApizrCommonOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Returns Type Description IApizrCommonOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Declaration public IApizrCommonOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory System.Func < HttpMessageParts > trafficVerbosityFactory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Returns Type Description IApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler) Declaration public IApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler Returns Type Description IApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Declaration public IApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < IMappingHandler > mappingHandlerFactory Returns Type Description IApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) Declaration public IApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<string> policyRegistry) Parameters Type Name Description Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry Returns Type Description IApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) Declaration public IApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<string>> policyRegistryFactory) Parameters Type Name Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> policyRegistryFactory Returns Type Description IApizrCommonOptionsBuilder WithRefitSettings(RefitSettings) Declaration public IApizrCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings Returns Type Description IApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings>) Declaration public IApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < Refit.RefitSettings > refitSettingsFactory Returns Type Description IApizrCommonOptionsBuilder Implements IApizrCommonOptionsBuilder IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrSharedOptionsBuilder<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.html": {
    "href": "api/Apizr.Configuring.Common.html",
    "title": "Namespace Apizr.Configuring.Common | Apizr",
    "keywords": "Namespace Apizr.Configuring.Common Classes ApizrCommonOptions ApizrCommonOptionsBase ApizrCommonOptionsBuilder Interfaces IApizrCommonOptions IApizrCommonOptionsBase Common options IApizrCommonOptionsBuilder IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptions.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptions.html",
    "title": "Interface IApizrCommonOptions | Apizr",
    "keywords": "Interface IApizrCommonOptions Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrSharedOptions.BaseUriFactory IApizrSharedOptions.BaseAddressFactory IApizrSharedOptions.BasePathFactory IApizrSharedOptions.HttpTracerModeFactory IApizrSharedOptions.TrafficVerbosityFactory IApizrSharedOptions.LogLevelsFactory IApizrSharedOptions.HttpClientHandlerFactory IApizrSharedOptions.DelegatingHandlersFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptions : IApizrCommonOptionsBase, IApizrSharedOptions, IApizrSharedOptionsBase Properties CacheHandlerFactory Cache handler factory Declaration Func<ICacheHandler> CacheHandlerFactory { get; } Property Value Type Description System.Func < ICacheHandler > ConnectivityHandlerFactory Connectivity handler factory Declaration Func<IConnectivityHandler> ConnectivityHandlerFactory { get; } Property Value Type Description System.Func < IConnectivityHandler > LoggerFactoryFactory The LoggerFactory factory (I know, I know...) Declaration Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > MappingHandlerFactory Mapping handler factory Declaration Func<IMappingHandler> MappingHandlerFactory { get; } Property Value Type Description System.Func < IMappingHandler > PolicyRegistryFactory Policy registry factory Declaration Func<IReadOnlyPolicyRegistry<string>> PolicyRegistryFactory { get; } Property Value Type Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> RefitSettingsFactory Refit settings factory Declaration Func<RefitSettings> RefitSettingsFactory { get; } Property Value Type Description System.Func < Refit.RefitSettings > Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBase.html",
    "title": "Interface IApizrCommonOptionsBase | Apizr",
    "keywords": "Interface IApizrCommonOptionsBase Common options Inherited Members IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBase : IApizrSharedOptionsBase Properties RefitSettings Refit settings Declaration RefitSettings RefitSettings { get; } Property Value Type Description Refit.RefitSettings Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder.html",
    "title": "Interface IApizrCommonOptionsBuilder | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilder Inherited Members IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.AddDelegatingHandler(Func<ILogger, DelegatingHandler>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilder : IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder-2.html",
    "title": "Interface IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler(Func<ILogger, DelegatingHandler>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilder<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Type Parameters Name Description TApizrCommonOptions TApizrCommonOptionsBuilder Methods WithCacheHandler(Func<ICacheHandler>) Provide a cache handler to cache data Declaration TApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < ICacheHandler > cacheHandlerFactory An ICacheHandler mapping implementation instance factory Returns Type Description TApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Provide a connectivity handler Declaration TApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < IConnectivityHandler > connectivityHandlerFactory An IConnectivityHandler mapping implementation instance factory Returns Type Description TApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory) Provide a logger factory Declaration TApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggerFactory loggerFactory The logger factory Returns Type Description TApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Provide a logger factory Declaration TApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > loggerFactory The logger factory Returns Type Description TApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Provide a mapping handler to map entities Declaration TApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < IMappingHandler > mappingHandlerFactory An IMappingHandler mapping implementation instance factory Returns Type Description TApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) Provide a policy registry Declaration TApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<string> policyRegistry) Parameters Type Name Description Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry A policy registry instance Returns Type Description TApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) Provide a policy registry Declaration TApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<string>> policyRegistryFactory) Parameters Type Name Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> policyRegistryFactory A policy registry instance factory Returns Type Description TApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings>) Provide some Refit specific settings Declaration TApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description TApizrCommonOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase.html",
    "title": "Interface IApizrCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilderBase Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase-2.html",
    "title": "Interface IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Type Parameters Name Description TApizrCommonOptions TApizrCommonOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.IApizrExtendedCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrExtendedCommonOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilderBase Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrExtendedCommonOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalCommonOptionsBuilderBase Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrGlobalCommonOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrGlobalCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Type Parameters Name Description TApizrCommonOptions TApizrCommonOptionsBuilder Methods WithCacheHandler(ICacheHandler) Provide a cache handler to cache data Declaration TApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler An ICacheHandler mapping implementation instance Returns Type Description TApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler An IConnectivityHandler mapping implementation instance Returns Type Description TApizrCommonOptionsBuilder WithConnectivityHandler(Func<Boolean>) Provide a function to invoke while checking connectivity Declaration TApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction A function to invoke while checking connectivity Returns Type Description TApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities Declaration TApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler An IMappingHandler mapping implementation instance Returns Type Description TApizrCommonOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings Declaration TApizrCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings A Refit.RefitSettings instance Returns Type Description TApizrCommonOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.html": {
    "href": "api/Apizr.Configuring.html",
    "title": "Namespace Apizr.Configuring | Apizr",
    "keywords": "Namespace Apizr.Configuring Classes ApizrOptions ApizrOptions<TWebApi> ApizrOptionsBase ApizrOptionsBuilder Interfaces IApizrExtendedOptionsBuilderBase IApizrGlobalOptionsBuilderBase IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrOptions IApizrOptions<TWebApi> Options dedicated to TWebApi IApizrOptionsBase Specific options IApizrOptionsBuilder IApizrOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> The options builder IApizrOptionsBuilderBase IApizrOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>"
  },
  "api/Apizr.Configuring.IApizrExtendedOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.IApizrExtendedOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedOptionsBuilderBase Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrExtendedOptionsBuilderBase : IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.IApizrGlobalOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.IApizrGlobalOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalOptionsBuilderBase Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrGlobalOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.IApizrGlobalOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.IApizrGlobalOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrGlobalOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrOptionsBase where TApizrOptionsBuilder : IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.IApizrOptions.html": {
    "href": "api/Apizr.Configuring.IApizrOptions.html",
    "title": "Interface IApizrOptions | Apizr",
    "keywords": "Interface IApizrOptions Inherited Members IApizrCommonOptions.LoggerFactoryFactory IApizrCommonOptions.PolicyRegistryFactory IApizrCommonOptions.RefitSettingsFactory IApizrCommonOptions.ConnectivityHandlerFactory IApizrCommonOptions.CacheHandlerFactory IApizrCommonOptions.MappingHandlerFactory IApizrCommonOptionsBase.RefitSettings IApizrProperOptions.LoggerFactory IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedOptions.BaseUriFactory IApizrSharedOptions.BaseAddressFactory IApizrSharedOptions.BasePathFactory IApizrSharedOptions.HttpTracerModeFactory IApizrSharedOptions.TrafficVerbosityFactory IApizrSharedOptions.LogLevelsFactory IApizrSharedOptions.HttpClientHandlerFactory IApizrSharedOptions.DelegatingHandlersFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrOptions : IApizrOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedOptions, IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.IApizrOptions-1.html": {
    "href": "api/Apizr.Configuring.IApizrOptions-1.html",
    "title": "Interface IApizrOptions<TWebApi> | Apizr",
    "keywords": "Interface IApizrOptions<TWebApi> Options dedicated to TWebApi Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrOptions<TWebApi> : IApizrOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Type Parameters Name Description TWebApi Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.IApizrOptionsBase.html": {
    "href": "api/Apizr.Configuring.IApizrOptionsBase.html",
    "title": "Interface IApizrOptionsBase | Apizr",
    "keywords": "Interface IApizrOptionsBase Specific options Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrOptionsBase : IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.IApizrOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.IApizrOptionsBuilder.html",
    "title": "Interface IApizrOptionsBuilder | Apizr",
    "keywords": "Interface IApizrOptionsBuilder Inherited Members IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.AddDelegatingHandler(Func<ILogger, DelegatingHandler>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrOptionsBuilder : IApizrOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrCommonOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilder<IApizrOptions, IApizrOptionsBuilder>, IApizrSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrOptions, IApizrOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.IApizrOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.IApizrOptionsBuilder-2.html",
    "title": "Interface IApizrOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> The options builder Inherited Members IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler(Func<ILogger, DelegatingHandler>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> : IApizrOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrOptionsBase where TApizrOptionsBuilder : IApizrOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.IApizrOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.IApizrOptionsBuilderBase.html",
    "title": "Interface IApizrOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrOptionsBuilderBase Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrOptionsBuilderBase : IApizrCommonOptionsBuilderBase, IApizrProperOptionsBuilderBase, IApizrSharedOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.IApizrOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.IApizrOptionsBuilderBase-2.html",
    "title": "Interface IApizrOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public interface IApizrOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrOptionsBuilderBase, IApizrCommonOptionsBuilderBase, IApizrProperOptionsBuilderBase, IApizrSharedOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrOptionsBase where TApizrOptionsBuilder : IApizrOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptions.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptions.html",
    "title": "Class ApizrProperOptions | Apizr",
    "keywords": "Class ApizrProperOptions Inheritance System.Object ApizrSharedOptionsBase ApizrProperOptionsBase ApizrProperOptions Implements IApizrProperOptions IApizrProperOptionsBase IApizrSharedOptions IApizrSharedOptionsBase Inherited Members ApizrProperOptionsBase.WebApiType ApizrProperOptionsBase.PolicyRegistryKeys ApizrProperOptionsBase.Logger ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public class ApizrProperOptions : ApizrProperOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedOptions, IApizrSharedOptionsBase Constructors ApizrProperOptions(IApizrSharedOptions, Type, String[], String[], String, String, Nullable<HttpTracerMode>, Nullable<HttpMessageParts>, LogLevel[]) Declaration public ApizrProperOptions(IApizrSharedOptions sharedOptions, Type webApiType, string[] assemblyPolicyRegistryKeys, string[] webApiPolicyRegistryKeys, string baseAddress, string basePath, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description IApizrSharedOptions sharedOptions System.Type webApiType System.String [] assemblyPolicyRegistryKeys System.String [] webApiPolicyRegistryKeys System.String baseAddress System.String basePath System.Nullable < HttpTracerMode > httpTracerMode System.Nullable < HttpMessageParts > trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Properties BaseAddressFactory Declaration public Func<string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.String > BasePathFactory Declaration public Func<string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.String > BaseUriFactory Declaration public Func<Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.Uri > DelegatingHandlersFactories Declaration public IList<Func<ILogger, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandlerFactory Declaration public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Declaration public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < HttpTracerMode > LoggerFactory Declaration public Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory , System.String , Microsoft.Extensions.Logging.ILogger > LogLevelsFactory Declaration public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Declaration public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < HttpMessageParts > Implements IApizrProperOptions IApizrProperOptionsBase IApizrSharedOptions IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptionsBase.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptionsBase.html",
    "title": "Class ApizrProperOptionsBase | Apizr",
    "keywords": "Class ApizrProperOptionsBase Inheritance System.Object ApizrSharedOptionsBase ApizrProperOptionsBase ApizrProperOptions ApizrExtendedProperOptions Implements IApizrProperOptionsBase IApizrSharedOptionsBase Inherited Members ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public abstract class ApizrProperOptionsBase : ApizrSharedOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Constructors ApizrProperOptionsBase(IApizrSharedOptionsBase, Type, String[], String[]) Declaration protected ApizrProperOptionsBase(IApizrSharedOptionsBase sharedOptions, Type webApiType, string[] assemblyPolicyRegistryKeys, string[] webApiPolicyRegistryKeys) Parameters Type Name Description IApizrSharedOptionsBase sharedOptions System.Type webApiType System.String [] assemblyPolicyRegistryKeys System.String [] webApiPolicyRegistryKeys Properties Logger Declaration public ILogger Logger { get; protected set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger PolicyRegistryKeys Declaration public string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] WebApiType Declaration public Type WebApiType { get; } Property Value Type Description System.Type Implements IApizrProperOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptionsBuilder.html",
    "title": "Class ApizrProperOptionsBuilder | Apizr",
    "keywords": "Class ApizrProperOptionsBuilder Inheritance System.Object ApizrProperOptionsBuilder Implements IApizrProperOptionsBuilder IApizrProperOptionsBuilder < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrProperOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrGlobalProperOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedOptionsBuilder < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrSharedOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public class ApizrProperOptionsBuilder : IApizrProperOptionsBuilder, IApizrProperOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options Declaration protected readonly ApizrProperOptions Options Field Value Type Description ApizrProperOptions Properties ApizrOptions Declaration public IApizrProperOptions ApizrOptions { get; } Property Value Type Description IApizrProperOptions Methods AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) Declaration public IApizrProperOptionsBuilder AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrProperOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler>) Declaration public IApizrProperOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrProperOptionsBuilder AddDelegatingHandler(DelegatingHandler) Declaration public IApizrProperOptionsBuilder AddDelegatingHandler(DelegatingHandler delegatingHandler) Parameters Type Name Description System.Net.Http.DelegatingHandler delegatingHandler Returns Type Description IApizrProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description TSettingsService settingsService System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , TAuthenticationHandler> authenticationHandlerFactory Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TAuthenticationHandler WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty TTokenService tokenService System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func <TTokenService> tokenServiceFactory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithBaseAddress(Func<String>) Declaration public IApizrProperOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Returns Type Description IApizrProperOptionsBuilder WithBaseAddress(Func<Uri>) Declaration public IApizrProperOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Returns Type Description IApizrProperOptionsBuilder WithBaseAddress(String) Declaration public IApizrProperOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Returns Type Description IApizrProperOptionsBuilder WithBaseAddress(Uri) Declaration public IApizrProperOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Returns Type Description IApizrProperOptionsBuilder WithBasePath(Func<String>) Declaration public IApizrProperOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Returns Type Description IApizrProperOptionsBuilder WithBasePath(String) Declaration public IApizrProperOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Returns Type Description IApizrProperOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Declaration public IApizrProperOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory Returns Type Description IApizrProperOptionsBuilder WithHttpClientHandler(HttpClientHandler) Declaration public IApizrProperOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler Returns Type Description IApizrProperOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Declaration public IApizrProperOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Returns Type Description IApizrProperOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Declaration public IApizrProperOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory System.Func < HttpMessageParts > trafficVerbosityFactory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Returns Type Description IApizrProperOptionsBuilder Implements IApizrProperOptionsBuilder IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedOptionsBuilder<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.html": {
    "href": "api/Apizr.Configuring.Proper.html",
    "title": "Namespace Apizr.Configuring.Proper | Apizr",
    "keywords": "Namespace Apizr.Configuring.Proper Classes ApizrProperOptions ApizrProperOptionsBase ApizrProperOptionsBuilder Interfaces IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptions IApizrProperOptionsBase Common options IApizrProperOptionsBuilder IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>"
  },
  "api/Apizr.Configuring.Proper.IApizrExtendedProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrExtendedProperOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilderBase Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrExtendedProperOptionsBuilderBase : IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalProperOptionsBuilderBase Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrGlobalProperOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrGlobalProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Type Parameters Name Description TApizrProperOptions TApizrProperOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptions.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptions.html",
    "title": "Interface IApizrProperOptions | Apizr",
    "keywords": "Interface IApizrProperOptions Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedOptions.BaseUriFactory IApizrSharedOptions.BaseAddressFactory IApizrSharedOptions.BasePathFactory IApizrSharedOptions.HttpTracerModeFactory IApizrSharedOptions.TrafficVerbosityFactory IApizrSharedOptions.LogLevelsFactory IApizrSharedOptions.HttpClientHandlerFactory IApizrSharedOptions.DelegatingHandlersFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptions : IApizrProperOptionsBase, IApizrSharedOptions, IApizrSharedOptionsBase Properties LoggerFactory The Logger factory Declaration Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory , System.String , Microsoft.Extensions.Logging.ILogger > Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBase.html",
    "title": "Interface IApizrProperOptionsBase | Apizr",
    "keywords": "Interface IApizrProperOptionsBase Common options Inherited Members IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBase : IApizrSharedOptionsBase Properties Logger The logger instance Declaration ILogger Logger { get; } Property Value Type Description Microsoft.Extensions.Logging.ILogger PolicyRegistryKeys Policy keys from the registry Declaration string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] WebApiType Web api interface type Declaration Type WebApiType { get; } Property Value Type Description System.Type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder.html",
    "title": "Interface IApizrProperOptionsBuilder | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilder Inherited Members IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.AddDelegatingHandler(Func<ILogger, DelegatingHandler>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilder : IApizrProperOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder-2.html",
    "title": "Interface IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> Inherited Members IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler(Func<ILogger, DelegatingHandler>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilder<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Type Parameters Name Description TApizrProperOptions TApizrProperOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase.html",
    "title": "Interface IApizrProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilderBase Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilderBase : IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase-2.html",
    "title": "Interface IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Type Parameters Name Description TApizrProperOptions TApizrProperOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistry.html",
    "title": "Class ApizrRegistry | Apizr",
    "keywords": "Class ApizrRegistry Inheritance System.Object ApizrRegistryBase ApizrRegistry Implements IApizrRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> System.Collections.IEnumerable Inherited Members ApizrRegistryBase.GetEnumerator() ApizrRegistryBase.IEnumerable.GetEnumerator() ApizrRegistryBase.GetCrudManagerFor<T>() ApizrRegistryBase.GetCrudManagerFor<T, TKey>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.GetManagerFor<TWebApi>() ApizrRegistryBase.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) ApizrRegistryBase.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) ApizrRegistryBase.Count ApizrRegistryBase.ContainsCrudManagerFor<T>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.ContainsManagerFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public class ApizrRegistry : ApizrRegistryBase, IApizrRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Methods AddOrUpdateManagerFor(Type, Func<IApizrManager>) Declaration public void AddOrUpdateManagerFor(Type webApiType, Func<IApizrManager> managerFactory) Parameters Type Name Description System.Type webApiType System.Func < IApizrManager > managerFactory AddOrUpdateManagerFor<TWebApi>(Func<IApizrManager<TWebApi>>) Declaration public void AddOrUpdateManagerFor<TWebApi>(Func<IApizrManager<TWebApi>> managerFactory) Parameters Type Name Description System.Func < IApizrManager <TWebApi>> managerFactory Type Parameters Name Description TWebApi Populate(Action<Type, Func<Object>>) Declaration public void Populate(Action<Type, Func<object>> populateAction) Parameters Type Name Description System.Action < System.Type , System.Func < System.Object >> populateAction Implements IApizrRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistryBase.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistryBase.html",
    "title": "Class ApizrRegistryBase | Apizr",
    "keywords": "Class ApizrRegistryBase Inheritance System.Object ApizrRegistryBase ApizrRegistry ApizrExtendedRegistry Implements IApizrEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public abstract class ApizrRegistryBase : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Constructors ApizrRegistryBase() Declaration protected ApizrRegistryBase() Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudManagerFor<T>() Declaration public bool ContainsCrudManagerFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T ContainsCrudManagerFor<T, TKey>() Declaration public bool ContainsCrudManagerFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey ContainsCrudManagerFor<T, TKey, TReadAllResult>() Declaration public bool ContainsCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Declaration public bool ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TReadAllParams ContainsManagerFor<TWebApi>() Declaration public bool ContainsManagerFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi GetCrudManagerFor<T>() Declaration public IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T>() where T : class Returns Type Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T GetCrudManagerFor<T, TKey>() Declaration public IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T, TKey>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T TKey GetCrudManagerFor<T, TKey, TReadAllResult>() Declaration public IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> GetCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T TKey TReadAllResult GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Declaration public IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> Type Parameters Name Description T TKey TReadAllResult TReadAllParams GetEnumerator() Declaration public IEnumerator<KeyValuePair<Type, Func<IApizrManager>>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> GetManagerFor<TWebApi>() Declaration public IApizrManager<TWebApi> GetManagerFor<TWebApi>() Returns Type Description IApizrManager <TWebApi> Type Parameters Name Description TWebApi TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) Declaration public bool TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) Declaration public bool TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T TKey TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) Declaration public bool TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) Declaration public bool TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> manager Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TReadAllParams TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) Declaration public bool TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi> manager) Parameters Type Name Description IApizrManager <TWebApi> manager Returns Type Description System.Boolean Type Parameters Name Description TWebApi Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IApizrEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistryBuilder.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistryBuilder.html",
    "title": "Class ApizrRegistryBuilder | Apizr",
    "keywords": "Class ApizrRegistryBuilder Inheritance System.Object ApizrRegistryBuilder Implements IApizrRegistryBuilder IApizrRegistryBuilder < IApizrRegistry , IApizrRegistryBuilder , IApizrProperOptionsBuilder , IApizrCommonOptionsBuilder > IApizrRegistryBuilderBase < IApizrRegistry , IApizrRegistryBuilder , IApizrProperOptionsBuilder , IApizrCommonOptionsBuilder > IApizrRegistryBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public class ApizrRegistryBuilder : IApizrRegistryBuilder, IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase Fields CommonOptions Declaration protected readonly IApizrCommonOptions CommonOptions Field Value Type Description IApizrCommonOptions Registry Declaration protected readonly ApizrRegistry Registry Field Value Type Description ApizrRegistry Properties ApizrRegistry Declaration public IApizrRegistry ApizrRegistry { get; } Property Value Type Description IApizrRegistry Methods AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder>) Declaration public IApizrRegistryBuilder AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > optionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder>) Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T TKey AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder>) Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T TKey TReadAllResult AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder>) Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T TKey TReadAllResult TReadAllParams AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>, Action<IApizrProperOptionsBuilder>) Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptionsBase, TApizrManager> apizrManagerFactory, Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class where TReadAllParams : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Func < ILazyFactory < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrOptionsBase , TApizrManager> apizrManagerFactory System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T TKey TReadAllResult TReadAllParams TApizrManager AddGroup(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Declaration public IApizrRegistryBuilder AddGroup(Action<IApizrRegistryBuilder> registryGroupBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrRegistryBuilder > registryGroupBuilder System.Action < IApizrCommonOptionsBuilder > commonOptionsBuilder Returns Type Description IApizrRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder>) Declaration public IApizrRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TWebApi AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>, Action<IApizrProperOptionsBuilder>) Declaration public IApizrRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description System.Func < ILazyFactory <TWebApi>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrOptions <TWebApi>, TApizrManager> apizrManagerFactory System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TWebApi TApizrManager Implements IApizrRegistryBuilder IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> IApizrRegistryBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.html": {
    "href": "api/Apizr.Configuring.Registry.html",
    "title": "Namespace Apizr.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Configuring.Registry Classes ApizrRegistry ApizrRegistryBase ApizrRegistryBuilder Interfaces IApizrEnumerableRegistry IApizrRegistry IApizrRegistryBuilder IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> IApizrRegistryBuilderBase IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>"
  },
  "api/Apizr.Configuring.Registry.IApizrEnumerableRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrEnumerableRegistry.html",
    "title": "Interface IApizrEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrEnumerableRegistry Inherited Members System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Properties Count Managers count Declaration int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudManagerFor<T>() Check if registry contains a manager for T entity type Declaration bool ContainsCrudManagerFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudManagerFor<T, TKey>() Check if registry contains a manager for T entity type with TKey key type Declaration bool ContainsCrudManagerFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudManagerFor<T, TKey, TReadAllResult>() Check if registry contains a manager for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration bool ContainsCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a manager for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration bool ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsManagerFor<TWebApi>() Check if registry contains a manager for TWebApi api type Declaration bool ContainsManagerFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudManagerFor<T>() Get a Crud manager instance for an entity type Declaration IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T>() where T : class Returns Type Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type GetCrudManagerFor<T, TKey>() Get a Crud manager instance for an entity type with a specific key type Declaration IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T, TKey>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudManagerFor<T, TKey, TReadAllResult>() Get a Crud manager instance for an entity type with a specific key type and ReadAll result type Declaration IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> GetCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetManagerFor<TWebApi>() Get an api manager instance Declaration IApizrManager<TWebApi> GetManagerFor<TWebApi>() Returns Type Description IApizrManager <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type Declaration bool TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type with a specific key type Declaration bool TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type with a specific key type and ReadAll result type Declaration bool TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) Try to get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration bool TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) Try to get an api manager instance Declaration bool TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi> manager) Parameters Type Name Description IApizrManager <TWebApi> manager Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistry.html",
    "title": "Interface IApizrRegistry | Apizr",
    "keywords": "Interface IApizrRegistry Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistry : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Methods Populate(Action<Type, Func<Object>>) Declaration void Populate(Action<Type, Func<object>> populateAction) Parameters Type Name Description System.Action < System.Type , System.Func < System.Object >> populateAction Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilder.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilder.html",
    "title": "Interface IApizrRegistryBuilder | Apizr",
    "keywords": "Interface IApizrRegistryBuilder Inherited Members IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>, Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>, Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddGroup(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder>) Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilder : IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilder-4.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilder-4.html",
    "title": "Interface IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Inherited Members IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddGroup(Action<TApizrRegistryBuilder>, Action<TApizrCommonOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder>) Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilder<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> : IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase where TApizrRegistry : IApizrEnumerableRegistry where TApizrRegistryBuilder : IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase Type Parameters Name Description TApizrRegistry TApizrRegistryBuilder TApizrProperOptionsBuilder TApizrCommonOptionsBuilder Methods AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>, Action<TApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptionsBase, TApizrManager> apizrManagerFactory, Action<TApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class where TReadAllParams : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Func < ILazyFactory < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrOptionsBase , TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action <TApizrProperOptionsBuilder> properOptionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>, Action<TApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi Declaration TApizrRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<TApizrProperOptionsBuilder> properOptionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description System.Func < ILazyFactory <TWebApi>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrOptions <TWebApi>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action <TApizrProperOptionsBuilder> properOptionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase.html",
    "title": "Interface IApizrRegistryBuilderBase | Apizr",
    "keywords": "Interface IApizrRegistryBuilderBase Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase-4.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase-4.html",
    "title": "Interface IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilderBase<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> : IApizrRegistryBuilderBase where TApizrRegistry : IApizrEnumerableRegistry where TApizrRegistryBuilder : IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> where TApizrProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase where TApizrCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase Type Parameters Name Description TApizrRegistry TApizrRegistryBuilder TApizrProperOptionsBuilder TApizrCommonOptionsBuilder Properties ApizrRegistry Apizr registry Declaration TApizrRegistry ApizrRegistry { get; } Property Value Type Description TApizrRegistry Methods AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrRegistryBuilder AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddGroup(Action<TApizrRegistryBuilder>, Action<TApizrCommonOptionsBuilder>) Group registrations sharing specific common options Declaration TApizrRegistryBuilder AddGroup(Action<TApizrRegistryBuilder> registryGroupBuilder, Action<TApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action <TApizrRegistryBuilder> registryGroupBuilder The registry group System.Action <TApizrCommonOptionsBuilder> commonOptionsBuilder The group common options Returns Type Description TApizrRegistryBuilder AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance Declaration TApizrRegistryBuilder AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.ApizrSharedOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.ApizrSharedOptionsBase.html",
    "title": "Class ApizrSharedOptionsBase | Apizr",
    "keywords": "Class ApizrSharedOptionsBase Inheritance System.Object ApizrSharedOptionsBase ApizrOptionsBase ApizrCommonOptionsBase ApizrProperOptionsBase Implements IApizrSharedOptionsBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public abstract class ApizrSharedOptionsBase : IApizrSharedOptionsBase Constructors ApizrSharedOptionsBase() Declaration protected ApizrSharedOptionsBase() Properties BaseAddress Declaration public string BaseAddress { get; protected set; } Property Value Type Description System.String BasePath Declaration public string BasePath { get; protected set; } Property Value Type Description System.String BaseUri Declaration public Uri BaseUri { get; protected set; } Property Value Type Description System.Uri HttpTracerMode Declaration public HttpTracerMode HttpTracerMode { get; protected set; } Property Value Type Description HttpTracerMode LogLevels Declaration public LogLevel[] LogLevels { get; protected set; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] TrafficVerbosity Declaration public HttpMessageParts TrafficVerbosity { get; protected set; } Property Value Type Description HttpMessageParts Implements IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.html": {
    "href": "api/Apizr.Configuring.Shared.html",
    "title": "Namespace Apizr.Configuring.Shared | Apizr",
    "keywords": "Namespace Apizr.Configuring.Shared Classes ApizrSharedOptionsBase Interfaces IApizrExtendedSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptions IApizrSharedOptionsBase IApizrSharedOptionsBuilder<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrSharedOptionsBuilderBase IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>"
  },
  "api/Apizr.Configuring.Shared.IApizrExtendedSharedOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrExtendedSharedOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedSharedOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptionsBuilderBase Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrExtendedSharedOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalSharedOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBuilderBase Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedOptionsBuilderBase<out TApizrSharedOptions, out TApizrSharedOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase where TApizrSharedOptions : IApizrSharedOptionsBase where TApizrSharedOptionsBuilder : IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> Type Parameters Name Description TApizrSharedOptions TApizrSharedOptionsBuilder Properties ApizrOptions Apizr common options Declaration TApizrSharedOptions ApizrOptions { get; } Property Value Type Description TApizrSharedOptions Methods AddDelegatingHandler(DelegatingHandler) Add a custom delegating handler Declaration TApizrSharedOptionsBuilder AddDelegatingHandler(DelegatingHandler delegatingHandler) Parameters Type Name Description System.Net.Http.DelegatingHandler delegatingHandler A delegating handler Returns Type Description TApizrSharedOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration TApizrSharedOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description TApizrSharedOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrSharedOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description TApizrSharedOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrSharedOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description TApizrSharedOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration TApizrSharedOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description TApizrSharedOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration TApizrSharedOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description TApizrSharedOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Configure logging level for the api Declaration TApizrSharedOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description TApizrSharedOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedOptions.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedOptions.html",
    "title": "Interface IApizrSharedOptions | Apizr",
    "keywords": "Interface IApizrSharedOptions Inherited Members IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedOptions : IApizrSharedOptionsBase Properties BaseAddressFactory Base address factory Declaration Func<string> BaseAddressFactory { get; } Property Value Type Description System.Func < System.String > BasePathFactory Base path factory Declaration Func<string> BasePathFactory { get; } Property Value Type Description System.Func < System.String > BaseUriFactory Base uri factory Declaration Func<Uri> BaseUriFactory { get; } Property Value Type Description System.Func < System.Uri > DelegatingHandlersFactories Delegating handlers factories Declaration IList<Func<ILogger, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandlerFactory HttpClientHandler factory Declaration Func<HttpClientHandler> HttpClientHandlerFactory { get; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration Func<HttpTracerMode> HttpTracerModeFactory { get; } Property Value Type Description System.Func < HttpTracerMode > LogLevelsFactory Log levels factory Declaration Func<LogLevel[]> LogLevelsFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration Func<HttpMessageParts> TrafficVerbosityFactory { get; } Property Value Type Description System.Func < HttpMessageParts > Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedOptionsBase.html",
    "title": "Interface IApizrSharedOptionsBase | Apizr",
    "keywords": "Interface IApizrSharedOptionsBase Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedOptionsBase Properties BaseAddress Base address Declaration string BaseAddress { get; } Property Value Type Description System.String BasePath Base path Declaration string BasePath { get; } Property Value Type Description System.String BaseUri Base address Declaration Uri BaseUri { get; } Property Value Type Description System.Uri HttpTracerMode Http traffic tracing mode Declaration HttpTracerMode HttpTracerMode { get; } Property Value Type Description HttpTracerMode LogLevels Log levels while writing Declaration LogLevel[] LogLevels { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] TrafficVerbosity Http traffic tracing verbosity Declaration HttpMessageParts TrafficVerbosity { get; } Property Value Type Description HttpMessageParts Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedOptionsBuilder-2.html",
    "title": "Interface IApizrSharedOptionsBuilder<TApizrSharedOptions, TApizrSharedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrSharedOptionsBuilder<TApizrSharedOptions, TApizrSharedOptionsBuilder> Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedOptionsBuilder<out TApizrSharedOptions, out TApizrSharedOptionsBuilder> : IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrSharedOptions : IApizrSharedOptionsBase where TApizrSharedOptionsBuilder : IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> Type Parameters Name Description TApizrSharedOptions TApizrSharedOptionsBuilder Methods AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler>) Add a custom delegating handler Declaration TApizrSharedOptionsBuilder AddDelegatingHandler(Func<ILogger, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrSharedOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler>) Add a custom delegating handler Declaration TApizrSharedOptionsBuilder AddDelegatingHandler(Func<ILogger, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , System.Net.Http.DelegatingHandler > delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrSharedOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration TApizrSharedOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description TApizrSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration TApizrSharedOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description TApizrSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory Declaration TApizrSharedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description TApizrSharedOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration TApizrSharedOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving TTokenService tokenService A TTokenService instance System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description TApizrSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration TApizrSharedOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func <TTokenService> tokenServiceFactory A TTokenService instance factory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description TApizrSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<String>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrSharedOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Your web api base address factory Returns Type Description TApizrSharedOptionsBuilder WithBaseAddress(Func<Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrSharedOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Your web api base address factory Returns Type Description TApizrSharedOptionsBuilder WithBasePath(Func<String>) Define your web api base path (could be defined with WebApiAttribute) Declaration TApizrSharedOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Your web api base path factory Returns Type Description TApizrSharedOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler Declaration TApizrSharedOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description TApizrSharedOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Configure logging level for the api Declaration TApizrSharedOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory Http traffic tracing mode System.Func < HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Returns Type Description TApizrSharedOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedOptionsBuilderBase.html",
    "title": "Interface IApizrSharedOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrSharedOptionsBuilderBase Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedOptionsBuilderBase-2.html",
    "title": "Interface IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedOptionsBuilderBase<out TApizrSharedOptions, out TApizrSharedOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder>, IApizrSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrSharedOptions : IApizrSharedOptionsBase where TApizrSharedOptionsBuilder : IApizrSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> Type Parameters Name Description TApizrSharedOptions TApizrSharedOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Connecting.DefaultConnectivityHandler.html": {
    "href": "api/Apizr.Connecting.DefaultConnectivityHandler.html",
    "title": "Class DefaultConnectivityHandler | Apizr",
    "keywords": "Class DefaultConnectivityHandler Inheritance System.Object DefaultConnectivityHandler Implements IConnectivityHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Connecting Assembly : Apizr.dll Syntax public class DefaultConnectivityHandler : IConnectivityHandler Constructors DefaultConnectivityHandler(Func<Boolean>) Declaration public DefaultConnectivityHandler(Func<bool> connectivityChecker) Parameters Type Name Description System.Func < System.Boolean > connectivityChecker Methods IsConnected() Declaration public bool IsConnected() Returns Type Description System.Boolean Implements IConnectivityHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Connecting.html": {
    "href": "api/Apizr.Connecting.html",
    "title": "Namespace Apizr.Connecting | Apizr",
    "keywords": "Namespace Apizr.Connecting Classes DefaultConnectivityHandler Interfaces IConnectivityHandler The connectivity handler method mapping interface Implement it to provide some connectivity features to Apizr"
  },
  "api/Apizr.Connecting.IConnectivityHandler.html": {
    "href": "api/Apizr.Connecting.IConnectivityHandler.html",
    "title": "Interface IConnectivityHandler | Apizr",
    "keywords": "Interface IConnectivityHandler The connectivity handler method mapping interface Implement it to provide some connectivity features to Apizr Namespace : Apizr.Connecting Assembly : Apizr.dll Syntax public interface IConnectivityHandler Methods IsConnected() Map Apizr connectivity check to your connectivity handler Declaration bool IsConnected() Returns Type Description System.Boolean Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Constants.html": {
    "href": "api/Apizr.Constants.html",
    "title": "Class Constants | Apizr",
    "keywords": "Class Constants Inheritance System.Object Constants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax public class Constants Fields HighLogLevel Declaration public const LogLevel HighLogLevel = LogLevel.Critical Field Value Type Description Microsoft.Extensions.Logging.LogLevel InterfaceTypeKey Declaration public const string InterfaceTypeKey = \"Refit.InterfaceType\" Field Value Type Description System.String LowLogLevel Declaration public const LogLevel LowLogLevel = LogLevel.Trace Field Value Type Description Microsoft.Extensions.Logging.LogLevel MediumLogLevel Declaration public const LogLevel MediumLogLevel = LogLevel.Information Field Value Type Description Microsoft.Extensions.Logging.LogLevel PollyExecutionContextKey Declaration public const string PollyExecutionContextKey = \"PollyExecutionContext\" Field Value Type Description System.String PriorityKey Declaration public const string PriorityKey = \"Priority\" Field Value Type Description System.String Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.DistributedCacheHandler-1.html": {
    "href": "api/Apizr.DistributedCacheHandler-1.html",
    "title": "Class DistributedCacheHandler<TCache> | Apizr",
    "keywords": "Class DistributedCacheHandler<TCache> Inheritance System.Object DistributedCacheHandler<TCache> Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.Caching.dll Syntax public class DistributedCacheHandler<TCache> : ICacheHandler Type Parameters Name Description TCache Constructors DistributedCacheHandler(IDistributedCache, IHttpContentSerializer) Declaration public DistributedCacheHandler(IDistributedCache distributedCache, IHttpContentSerializer contentSerializer) Parameters Type Name Description Microsoft.Extensions.Caching.Distributed.IDistributedCache distributedCache Refit.IHttpContentSerializer contentSerializer Methods ClearAsync(CancellationToken) Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task GetAsync<TData>(String, CancellationToken) Declaration public async Task<TData> GetAsync<TData>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TData> Type Parameters Name Description TData RemoveAsync(String, CancellationToken) Declaration public async Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Declaration public async Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Object value System.Nullable < System.TimeSpan > lifeSpan System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.ApizrExtendedOptions.html": {
    "href": "api/Apizr.Extending.Configuring.ApizrExtendedOptions.html",
    "title": "Class ApizrExtendedOptions | Apizr",
    "keywords": "Class ApizrExtendedOptions Inheritance System.Object ApizrSharedOptionsBase ApizrOptionsBase ApizrExtendedOptionsBase ApizrExtendedOptions Implements IApizrExtendedOptions IApizrExtendedOptionsBase IApizrOptionsBase IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrSharedOptionsBase Inherited Members ApizrExtendedOptionsBase.HttpClientHandler ApizrExtendedOptionsBase.DelegatingHandlersExtendedFactories ApizrOptionsBase.WebApiType ApizrOptionsBase.PolicyRegistryKeys ApizrOptionsBase.Logger ApizrOptionsBase.RefitSettings ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedOptions : ApizrExtendedOptionsBase, IApizrExtendedOptions, IApizrExtendedOptionsBase, IApizrOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Constructors ApizrExtendedOptions(IApizrExtendedCommonOptions, IApizrExtendedProperOptions) Declaration public ApizrExtendedOptions(IApizrExtendedCommonOptions commonOptions, IApizrExtendedProperOptions properOptions) Parameters Type Name Description IApizrExtendedCommonOptions commonOptions IApizrExtendedProperOptions properOptions Properties ApizrManagerType Declaration public Type ApizrManagerType { get; } Property Value Type Description System.Type BaseAddressFactory Declaration public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Declaration public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Declaration public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > CacheHandlerFactory Declaration public Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , ICacheHandler > CacheHandlerType Declaration public Type CacheHandlerType { get; set; } Property Value Type Description System.Type ConnectivityHandlerFactory Declaration public Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IConnectivityHandler > ConnectivityHandlerType Declaration public Type ConnectivityHandlerType { get; set; } Property Value Type Description System.Type CrudEntities Declaration public IDictionary<Type, CrudEntityAttribute> CrudEntities { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , CrudEntityAttribute > HttpClientBuilder Declaration public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory Declaration public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Declaration public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LoggerFactory Declaration public Func<IServiceProvider, string, ILogger> LoggerFactory { get; protected set; } Property Value Type Description System.Func < System.IServiceProvider , System.String , Microsoft.Extensions.Logging.ILogger > LogLevelsFactory Declaration public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Declaration public Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IMappingHandler > MappingHandlerType Declaration public Type MappingHandlerType { get; set; } Property Value Type Description System.Type ObjectMappings Declaration public IDictionary<Type, MappedWithAttribute> ObjectMappings { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , MappedWithAttribute > PostRegistrationActions Declaration public IList<Action<Type, IServiceCollection>> PostRegistrationActions { get; } Property Value Type Description System.Collections.Generic.IList < System.Action < System.Type , Microsoft.Extensions.DependencyInjection.IServiceCollection >> PostRegistries Declaration public IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , IApizrExtendedConcurrentRegistryBase > RefitSettingsFactory Declaration public Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Refit.RefitSettings > TrafficVerbosityFactory Declaration public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts > WebApis Declaration public IDictionary<Type, WebApiAttribute> WebApis { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , WebApiAttribute > Implements IApizrExtendedOptions IApizrExtendedOptionsBase IApizrOptionsBase IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.ApizrExtendedOptions-1.html": {
    "href": "api/Apizr.Extending.Configuring.ApizrExtendedOptions-1.html",
    "title": "Class ApizrExtendedOptions<TWebApi> | Apizr",
    "keywords": "Class ApizrExtendedOptions<TWebApi> Inheritance System.Object ApizrOptions <TWebApi> ApizrExtendedOptions<TWebApi> Implements IApizrOptions <TWebApi> IApizrExtendedOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Inherited Members ApizrOptions<TWebApi>.Options ApizrOptions<TWebApi>.WebApiType ApizrOptions<TWebApi>.BaseUri ApizrOptions<TWebApi>.BaseAddress ApizrOptions<TWebApi>.BasePath ApizrOptions<TWebApi>.HttpTracerMode ApizrOptions<TWebApi>.TrafficVerbosity ApizrOptions<TWebApi>.LogLevels ApizrOptions<TWebApi>.Logger ApizrOptions<TWebApi>.PolicyRegistryKeys ApizrOptions<TWebApi>.RefitSettings System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedOptions<TWebApi> : ApizrOptions<TWebApi>, IApizrOptions<TWebApi>, IApizrExtendedOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Type Parameters Name Description TWebApi Constructors ApizrExtendedOptions(IApizrExtendedOptionsBase) Declaration public ApizrExtendedOptions(IApizrExtendedOptionsBase apizrOptions) Parameters Type Name Description IApizrExtendedOptionsBase apizrOptions Properties DelegatingHandlersExtendedFactories Declaration public IList<Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandler Declaration public HttpClientHandler HttpClientHandler { get; } Property Value Type Description System.Net.Http.HttpClientHandler Implements IApizrOptions<TWebApi> IApizrExtendedOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.ApizrExtendedOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.ApizrExtendedOptionsBase.html",
    "title": "Class ApizrExtendedOptionsBase | Apizr",
    "keywords": "Class ApizrExtendedOptionsBase Inheritance System.Object ApizrSharedOptionsBase ApizrOptionsBase ApizrExtendedOptionsBase ApizrExtendedOptions Implements IApizrExtendedOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Inherited Members ApizrOptionsBase.WebApiType ApizrOptionsBase.PolicyRegistryKeys ApizrOptionsBase.Logger ApizrOptionsBase.RefitSettings ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedOptionsBase : ApizrOptionsBase, IApizrExtendedOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Constructors ApizrExtendedOptionsBase(IApizrCommonOptionsBase, IApizrProperOptionsBase) Declaration public ApizrExtendedOptionsBase(IApizrCommonOptionsBase commonOptions, IApizrProperOptionsBase properOptions) Parameters Type Name Description IApizrCommonOptionsBase commonOptions IApizrProperOptionsBase properOptions Properties DelegatingHandlersExtendedFactories Declaration public IList<Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; protected set; } Property Value Type Description System.Collections.Generic.IList < System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandler Declaration public HttpClientHandler HttpClientHandler { get; protected set; } Property Value Type Description System.Net.Http.HttpClientHandler Implements IApizrExtendedOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.ApizrExtendedOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.ApizrExtendedOptionsBuilder.html",
    "title": "Class ApizrExtendedOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedOptionsBuilder Inheritance System.Object ApizrExtendedOptionsBuilder Implements IApizrExtendedOptionsBuilder IApizrExtendedOptionsBuilder < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrExtendedOptionsBuilderBase < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrGlobalOptionsBuilderBase < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrExtendedOptionsBuilderBase IApizrGlobalOptionsBuilderBase IApizrExtendedCommonOptionsBuilder < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase IApizrExtendedProperOptionsBuilder < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrExtendedSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase < IApizrExtendedOptions , IApizrExtendedOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedOptionsBuilder : IApizrExtendedOptionsBuilder, IApizrExtendedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase Constructors ApizrExtendedOptionsBuilder(ApizrExtendedOptions) Declaration public ApizrExtendedOptionsBuilder(ApizrExtendedOptions apizrOptions) Parameters Type Name Description ApizrExtendedOptions apizrOptions Fields Options Declaration protected readonly ApizrExtendedOptions Options Field Value Type Description ApizrExtendedOptions Properties ApizrOptions Declaration public IApizrExtendedOptions ApizrOptions { get; } Property Value Type Description IApizrExtendedOptions Methods AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) Declaration public IApizrExtendedOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrExtendedOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) Declaration public IApizrExtendedOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrExtendedOptionsBuilder AddDelegatingHandler(DelegatingHandler) Declaration public IApizrExtendedOptionsBuilder AddDelegatingHandler(DelegatingHandler delegatingHandler) Parameters Type Name Description System.Net.Http.DelegatingHandler delegatingHandler Returns Type Description IApizrExtendedOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Declaration public IApizrExtendedOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder Returns Type Description IApizrExtendedOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Declaration public IApizrExtendedOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrExtendedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) Declaration public IApizrExtendedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , TAuthenticationHandler> authenticationHandlerFactory Returns Type Description IApizrExtendedOptionsBuilder Type Parameters Name Description TAuthenticationHandler WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrExtendedOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrExtendedOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrExtendedOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrExtendedOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithBaseAddress(Func<IServiceProvider, String>) Declaration public IApizrExtendedOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Returns Type Description IApizrExtendedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Declaration public IApizrExtendedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Returns Type Description IApizrExtendedOptionsBuilder WithBaseAddress(String) Declaration public IApizrExtendedOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Returns Type Description IApizrExtendedOptionsBuilder WithBaseAddress(Uri) Declaration public IApizrExtendedOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Returns Type Description IApizrExtendedOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Declaration public IApizrExtendedOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Returns Type Description IApizrExtendedOptionsBuilder WithBasePath(String) Declaration public IApizrExtendedOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Returns Type Description IApizrExtendedOptionsBuilder WithCacheHandler(ICacheHandler) Declaration public IApizrExtendedOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler Returns Type Description IApizrExtendedOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Declaration public IApizrExtendedOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , ICacheHandler > cacheHandlerFactory Returns Type Description IApizrExtendedOptionsBuilder WithCacheHandler(Type) Declaration public IApizrExtendedOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters Type Name Description System.Type cacheHandlerType Returns Type Description IApizrExtendedOptionsBuilder WithCacheHandler<TCacheHandler>() Declaration public IApizrExtendedOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns Type Description IApizrExtendedOptionsBuilder Type Parameters Name Description TCacheHandler WithConnectivityHandler(IConnectivityHandler) Declaration public IApizrExtendedOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler Returns Type Description IApizrExtendedOptionsBuilder WithConnectivityHandler(Func<Boolean>) Declaration public IApizrExtendedOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction Returns Type Description IApizrExtendedOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Declaration public IApizrExtendedOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IConnectivityHandler > connectivityHandlerFactory Returns Type Description IApizrExtendedOptionsBuilder WithConnectivityHandler(Type) Declaration public IApizrExtendedOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters Type Name Description System.Type connectivityHandlerType Returns Type Description IApizrExtendedOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Declaration public IApizrExtendedOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns Type Description IApizrExtendedOptionsBuilder Type Parameters Name Description TConnectivityHandler WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) Declaration public IApizrExtendedOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> factory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TConnectivityHandler, System.Boolean >> factory Returns Type Description IApizrExtendedOptionsBuilder Type Parameters Name Description TConnectivityHandler WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Declaration public IApizrExtendedOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory Returns Type Description IApizrExtendedOptionsBuilder WithHttpClientHandler(HttpClientHandler) Declaration public IApizrExtendedOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler Returns Type Description IApizrExtendedOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Declaration public IApizrExtendedOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Returns Type Description IApizrExtendedOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Declaration public IApizrExtendedOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelFactory Returns Type Description IApizrExtendedOptionsBuilder WithMappingHandler(IMappingHandler) Declaration public IApizrExtendedOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler Returns Type Description IApizrExtendedOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Declaration public IApizrExtendedOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IMappingHandler > mappingHandlerFactory Returns Type Description IApizrExtendedOptionsBuilder WithMappingHandler(Type) Declaration public IApizrExtendedOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters Type Name Description System.Type mappingHandlerType Returns Type Description IApizrExtendedOptionsBuilder WithMappingHandler<TMappingHandler>() Declaration public IApizrExtendedOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns Type Description IApizrExtendedOptionsBuilder Type Parameters Name Description TMappingHandler WithRefitSettings(RefitSettings) Declaration public IApizrExtendedOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings Returns Type Description IApizrExtendedOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings>) Declaration public IApizrExtendedOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , Refit.RefitSettings > refitSettingsFactory Returns Type Description IApizrExtendedOptionsBuilder Implements IApizrExtendedOptionsBuilder IApizrExtendedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> IApizrExtendedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> IApizrGlobalOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrExtendedOptionsBuilderBase IApizrGlobalOptionsBuilderBase IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> IApizrExtendedSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedOptionsBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.html",
    "title": "Class ApizrExtendedCommonOptions | Apizr",
    "keywords": "Class ApizrExtendedCommonOptions Inheritance System.Object ApizrSharedOptionsBase ApizrCommonOptionsBase ApizrExtendedCommonOptions Implements IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrSharedOptionsBase Inherited Members ApizrCommonOptionsBase.RefitSettings ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedCommonOptions : ApizrCommonOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Constructors ApizrExtendedCommonOptions() Declaration public ApizrExtendedCommonOptions() Properties BaseAddressFactory Declaration public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Declaration public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Declaration public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > CacheHandlerFactory Declaration public Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , ICacheHandler > CacheHandlerType Declaration public Type CacheHandlerType { get; set; } Property Value Type Description System.Type ConnectivityHandlerFactory Declaration public Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IConnectivityHandler > ConnectivityHandlerType Declaration public Type ConnectivityHandlerType { get; set; } Property Value Type Description System.Type CrudEntities Declaration public IDictionary<Type, CrudEntityAttribute> CrudEntities { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , CrudEntityAttribute > DelegatingHandlersExtendedFactories Declaration public IList<Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientBuilder Declaration public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory Declaration public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Declaration public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LogLevelsFactory Declaration public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Declaration public Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IMappingHandler > MappingHandlerType Declaration public Type MappingHandlerType { get; set; } Property Value Type Description System.Type ObjectMappings Declaration public IDictionary<Type, MappedWithAttribute> ObjectMappings { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , MappedWithAttribute > PostRegistrationActions Declaration public IList<Action<Type, IServiceCollection>> PostRegistrationActions { get; } Property Value Type Description System.Collections.Generic.IList < System.Action < System.Type , Microsoft.Extensions.DependencyInjection.IServiceCollection >> PostRegistries Declaration public IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , IApizrExtendedConcurrentRegistryBase > RefitSettingsFactory Declaration public Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Refit.RefitSettings > TrafficVerbosityFactory Declaration public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts > WebApis Declaration public IDictionary<Type, WebApiAttribute> WebApis { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , WebApiAttribute > Implements IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.html",
    "title": "Class ApizrExtendedCommonOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedCommonOptionsBuilder Inheritance System.Object ApizrExtendedCommonOptionsBuilder Implements IApizrExtendedCommonOptionsBuilder IApizrExtendedCommonOptionsBuilder < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase IApizrExtendedSharedOptionsBuilder < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrExtendedSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedCommonOptionsBuilder : IApizrExtendedCommonOptionsBuilder, IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase Fields Options Declaration protected readonly ApizrExtendedCommonOptions Options Field Value Type Description ApizrExtendedCommonOptions Properties ApizrOptions Declaration public IApizrExtendedCommonOptions ApizrOptions { get; } Property Value Type Description IApizrExtendedCommonOptions Methods AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) Declaration public IApizrExtendedCommonOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrExtendedCommonOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) Declaration public IApizrExtendedCommonOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrExtendedCommonOptionsBuilder AddDelegatingHandler(DelegatingHandler) Declaration public IApizrExtendedCommonOptionsBuilder AddDelegatingHandler(DelegatingHandler delegatingHandler) Parameters Type Name Description System.Net.Http.DelegatingHandler delegatingHandler Returns Type Description IApizrExtendedCommonOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Declaration public IApizrExtendedCommonOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder Returns Type Description IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , TAuthenticationHandler> authenticationHandlerFactory Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TAuthenticationHandler WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithBaseAddress(Func<IServiceProvider, String>) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithBaseAddress(String) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Returns Type Description IApizrExtendedCommonOptionsBuilder WithBaseAddress(Uri) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Returns Type Description IApizrExtendedCommonOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Declaration public IApizrExtendedCommonOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithBasePath(String) Declaration public IApizrExtendedCommonOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler(ICacheHandler) Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , ICacheHandler > cacheHandlerFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler(Type) Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters Type Name Description System.Type cacheHandlerType Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TCacheHandler WithConnectivityHandler(IConnectivityHandler) Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<Boolean>) Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IConnectivityHandler > connectivityHandlerFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type) Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters Type Name Description System.Type connectivityHandlerType Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> factory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TConnectivityHandler, System.Boolean >> factory Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Declaration public IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler) Declaration public IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler Returns Type Description IApizrExtendedCommonOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Declaration public IApizrExtendedCommonOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Returns Type Description IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Declaration public IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler(IMappingHandler) Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IMappingHandler > mappingHandlerFactory Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler(Type) Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters Type Name Description System.Type mappingHandlerType Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TMappingHandler WithRefitSettings(RefitSettings) Declaration public IApizrExtendedCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings Returns Type Description IApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings>) Declaration public IApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , Refit.RefitSettings > refitSettingsFactory Returns Type Description IApizrExtendedCommonOptionsBuilder Implements IApizrExtendedCommonOptionsBuilder IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> IApizrExtendedSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedCommonOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.Common.html": {
    "href": "api/Apizr.Extending.Configuring.Common.html",
    "title": "Namespace Apizr.Extending.Configuring.Common | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Common Classes ApizrExtendedCommonOptions ApizrExtendedCommonOptionsBuilder Interfaces IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrExtendedCommonOptionsBuilder IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.html",
    "title": "Interface IApizrExtendedCommonOptions | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptions Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptions : IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Properties CacheHandlerFactory Cache handler factory Declaration Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , ICacheHandler > CacheHandlerType Type of the cache handler Declaration Type CacheHandlerType { get; } Property Value Type Description System.Type ConnectivityHandlerFactory Connectivity handler factory Declaration Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , IConnectivityHandler > ConnectivityHandlerType Type of the connectivity handler Declaration Type ConnectivityHandlerType { get; } Property Value Type Description System.Type CrudEntities Entities auto registered with IApizrManager<TWebApi> Declaration IDictionary<Type, CrudEntityAttribute> CrudEntities { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , CrudEntityAttribute > MappingHandlerFactory Mapping handler factory Declaration Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , IMappingHandler > MappingHandlerType Type of the mapping handler Declaration Type MappingHandlerType { get; } Property Value Type Description System.Type ObjectMappings Mappings between api request object and model object used for classic auto registration Declaration IDictionary<Type, MappedWithAttribute> ObjectMappings { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , MappedWithAttribute > PostRegistrationActions Post registration actions Declaration IList<Action<Type, IServiceCollection>> PostRegistrationActions { get; } Property Value Type Description System.Collections.Generic.IList < System.Action < System.Type , Microsoft.Extensions.DependencyInjection.IServiceCollection >> PostRegistries Other registries plugged during post registration actions Declaration IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , IApizrExtendedConcurrentRegistryBase > RefitSettingsFactory Refit settings factory Declaration Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , Refit.RefitSettings > WebApis Web apis auto registered with IApizrManager<TWebApi> Declaration IDictionary<Type, WebApiAttribute> WebApis { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , WebApiAttribute > Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBase.html",
    "title": "Interface IApizrExtendedCommonOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBase Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptionsBase : IApizrCommonOptionsBase, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilder Inherited Members IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptionsBuilder : IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedCommonOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptionsBuilder<out TApizrExtendedCommonOptions, out TApizrExtendedCommonOptionsBuilder> : IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedCommonOptions : IApizrCommonOptionsBase where TApizrExtendedCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> Type Parameters Name Description TApizrExtendedCommonOptions TApizrExtendedCommonOptionsBuilder Methods WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Provide a cache handler to cache data Declaration TApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , ICacheHandler > cacheHandlerFactory A ICacheHandler mapping implementation factory Returns Type Description TApizrExtendedCommonOptionsBuilder WithCacheHandler(Type) Provide a cache handler to cache data Declaration TApizrExtendedCommonOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters Type Name Description System.Type cacheHandlerType Type of your ICacheHandler mapping implementation Returns Type Description TApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() Provide a cache handler to cache data Declaration TApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TCacheHandler Your ICacheHandler mapping implementation WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IConnectivityHandler > connectivityHandlerFactory A IConnectivityHandler mapping implementation factory Returns Type Description TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters Type Name Description System.Type connectivityHandlerType Type of your IConnectivityHandler mapping implementation Returns Type Description TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler Your IConnectivityHandler mapping implementation WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> connectivityProperty) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TConnectivityHandler, System.Boolean >> connectivityProperty Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler Your connectivity checking service WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Provide a mapping handler to auto map entities during mediation Declaration TApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IMappingHandler > mappingHandlerFactory A IMappingHandler mapping implementation factory Returns Type Description TApizrExtendedCommonOptionsBuilder WithMappingHandler(Type) Provide a mapping handler to auto map entities during mediation Declaration TApizrExtendedCommonOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters Type Name Description System.Type mappingHandlerType Type of your IMappingHandler mapping implementation Returns Type Description TApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() Provide a mapping handler to auto map entities during mediation Declaration TApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TMappingHandler Your IMappingHandler mapping implementation WithRefitSettings(Func<IServiceProvider, RefitSettings>) Provide some Refit specific settings Declaration TApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description TApizrExtendedCommonOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.html": {
    "href": "api/Apizr.Extending.Configuring.html",
    "title": "Namespace Apizr.Extending.Configuring | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring Classes ApizrExtendedOptions ApizrExtendedOptions<TWebApi> ApizrExtendedOptionsBase ApizrExtendedOptionsBuilder Interfaces IApizrExtendedOptions IApizrExtendedOptions<TWebApi> IApizrExtendedOptionsBase IApizrExtendedOptionsBuilder IApizrExtendedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> IApizrExtendedOptionsBuilderBase IApizrExtendedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>"
  },
  "api/Apizr.Extending.Configuring.IApizrExtendedOptions.html": {
    "href": "api/Apizr.Extending.Configuring.IApizrExtendedOptions.html",
    "title": "Interface IApizrExtendedOptions | Apizr",
    "keywords": "Interface IApizrExtendedOptions Inherited Members IApizrExtendedOptionsBase.HttpClientHandler IApizrExtendedCommonOptions.ConnectivityHandlerType IApizrExtendedCommonOptions.CacheHandlerType IApizrExtendedCommonOptions.MappingHandlerType IApizrExtendedCommonOptions.RefitSettingsFactory IApizrExtendedCommonOptions.ConnectivityHandlerFactory IApizrExtendedCommonOptions.CacheHandlerFactory IApizrExtendedCommonOptions.MappingHandlerFactory IApizrExtendedCommonOptions.CrudEntities IApizrExtendedCommonOptions.WebApis IApizrExtendedCommonOptions.ObjectMappings IApizrExtendedCommonOptions.PostRegistries IApizrExtendedCommonOptions.PostRegistrationActions IApizrCommonOptionsBase.RefitSettings IApizrExtendedProperOptions.ApizrManagerType IApizrExtendedProperOptions.LoggerFactory IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedOptions : IApizrExtendedOptionsBase, IApizrOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.IApizrExtendedOptions-1.html": {
    "href": "api/Apizr.Extending.Configuring.IApizrExtendedOptions-1.html",
    "title": "Interface IApizrExtendedOptions<TWebApi> | Apizr",
    "keywords": "Interface IApizrExtendedOptions<TWebApi> Inherited Members IApizrExtendedOptionsBase.HttpClientHandler IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedOptions<TWebApi> : IApizrOptions<TWebApi>, IApizrExtendedOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Type Parameters Name Description TWebApi Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBase.html",
    "title": "Interface IApizrExtendedOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedOptionsBase Inherited Members IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedOptionsBase : IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedOptionsBase Properties HttpClientHandler Declaration HttpClientHandler HttpClientHandler { get; } Property Value Type Description System.Net.Http.HttpClientHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder.html",
    "title": "Interface IApizrExtendedOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedOptionsBuilder Inherited Members IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedOptionsBuilder : IApizrExtendedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedOptions, IApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedOptionsBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Inherited Members IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedOptionsBuilder<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> : IApizrExtendedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedOptions : IApizrExtendedOptionsBase where TApizrExtendedOptionsBuilder : IApizrExtendedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Type Parameters Name Description TApizrExtendedOptions TApizrExtendedOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilderBase.html": {
    "href": "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedOptionsBuilderBase Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedOptionsBuilderBase : IApizrExtendedCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Extending.Configuring.IApizrExtendedOptionsBuilderBase-2.html",
    "title": "Interface IApizrExtendedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedOptionsBuilderBase<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> : IApizrGlobalOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedOptionsBuilderBase, IApizrExtendedCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedOptions : IApizrExtendedOptionsBase where TApizrExtendedOptionsBuilder : IApizrExtendedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Type Parameters Name Description TApizrExtendedOptions TApizrExtendedOptionsBuilder Extension Methods AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) ObjectExtensions.ToString(Object, String, String) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T)"
  },
  "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.html",
    "title": "Class ApizrExtendedProperOptions | Apizr",
    "keywords": "Class ApizrExtendedProperOptions Inheritance System.Object ApizrSharedOptionsBase ApizrProperOptionsBase ApizrExtendedProperOptions Implements IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrSharedOptionsBase Inherited Members ApizrProperOptionsBase.WebApiType ApizrProperOptionsBase.PolicyRegistryKeys ApizrProperOptionsBase.Logger ApizrSharedOptionsBase.BaseUri ApizrSharedOptionsBase.BaseAddress ApizrSharedOptionsBase.BasePath ApizrSharedOptionsBase.HttpTracerMode ApizrSharedOptionsBase.TrafficVerbosity ApizrSharedOptionsBase.LogLevels System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedProperOptions : ApizrProperOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Constructors ApizrExtendedProperOptions(IApizrExtendedSharedOptions, Type, Type, String[], String[], String, String, Nullable<HttpTracerMode>, Nullable<HttpMessageParts>, LogLevel[]) Declaration public ApizrExtendedProperOptions(IApizrExtendedSharedOptions sharedOptions, Type webApiType, Type apizrManagerType, string[] assemblyPolicyRegistryKeys, string[] webApiPolicyRegistryKeys, string baseAddress, string basePath, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description IApizrExtendedSharedOptions sharedOptions System.Type webApiType System.Type apizrManagerType System.String [] assemblyPolicyRegistryKeys System.String [] webApiPolicyRegistryKeys System.String baseAddress System.String basePath System.Nullable < HttpTracerMode > httpTracerMode System.Nullable < HttpMessageParts > trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Properties ApizrManagerType Declaration public Type ApizrManagerType { get; } Property Value Type Description System.Type BaseAddressFactory Declaration public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Declaration public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Declaration public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > DelegatingHandlersExtendedFactories Declaration public IList<Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientBuilder Declaration public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory Declaration public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Declaration public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LoggerFactory Declaration public Func<IServiceProvider, string, ILogger> LoggerFactory { get; protected set; } Property Value Type Description System.Func < System.IServiceProvider , System.String , Microsoft.Extensions.Logging.ILogger > LogLevelsFactory Declaration public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Declaration public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts > Implements IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.html",
    "title": "Class ApizrExtendedProperOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedProperOptionsBuilder Inheritance System.Object ApizrExtendedProperOptionsBuilder Implements IApizrExtendedProperOptionsBuilder IApizrExtendedProperOptionsBuilder < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrExtendedSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedProperOptionsBuilder : IApizrExtendedProperOptionsBuilder, IApizrExtendedProperOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase Fields Options Declaration protected readonly ApizrExtendedProperOptions Options Field Value Type Description ApizrExtendedProperOptions Properties ApizrOptions Declaration public IApizrExtendedProperOptions ApizrOptions { get; } Property Value Type Description IApizrExtendedProperOptions Methods AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) Declaration public IApizrExtendedProperOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrExtendedProperOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) Declaration public IApizrExtendedProperOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.DelegatingHandler > delegatingHandlerFactory Returns Type Description IApizrExtendedProperOptionsBuilder AddDelegatingHandler(DelegatingHandler) Declaration public IApizrExtendedProperOptionsBuilder AddDelegatingHandler(DelegatingHandler delegatingHandler) Parameters Type Name Description System.Net.Http.DelegatingHandler delegatingHandler Returns Type Description IApizrExtendedProperOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Declaration public IApizrExtendedProperOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder Returns Type Description IApizrExtendedProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , TAuthenticationHandler> authenticationHandlerFactory Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description TAuthenticationHandler WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description TSettingsService WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description TSettingsService TTokenService WithBaseAddress(Func<IServiceProvider, String>) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Returns Type Description IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Returns Type Description IApizrExtendedProperOptionsBuilder WithBaseAddress(String) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Returns Type Description IApizrExtendedProperOptionsBuilder WithBaseAddress(Uri) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Returns Type Description IApizrExtendedProperOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Declaration public IApizrExtendedProperOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Returns Type Description IApizrExtendedProperOptionsBuilder WithBasePath(String) Declaration public IApizrExtendedProperOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Returns Type Description IApizrExtendedProperOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Declaration public IApizrExtendedProperOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory Returns Type Description IApizrExtendedProperOptionsBuilder WithHttpClientHandler(HttpClientHandler) Declaration public IApizrExtendedProperOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler Returns Type Description IApizrExtendedProperOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Declaration public IApizrExtendedProperOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Returns Type Description IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Declaration public IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Returns Type Description IApizrExtendedProperOptionsBuilder Implements IApizrExtendedProperOptionsBuilder IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> IApizrExtendedSharedOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase<TApizrSharedOptions, TApizrSharedOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Proper.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.html",
    "title": "Namespace Apizr.Extending.Configuring.Proper | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Proper Classes ApizrExtendedProperOptions ApizrExtendedProperOptionsBuilder Interfaces IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrExtendedProperOptionsBuilder IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.html",
    "title": "Interface IApizrExtendedProperOptions | Apizr",
    "keywords": "Interface IApizrExtendedProperOptions Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptions : IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Properties ApizrManagerType Type of the manager Declaration Type ApizrManagerType { get; } Property Value Type Description System.Type LoggerFactory The Logger factory Declaration Func<IServiceProvider, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.String , Microsoft.Extensions.Logging.ILogger > Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBase.html",
    "title": "Interface IApizrExtendedProperOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBase Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptionsBase : IApizrProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder.html",
    "title": "Interface IApizrExtendedProperOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilder Inherited Members IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptionsBuilder : IApizrExtendedProperOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> Inherited Members IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptionsBuilder<out TApizrExtendedProperOptions, out TApizrExtendedProperOptionsBuilder> : IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedProperOptions : IApizrProperOptionsBase where TApizrExtendedProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> Type Parameters Name Description TApizrExtendedProperOptions TApizrExtendedProperOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry.html",
    "title": "Class ApizrExtendedRegistry | Apizr",
    "keywords": "Class ApizrExtendedRegistry Inheritance System.Object ApizrRegistryBase ApizrExtendedRegistry Implements IApizrExtendedConcurrentRegistry IApizrExtendedRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrRegistryBase.GetEnumerator() ApizrRegistryBase.IEnumerable.GetEnumerator() ApizrRegistryBase.GetCrudManagerFor<T>() ApizrRegistryBase.GetCrudManagerFor<T, TKey>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.GetManagerFor<TWebApi>() ApizrRegistryBase.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) ApizrRegistryBase.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) ApizrRegistryBase.Count ApizrRegistryBase.ContainsCrudManagerFor<T>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.ContainsManagerFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedRegistry : ApizrRegistryBase, IApizrExtendedConcurrentRegistry, IApizrExtendedRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Methods AddOrUpdate(Type, Type) Declaration public void AddOrUpdate(Type webApiType, Type serviceType) Parameters Type Name Description System.Type webApiType System.Type serviceType Implements IApizrExtendedConcurrentRegistry IApizrExtendedRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.html",
    "title": "Class ApizrExtendedRegistryBuilder | Apizr",
    "keywords": "Class ApizrExtendedRegistryBuilder Inheritance System.Object ApizrExtendedRegistryBuilder Implements IApizrExtendedRegistryBuilder IApizrExtendedRegistryBuilder < IApizrExtendedRegistry , IApizrExtendedRegistryBuilder , IApizrExtendedProperOptionsBuilder , IApizrExtendedCommonOptionsBuilder > IApizrRegistryBuilderBase < IApizrExtendedRegistry , IApizrExtendedRegistryBuilder , IApizrExtendedProperOptionsBuilder , IApizrExtendedCommonOptionsBuilder > IApizrRegistryBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedRegistryBuilder : IApizrExtendedRegistryBuilder, IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase Fields CommonOptions Declaration protected readonly IApizrExtendedCommonOptions CommonOptions Field Value Type Description IApizrExtendedCommonOptions Registry Declaration protected readonly ApizrExtendedRegistry Registry Field Value Type Description ApizrExtendedRegistry Services Declaration protected readonly IServiceCollection Services Field Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Properties ApizrRegistry Declaration public IApizrExtendedRegistry ApizrRegistry { get; } Property Value Type Description IApizrExtendedRegistry Methods AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Assembly[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(params Assembly[] assemblies) Parameters Type Name Description System.Reflection.Assembly [] assemblies Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Assembly[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType System.Reflection.Assembly [] assemblies Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType System.Type crudedKeyType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType System.Type crudedKeyType System.Type crudedReadAllResultType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType System.Type crudedKeyType System.Type crudedReadAllResultType System.Type crudedReadAllParamsType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType System.Type crudedKeyType System.Type crudedReadAllResultType System.Type crudedReadAllParamsType System.Type apizrManagerType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType System.Type [] assemblyMarkerTypes Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type[]) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type [] assemblyMarkerTypes Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T TKey AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T TKey TReadAllResult AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T TKey TReadAllResult TReadAllParams AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T TKey TReadAllResult TReadAllParams TApizrManager AddGroup(Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddGroup(Action<IApizrExtendedRegistryBuilder> registryGroupBuilder, Action<IApizrExtendedCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrExtendedRegistryBuilder > registryGroupBuilder System.Action < IApizrExtendedCommonOptionsBuilder > commonOptionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type webApiType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> properOptionsBuilder = null) Parameters Type Name Description System.Type webApiType System.Type apizrManagerType System.Action < IApizrExtendedProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TWebApi AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) Declaration public IApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TWebApi TApizrManager Implements IApizrExtendedRegistryBuilder IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> IApizrRegistryBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Registry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.html",
    "title": "Namespace Apizr.Extending.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Registry Classes ApizrExtendedRegistry ApizrExtendedRegistryBuilder Interfaces IApizrExtendedConcurrentRegistry IApizrExtendedConcurrentRegistryBase IApizrExtendedRegistry IApizrExtendedRegistryBuilder IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistry.html",
    "title": "Interface IApizrExtendedConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrExtendedConcurrentRegistry Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdate(Type, Type) Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedConcurrentRegistry : IApizrExtendedRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistryBase.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistryBase.html",
    "title": "Interface IApizrExtendedConcurrentRegistryBase | Apizr",
    "keywords": "Interface IApizrExtendedConcurrentRegistryBase Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedConcurrentRegistryBase Methods AddOrUpdate(Type, Type) Declaration void AddOrUpdate(Type webApiType, Type serviceType) Parameters Type Name Description System.Type webApiType System.Type serviceType Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistry.html",
    "title": "Interface IApizrExtendedRegistry | Apizr",
    "keywords": "Interface IApizrExtendedRegistry Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedRegistry : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html",
    "title": "Interface IApizrExtendedRegistryBuilder | Apizr",
    "keywords": "Interface IApizrExtendedRegistryBuilder Inherited Members IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddGroup(Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder>) Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedRegistryBuilder : IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder-4.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder-4.html",
    "title": "Interface IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> Inherited Members IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddGroup(Action<TApizrExtendedRegistryBuilder>, Action<TApizrExtendedCommonOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<TApizrExtendedProperOptionsBuilder>) Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedRegistryBuilder<out TApizrExtendedRegistry, out TApizrExtendedRegistryBuilder, out TApizrExtendedProperOptionsBuilder, out TApizrExtendedCommonOptionsBuilder> : IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase where TApizrExtendedRegistry : IApizrEnumerableRegistry where TApizrExtendedRegistryBuilder : IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> where TApizrExtendedProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase where TApizrExtendedCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase Type Parameters Name Description TApizrExtendedRegistry TApizrExtendedRegistryBuilder TApizrExtendedProperOptionsBuilder TApizrExtendedCommonOptionsBuilder Methods AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Assembly[] assemblies) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(params Assembly[] assemblies) Parameters Type Name Description System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls System.Type crudedKeyType The object key type System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type webApiType The web api interface type to manage System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type webApiType The web api interface type to manage System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration TApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Shared.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.html",
    "title": "Namespace Apizr.Extending.Configuring.Shared | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Shared Interfaces IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.html",
    "title": "Interface IApizrExtendedSharedOptions | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptions Inherited Members IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring.Shared Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedSharedOptions : IApizrExtendedSharedOptionsBase, IApizrSharedOptionsBase Properties BaseAddressFactory Base address factory Declaration Func<IServiceProvider, string> BaseAddressFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Base path factory Declaration Func<IServiceProvider, string> BasePathFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Base Uri factory Declaration Func<IServiceProvider, Uri> BaseUriFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > HttpClientBuilder HttpClient builder Declaration Action<IHttpClientBuilder> HttpClientBuilder { get; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory HttpClientHandler factory Declaration Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LogLevelsFactory Log levels factory Declaration Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts > Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.html",
    "title": "Interface IApizrExtendedSharedOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptionsBase Inherited Members IApizrSharedOptionsBase.BaseUri IApizrSharedOptionsBase.BaseAddress IApizrSharedOptionsBase.BasePath IApizrSharedOptionsBase.HttpTracerMode IApizrSharedOptionsBase.TrafficVerbosity IApizrSharedOptionsBase.LogLevels Namespace : Apizr.Extending.Configuring.Shared Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedSharedOptionsBase : IApizrSharedOptionsBase Properties DelegatingHandlersExtendedFactories Delegating handlers factories Declaration IList<Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IList < System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler >> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.ApizrOptions IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.AddDelegatingHandler(DelegatingHandler) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Shared Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedSharedOptionsBuilder<out TApizrExtendedSharedOptions, out TApizrExtendedSharedOptionsBuilder> : IApizrExtendedSharedOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedSharedOptions : IApizrSharedOptionsBase where TApizrExtendedSharedOptionsBuilder : IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> Type Parameters Name Description TApizrExtendedSharedOptions TApizrExtendedSharedOptionsBuilder Methods AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler>) Add a custom delegating handler Declaration TApizrExtendedSharedOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, IApizrOptionsBase, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , System.Net.Http.DelegatingHandler > delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrExtendedSharedOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler>) Add a custom delegating handler Declaration TApizrExtendedSharedOptionsBuilder AddDelegatingHandler(Func<IServiceProvider, DelegatingHandler> delegatingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.DelegatingHandler > delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrExtendedSharedOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Adjust some HttpClient settings Declaration TApizrExtendedSharedOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder The HttpClient builder Returns Type Description TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation Declaration TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, String>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Your web api base address factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Your web api base address factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Define your web api base path (could be defined with WebApiAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Your web api base path factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler Declaration TApizrExtendedSharedOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define http traffic tracing verbosity and log level (could be defined with TraceAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory Http traffic tracing mode factory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description TApizrExtendedSharedOptionsBuilder Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Extending.DictionaryExtensions.html": {
    "href": "api/Apizr.Extending.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Apizr",
    "keywords": "Class DictionaryExtensions Inheritance System.Object DictionaryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class DictionaryExtensions Methods ToString(IDictionary, String, String) Declaration public static string ToString(this IDictionary source, string keyValueSeparator, string sequenceSeparator) Parameters Type Name Description System.Collections.IDictionary source System.String keyValueSeparator System.String sequenceSeparator Returns Type Description System.String"
  },
  "api/Apizr.Extending.EnumerableExtensions.html": {
    "href": "api/Apizr.Extending.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Apizr",
    "keywords": "Class EnumerableExtensions Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class EnumerableExtensions Methods High(IEnumerable<LogLevel>) Declaration public static LogLevel High(this IEnumerable<LogLevel> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.Extensions.Logging.LogLevel > enumerable Returns Type Description Microsoft.Extensions.Logging.LogLevel Low(IEnumerable<LogLevel>) Declaration public static LogLevel Low(this IEnumerable<LogLevel> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.Extensions.Logging.LogLevel > enumerable Returns Type Description Microsoft.Extensions.Logging.LogLevel Medium(IEnumerable<LogLevel>) Declaration public static LogLevel Medium(this IEnumerable<LogLevel> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.Extensions.Logging.LogLevel > enumerable Returns Type Description Microsoft.Extensions.Logging.LogLevel"
  },
  "api/Apizr.Extending.html": {
    "href": "api/Apizr.Extending.html",
    "title": "Namespace Apizr.Extending | Apizr",
    "keywords": "Namespace Apizr.Extending Classes DictionaryExtensions EnumerableExtensions HttpClientBuilderExtensions ObjectExtensions TypeExtensions"
  },
  "api/Apizr.Extending.HttpClientBuilderExtensions.html": {
    "href": "api/Apizr.Extending.HttpClientBuilderExtensions.html",
    "title": "Class HttpClientBuilderExtensions | Apizr",
    "keywords": "Class HttpClientBuilderExtensions Inheritance System.Object HttpClientBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public static class HttpClientBuilderExtensions"
  },
  "api/Apizr.Extending.ObjectExtensions.html": {
    "href": "api/Apizr.Extending.ObjectExtensions.html",
    "title": "Class ObjectExtensions | Apizr",
    "keywords": "Class ObjectExtensions Inheritance System.Object ObjectExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class ObjectExtensions Methods ToString(Object, String, String) Declaration public static string ToString(this object source, string keyValueSeparator, string sequenceSeparator) Parameters Type Name Description System.Object source System.String keyValueSeparator System.String sequenceSeparator Returns Type Description System.String"
  },
  "api/Apizr.Extending.TypeExtensions.html": {
    "href": "api/Apizr.Extending.TypeExtensions.html",
    "title": "Class TypeExtensions | Apizr",
    "keywords": "Class TypeExtensions Inheritance System.Object TypeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class TypeExtensions Methods GetFriendlyName(Type) Declaration public static string GetFriendlyName(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.String IsAssignableFromGenericType(Type, Type) Declaration public static bool IsAssignableFromGenericType(this Type genericType, Type givenType) Parameters Type Name Description System.Type genericType System.Type givenType Returns Type Description System.Boolean IsOpenGeneric(Type) Declaration public static bool IsOpenGeneric(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean MakeGenericTypeIfNeeded(Type, Type[]) Declaration public static Type MakeGenericTypeIfNeeded(this Type type, params Type[] typeArguments) Parameters Type Name Description System.Type type System.Type [] typeArguments Returns Type Description System.Type"
  },
  "api/Apizr.FusilladeOptionsBuilderExtensions.html": {
    "href": "api/Apizr.FusilladeOptionsBuilderExtensions.html",
    "title": "Class FusilladeOptionsBuilderExtensions | Apizr",
    "keywords": "Class FusilladeOptionsBuilderExtensions Inheritance System.Object FusilladeOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax public static class FusilladeOptionsBuilderExtensions Methods WithPriorityManagement<T>(T) Declaration public static T WithPriorityManagement<T>(this T builder) where T : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description T builder Returns Type Description T Type Parameters Name Description T"
  },
  "api/Apizr.Helping.html": {
    "href": "api/Apizr.Helping.html",
    "title": "Namespace Apizr.Helping | Apizr",
    "keywords": "Namespace Apizr.Helping Classes UrlHelper"
  },
  "api/Apizr.Helping.UrlHelper.html": {
    "href": "api/Apizr.Helping.UrlHelper.html",
    "title": "Class UrlHelper | Apizr",
    "keywords": "Class UrlHelper Inheritance System.Object UrlHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Helping Assembly : Apizr.dll Syntax public static class UrlHelper Methods Combine(String, String) Combines the url base and the relative url into one, consolidating the '/' between them Declaration public static string Combine(string baseUrl, string relativePath) Parameters Type Name Description System.String baseUrl Base url that will be combined System.String relativePath The relative path to combine Returns Type Description System.String The merged url Combine(String, String[]) Combines the url base and the array of relatives urls into one, consolidating the '/' between them Declaration public static string Combine(string baseUrl, params string[] relativePaths) Parameters Type Name Description System.String baseUrl Base url that will be combined System.String [] relativePaths The array of relative paths to combine Returns Type Description System.String The merged url"
  },
  "api/Apizr.html": {
    "href": "api/Apizr.html",
    "title": "Namespace Apizr | Apizr",
    "keywords": "Namespace Apizr Classes AkavacheCacheHandler AkavacheOptionsBuilderExtensions ApizrBuilder ApizrDefaults ApizrException An exception with optional cached object ApizrException<TResult> An exception with optional cached TResult ApizrManager<TWebApi> AutoMapperMappingHandler AutoMapperOptionsBuilderExtensions Constants DistributedCacheHandler<TCache> FusilladeOptionsBuilderExtensions InMemoryCacheHandler LazyFactory<TInstance> MediationOptionsBuilderExtensions MicrosoftCachingOptionsBuilderExtensions MonkeyCacheHandler OptionalOptionsBuilderExtensions PriorityAttribute PriorityHttpMessageHandler ServiceCollectionExtensions WebApiAttribute Define general web api settings (could be defined with options builder) Interfaces IApizrManager IApizrManager<TWebApi> The manager encapsulating TWebApi 's task ILazyFactory<TInstance> A lazy instance"
  },
  "api/Apizr.IApizrManager.html": {
    "href": "api/Apizr.IApizrManager.html",
    "title": "Interface IApizrManager | Apizr",
    "keywords": "Interface IApizrManager Namespace : Apizr Assembly : Apizr.dll Syntax public interface IApizrManager Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.IApizrManager-1.html": {
    "href": "api/Apizr.IApizrManager-1.html",
    "title": "Interface IApizrManager<TWebApi> | Apizr",
    "keywords": "Interface IApizrManager<TWebApi> The manager encapsulating TWebApi 's task Namespace : Apizr Assembly : Apizr.dll Syntax public interface IApizrManager<TWebApi> : IApizrManager Type Parameters Name Description TWebApi The web api interface to manage Properties Api Original Refit Api without any Apizr management. You should use ExecuteAsync instead to get all the Apizr goodness :) Declaration TWebApi Api { get; } Property Value Type Description TWebApi Options Basic Apizr options Declaration IApizrOptionsBase Options { get; } Property Value Type Description IApizrOptionsBase Methods ClearCacheAsync(CancellationToken) Clear all cache Declaration Task<bool> ClearCacheAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>>) Clear the cache of a specific request Declaration Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The TWebApi 's task result ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken) Clear the cache of a specific request Declaration Task<bool> ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The TWebApi 's task result ExecuteAsync(Expression<Func<TWebApi, Task>>, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.ILazyFactory-1.html": {
    "href": "api/Apizr.ILazyFactory-1.html",
    "title": "Interface ILazyFactory<TInstance> | Apizr",
    "keywords": "Interface ILazyFactory<TInstance> A lazy instance Namespace : Apizr Assembly : Apizr.dll Syntax public interface ILazyFactory<out TInstance> Type Parameters Name Description TInstance Type of your instance Properties Value The lazy instance Declaration TInstance Value { get; } Property Value Type Description TInstance Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.InMemoryCacheHandler.html": {
    "href": "api/Apizr.InMemoryCacheHandler.html",
    "title": "Class InMemoryCacheHandler | Apizr",
    "keywords": "Class InMemoryCacheHandler Inheritance System.Object InMemoryCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.Caching.dll Syntax public class InMemoryCacheHandler : ICacheHandler Constructors InMemoryCacheHandler(IMemoryCache) Declaration public InMemoryCacheHandler(IMemoryCache memoryCache) Parameters Type Name Description Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache Methods ClearAsync(CancellationToken) Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T RemoveAsync(String, CancellationToken) Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Declaration public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Object value System.Nullable < System.TimeSpan > lifeSpan System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.LazyFactory-1.html": {
    "href": "api/Apizr.LazyFactory-1.html",
    "title": "Class LazyFactory<TInstance> | Apizr",
    "keywords": "Class LazyFactory<TInstance> Inheritance System.Object System.Lazy <TInstance> LazyFactory<TInstance> Implements ILazyFactory <TInstance> Inherited Members System.Lazy<TInstance>.ToString() System.Lazy<TInstance>.IsValueCreated System.Lazy<TInstance>.Value System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Apizr Assembly : Apizr.dll Syntax public class LazyFactory<TInstance> : Lazy<TInstance>, ILazyFactory<TInstance> Type Parameters Name Description TInstance Constructors LazyFactory(Func<TInstance>) Declaration public LazyFactory(Func<TInstance> instanceFactory) Parameters Type Name Description System.Func <TInstance> instanceFactory LazyFactory(Func<Object>) Declaration public LazyFactory(Func<object> instanceFactory) Parameters Type Name Description System.Func < System.Object > instanceFactory Implements ILazyFactory<TInstance> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.Attributes.html": {
    "href": "api/Apizr.Logging.Attributes.html",
    "title": "Namespace Apizr.Logging.Attributes | Apizr",
    "keywords": "Namespace Apizr.Logging.Attributes Classes LogAttribute Tells Apizr to trace and log HTTP(s) traffic LogAttributeBase Tells Apizr to trace and log HTTP(s) traffic LogCreateAttribute Tells Apizr to trace and log HTTP(s) traffic LogDeleteAttribute Tells Apizr to trace and log HTTP(s) traffic LogReadAllAttribute Tells Apizr to trace and log HTTP(s) traffic LogReadAttribute Tells Apizr to trace and log HTTP(s) traffic LogUpdateAttribute Tells Apizr to trace and log HTTP(s) traffic"
  },
  "api/Apizr.Logging.Attributes.LogAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogAttribute.html",
    "title": "Class LogAttribute | Apizr",
    "keywords": "Class LogAttribute Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogAttribute : LogAttributeBase Constructors LogAttribute() Declaration public LogAttribute() LogAttribute(HttpMessageParts) Declaration public LogAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity LogAttribute(HttpMessageParts, HttpTracerMode) Declaration public LogAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode LogAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Declaration public LogAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogAttribute(HttpMessageParts, LogLevel[]) Declaration public LogAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels LogAttribute(HttpTracerMode) Declaration public LogAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode LogAttribute(HttpTracerMode, LogLevel[]) Declaration public LogAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogAttribute(LogLevel[]) Declaration public LogAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.Attributes.LogAttributeBase.html": {
    "href": "api/Apizr.Logging.Attributes.LogAttributeBase.html",
    "title": "Class LogAttributeBase | Apizr",
    "keywords": "Class LogAttributeBase Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogAttribute LogCreateAttribute LogDeleteAttribute LogReadAllAttribute LogReadAttribute LogUpdateAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax public abstract class LogAttributeBase : Attribute Constructors LogAttributeBase() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase() LogAttributeBase(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogAttributeBase(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogAttributeBase(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogAttributeBase(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) Properties HttpTracerMode Http traffic tracing mode (default: Everything) Declaration public HttpTracerMode HttpTracerMode { get; set; } Property Value Type Description HttpTracerMode LogLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) Declaration public LogLevel[] LogLevels { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] TrafficVerbosity Http traffic tracing verbosity (default: All) Declaration public HttpMessageParts TrafficVerbosity { get; } Property Value Type Description HttpMessageParts Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.Attributes.LogCreateAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogCreateAttribute.html",
    "title": "Class LogCreateAttribute | Apizr",
    "keywords": "Class LogCreateAttribute Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogCreateAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogCreateAttribute : LogAttributeBase Constructors LogCreateAttribute() Declaration public LogCreateAttribute() LogCreateAttribute(HttpMessageParts) Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity LogCreateAttribute(HttpMessageParts, HttpTracerMode) Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode LogCreateAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogCreateAttribute(HttpMessageParts, LogLevel[]) Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels LogCreateAttribute(HttpTracerMode) Declaration public LogCreateAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode LogCreateAttribute(HttpTracerMode, LogLevel[]) Declaration public LogCreateAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogCreateAttribute(LogLevel[]) Declaration public LogCreateAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.Attributes.LogDeleteAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogDeleteAttribute.html",
    "title": "Class LogDeleteAttribute | Apizr",
    "keywords": "Class LogDeleteAttribute Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogDeleteAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogDeleteAttribute : LogAttributeBase Constructors LogDeleteAttribute() Declaration public LogDeleteAttribute() LogDeleteAttribute(HttpMessageParts) Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity LogDeleteAttribute(HttpMessageParts, HttpTracerMode) Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode LogDeleteAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogDeleteAttribute(HttpMessageParts, LogLevel[]) Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels LogDeleteAttribute(HttpTracerMode) Declaration public LogDeleteAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode LogDeleteAttribute(HttpTracerMode, LogLevel[]) Declaration public LogDeleteAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogDeleteAttribute(LogLevel[]) Declaration public LogDeleteAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.Attributes.LogReadAllAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogReadAllAttribute.html",
    "title": "Class LogReadAllAttribute | Apizr",
    "keywords": "Class LogReadAllAttribute Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogReadAllAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogReadAllAttribute : LogAttributeBase Constructors LogReadAllAttribute() Declaration public LogReadAllAttribute() LogReadAllAttribute(HttpMessageParts) Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity LogReadAllAttribute(HttpMessageParts, HttpTracerMode) Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode LogReadAllAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogReadAllAttribute(HttpMessageParts, LogLevel[]) Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels LogReadAllAttribute(HttpTracerMode) Declaration public LogReadAllAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode LogReadAllAttribute(HttpTracerMode, LogLevel[]) Declaration public LogReadAllAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogReadAllAttribute(LogLevel[]) Declaration public LogReadAllAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.Attributes.LogReadAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogReadAttribute.html",
    "title": "Class LogReadAttribute | Apizr",
    "keywords": "Class LogReadAttribute Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogReadAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogReadAttribute : LogAttributeBase Constructors LogReadAttribute() Declaration public LogReadAttribute() LogReadAttribute(HttpMessageParts) Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity LogReadAttribute(HttpMessageParts, HttpTracerMode) Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode LogReadAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogReadAttribute(HttpMessageParts, LogLevel[]) Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels LogReadAttribute(HttpTracerMode) Declaration public LogReadAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode LogReadAttribute(HttpTracerMode, LogLevel[]) Declaration public LogReadAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogReadAttribute(LogLevel[]) Declaration public LogReadAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.Attributes.LogUpdateAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogUpdateAttribute.html",
    "title": "Class LogUpdateAttribute | Apizr",
    "keywords": "Class LogUpdateAttribute Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogUpdateAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogUpdateAttribute : LogAttributeBase Constructors LogUpdateAttribute() Declaration public LogUpdateAttribute() LogUpdateAttribute(HttpMessageParts) Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity LogUpdateAttribute(HttpMessageParts, HttpTracerMode) Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode LogUpdateAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogUpdateAttribute(HttpMessageParts, LogLevel[]) Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels LogUpdateAttribute(HttpTracerMode) Declaration public LogUpdateAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode LogUpdateAttribute(HttpTracerMode, LogLevel[]) Declaration public LogUpdateAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Microsoft.Extensions.Logging.LogLevel [] logLevels LogUpdateAttribute(LogLevel[]) Declaration public LogUpdateAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.ExtendedHttpHandlerBuilder.html": {
    "href": "api/Apizr.Logging.ExtendedHttpHandlerBuilder.html",
    "title": "Class ExtendedHttpHandlerBuilder | Apizr",
    "keywords": "Class ExtendedHttpHandlerBuilder Inheritance System.Object ExtendedHttpHandlerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging Assembly : Apizr.dll Syntax public class ExtendedHttpHandlerBuilder Constructors ExtendedHttpHandlerBuilder(IApizrOptionsBase) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. Declaration public ExtendedHttpHandlerBuilder(IApizrOptionsBase apizrOptions) Parameters Type Name Description IApizrOptionsBase apizrOptions ExtendedHttpHandlerBuilder(ExtendedHttpTracerHandler) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. Declaration public ExtendedHttpHandlerBuilder(ExtendedHttpTracerHandler tracerHandler) Parameters Type Name Description ExtendedHttpTracerHandler tracerHandler Tracer handler. ExtendedHttpHandlerBuilder(HttpClientHandler, IApizrOptionsBase) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. Declaration public ExtendedHttpHandlerBuilder(HttpClientHandler innerHandler, IApizrOptionsBase apizrOptions) Parameters Type Name Description System.Net.Http.HttpClientHandler innerHandler HttpClientHandler. IApizrOptionsBase apizrOptions Properties HttpTracerHandler Underlying instance of the T:HttpTracer.HttpHandlerBuilder:HttpTracer.HttpHandlerBuilder class. Declaration public ExtendedHttpTracerHandler HttpTracerHandler { get; } Property Value Type Description ExtendedHttpTracerHandler Methods AddHandler(DelegatingHandler) Adds a System.Net.Http.HttpMessageHandler to the chain of handlers. Declaration public ExtendedHttpHandlerBuilder AddHandler(DelegatingHandler handler) Parameters Type Name Description System.Net.Http.DelegatingHandler handler Returns Type Description ExtendedHttpHandlerBuilder Build() Adds System.Net.Http.DelegatingHandler as the last link of the chain. Declaration public DelegatingHandler Build() Returns Type Description System.Net.Http.DelegatingHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.ExtendedHttpTracerHandler.html": {
    "href": "api/Apizr.Logging.ExtendedHttpTracerHandler.html",
    "title": "Class ExtendedHttpTracerHandler | Apizr",
    "keywords": "Class ExtendedHttpTracerHandler Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler ExtendedHttpTracerHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging Assembly : Apizr.dll Syntax public class ExtendedHttpTracerHandler : DelegatingHandler, IDisposable Constructors ExtendedHttpTracerHandler(IApizrOptionsBase) Constructs the ExtendedHttpTracerHandler with a custom Microsoft.Extensions.Logging.ILogger and a custom System.Net.Http.HttpMessageHandler Declaration public ExtendedHttpTracerHandler(IApizrOptionsBase apizrOptions) Parameters Type Name Description IApizrOptionsBase apizrOptions Apizr options ExtendedHttpTracerHandler(HttpMessageHandler, IApizrOptionsBase) Constructs the ExtendedHttpTracerHandler with a custom Microsoft.Extensions.Logging.ILogger and a custom System.Net.Http.HttpMessageHandler Declaration public ExtendedHttpTracerHandler(HttpMessageHandler handler, IApizrOptionsBase apizrOptions) Parameters Type Name Description System.Net.Http.HttpMessageHandler handler User defined System.Net.Http.HttpMessageHandler IApizrOptionsBase apizrOptions Apizr options Fields LogMessageIndicatorPrefix Declaration public static string LogMessageIndicatorPrefix Field Value Type Description System.String LogMessageIndicatorSuffix Declaration public static string LogMessageIndicatorSuffix Field Value Type Description System.String Properties DefaultDurationFormat Duration string format. Defaults to \"Duration: {0:ss\\:fffffff}\" Declaration public static string DefaultDurationFormat { get; set; } Property Value Type Description System.String Remarks Receives a TimeSpan at the [0] index. See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings for more details on TimeSpan formatting. Methods GetRequestBody(HttpRequestMessage) Declaration protected Task<string> GetRequestBody(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > GetResponseBody(HttpResponseMessage) Declaration protected Task<string> GetResponseBody(HttpResponseMessage response) Parameters Type Name Description System.Net.Http.HttpResponseMessage response Returns Type Description System.Threading.Tasks.Task < System.String > LogHttpException(HttpRequestMessage, Exception, ILogger, LogLevel[]) Declaration protected void LogHttpException(HttpRequestMessage request, Exception ex, ILogger logger, LogLevel[] logLevels) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Exception ex Microsoft.Extensions.Logging.ILogger logger Microsoft.Extensions.Logging.LogLevel [] logLevels LogHttpRequest(HttpRequestMessage, ILogger, LogLevel[], HttpMessageParts) Declaration protected virtual async Task LogHttpRequest(HttpRequestMessage request, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Microsoft.Extensions.Logging.ILogger logger Microsoft.Extensions.Logging.LogLevel [] logLevels HttpMessageParts verbosity Returns Type Description System.Threading.Tasks.Task LogHttpResponse(HttpResponseMessage, TimeSpan, ILogger, LogLevel[], HttpMessageParts) Declaration protected virtual async Task LogHttpResponse(HttpResponseMessage response, TimeSpan duration, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity) Parameters Type Name Description System.Net.Http.HttpResponseMessage response System.TimeSpan duration Microsoft.Extensions.Logging.ILogger logger Microsoft.Extensions.Logging.LogLevel [] logLevels HttpMessageParts verbosity Returns Type Description System.Threading.Tasks.Task SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Logging.html": {
    "href": "api/Apizr.Logging.html",
    "title": "Namespace Apizr.Logging | Apizr",
    "keywords": "Namespace Apizr.Logging Classes ExtendedHttpHandlerBuilder ExtendedHttpTracerHandler Enums HttpMessageParts HttpTracerMode"
  },
  "api/Apizr.Logging.HttpMessageParts.html": {
    "href": "api/Apizr.Logging.HttpMessageParts.html",
    "title": "Enum HttpMessageParts | Apizr",
    "keywords": "Enum HttpMessageParts Namespace : Apizr.Logging Assembly : Apizr.dll Syntax [Flags] public enum HttpMessageParts Fields Name Description All None RequestAll RequestBody RequestCookies RequestHeaders ResponseAll ResponseBody ResponseHeaders Unspecified Extension Methods ObjectExtensions.ToString(String, String)"
  },
  "api/Apizr.Logging.HttpTracerMode.html": {
    "href": "api/Apizr.Logging.HttpTracerMode.html",
    "title": "Enum HttpTracerMode | Apizr",
    "keywords": "Enum HttpTracerMode Namespace : Apizr.Logging Assembly : Apizr.dll Syntax public enum HttpTracerMode Fields Name Description ErrorsAndExceptionsOnly Everything ExceptionsOnly Extension Methods ObjectExtensions.ToString(String, String)"
  },
  "api/Apizr.Mapping.html": {
    "href": "api/Apizr.Mapping.html",
    "title": "Namespace Apizr.Mapping | Apizr",
    "keywords": "Namespace Apizr.Mapping Classes MappedCrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) MappedEntity<TModelEntity, TApiEntity> [AutoMapper integration required] Tells Apizr that Api entity is mapped with a model entity MappedWithAttribute Tells Apizr to map api request object with model object VoidMappingHandler Void mapping should never be used and will just be ignored Interfaces IMappingHandler"
  },
  "api/Apizr.Mapping.IMappingHandler.html": {
    "href": "api/Apizr.Mapping.IMappingHandler.html",
    "title": "Interface IMappingHandler | Apizr",
    "keywords": "Interface IMappingHandler Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax public interface IMappingHandler Methods Map(Object, Object, Type, Type) Execute a mapping from the source object to existing destination object with explicit System.Type objects Declaration object Map(object source, object destination, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Object destination Destination object to map into System.Type sourceType Source type to use System.Type destinationType Destination type to use Returns Type Description System.Object Mapped destination object, same instance as the destination object Map(Object, Type, Type) Execute a mapping from the source object to a new destination object with explicit System.Type objects Declaration object Map(object source, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Type sourceType Source type to use System.Type destinationType Destination type to create Returns Type Description System.Object Mapped destination object Map<TDestination>(Object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. Declaration TDestination Map<TDestination>(object source) Parameters Type Name Description System.Object source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. Declaration TDestination Map<TSource, TDestination>(TSource source) Parameters Type Name Description TSource source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. Declaration TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters Type Name Description TSource source Source object to map from TDestination destination Destination object to map into Returns Type Description TDestination The mapped destination object, same instance as the destination object Type Parameters Name Description TSource Source type to use TDestination Destination type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mapping.MappedCrudEntityAttribute.html": {
    "href": "api/Apizr.Mapping.MappedCrudEntityAttribute.html",
    "title": "Class MappedCrudEntityAttribute | Apizr",
    "keywords": "Class MappedCrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) Inheritance System.Object System.Attribute CrudEntityAttribute MappedCrudEntityAttribute Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class MappedCrudEntityAttribute : CrudEntityAttribute Constructors MappedCrudEntityAttribute(String, Type, Type, Type, Type) Define some crud api settings from this mapped model entity Declaration public MappedCrudEntityAttribute(string apiEntityBaseUri, Type apiEntityType, Type apiEntityKeyType = null, Type apiEntityReadAllResultType = null, Type apiEntityReadAllParamsType = null) Parameters Type Name Description System.String apiEntityBaseUri The mapped api entity's base crud uri System.Type apiEntityType The mapped api entity type System.Type apiEntityKeyType The mapped api entity's crud key type (default: null = typeof(int)) System.Type apiEntityReadAllResultType The mapped api entity \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) System.Type apiEntityReadAllParamsType The mapped api entity ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) Methods ToCrudEntityAttribute(Type) Declaration public CrudEntityAttribute ToCrudEntityAttribute(Type modelEntityType) Parameters Type Name Description System.Type modelEntityType Returns Type Description CrudEntityAttribute Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mapping.MappedEntity-2.html": {
    "href": "api/Apizr.Mapping.MappedEntity-2.html",
    "title": "Class MappedEntity<TModelEntity, TApiEntity> | Apizr",
    "keywords": "Class MappedEntity<TModelEntity, TApiEntity> [AutoMapper integration required] Tells Apizr that Api entity is mapped with a model entity Inheritance System.Object MappedEntity<TModelEntity, TApiEntity> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax public class MappedEntity<TModelEntity, TApiEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The friendly model entity to play with TApiEntity The real api entity used for requesting Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mapping.MappedWithAttribute.html": {
    "href": "api/Apizr.Mapping.MappedWithAttribute.html",
    "title": "Class MappedWithAttribute | Apizr",
    "keywords": "Class MappedWithAttribute Tells Apizr to map api request object with model object Inheritance System.Object System.Attribute MappedWithAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Parameter)] public class MappedWithAttribute : Attribute Constructors MappedWithAttribute(Type) Tells Apizr to map api response to a model response Declaration public MappedWithAttribute(Type mappedWithType) Parameters Type Name Description System.Type mappedWithType Properties MappedWithType The model object to map with Declaration public Type MappedWithType { get; } Property Value Type Description System.Type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mapping.VoidMappingHandler.html": {
    "href": "api/Apizr.Mapping.VoidMappingHandler.html",
    "title": "Class VoidMappingHandler | Apizr",
    "keywords": "Class VoidMappingHandler Void mapping should never be used and will just be ignored Inheritance System.Object VoidMappingHandler Implements IMappingHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax public class VoidMappingHandler : IMappingHandler Methods Map(Object, Object, Type, Type) Declaration public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source System.Object destination System.Type sourceType System.Type destinationType Returns Type Description System.Object Map(Object, Type, Type) Declaration public object Map(object source, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source System.Type sourceType System.Type destinationType Returns Type Description System.Object Map<TDestination>(Object) Declaration public TDestination Map<TDestination>(object source) Parameters Type Name Description System.Object source Returns Type Description TDestination Type Parameters Name Description TDestination Map<TSource, TDestination>(TSource) Declaration public TDestination Map<TSource, TDestination>(TSource source) Parameters Type Name Description TSource source Returns Type Description TDestination Type Parameters Name Description TSource TDestination Map<TSource, TDestination>(TSource, TDestination) Declaration public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters Type Name Description TSource source TDestination destination Returns Type Description TDestination Type Parameters Name Description TSource TDestination Implements IMappingHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.html": {
    "href": "api/Apizr.Mediation.Commanding.html",
    "title": "Namespace Apizr.Mediation.Commanding | Apizr",
    "keywords": "Namespace Apizr.Mediation.Commanding Classes MediationCommandBase MediationCommandBase<TRequestData> MediationCommandBase<TRequestData, TResultData> MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Interfaces IMediationCommand IMediationCommand<TRequestData> IMediationCommand<TRequestData, TResultData> IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> IMediationCommandHandler<TCommand> IMediationCommandHandler<TCommand, TResponse>"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand.html",
    "title": "Interface IMediationCommand | Apizr",
    "keywords": "Interface IMediationCommand Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand : IRequest<Unit>, IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-1.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-1.html",
    "title": "Interface IMediationCommand<TRequestData> | Apizr",
    "keywords": "Interface IMediationCommand<TRequestData> Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand<out TRequestData> : IRequest<Unit>, IBaseRequest Type Parameters Name Description TRequestData Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-2.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-2.html",
    "title": "Interface IMediationCommand<TRequestData, TResultData> | Apizr",
    "keywords": "Interface IMediationCommand<TRequestData, TResultData> Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand<out TRequestData, out TResultData> : IRequest<TResultData>, IBaseRequest Type Parameters Name Description TRequestData TResultData Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-4.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-4.html",
    "title": "Interface IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Interface IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand<out TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : IRequest<TModelResultData>, IBaseRequest Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommandHandler-1.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommandHandler-1.html",
    "title": "Interface IMediationCommandHandler<TCommand> | Apizr",
    "keywords": "Interface IMediationCommandHandler<TCommand> Inherited Members MediatR.IRequestHandler<TCommand, MediatR.Unit>.Handle(TCommand, System.Threading.CancellationToken) Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommandHandler<in TCommand> : IMediationCommandHandler<TCommand, Unit>, IRequestHandler<TCommand, Unit> where TCommand : IRequest<Unit> Type Parameters Name Description TCommand Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommandHandler-2.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommandHandler-2.html",
    "title": "Interface IMediationCommandHandler<TCommand, TResponse> | Apizr",
    "keywords": "Interface IMediationCommandHandler<TCommand, TResponse> Inherited Members MediatR.IRequestHandler<TCommand, TResponse>.Handle(TCommand, System.Threading.CancellationToken) Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommandHandler<in TCommand, TResponse> : IRequestHandler<TCommand, TResponse> where TCommand : IRequest<TResponse> Type Parameters Name Description TCommand TResponse Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase.html",
    "title": "Class MediationCommandBase | Apizr",
    "keywords": "Class MediationCommandBase Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase Implements IMediationCommand MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase : RequestBase<Unit>, IMediationCommand, IRequest<Unit>, IBaseRequest Constructors MediationCommandBase(Context, Action<Exception>) Declaration protected MediationCommandBase(Context context, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Action < System.Exception > onException MediationCommandBase(Action<Exception>) Declaration protected MediationCommandBase(Action<Exception> onException = null) Parameters Type Name Description System.Action < System.Exception > onException Implements IMediationCommand MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-1.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-1.html",
    "title": "Class MediationCommandBase<TRequestData> | Apizr",
    "keywords": "Class MediationCommandBase<TRequestData> Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase<TRequestData> Implements IMediationCommand <TRequestData> MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase<TRequestData> : RequestBase<Unit>, IMediationCommand<TRequestData>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TRequestData Constructors MediationCommandBase(Context, Action<Exception>) Declaration protected MediationCommandBase(Context context, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Action < System.Exception > onException MediationCommandBase(Action<Exception>) Declaration protected MediationCommandBase(Action<Exception> onException = null) Parameters Type Name Description System.Action < System.Exception > onException Implements IMediationCommand<TRequestData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-2.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-2.html",
    "title": "Class MediationCommandBase<TRequestData, TResultData> | Apizr",
    "keywords": "Class MediationCommandBase<TRequestData, TResultData> Inheritance System.Object RequestBase <TResultData> MediationCommandBase<TRequestData, TResultData> CreateCommandBase<TRequestData, TResultData> DeleteCommandBase<T, TKey, TResultData> UpdateCommandBase<TKey, TRequestData, TResultData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase<TRequestData, TResultData> : RequestBase<TResultData>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TRequestData TResultData Constructors MediationCommandBase(Context, Action<Exception>) Declaration protected MediationCommandBase(Context context, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Action < System.Exception > onException MediationCommandBase(Action<Exception>) Declaration protected MediationCommandBase(Action<Exception> onException = null) Parameters Type Name Description System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-4.html",
    "title": "Class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestBase <TModelResultData> MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements IMediationCommand <TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> MediatR.IRequest <TModelResultData> MediatR.IBaseRequest Inherited Members RequestBase<TModelResultData>.Context RequestBase<TModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : RequestBase<TModelResultData>, IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IRequest<TModelResultData>, IBaseRequest Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData Constructors MediationCommandBase(Context, Action<Exception>) Declaration protected MediationCommandBase(Context context, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Action < System.Exception > onException MediationCommandBase(Action<Exception>) Declaration protected MediationCommandBase(Action<Exception> onException = null) Parameters Type Name Description System.Action < System.Exception > onException Implements IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry.html",
    "title": "Class ApizrMediationRegistry | Apizr",
    "keywords": "Class ApizrMediationRegistry Inheritance System.Object ApizrMediationRegistryBase ApizrMediationRegistry Implements IApizrMediationConcurrentRegistry IApizrMediationRegistry IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrMediatorBase >>> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrMediationRegistryBase.ConcurrentRegistry ApizrMediationRegistryBase.GetEnumerator() ApizrMediationRegistryBase.IEnumerable.GetEnumerator() ApizrMediationRegistryBase.GetCrudMediatorFor<T>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey, TReadAllResult>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrMediationRegistryBase.GetMediatorFor<TWebApi>() ApizrMediationRegistryBase.TryGetCrudMediatorFor<T>(IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey>(IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) ApizrMediationRegistryBase.TryGetMediatorFor<TWebApi>(IApizrMediator<TWebApi>) ApizrMediationRegistryBase.Count ApizrMediationRegistryBase.ContainsCrudMediatorFor<T>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrMediationRegistryBase.ContainsMediatorFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrMediationRegistry : ApizrMediationRegistryBase, IApizrMediationConcurrentRegistry, IApizrMediationRegistry, IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Methods AddOrUpdate(Type, Type) Declaration public void AddOrUpdate(Type webApiType, Type serviceType) Parameters Type Name Description System.Type webApiType System.Type serviceType Implements IApizrMediationConcurrentRegistry IApizrMediationRegistry IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.html",
    "title": "Class ApizrMediationRegistryBase | Apizr",
    "keywords": "Class ApizrMediationRegistryBase Inheritance System.Object ApizrMediationRegistryBase ApizrMediationRegistry Implements IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrMediatorBase >>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ApizrMediationRegistryBase : IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Constructors ApizrMediationRegistryBase() Declaration protected ApizrMediationRegistryBase() Fields ConcurrentRegistry Declaration protected readonly IDictionary<Type, Func<IApizrMediatorBase>> ConcurrentRegistry Field Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < IApizrMediatorBase >> Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudMediatorFor<T>() Declaration public bool ContainsCrudMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T ContainsCrudMediatorFor<T, TKey>() Declaration public bool ContainsCrudMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey ContainsCrudMediatorFor<T, TKey, TReadAllResult>() Declaration public bool ContainsCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Declaration public bool ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TReadAllParams ContainsMediatorFor<TWebApi>() Declaration public bool ContainsMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi GetCrudMediatorFor<T>() Declaration public IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T>() where T : class Returns Type Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T GetCrudMediatorFor<T, TKey>() Declaration public IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T TKey GetCrudMediatorFor<T, TKey, TReadAllResult>() Declaration public IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T TKey TReadAllResult GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Declaration public IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T TKey TReadAllResult TReadAllParams GetEnumerator() Declaration public IEnumerator<KeyValuePair<Type, Func<IApizrMediatorBase>>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrMediatorBase >>> GetMediatorFor<TWebApi>() Declaration public IApizrMediator<TWebApi> GetMediatorFor<TWebApi>() Returns Type Description IApizrMediator <TWebApi> Type Parameters Name Description TWebApi TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Declaration public bool TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Declaration public bool TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T TKey TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Declaration public bool TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) Declaration public bool TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TReadAllParams TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) Declaration public bool TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi> mediator) Parameters Type Name Description IApizrMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Configuring.Registry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.html",
    "title": "Namespace Apizr.Mediation.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Mediation.Configuring.Registry Classes ApizrMediationRegistry ApizrMediationRegistryBase Interfaces IApizrMediationConcurrentRegistry IApizrMediationEnumerableRegistry IApizrMediationRegistry"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationConcurrentRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationConcurrentRegistry.html",
    "title": "Interface IApizrMediationConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrMediationConcurrentRegistry Inherited Members IApizrMediationEnumerableRegistry.Count IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.ContainsMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.GetMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T>(IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey>(IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrMediationEnumerableRegistry.TryGetMediatorFor<TWebApi>(IApizrMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Mediation.Requesting.Sending.IApizrMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdate(Type, Type) Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediationConcurrentRegistry : IApizrMediationRegistry, IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.html",
    "title": "Interface IApizrMediationEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrMediationEnumerableRegistry Inherited Members System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Mediation.Requesting.Sending.IApizrMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediationEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Properties Count Mediators count Declaration int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudMediatorFor<T>() Check if registry contains a mediator for T entity type Declaration bool ContainsCrudMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudMediatorFor<T, TKey>() Check if registry contains a mediator for T entity type with TKey key type Declaration bool ContainsCrudMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudMediatorFor<T, TKey, TReadAllResult>() Check if registry contains a mediator for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration bool ContainsCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration bool ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsMediatorFor<TWebApi>() Check if registry contains a mediator for TWebApi api type Declaration bool ContainsMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudMediatorFor<T>() Get a Crud mediator instance for an entity type Declaration IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T>() where T : class Returns Type Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type GetCrudMediatorFor<T, TKey>() Get a Crud mediator instance for an entity type with a specific key type Declaration IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudMediatorFor<T, TKey, TReadAllResult>() Get a Crud mediator instance for an entity type with a specific key type and ReadAll result type Declaration IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetMediatorFor<TWebApi>() Get an api mediator instance Declaration IApizrMediator<TWebApi> GetMediatorFor<TWebApi>() Returns Type Description IApizrMediator <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type Declaration bool TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type with a specific key type Declaration bool TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type with a specific key type and ReadAll result type Declaration bool TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration bool TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) Try to get an api mediator instance Declaration bool TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi> mediator) Parameters Type Name Description IApizrMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry.html",
    "title": "Interface IApizrMediationRegistry | Apizr",
    "keywords": "Interface IApizrMediationRegistry Inherited Members IApizrMediationEnumerableRegistry.Count IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.ContainsMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.GetMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T>(IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey>(IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrMediationEnumerableRegistry.TryGetMediatorFor<TWebApi>(IApizrMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Mediation.Requesting.Sending.IApizrMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediationRegistry : IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.CreateCommandBase-2.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.CreateCommandBase-2.html",
    "title": "Class CreateCommandBase<TRequestData, TResultData> | Apizr",
    "keywords": "Class CreateCommandBase<TRequestData, TResultData> Inheritance System.Object RequestBase <TResultData> MediationCommandBase <TRequestData, TResultData> CreateCommandBase<TRequestData, TResultData> CreateCommand<TModelData> CreateOptionalCommand<TModelData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class CreateCommandBase<TRequestData, TResultData> : MediationCommandBase<TRequestData, TResultData>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TRequestData TResultData Constructors CreateCommandBase(TRequestData, Context, Action<Exception>) Declaration protected CreateCommandBase(TRequestData requestData, Context context, Action<Exception> onException = null) Parameters Type Name Description TRequestData requestData Polly.Context context System.Action < System.Exception > onException CreateCommandBase(TRequestData, Action<Exception>) Declaration protected CreateCommandBase(TRequestData requestData, Action<Exception> onException = null) Parameters Type Name Description TRequestData requestData System.Action < System.Exception > onException Properties RequestData Declaration public TRequestData RequestData { get; } Property Value Type Description TRequestData Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-1.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-1.html",
    "title": "Class DeleteCommandBase<T> | Apizr",
    "keywords": "Class DeleteCommandBase<T> Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase < System.Int32 , MediatR.Unit > DeleteCommandBase <T, System.Int32 , MediatR.Unit > DeleteCommandBase <T, MediatR.Unit > DeleteCommandBase<T> DeleteCommand<T> Implements IMediationCommand < System.Int32 , MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, Unit>.Key RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandBase<T> : DeleteCommandBase<T, Unit>, IMediationCommand<int, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description T Constructors DeleteCommandBase(Int32, Context, Action<Exception>) Declaration protected DeleteCommandBase(int key, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key Polly.Context context System.Action < System.Exception > onException DeleteCommandBase(Int32, Action<Exception>) Declaration protected DeleteCommandBase(int key, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-2.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-2.html",
    "title": "Class DeleteCommandBase<T, TResultData> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TResultData> Inheritance System.Object RequestBase <TResultData> MediationCommandBase < System.Int32 , TResultData> DeleteCommandBase <T, System.Int32 , TResultData> DeleteCommandBase<T, TResultData> DeleteCommandBase<T> DeleteOptionalCommand<T> Implements IMediationCommand < System.Int32 , TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, TResultData>.Key RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandBase<T, TResultData> : DeleteCommandBase<T, int, TResultData>, IMediationCommand<int, TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description T TResultData Constructors DeleteCommandBase(Int32, Context, Action<Exception>) Declaration protected DeleteCommandBase(int key, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key Polly.Context context System.Action < System.Exception > onException DeleteCommandBase(Int32, Action<Exception>) Declaration protected DeleteCommandBase(int key, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-3.html",
    "title": "Class DeleteCommandBase<T, TKey, TResultData> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TKey, TResultData> Inheritance System.Object RequestBase <TResultData> MediationCommandBase <TKey, TResultData> DeleteCommandBase<T, TKey, TResultData> DeleteCommandBase<T, TResultData> DeleteCommand<T, TKey> DeleteOptionalCommand<T, TKey> Implements IMediationCommand <TKey, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandBase<T, TKey, TResultData> : MediationCommandBase<TKey, TResultData>, IMediationCommand<TKey, TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description T TKey TResultData Constructors DeleteCommandBase(TKey, Context, Action<Exception>) Declaration protected DeleteCommandBase(TKey key, Context context, Action<Exception> onException = null) Parameters Type Name Description TKey key Polly.Context context System.Action < System.Exception > onException DeleteCommandBase(TKey, Action<Exception>) Declaration protected DeleteCommandBase(TKey key, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Action < System.Exception > onException Properties Key Declaration public TKey Key { get; } Property Value Type Description TKey Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.html",
    "title": "Namespace Apizr.Mediation.Cruding.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Base Classes CreateCommandBase<TRequestData, TResultData> DeleteCommandBase<T> DeleteCommandBase<T, TResultData> DeleteCommandBase<T, TKey, TResultData> ReadAllQueryBase<TReadAllResult> ReadAllQueryBase<TReadAllParams, TReadAllResult> ReadQueryBase<TResponse> ReadQueryBase<TResponse, TKey> UpdateCommandBase<TRequestData> UpdateCommandBase<TRequestData, TResultData> UpdateCommandBase<TKey, TRequestData, TResultData>"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-1.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-1.html",
    "title": "Class ReadAllQueryBase<TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQueryBase<TReadAllResult> Inheritance System.Object RequestBase <TReadAllResult> PrioritizedRequestBase <TReadAllResult> MediationQueryBase <TReadAllResult> ReadAllQueryBase < System.Collections.Generic.IDictionary < System.String , System.Object >, TReadAllResult> ReadAllQueryBase<TReadAllResult> ReadAllQuery<TReadAllResult> ReadAllOptionalQuery<TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<String, Object>, TReadAllResult>.Parameters MediationQueryBase<TReadAllResult>.ClearCache PrioritizedRequestBase<TReadAllResult>.Priority RequestBase<TReadAllResult>.Context RequestBase<TReadAllResult>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryBase<TReadAllResult> : ReadAllQueryBase<IDictionary<string, object>, TReadAllResult>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters Name Description TReadAllResult Constructors ReadAllQueryBase(IDictionary<String, Object>, Context, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(IDictionary<string, object> parameters, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQueryBase(IDictionary<String, Object>, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(IDictionary<string, object> parameters, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Boolean clearCache System.Action < System.Exception > onException ReadAllQueryBase(IDictionary<String, Object>, Int32, Context, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(IDictionary<string, object> parameters, int priority, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQueryBase(IDictionary<String, Object>, Int32, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(IDictionary<string, object> parameters, int priority, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-2.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-2.html",
    "title": "Class ReadAllQueryBase<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQueryBase<TReadAllParams, TReadAllResult> Inheritance System.Object RequestBase <TReadAllResult> PrioritizedRequestBase <TReadAllResult> MediationQueryBase <TReadAllResult> ReadAllQueryBase<TReadAllParams, TReadAllResult> ReadAllQueryBase<TReadAllResult> ReadAllQuery<TReadAllParams, TReadAllResult> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members MediationQueryBase<TReadAllResult>.ClearCache PrioritizedRequestBase<TReadAllResult>.Priority RequestBase<TReadAllResult>.Context RequestBase<TReadAllResult>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryBase<TReadAllParams, TReadAllResult> : MediationQueryBase<TReadAllResult>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters Name Description TReadAllParams TReadAllResult Constructors ReadAllQueryBase(TReadAllParams, Context, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(TReadAllParams parameters, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQueryBase(TReadAllParams, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(TReadAllParams parameters, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters System.Boolean clearCache System.Action < System.Exception > onException ReadAllQueryBase(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(TReadAllParams parameters, int priority, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQueryBase(TReadAllParams, Int32, Boolean, Action<Exception>) Declaration protected ReadAllQueryBase(TReadAllParams parameters, int priority, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Properties Parameters Declaration public TReadAllParams Parameters { get; } Property Value Type Description TReadAllParams Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-1.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-1.html",
    "title": "Class ReadQueryBase<TResponse> | Apizr",
    "keywords": "Class ReadQueryBase<TResponse> Inheritance System.Object RequestBase <TResponse> PrioritizedRequestBase <TResponse> MediationQueryBase <TResponse> ReadQueryBase <TResponse, System.Int32 > ReadQueryBase<TResponse> ReadQuery<TResultData> ReadOptionalQuery<TResultData> Implements IMediationQuery <TResponse> MediatR.IRequest <TResponse> MediatR.IBaseRequest Inherited Members ReadQueryBase<TResponse, Int32>.Key MediationQueryBase<TResponse>.ClearCache PrioritizedRequestBase<TResponse>.Priority RequestBase<TResponse>.Context RequestBase<TResponse>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryBase<TResponse> : ReadQueryBase<TResponse, int>, IMediationQuery<TResponse>, IRequest<TResponse>, IBaseRequest Type Parameters Name Description TResponse Constructors ReadQueryBase(Int32, Context, Boolean, Action<Exception>) Declaration protected ReadQueryBase(int key, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQueryBase(Int32, Boolean, Action<Exception>) Declaration protected ReadQueryBase(int key, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Boolean clearCache System.Action < System.Exception > onException ReadQueryBase(Int32, Int32, Context, Boolean, Action<Exception>) Declaration protected ReadQueryBase(int key, int priority, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQueryBase(Int32, Int32, Boolean, Action<Exception>) Declaration protected ReadQueryBase(int key, int priority, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-2.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-2.html",
    "title": "Class ReadQueryBase<TResponse, TKey> | Apizr",
    "keywords": "Class ReadQueryBase<TResponse, TKey> Inheritance System.Object RequestBase <TResponse> PrioritizedRequestBase <TResponse> MediationQueryBase <TResponse> ReadQueryBase<TResponse, TKey> ReadQueryBase<TResponse> ReadQuery<TResultData, TKey> ReadOptionalQuery<TResultData, TKey> Implements IMediationQuery <TResponse> MediatR.IRequest <TResponse> MediatR.IBaseRequest Inherited Members MediationQueryBase<TResponse>.ClearCache PrioritizedRequestBase<TResponse>.Priority RequestBase<TResponse>.Context RequestBase<TResponse>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryBase<TResponse, TKey> : MediationQueryBase<TResponse>, IMediationQuery<TResponse>, IRequest<TResponse>, IBaseRequest Type Parameters Name Description TResponse TKey Constructors ReadQueryBase(TKey, Context, Boolean, Action<Exception>) Declaration protected ReadQueryBase(TKey key, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TKey key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQueryBase(TKey, Boolean, Action<Exception>) Declaration protected ReadQueryBase(TKey key, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Boolean clearCache System.Action < System.Exception > onException ReadQueryBase(TKey, Int32, Context, Boolean, Action<Exception>) Declaration protected ReadQueryBase(TKey key, int priority, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQueryBase(TKey, Int32, Boolean, Action<Exception>) Declaration protected ReadQueryBase(TKey key, int priority, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Properties Key Declaration public TKey Key { get; } Property Value Type Description TKey Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-1.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-1.html",
    "title": "Class UpdateCommandBase<TRequestData> | Apizr",
    "keywords": "Class UpdateCommandBase<TRequestData> Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase <TRequestData, MediatR.Unit > UpdateCommandBase < System.Int32 , TRequestData, MediatR.Unit > UpdateCommandBase <TRequestData, MediatR.Unit > UpdateCommandBase<TRequestData> UpdateCommand<TRequestData> Implements IMediationCommand <TRequestData, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, Unit>.Key UpdateCommandBase<Int32, TRequestData, Unit>.RequestData RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandBase<TRequestData> : UpdateCommandBase<TRequestData, Unit>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TRequestData Constructors UpdateCommandBase(Int32, TRequestData, Context, Action<Exception>) Declaration protected UpdateCommandBase(int key, TRequestData requestData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key TRequestData requestData Polly.Context context System.Action < System.Exception > onException UpdateCommandBase(Int32, TRequestData, Action<Exception>) Declaration protected UpdateCommandBase(int key, TRequestData requestData, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key TRequestData requestData System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-2.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-2.html",
    "title": "Class UpdateCommandBase<TRequestData, TResultData> | Apizr",
    "keywords": "Class UpdateCommandBase<TRequestData, TResultData> Inheritance System.Object RequestBase <TResultData> MediationCommandBase <TRequestData, TResultData> UpdateCommandBase < System.Int32 , TRequestData, TResultData> UpdateCommandBase<TRequestData, TResultData> UpdateCommandBase<TRequestData> UpdateOptionalCommand<TRequestData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, TResultData>.Key UpdateCommandBase<Int32, TRequestData, TResultData>.RequestData RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandBase<TRequestData, TResultData> : UpdateCommandBase<int, TRequestData, TResultData>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TRequestData TResultData Constructors UpdateCommandBase(Int32, TRequestData, Context, Action<Exception>) Declaration protected UpdateCommandBase(int key, TRequestData requestData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key TRequestData requestData Polly.Context context System.Action < System.Exception > onException UpdateCommandBase(Int32, TRequestData, Action<Exception>) Declaration protected UpdateCommandBase(int key, TRequestData requestData, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key TRequestData requestData System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-3.html",
    "title": "Class UpdateCommandBase<TKey, TRequestData, TResultData> | Apizr",
    "keywords": "Class UpdateCommandBase<TKey, TRequestData, TResultData> Inheritance System.Object RequestBase <TResultData> MediationCommandBase <TRequestData, TResultData> UpdateCommandBase<TKey, TRequestData, TResultData> UpdateCommandBase<TRequestData, TResultData> UpdateCommand<TKey, TRequestData> UpdateOptionalCommand<TKey, TRequestData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandBase<TKey, TRequestData, TResultData> : MediationCommandBase<TRequestData, TResultData>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TKey TRequestData TResultData Constructors UpdateCommandBase(TKey, TRequestData, Context, Action<Exception>) Declaration protected UpdateCommandBase(TKey key, TRequestData requestData, Context context, Action<Exception> onException = null) Parameters Type Name Description TKey key TRequestData requestData Polly.Context context System.Action < System.Exception > onException UpdateCommandBase(TKey, TRequestData, Action<Exception>) Declaration protected UpdateCommandBase(TKey key, TRequestData requestData, Action<Exception> onException = null) Parameters Type Name Description TKey key TRequestData requestData System.Action < System.Exception > onException Properties Key Declaration public TKey Key { get; } Property Value Type Description TKey RequestData Declaration public TRequestData RequestData { get; } Property Value Type Description TRequestData Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.CreateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.CreateCommand-1.html",
    "title": "Class CreateCommand<TModelData> | Apizr",
    "keywords": "Class CreateCommand<TModelData> Inheritance System.Object RequestBase <TModelData> MediationCommandBase <TModelData, TModelData> CreateCommandBase <TModelData, TModelData> CreateCommand<TModelData> Implements IMediationCommand <TModelData, TModelData> MediatR.IRequest <TModelData> MediatR.IBaseRequest Inherited Members CreateCommandBase<TModelData, TModelData>.RequestData RequestBase<TModelData>.Context RequestBase<TModelData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class CreateCommand<TModelData> : CreateCommandBase<TModelData, TModelData>, IMediationCommand<TModelData, TModelData>, IRequest<TModelData>, IBaseRequest Type Parameters Name Description TModelData Constructors CreateCommand(TModelData, Context, Action<Exception>) Declaration public CreateCommand(TModelData modelData, Context context, Action<Exception> onException = null) Parameters Type Name Description TModelData modelData Polly.Context context System.Action < System.Exception > onException CreateCommand(TModelData, Action<Exception>) Declaration public CreateCommand(TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description TModelData modelData System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.DeleteCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.DeleteCommand-1.html",
    "title": "Class DeleteCommand<T> | Apizr",
    "keywords": "Class DeleteCommand<T> Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase < System.Int32 , MediatR.Unit > DeleteCommandBase <T, System.Int32 , MediatR.Unit > DeleteCommandBase <T, MediatR.Unit > DeleteCommandBase <T> DeleteCommand<T> Implements IMediationCommand < System.Int32 , MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, Unit>.Key RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommand<T> : DeleteCommandBase<T>, IMediationCommand<int, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description T Constructors DeleteCommand(Int32, Context, Action<Exception>) Declaration public DeleteCommand(int key, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key Polly.Context context System.Action < System.Exception > onException DeleteCommand(Int32, Action<Exception>) Declaration public DeleteCommand(int key, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.DeleteCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.DeleteCommand-2.html",
    "title": "Class DeleteCommand<T, TKey> | Apizr",
    "keywords": "Class DeleteCommand<T, TKey> Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase <TKey, MediatR.Unit > DeleteCommandBase <T, TKey, MediatR.Unit > DeleteCommand<T, TKey> Implements IMediationCommand <TKey, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, TKey, Unit>.Key RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommand<T, TKey> : DeleteCommandBase<T, TKey, Unit>, IMediationCommand<TKey, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description T TKey Constructors DeleteCommand(TKey, Context, Action<Exception>) Declaration public DeleteCommand(TKey key, Context context, Action<Exception> onException = null) Parameters Type Name Description TKey key Polly.Context context System.Action < System.Exception > onException DeleteCommand(TKey, Action<Exception>) Declaration public DeleteCommand(TKey key, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase-7.html",
    "title": "Class CreateCommandHandlerBase<TModelEntity, TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> | Apizr",
    "keywords": "Class CreateCommandHandlerBase<TModelEntity, TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams> CreateCommandHandlerBase<TModelEntity, TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class CreateCommandHandlerBase<TModelEntity, TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> : CrudRequestHandlerBase<TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : CreateCommandBase<TModelEntity, TCommandResult> Type Parameters Name Description TModelEntity TApiEntity TTApiEntityKey TReadAllResult TReadAllParams TCommand TCommandResult Constructors CreateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected CreateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.CrudRequestHandlerBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.CrudRequestHandlerBase-4.html",
    "title": "Class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> CreateCommandHandlerBase<TModelEntity, TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : RequestHandlerBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors CrudRequestHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected CrudRequestHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Fields CrudApiManager Declaration protected readonly IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> CrudApiManager Field Value Type Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-6.html",
    "title": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> | Apizr",
    "keywords": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : DeleteCommandBase<TModelEntity, int, TCommandResult> Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams TCommand TCommandResult Constructors DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-7.html",
    "title": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> | Apizr",
    "keywords": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : DeleteCommandBase<TModelEntity, TApiEntityKey, TCommandResult> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams TCommand TCommandResult Constructors DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.html",
    "title": "Namespace Apizr.Mediation.Cruding.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Handling.Base Classes CreateCommandHandlerBase<TModelEntity, TApiEntity, TTApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-6.html",
    "title": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult> | Apizr",
    "keywords": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadAllQueryBase<TQueryResult> Type Parameters Name Description TApiEntity TApiEntityKey TModelEntityReadAllResult TApiEntityReadAllResult TQuery TQueryResult Constructors ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>>>) Declaration protected ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> crudApiManager Methods Handle(TQuery, CancellationToken) Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-7.html",
    "title": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult> | Apizr",
    "keywords": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadAllQueryBase<TReadAllParams, TQueryResult> Type Parameters Name Description TApiEntity TApiEntityKey TModelEntityReadAllResult TApiEntityReadAllResult TReadAllParams TQuery TQueryResult Constructors ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>>) Declaration protected ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TQuery, CancellationToken) Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-6.html",
    "title": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult> | Apizr",
    "keywords": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult> ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadQueryBase<TQueryResult> Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams TQuery TQueryResult Constructors ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TQuery, CancellationToken) Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-7.html",
    "title": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult> | Apizr",
    "keywords": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult> ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TModelEntity : class where TApiEntity : class where TQuery : ReadQueryBase<TQueryResult, TApiEntityKey> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams TQuery TQueryResult Constructors ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TQuery, CancellationToken) Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-5.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand> UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, MediatR.Unit > MediatR.IRequestHandler <TCommand, MediatR.Unit > Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams>, IMediationCommandHandler<TCommand, Unit>, IRequestHandler<TCommand, Unit> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<int, TModelEntity, Unit> Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams TCommand Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Declaration public abstract Task<Unit> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-6.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<int, TModelEntity, TCommandResult> Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams TCommand TCommandResult Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-7.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<TApiEntityKey, TModelEntity, TCommandResult> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams TCommand TCommandResult Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.CreateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.CreateCommandHandler-5.html",
    "title": "Class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> CreateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand <TModelEntity>, TModelEntity> CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < CreateCommand <TModelEntity>, TModelEntity> MediatR.IRequestHandler < CreateCommand <TModelEntity>, TModelEntity> Inherited Members CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand<TModelEntity>, TModelEntity>.Handle(CreateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand<TModelEntity>, TModelEntity>, IMediationCommandHandler<CreateCommand<TModelEntity>, TModelEntity>, IRequestHandler<CreateCommand<TModelEntity>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors CreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public CreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(CreateCommand<TModelEntity>, CancellationToken) Declaration public override async Task<TModelEntity> Handle(CreateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description CreateCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelEntity> Overrides Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.CreateCommand<TModelEntity>, TModelEntity>.Handle(Apizr.Mediation.Cruding.CreateCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-4.html",
    "title": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> DeleteCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand <TModelEntity>, MediatR.Unit > DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteCommand <TModelEntity>, MediatR.Unit > MediatR.IRequestHandler < DeleteCommand <TModelEntity>, MediatR.Unit > Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity>, Unit>.Handle(DeleteCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity>, Unit>, IMediationCommandHandler<DeleteCommand<TModelEntity>, Unit>, IRequestHandler<DeleteCommand<TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams Constructors DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Unit> Handle(DeleteCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.DeleteCommand<TModelEntity>, MediatR.Unit>.Handle(Apizr.Mediation.Cruding.DeleteCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-5.html",
    "title": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand <TModelEntity, TApiEntityKey>, MediatR.Unit > DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteCommand <TModelEntity, TApiEntityKey>, MediatR.Unit > MediatR.IRequestHandler < DeleteCommand <TModelEntity, TApiEntityKey>, MediatR.Unit > Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity, TApiEntityKey>, Unit>.Handle(DeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity, TApiEntityKey>, Unit>, IMediationCommandHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit>, IRequestHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) Declaration public override async Task<Unit> Handle(DeleteCommand<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteCommand <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.DeleteCommand<TModelEntity, TApiEntityKey>, MediatR.Unit>.Handle(Apizr.Mediation.Cruding.DeleteCommand<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.html",
    "title": "Namespace Apizr.Mediation.Cruding.Handling | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Handling Classes CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-4.html",
    "title": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> | Apizr",
    "keywords": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery <TModelReadAllResult>, TModelReadAllResult> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> Implements IMediationQueryHandler < ReadAllQuery <TModelReadAllResult>, TModelReadAllResult> MediatR.IRequestHandler < ReadAllQuery <TModelReadAllResult>, TModelReadAllResult> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery<TModelReadAllResult>, TModelReadAllResult>.Handle(ReadAllQuery<TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<String, Object>>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery<TModelReadAllResult>, TModelReadAllResult>, IMediationQueryHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult>, IRequestHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TModelReadAllResult TApiReadAllResult Constructors ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<String, Object>>>) Declaration public ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> crudApiManager Methods Handle(ReadAllQuery<TModelReadAllResult>, CancellationToken) Declaration public override async Task<TModelReadAllResult> Handle(ReadAllQuery<TModelReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllQuery <TModelReadAllResult> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, Apizr.Mediation.Cruding.ReadAllQuery<TModelReadAllResult>, TModelReadAllResult>.Handle(Apizr.Mediation.Cruding.ReadAllQuery<TModelReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-5.html",
    "title": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams> ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery <TReadAllParams, TModelReadAllResult>, TModelReadAllResult> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadAllQuery <TReadAllParams, TModelReadAllResult>, TModelReadAllResult> MediatR.IRequestHandler < ReadAllQuery <TReadAllParams, TModelReadAllResult>, TModelReadAllResult> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult>.Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult>, IMediationQueryHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult>, IRequestHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TModelReadAllResult TApiReadAllResult TReadAllParams Constructors ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>>) Declaration public ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) Declaration public override async Task<TModelReadAllResult> Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllQuery <TReadAllParams, TModelReadAllResult> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult>.Handle(Apizr.Mediation.Cruding.ReadAllQuery<TReadAllParams, TModelReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-4.html",
    "title": "Class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> ReadQueryHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery <TModelEntity>, TModelEntity> ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadQuery <TModelEntity>, TModelEntity> MediatR.IRequestHandler < ReadQuery <TModelEntity>, TModelEntity> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity>, TModelEntity>.Handle(ReadQuery<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity>, TModelEntity>, IMediationQueryHandler<ReadQuery<TModelEntity>, TModelEntity>, IRequestHandler<ReadQuery<TModelEntity>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams Constructors ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadQuery<TModelEntity>, CancellationToken) Declaration public override async Task<TModelEntity> Handle(ReadQuery<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description ReadQuery <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelEntity> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.ReadQuery<TModelEntity>, TModelEntity>.Handle(Apizr.Mediation.Cruding.ReadQuery<TModelEntity>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-5.html",
    "title": "Class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadQueryHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery <TModelEntity, TApiEntityKey>, TModelEntity> ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadQuery <TModelEntity, TApiEntityKey>, TModelEntity> MediatR.IRequestHandler < ReadQuery <TModelEntity, TApiEntityKey>, TModelEntity> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity>.Handle(ReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity>, IMediationQueryHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity>, IRequestHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) Declaration public override async Task<TModelEntity> Handle(ReadQuery<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description ReadQuery <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelEntity> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity>.Handle(Apizr.Mediation.Cruding.ReadQuery<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-4.html",
    "title": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> UpdateCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand <TModelEntity>> UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateCommand <TModelEntity>, MediatR.Unit > MediatR.IRequestHandler < UpdateCommand <TModelEntity>, MediatR.Unit > Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand<TModelEntity>>.Handle(UpdateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand<TModelEntity>>, IMediationCommandHandler<UpdateCommand<TModelEntity>, Unit>, IRequestHandler<UpdateCommand<TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams Constructors UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Unit> Handle(UpdateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.UpdateCommand<TModelEntity>>.Handle(Apizr.Mediation.Cruding.UpdateCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-5.html",
    "title": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand <TApiEntityKey, TModelEntity>, MediatR.Unit > UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateCommand <TApiEntityKey, TModelEntity>, MediatR.Unit > MediatR.IRequestHandler < UpdateCommand <TApiEntityKey, TModelEntity>, MediatR.Unit > Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand<TApiEntityKey, TModelEntity>, Unit>.Handle(UpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand<TApiEntityKey, TModelEntity>, Unit>, IMediationCommandHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit>, IRequestHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) Declaration public override async Task<Unit> Handle(UpdateCommand<TApiEntityKey, TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateCommand <TApiEntityKey, TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.UpdateCommand<TApiEntityKey, TModelEntity>, MediatR.Unit>.Handle(Apizr.Mediation.Cruding.UpdateCommand<TApiEntityKey, TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.html": {
    "href": "api/Apizr.Mediation.Cruding.html",
    "title": "Namespace Apizr.Mediation.Cruding | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding Classes CreateCommand<TModelData> DeleteCommand<T> DeleteCommand<T, TKey> ReadAllQuery<TReadAllResult> ReadAllQuery<TReadAllParams, TReadAllResult> ReadQuery<TResultData> ReadQuery<TResultData, TKey> UpdateCommand<TRequestData> UpdateCommand<TKey, TRequestData>"
  },
  "api/Apizr.Mediation.Cruding.ReadAllQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadAllQuery-1.html",
    "title": "Class ReadAllQuery<TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQuery<TReadAllResult> Inheritance System.Object RequestBase <TReadAllResult> PrioritizedRequestBase <TReadAllResult> MediationQueryBase <TReadAllResult> ReadAllQueryBase < System.Collections.Generic.IDictionary < System.String , System.Object >, TReadAllResult> ReadAllQueryBase <TReadAllResult> ReadAllQuery<TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<String, Object>, TReadAllResult>.Parameters MediationQueryBase<TReadAllResult>.ClearCache PrioritizedRequestBase<TReadAllResult>.Priority RequestBase<TReadAllResult>.Context RequestBase<TReadAllResult>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQuery<TReadAllResult> : ReadAllQueryBase<TReadAllResult>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters Name Description TReadAllResult Constructors ReadAllQuery(Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(Boolean, Action<Exception>) Declaration public ReadAllQuery(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(IDictionary<String, Object>, Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(IDictionary<string, object> parameters, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(IDictionary<String, Object>, Boolean, Action<Exception>) Declaration public ReadAllQuery(IDictionary<string, object> parameters, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(IDictionary<String, Object>, Int32, Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(IDictionary<string, object> parameters, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(IDictionary<String, Object>, Int32, Boolean, Action<Exception>) Declaration public ReadAllQuery(IDictionary<string, object> parameters, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(Int32, Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(Int32, Boolean, Action<Exception>) Declaration public ReadAllQuery(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.ReadAllQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadAllQuery-2.html",
    "title": "Class ReadAllQuery<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQuery<TReadAllParams, TReadAllResult> Inheritance System.Object RequestBase <TReadAllResult> PrioritizedRequestBase <TReadAllResult> MediationQueryBase <TReadAllResult> ReadAllQueryBase <TReadAllParams, TReadAllResult> ReadAllQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<TReadAllParams, TReadAllResult>.Parameters MediationQueryBase<TReadAllResult>.ClearCache PrioritizedRequestBase<TReadAllResult>.Priority RequestBase<TReadAllResult>.Context RequestBase<TReadAllResult>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQuery<TReadAllParams, TReadAllResult> : ReadAllQueryBase<TReadAllParams, TReadAllResult>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters Name Description TReadAllParams TReadAllResult Constructors ReadAllQuery(TReadAllParams, Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(TReadAllParams parameters, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(TReadAllParams, Boolean, Action<Exception>) Declaration public ReadAllQuery(TReadAllParams parameters, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(TReadAllParams parameters, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(TReadAllParams, Int32, Boolean, Action<Exception>) Declaration public ReadAllQuery(TReadAllParams parameters, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams parameters System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(Boolean, Action<Exception>) Declaration public ReadAllQuery(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(Int32, Context, Boolean, Action<Exception>) Declaration public ReadAllQuery(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadAllQuery(Int32, Boolean, Action<Exception>) Declaration public ReadAllQuery(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.ReadQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadQuery-1.html",
    "title": "Class ReadQuery<TResultData> | Apizr",
    "keywords": "Class ReadQuery<TResultData> Inheritance System.Object RequestBase <TResultData> PrioritizedRequestBase <TResultData> MediationQueryBase <TResultData> ReadQueryBase <TResultData, System.Int32 > ReadQueryBase <TResultData> ReadQuery<TResultData> Implements IMediationQuery <TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members ReadQueryBase<TResultData, Int32>.Key MediationQueryBase<TResultData>.ClearCache PrioritizedRequestBase<TResultData>.Priority RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQuery<TResultData> : ReadQueryBase<TResultData>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData Constructors ReadQuery(Int32, Context, Boolean, Action<Exception>) Declaration public ReadQuery(int key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQuery(Int32, Boolean, Action<Exception>) Declaration public ReadQuery(int key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Boolean clearCache System.Action < System.Exception > onException ReadQuery(Int32, Int32, Context, Boolean, Action<Exception>) Declaration public ReadQuery(int key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQuery(Int32, Int32, Boolean, Action<Exception>) Declaration public ReadQuery(int key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.ReadQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadQuery-2.html",
    "title": "Class ReadQuery<TResultData, TKey> | Apizr",
    "keywords": "Class ReadQuery<TResultData, TKey> Inheritance System.Object RequestBase <TResultData> PrioritizedRequestBase <TResultData> MediationQueryBase <TResultData> ReadQueryBase <TResultData, TKey> ReadQuery<TResultData, TKey> Implements IMediationQuery <TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members ReadQueryBase<TResultData, TKey>.Key MediationQueryBase<TResultData>.ClearCache PrioritizedRequestBase<TResultData>.Priority RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQuery<TResultData, TKey> : ReadQueryBase<TResultData, TKey>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData TKey Constructors ReadQuery(TKey, Context, Boolean, Action<Exception>) Declaration public ReadQuery(TKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TKey key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQuery(TKey, Boolean, Action<Exception>) Declaration public ReadQuery(TKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Boolean clearCache System.Action < System.Exception > onException ReadQuery(TKey, Int32, Context, Boolean, Action<Exception>) Declaration public ReadQuery(TKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ReadQuery(TKey, Int32, Boolean, Action<Exception>) Declaration public ReadQuery(TKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TKey key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.html",
    "title": "Class ApizrCrudMediator | Apizr",
    "keywords": "Class ApizrCrudMediator Inheritance System.Object ApizrCrudMediator Implements IApizrCrudMediator IApizrCrudMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrCrudMediator : IApizrCrudMediator, IApizrCrudMediatorBase, IApizrMediatorBase Constructors ApizrCrudMediator(IMediator) Declaration public ApizrCrudMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendCreateCommand<TApiEntity>(TApiEntity, Context, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity SendCreateCommand<TApiEntity>(TApiEntity, Context, CancellationToken, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity SendCreateCommand<TApiEntity>(TApiEntity, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity SendCreateCommand<TApiEntity>(TApiEntity, CancellationToken, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Context, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Context, CancellationToken, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, CancellationToken, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Action<Exception>) Declaration public Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Action<Exception>) Declaration public Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<Exception>) Declaration public Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Action<Exception>) Declaration public Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendReadAllQuery<TReadAllResult>(Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult>(Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult>(Int32, Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult>(Int32, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult>(CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Int32, Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Int32, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult>(CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult TReadAllResult TReadAllParams SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, Action<Exception>) Declaration public Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<Exception>) Declaration public Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey Implements IApizrCrudMediator IApizrCrudMediatorBase IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator-4.html",
    "title": "Class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors ApizrCrudMediator(IApizrCrudMediator) Declaration public ApizrCrudMediator(IApizrCrudMediator apizrMediator) Parameters Type Name Description IApizrCrudMediator apizrMediator Methods SendCreateCommand(TApiEntity, Context, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand(TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand(TApiEntity, Context, CancellationToken, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand(TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand(TApiEntity, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand(TApiEntity, CancellationToken, Action<Exception>) Declaration public Task<TApiEntity> SendCreateCommand(TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand<TModelEntity>(TModelEntity, Context, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendCreateCommand<TModelEntity>(TModelEntity, Context, CancellationToken, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendCreateCommand<TModelEntity>(TModelEntity, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendCreateCommand<TModelEntity>(TModelEntity, CancellationToken, Action<Exception>) Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendDeleteCommand(TApiEntityKey, Context, Action<Exception>) Declaration public Task SendDeleteCommand(TApiEntityKey key, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendDeleteCommand(TApiEntityKey, Context, CancellationToken, Action<Exception>) Declaration public Task SendDeleteCommand(TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendDeleteCommand(TApiEntityKey, Action<Exception>) Declaration public Task SendDeleteCommand(TApiEntityKey key, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendDeleteCommand(TApiEntityKey, CancellationToken, Action<Exception>) Declaration public Task SendDeleteCommand(TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendReadAllQuery(TReadAllParams, Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, Context, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(CancellationToken, Boolean, Action<Exception>) Declaration public Task<TReadAllResult> SendReadAllQuery(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Int32, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Int32, Context, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Int32, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadQuery(TApiEntityKey, Context, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery<TModelEntity>(TApiEntityKey, Context, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendUpdateCommand(TApiEntityKey, TApiEntity, Context, Action<Exception>) Declaration public Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendUpdateCommand(TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendUpdateCommand(TApiEntityKey, TApiEntity, Action<Exception>) Declaration public Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendUpdateCommand(TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TApiEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) Declaration public Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key TModelEntity entity System.Threading.CancellationToken cancellationToken System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity Implements IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudMediatorBase IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Sending.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.html",
    "title": "Namespace Apizr.Mediation.Cruding.Sending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Sending Classes ApizrCrudMediator ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Interfaces IApizrCrudMediator Apizr mediator dedicated to cruding IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to TApiEntity cruding, getting all shorter IApizrCrudMediatorBase"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.html",
    "title": "Interface IApizrCrudMediator | Apizr",
    "keywords": "Interface IApizrCrudMediator Apizr mediator dedicated to cruding Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrCrudMediator : IApizrCrudMediatorBase, IApizrMediatorBase Methods SendCreateCommand<TApiEntity>(TApiEntity, Context, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TApiEntity>(TApiEntity, Context, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TApiEntity>(TApiEntity, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TApiEntity>(TApiEntity, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Context, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllQuery<TReadAllResult>(Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html",
    "title": "Interface IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to TApiEntity cruding, getting all shorter Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrCrudMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Methods SendCreateCommand(TApiEntity, Context, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand(TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand(TApiEntity, Context, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand(TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand(TApiEntity, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand(TApiEntity, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand(TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand<TModelEntity>(TModelEntity, Context, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendCreateCommand<TModelEntity>(TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendCreateCommand<TModelEntity>(TModelEntity, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendCreateCommand<TModelEntity>(TModelEntity, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TModelEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendDeleteCommand(TApiEntityKey, Context, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand(TApiEntityKey key, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendDeleteCommand(TApiEntityKey, Context, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand(TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendDeleteCommand(TApiEntityKey, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand(TApiEntityKey key, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendDeleteCommand(TApiEntityKey, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand(TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendReadAllQuery(TReadAllParams, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration Task<TReadAllResult> SendReadAllQuery(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllQuery<TModelEntityReadAllResult>(CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadQuery(TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery<TModelEntity>(TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendReadQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendUpdateCommand(TApiEntityKey, TApiEntity, Context, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendUpdateCommand(TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendUpdateCommand(TApiEntityKey, TApiEntity, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendUpdateCommand(TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediatorBase.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediatorBase.html",
    "title": "Interface IApizrCrudMediatorBase | Apizr",
    "keywords": "Interface IApizrCrudMediatorBase Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrCrudMediatorBase : IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.UpdateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.UpdateCommand-1.html",
    "title": "Class UpdateCommand<TRequestData> | Apizr",
    "keywords": "Class UpdateCommand<TRequestData> Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase <TRequestData, MediatR.Unit > UpdateCommandBase < System.Int32 , TRequestData, MediatR.Unit > UpdateCommandBase <TRequestData, MediatR.Unit > UpdateCommandBase <TRequestData> UpdateCommand<TRequestData> Implements IMediationCommand <TRequestData, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, Unit>.Key UpdateCommandBase<Int32, TRequestData, Unit>.RequestData RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommand<TRequestData> : UpdateCommandBase<TRequestData>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TRequestData Constructors UpdateCommand(Int32, TRequestData, Context, Action<Exception>) Declaration public UpdateCommand(int key, TRequestData requestData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key TRequestData requestData Polly.Context context System.Action < System.Exception > onException UpdateCommand(Int32, TRequestData, Action<Exception>) Declaration public UpdateCommand(int key, TRequestData requestData, Action<Exception> onException = null) Parameters Type Name Description System.Int32 key TRequestData requestData System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Cruding.UpdateCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.UpdateCommand-2.html",
    "title": "Class UpdateCommand<TKey, TRequestData> | Apizr",
    "keywords": "Class UpdateCommand<TKey, TRequestData> Inheritance System.Object RequestBase < MediatR.Unit > MediationCommandBase <TRequestData, MediatR.Unit > UpdateCommandBase <TKey, TRequestData, MediatR.Unit > UpdateCommand<TKey, TRequestData> Implements IMediationCommand <TRequestData, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members UpdateCommandBase<TKey, TRequestData, Unit>.Key UpdateCommandBase<TKey, TRequestData, Unit>.RequestData RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommand<TKey, TRequestData> : UpdateCommandBase<TKey, TRequestData, Unit>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TKey TRequestData Constructors UpdateCommand(TKey, TRequestData, Context, Action<Exception>) Declaration public UpdateCommand(TKey key, TRequestData requestData, Context context, Action<Exception> onException = null) Parameters Type Name Description TKey key TRequestData requestData Polly.Context context System.Action < System.Exception > onException UpdateCommand(TKey, TRequestData, Action<Exception>) Declaration public UpdateCommand(TKey key, TRequestData requestData, Action<Exception> onException = null) Parameters Type Name Description TKey key TRequestData requestData System.Action < System.Exception > onException Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Querying.html": {
    "href": "api/Apizr.Mediation.Querying.html",
    "title": "Namespace Apizr.Mediation.Querying | Apizr",
    "keywords": "Namespace Apizr.Mediation.Querying Classes MediationQueryBase<TResultData> Interfaces IMediationQuery<TResultData> IMediationQueryHandler<TQuery, TResponse>"
  },
  "api/Apizr.Mediation.Querying.IMediationQuery-1.html": {
    "href": "api/Apizr.Mediation.Querying.IMediationQuery-1.html",
    "title": "Interface IMediationQuery<TResultData> | Apizr",
    "keywords": "Interface IMediationQuery<TResultData> Namespace : Apizr.Mediation.Querying Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationQuery<out TResultData> : IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Querying.IMediationQueryHandler-2.html": {
    "href": "api/Apizr.Mediation.Querying.IMediationQueryHandler-2.html",
    "title": "Interface IMediationQueryHandler<TQuery, TResponse> | Apizr",
    "keywords": "Interface IMediationQueryHandler<TQuery, TResponse> Inherited Members MediatR.IRequestHandler<TQuery, TResponse>.Handle(TQuery, System.Threading.CancellationToken) Namespace : Apizr.Mediation.Querying Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationQueryHandler<in TQuery, TResponse> : IRequestHandler<TQuery, TResponse> where TQuery : IMediationQuery<TResponse> Type Parameters Name Description TQuery TResponse Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Querying.MediationQueryBase-1.html": {
    "href": "api/Apizr.Mediation.Querying.MediationQueryBase-1.html",
    "title": "Class MediationQueryBase<TResultData> | Apizr",
    "keywords": "Class MediationQueryBase<TResultData> Inheritance System.Object RequestBase <TResultData> PrioritizedRequestBase <TResultData> MediationQueryBase<TResultData> ReadAllQueryBase<TReadAllParams, TReadAllResult> ReadQueryBase<TResponse, TKey> Implements IMediationQuery <TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members PrioritizedRequestBase<TResultData>.Priority RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Querying Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationQueryBase<TResultData> : PrioritizedRequestBase<TResultData>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData Constructors MediationQueryBase(Context, Boolean, Action<Exception>) Declaration protected MediationQueryBase(Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException MediationQueryBase(Boolean, Action<Exception>) Declaration protected MediationQueryBase(bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Boolean clearCache System.Action < System.Exception > onException MediationQueryBase(Int32, Context, Boolean, Action<Exception>) Declaration protected MediationQueryBase(int priority, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException MediationQueryBase(Int32, Boolean, Action<Exception>) Declaration protected MediationQueryBase(int priority, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Boolean clearCache System.Action < System.Exception > onException Properties ClearCache Declaration public bool ClearCache { get; } Property Value Type Description System.Boolean Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase.html",
    "title": "Class ExecuteRequestBase | Apizr",
    "keywords": "Class ExecuteRequestBase Inheritance System.Object RequestBase < MediatR.Unit > ExecuteRequestBase < MediatR.Unit > ExecuteRequestBase ExecuteUnitRequestBase<TWebApi> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit>.ExecuteApiMethod RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteRequestBase : ExecuteRequestBase<Unit>, IRequest<Unit>, IBaseRequest Constructors ExecuteRequestBase(Expression, Context, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteRequestBase(Expression, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-1.html",
    "title": "Class ExecuteRequestBase<TFormattedModelResultData> | Apizr",
    "keywords": "Class ExecuteRequestBase<TFormattedModelResultData> Inheritance System.Object RequestBase <TFormattedModelResultData> ExecuteRequestBase<TFormattedModelResultData> ExecuteRequestBase ExecuteRequestBase<TFormattedModelResultData, TModelRequestData> ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members RequestBase<TFormattedModelResultData>.Context RequestBase<TFormattedModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteRequestBase<TFormattedModelResultData> : RequestBase<TFormattedModelResultData>, IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TFormattedModelResultData Constructors ExecuteRequestBase(Expression, Context, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteRequestBase(Expression, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod System.Action < System.Exception > onException Properties ExecuteApiMethod Declaration public Expression ExecuteApiMethod { get; } Property Value Type Description System.Linq.Expressions.Expression Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-2.html",
    "title": "Class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData> Inheritance System.Object RequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData> ExecuteRequestBase<TFormattedModelResultData, TModelRequestData> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod RequestBase<TFormattedModelResultData>.Context RequestBase<TFormattedModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData> : ExecuteRequestBase<TFormattedModelResultData>, IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TFormattedModelResultData TModelRequestData Constructors ExecuteRequestBase(Expression, TModelRequestData, Context, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, TModelRequestData modelRequestData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Action < System.Exception > onException ExecuteRequestBase(Expression, TModelRequestData, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, TModelRequestData modelRequestData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod TModelRequestData modelRequestData System.Action < System.Exception > onException ExecuteRequestBase(Expression, Context, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteRequestBase(Expression, Action<Exception>) Declaration protected ExecuteRequestBase(Expression executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod System.Action < System.Exception > onException Properties ModelRequestData Declaration public TModelRequestData ModelRequestData { get; } Property Value Type Description TModelRequestData Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-2.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TApiData> Inheritance System.Object RequestBase <TApiData> ExecuteRequestBase <TApiData> ExecuteRequestBase <TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData> ExecuteResultRequestBase<TWebApi, TApiData> ExecuteResultRequest<TWebApi, TApiData> Implements MediatR.IRequest <TApiData> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData>.ClearCache ExecuteRequestBase<TApiData, TApiData>.ModelRequestData ExecuteRequestBase<TApiData>.ExecuteApiMethod RequestBase<TApiData>.Context RequestBase<TApiData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TApiData> : ExecuteResultRequestBase<TWebApi, TApiData, TApiData>, IRequest<TApiData>, IBaseRequest Type Parameters Name Description TWebApi TApiData Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-3.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase <TModelData> ExecuteRequestBase <TModelData> ExecuteRequestBase <TModelData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData> ExecuteResultRequestBase<TWebApi, TModelData, TApiData> ExecuteResultRequestBase<TWebApi, TApiData> ExecuteResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest <TModelData> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData>.ClearCache ExecuteRequestBase<TModelData, TModelData>.ModelRequestData ExecuteRequestBase<TModelData>.ExecuteApiMethod RequestBase<TModelData>.Context RequestBase<TModelData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelData, TApiData> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData>, IRequest<TModelData>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-4.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> Inheritance System.Object RequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TFormattedModelResultData, TApiData, TModelData> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> ExecuteResultRequestBase<TWebApi, TModelData, TApiData> ExecuteOptionalResultRequestBase<TWebApi, TApiData> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApiData, TModelData>.ClearCache ExecuteRequestBase<TFormattedModelResultData, TModelData>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod RequestBase<TFormattedModelResultData>.Context RequestBase<TFormattedModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApiData, TModelData>, IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData TFormattedModelResultData Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-5.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestBase <TModelResultData> ExecuteRequestBase <TModelResultData> ExecuteRequestBase <TModelResultData, TModelRequestData> ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest <TModelResultData> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>.ClearCache ExecuteRequestBase<TModelResultData, TModelRequestData>.ModelRequestData ExecuteRequestBase<TModelResultData>.ExecuteApiMethod RequestBase<TModelResultData>.Context RequestBase<TModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>, IRequest<TModelResultData>, IBaseRequest Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-6.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData, TModelRequestData> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelRequestData>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod RequestBase<TFormattedModelResultData>.Context RequestBase<TFormattedModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData> : ExecuteRequestBase<TFormattedModelResultData, TModelRequestData>, IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TWebApi TModelResultData TApiResultData TFormattedModelResultData TApiRequestData TModelRequestData Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>) Declaration protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Properties ClearCache Declaration public bool ClearCache { get; } Property Value Type Description System.Boolean Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-1.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi> Inheritance System.Object RequestBase < MediatR.Unit > ExecuteRequestBase < MediatR.Unit > ExecuteRequestBase ExecuteUnitRequestBase<TWebApi> ExecuteUnitRequest<TWebApi> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit>.ExecuteApiMethod RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi> : ExecuteRequestBase, IRequest<Unit>, IBaseRequest Type Parameters Name Description TWebApi Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>>, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-2.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData> Inheritance System.Object RequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData> ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData> ExecuteOptionalUnitRequestBase<TWebApi> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod RequestBase<TFormattedModelResultData>.Context RequestBase<TFormattedModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData> : ExecuteRequestBase<TFormattedModelResultData>, IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TWebApi TFormattedModelResultData Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>>, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-3.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase < MediatR.Unit > ExecuteRequestBase < MediatR.Unit > ExecuteRequestBase < MediatR.Unit , TModelData> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData> ExecuteUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit, TModelData>.ModelRequestData ExecuteRequestBase<Unit>.ExecuteApiMethod RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData> : ExecuteRequestBase<Unit, TModelData>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-4.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> Inheritance System.Object RequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData> ExecuteRequestBase <TFormattedModelResultData, TModelData> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelData>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod RequestBase<TFormattedModelResultData>.Context RequestBase<TFormattedModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> : ExecuteRequestBase<TFormattedModelResultData, TModelData>, IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData TFormattedModelResultData Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration protected ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.html",
    "title": "Namespace Apizr.Mediation.Requesting.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Base Classes ExecuteRequestBase ExecuteRequestBase<TFormattedModelResultData> ExecuteRequestBase<TFormattedModelResultData, TModelRequestData> ExecuteResultRequestBase<TWebApi, TApiData> ExecuteResultRequestBase<TWebApi, TModelData, TApiData> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData> ExecuteUnitRequestBase<TWebApi> ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> PrioritizedRequestBase<TResultData> RequestBase<TFormattedModelResultData> RequestBase<TFormattedModelResultData, TModelRequestData>"
  },
  "api/Apizr.Mediation.Requesting.Base.PrioritizedRequestBase-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.PrioritizedRequestBase-1.html",
    "title": "Class PrioritizedRequestBase<TResultData> | Apizr",
    "keywords": "Class PrioritizedRequestBase<TResultData> Inheritance System.Object RequestBase <TResultData> PrioritizedRequestBase<TResultData> MediationQueryBase<TResultData> Implements MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData>.Context RequestBase<TResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class PrioritizedRequestBase<TResultData> : RequestBase<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData Constructors PrioritizedRequestBase(Context, Action<Exception>) Declaration protected PrioritizedRequestBase(Context context, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Action < System.Exception > onException PrioritizedRequestBase(Action<Exception>) Declaration protected PrioritizedRequestBase(Action<Exception> onException = null) Parameters Type Name Description System.Action < System.Exception > onException PrioritizedRequestBase(Int32, Context, Action<Exception>) Declaration protected PrioritizedRequestBase(int priority, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority Polly.Context context System.Action < System.Exception > onException PrioritizedRequestBase(Int32, Action<Exception>) Declaration protected PrioritizedRequestBase(int priority, Action<Exception> onException = null) Parameters Type Name Description System.Int32 priority System.Action < System.Exception > onException Properties Priority Declaration public int Priority { get; } Property Value Type Description System.Int32 Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.RequestBase-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.RequestBase-1.html",
    "title": "Class RequestBase<TFormattedModelResultData> | Apizr",
    "keywords": "Class RequestBase<TFormattedModelResultData> Inheritance System.Object RequestBase<TFormattedModelResultData> MediationCommandBase MediationCommandBase<TRequestData> MediationCommandBase<TRequestData, TResultData> MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteRequestBase<TFormattedModelResultData> PrioritizedRequestBase<TResultData> RequestBase<TFormattedModelResultData, TModelRequestData> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class RequestBase<TFormattedModelResultData> : IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TFormattedModelResultData Constructors RequestBase(Context, Action<Exception>) Declaration protected RequestBase(Context context, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Action < System.Exception > onException RequestBase(Action<Exception>) Declaration protected RequestBase(Action<Exception> onException = null) Parameters Type Name Description System.Action < System.Exception > onException Properties Context Declaration public Context Context { get; } Property Value Type Description Polly.Context OnException Declaration public Action<Exception> OnException { get; } Property Value Type Description System.Action < System.Exception > Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Base.RequestBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.RequestBase-2.html",
    "title": "Class RequestBase<TFormattedModelResultData, TModelRequestData> | Apizr",
    "keywords": "Class RequestBase<TFormattedModelResultData, TModelRequestData> Inheritance System.Object RequestBase <TFormattedModelResultData> RequestBase<TFormattedModelResultData, TModelRequestData> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members RequestBase<TFormattedModelResultData>.Context RequestBase<TFormattedModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class RequestBase<TFormattedModelResultData, TModelRequestData> : RequestBase<TFormattedModelResultData>, IRequest<TFormattedModelResultData>, IBaseRequest Type Parameters Name Description TFormattedModelResultData TModelRequestData Constructors RequestBase(TModelRequestData, Context, Action<Exception>) Declaration protected RequestBase(TModelRequestData modelRequestData, Context context, Action<Exception> onException = null) Parameters Type Name Description TModelRequestData modelRequestData Polly.Context context System.Action < System.Exception > onException RequestBase(TModelRequestData, Action<Exception>) Declaration protected RequestBase(TModelRequestData modelRequestData, Action<Exception> onException = null) Parameters Type Name Description TModelRequestData modelRequestData System.Action < System.Exception > onException RequestBase(Context, Action<Exception>) Declaration protected RequestBase(Context context, Action<Exception> onException = null) Parameters Type Name Description Polly.Context context System.Action < System.Exception > onException RequestBase(Action<Exception>) Declaration protected RequestBase(Action<Exception> onException = null) Parameters Type Name Description System.Action < System.Exception > onException Properties ModelRequestData Declaration public TModelRequestData ModelRequestData { get; } Property Value Type Description TModelRequestData Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-2.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-2.html",
    "title": "Class ExecuteResultRequest<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TApiData> Inheritance System.Object RequestBase <TApiData> ExecuteRequestBase <TApiData> ExecuteRequestBase <TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData> ExecuteResultRequest<TWebApi, TApiData> Implements MediatR.IRequest <TApiData> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData>.ClearCache ExecuteRequestBase<TApiData, TApiData>.ModelRequestData ExecuteRequestBase<TApiData>.ExecuteApiMethod RequestBase<TApiData>.Context RequestBase<TApiData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequest<TWebApi, TApiData> : ExecuteResultRequestBase<TWebApi, TApiData>, IRequest<TApiData>, IBaseRequest Type Parameters Name Description TWebApi TApiData Constructors ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-3.html",
    "title": "Class ExecuteResultRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase <TModelData> ExecuteRequestBase <TModelData> ExecuteRequestBase <TModelData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData> ExecuteResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest <TModelData> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData>.ClearCache ExecuteRequestBase<TModelData, TModelData>.ModelRequestData ExecuteRequestBase<TModelData>.ExecuteApiMethod RequestBase<TModelData>.Context RequestBase<TModelData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequest<TWebApi, TModelData, TApiData> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData>, IRequest<TModelData>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-5.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-5.html",
    "title": "Class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestBase <TModelResultData> ExecuteRequestBase <TModelResultData> ExecuteRequestBase <TModelResultData, TModelRequestData> ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData> ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest <TModelResultData> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>.ClearCache ExecuteRequestBase<TModelResultData, TModelRequestData>.ModelRequestData ExecuteRequestBase<TModelResultData>.ExecuteApiMethod RequestBase<TModelResultData>.Context RequestBase<TModelResultData>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IRequest<TModelResultData>, IBaseRequest Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Constructors ExecuteResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration public ExecuteResultRequest(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-1.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-1.html",
    "title": "Class ExecuteUnitRequest<TWebApi> | Apizr",
    "keywords": "Class ExecuteUnitRequest<TWebApi> Inheritance System.Object RequestBase < MediatR.Unit > ExecuteRequestBase < MediatR.Unit > ExecuteRequestBase ExecuteUnitRequestBase <TWebApi> ExecuteUnitRequest<TWebApi> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit>.ExecuteApiMethod RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequest<TWebApi> : ExecuteUnitRequestBase<TWebApi>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TWebApi Constructors ExecuteUnitRequest(Expression<Func<TWebApi, Task>>, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException ExecuteUnitRequest(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequest(Expression<Func<CancellationToken, TWebApi, Task>>, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-3.html",
    "title": "Class ExecuteUnitRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteUnitRequest<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase < MediatR.Unit > ExecuteRequestBase < MediatR.Unit > ExecuteRequestBase < MediatR.Unit , TModelData> ExecuteUnitRequestBase <TWebApi, TModelData, TApiData> ExecuteUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit, TModelData>.ModelRequestData ExecuteRequestBase<Unit>.ExecuteApiMethod RequestBase<Unit>.Context RequestBase<Unit>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequest<TWebApi, TModelData, TApiData> : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteUnitRequest(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException ExecuteUnitRequest(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException ExecuteUnitRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration public ExecuteUnitRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-3.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest> Inheritance System.Object ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest> ExecuteResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler <TRequest, TApiData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest> : IRequestHandler<TRequest, TApiData> where TRequest : ExecuteResultRequestBase<TWebApi, TApiData> Type Parameters Name Description TWebApi TApiData TRequest Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<TApiData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TApiData> Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-4.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, TModelData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> : RequestHandlerBase, IRequestHandler<TRequest, TModelData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelData, TApiData> Type Parameters Name Description TWebApi TModelData TApiData TRequest Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<TModelData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelData> Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-5.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> : RequestHandlerBase, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> Type Parameters Name Description TWebApi TModelData TApiData TFormattedModelResultData TRequest Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-6.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler <TRequest, TModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> : RequestHandlerBase, IRequestHandler<TRequest, TModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData TRequest Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<TModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-7.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest> : RequestHandlerBase, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TFormattedModelResultData TApiRequestData TModelRequestData TRequest Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-2.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TRequest> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TRequest> Inheritance System.Object ExecuteUnitRequestHandlerBase<TWebApi, TRequest> ExecuteUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler <TRequest, MediatR.Unit > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TRequest> : IRequestHandler<TRequest, Unit> where TRequest : ExecuteUnitRequestBase<TWebApi> Type Parameters Name Description TWebApi TRequest Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<Unit> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-3.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest> Inheritance System.Object ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest> : IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData> Type Parameters Name Description TWebApi TFormattedModelResultData TRequest Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-4.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> Inheritance System.Object ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, MediatR.Unit > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> : IRequestHandler<TRequest, Unit> where TRequest : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData> Type Parameters Name Description TWebApi TModelData TApiData TRequest Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<Unit> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-5.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> Inheritance System.Object ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> : IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData> Type Parameters Name Description TWebApi TModelData TApiData TFormattedModelResultData TRequest Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.html",
    "title": "Namespace Apizr.Mediation.Requesting.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Handling.Base Classes ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest> ExecuteUnitRequestHandlerBase<TWebApi, TRequest> ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> RequestHandlerBase"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.RequestHandlerBase.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.RequestHandlerBase.html",
    "title": "Class RequestHandlerBase | Apizr",
    "keywords": "Class RequestHandlerBase Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class RequestHandlerBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-2.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TApiData> Inheritance System.Object ExecuteResultRequestHandlerBase <TWebApi, TApiData, ExecuteResultRequest <TWebApi, TApiData>> ExecuteResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler < ExecuteResultRequest <TWebApi, TApiData>, TApiData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>>.Handle(ExecuteResultRequest<TWebApi, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequestHandler<TWebApi, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>>, IRequestHandler<ExecuteResultRequest<TWebApi, TApiData>, TApiData> Type Parameters Name Description TWebApi TApiData Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteResultRequest<TWebApi, TApiData>, CancellationToken) Declaration public override Task<TApiData> Handle(ExecuteResultRequest<TWebApi, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteResultRequest <TWebApi, TApiData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TApiData> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TApiData, Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TApiData>>.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-3.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteResultRequest <TWebApi, TModelData, TApiData>> ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteResultRequest <TWebApi, TModelData, TApiData>, TModelData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>>.Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>>, IRequestHandler<ExecuteResultRequest<TWebApi, TModelData, TApiData>, TModelData> Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) Declaration public override Task<TModelData> Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteResultRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelData> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelData, TApiData>>.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-5.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>> ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler < ExecuteResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, TModelResultData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>.Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>, IRequestHandler<ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, TModelResultData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) Declaration public override Task<TModelResultData> Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TModelResultData> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-1.html",
    "title": "Class ExecuteUnitRequestHandler<TWebApi> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandler<TWebApi> Inheritance System.Object ExecuteUnitRequestHandlerBase <TWebApi, ExecuteUnitRequest <TWebApi>> ExecuteUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler < ExecuteUnitRequest <TWebApi>, MediatR.Unit > Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>>.Handle(ExecuteUnitRequest<TWebApi>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequestHandler<TWebApi> : ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>>, IRequestHandler<ExecuteUnitRequest<TWebApi>, Unit> Type Parameters Name Description TWebApi Constructors ExecuteUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteUnitRequest<TWebApi>, CancellationToken) Declaration public override async Task<Unit> Handle(ExecuteUnitRequest<TWebApi> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteUnitRequest <TWebApi> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi>>.Handle(Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-3.html",
    "title": "Class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Inheritance System.Object ExecuteUnitRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteUnitRequest <TWebApi, TModelData, TApiData>> ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteUnitRequest <TWebApi, TModelData, TApiData>, MediatR.Unit > Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>>.Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> : ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>>, IRequestHandler<ExecuteUnitRequest<TWebApi, TModelData, TApiData>, Unit> Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) Declaration public override async Task<Unit> Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteUnitRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi, TModelData, TApiData>>.Handle(Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Handling.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.html",
    "title": "Namespace Apizr.Mediation.Requesting.Handling | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Handling Classes ExecuteResultRequestHandler<TWebApi, TApiData> ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteUnitRequestHandler<TWebApi> ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData>"
  },
  "api/Apizr.Mediation.Requesting.html": {
    "href": "api/Apizr.Mediation.Requesting.html",
    "title": "Namespace Apizr.Mediation.Requesting | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting Classes ExecuteResultRequest<TWebApi, TApiData> ExecuteResultRequest<TWebApi, TModelData, TApiData> ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteUnitRequest<TWebApi> ExecuteUnitRequest<TWebApi, TModelData, TApiData>"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediator.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediator.html",
    "title": "Class ApizrMediator | Apizr",
    "keywords": "Class ApizrMediator Inheritance System.Object ApizrMediator Implements IApizrMediator IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrMediator : IApizrMediator, IApizrMediatorBase Constructors ApizrMediator(IMediator) Declaration public ApizrMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<Exception>) Declaration public Task SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Declaration public Task SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Declaration public Task SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Declaration public Task SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Declaration public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Declaration public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Implements IApizrMediator IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediator-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediator-1.html",
    "title": "Class ApizrMediator<TWebApi> | Apizr",
    "keywords": "Class ApizrMediator<TWebApi> Inheritance System.Object ApizrMediator<TWebApi> Implements IApizrMediator <TWebApi> IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrMediator<TWebApi> : IApizrMediator<TWebApi>, IApizrMediatorBase Type Parameters Name Description TWebApi Constructors ApizrMediator(IApizrMediator) Declaration public ApizrMediator(IApizrMediator apizrMediator) Parameters Type Name Description IApizrMediator apizrMediator Methods SendFor(Expression<Func<TWebApi, Task>>, Action<Exception>) Declaration public Task SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Declaration public Task SendFor(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Declaration public Task SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Declaration public Task SendFor(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TApiData> SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Declaration public Task SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Declaration public Task SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Declaration public Task SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Declaration public Task SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Threading.CancellationToken token System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Declaration public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Threading.CancellationToken token System.Boolean clearCache System.Action < System.Exception > onException Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData Implements IApizrMediator<TWebApi> IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Sending.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.html",
    "title": "Namespace Apizr.Mediation.Requesting.Sending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Sending Classes ApizrMediator ApizrMediator<TWebApi> Interfaces IApizrMediator Apizr mediator to send request using MediatR by calling expression IApizrMediator<TWebApi> IApizrMediator but dedicated to TWebApi , getting all shorter IApizrMediatorBase"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediator.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediator.html",
    "title": "Interface IApizrMediator | Apizr",
    "keywords": "Interface IApizrMediator Apizr mediator to send request using MediatR by calling expression Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediator : IApizrMediatorBase Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<Exception>) Send an api call to Apizr using MediatR Declaration Task SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration Task SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration Task SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR Declaration Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Send an api call to Apizr using MediatR with mapped request Declaration Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a Polly Context Declaration Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a cancellation token Declaration Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediator-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediator-1.html",
    "title": "Interface IApizrMediator<TWebApi> | Apizr",
    "keywords": "Interface IApizrMediator<TWebApi> IApizrMediator but dedicated to TWebApi , getting all shorter Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediator<TWebApi> : IApizrMediatorBase Type Parameters Name Description TWebApi The api interface to play with MediatR Methods SendFor(Expression<Func<TWebApi, Task>>, Action<Exception>) Send an api call to Apizr using MediatR Declaration Task SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration Task SendFor(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration Task SendFor(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR Declaration Task<TApiData> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api result type SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration Task<TApiData> SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api response SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task<TApiData> SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api response SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration Task<TApiData> SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api response SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Send an api call to Apizr using MediatR with mapped request Declaration Task SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a Polly Context Declaration Task SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration Task SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a cancellation token Declaration Task SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediatorBase.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediatorBase.html",
    "title": "Interface IApizrMediatorBase | Apizr",
    "keywords": "Interface IApizrMediatorBase Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.MediationOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MediationOptionsBuilderExtensions.html",
    "title": "Class MediationOptionsBuilderExtensions | Apizr",
    "keywords": "Class MediationOptionsBuilderExtensions Inheritance System.Object MediationOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.MediatR.dll Syntax public static class MediationOptionsBuilderExtensions Methods WithMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle requests execution with some mediation Declaration public static IApizrExtendedCommonOptionsBuilder WithMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedCommonOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedCommonOptionsBuilder WithMediation(IApizrExtendedOptionsBuilder) Let Apizr handle requests execution with some mediation Declaration public static IApizrExtendedOptionsBuilder WithMediation(this IApizrExtendedOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedOptionsBuilder"
  },
  "api/Apizr.MicrosoftCachingOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MicrosoftCachingOptionsBuilderExtensions.html",
    "title": "Class MicrosoftCachingOptionsBuilderExtensions | Apizr",
    "keywords": "Class MicrosoftCachingOptionsBuilderExtensions Inheritance System.Object MicrosoftCachingOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.Caching.dll Syntax public static class MicrosoftCachingOptionsBuilderExtensions Methods WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) Use any registered IDistributedCache implementation Declaration public static TBuilder WithDistributedCacheHandler<TBuilder, TCache>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilder Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder TCache WithInMemoryCacheHandler<TBuilder>(TBuilder) Use any registered IMemoryCache implementation Declaration public static TBuilder WithInMemoryCacheHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilder Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.MonkeyCacheHandler.html": {
    "href": "api/Apizr.MonkeyCacheHandler.html",
    "title": "Class MonkeyCacheHandler | Apizr",
    "keywords": "Class MonkeyCacheHandler Inheritance System.Object MonkeyCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.MonkeyCache.dll Syntax public class MonkeyCacheHandler : ICacheHandler Constructors MonkeyCacheHandler(IBarrel) Declaration public MonkeyCacheHandler(IBarrel barrel) Parameters Type Name Description MonkeyCache.IBarrel barrel Methods ClearAsync(CancellationToken) Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T RemoveAsync(String, CancellationToken) Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Declaration public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key System.Object value System.Nullable < System.TimeSpan > lifeSpan System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Commanding.html": {
    "href": "api/Apizr.Optional.Commanding.html",
    "title": "Namespace Apizr.Optional.Commanding | Apizr",
    "keywords": "Namespace Apizr.Optional.Commanding Interfaces IOptionalCommand<TError>"
  },
  "api/Apizr.Optional.Commanding.IOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Commanding.IOptionalCommand-1.html",
    "title": "Interface IOptionalCommand<TError> | Apizr",
    "keywords": "Interface IOptionalCommand<TError> Namespace : Apizr.Optional.Commanding Assembly : Apizr.Integrations.Optional.dll Syntax public interface IOptionalCommand<TError> : IRequest<Option<Unit, TError>>, IBaseRequest Type Parameters Name Description TError Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry.html",
    "title": "Class ApizrOptionalMediationRegistry | Apizr",
    "keywords": "Class ApizrOptionalMediationRegistry Inheritance System.Object ApizrOptionalMediationRegistryBase ApizrOptionalMediationRegistry Implements IApizrOptionalMediationConcurrentRegistry IApizrOptionalMediationRegistry IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrOptionalMediatorBase >>> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrOptionalMediationRegistryBase.ConcurrentRegistry ApizrOptionalMediationRegistryBase.GetEnumerator() ApizrOptionalMediationRegistryBase.IEnumerable.GetEnumerator() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrOptionalMediationRegistryBase.GetOptionalMediatorFor<TWebApi>() ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T>(IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey>(IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) ApizrOptionalMediationRegistryBase.TryGetOptionalMediatorFor<TWebApi>(IApizrOptionalMediator<TWebApi>) ApizrOptionalMediationRegistryBase.Count ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrOptionalMediationRegistryBase.ContainsOptionalMediatorFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrOptionalMediationRegistry : ApizrOptionalMediationRegistryBase, IApizrOptionalMediationConcurrentRegistry, IApizrOptionalMediationRegistry, IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Methods AddOrUpdate(Type, Type) Declaration public void AddOrUpdate(Type webApiType, Type serviceType) Parameters Type Name Description System.Type webApiType System.Type serviceType Implements IApizrOptionalMediationConcurrentRegistry IApizrOptionalMediationRegistry IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.html",
    "title": "Class ApizrOptionalMediationRegistryBase | Apizr",
    "keywords": "Class ApizrOptionalMediationRegistryBase Inheritance System.Object ApizrOptionalMediationRegistryBase ApizrOptionalMediationRegistry Implements IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrOptionalMediatorBase >>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ApizrOptionalMediationRegistryBase : IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Constructors ApizrOptionalMediationRegistryBase() Declaration protected ApizrOptionalMediationRegistryBase() Fields ConcurrentRegistry Declaration protected readonly IDictionary<Type, Func<IApizrOptionalMediatorBase>> ConcurrentRegistry Field Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < IApizrOptionalMediatorBase >> Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudOptionalMediatorFor<T>() Declaration public bool ContainsCrudOptionalMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T ContainsCrudOptionalMediatorFor<T, TKey>() Declaration public bool ContainsCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Declaration public bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Declaration public bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TReadAllParams ContainsOptionalMediatorFor<TWebApi>() Declaration public bool ContainsOptionalMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi GetCrudOptionalMediatorFor<T>() Declaration public IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T GetCrudOptionalMediatorFor<T, TKey>() Declaration public IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T TKey GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Declaration public IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T TKey TReadAllResult GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Declaration public IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T TKey TReadAllResult TReadAllParams GetEnumerator() Declaration public IEnumerator<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrOptionalMediatorBase >>> GetOptionalMediatorFor<TWebApi>() Declaration public IApizrOptionalMediator<TWebApi> GetOptionalMediatorFor<TWebApi>() Returns Type Description IApizrOptionalMediator <TWebApi> Type Parameters Name Description TWebApi TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Declaration public bool TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Declaration public bool TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T TKey TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Declaration public bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) Declaration public bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T TKey TReadAllResult TReadAllParams TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) Declaration public bool TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi> mediator) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Configuring.Registry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.html",
    "title": "Namespace Apizr.Optional.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Optional.Configuring.Registry Classes ApizrOptionalMediationRegistry ApizrOptionalMediationRegistryBase Interfaces IApizrOptionalMediationConcurrentRegistry IApizrOptionalMediationEnumerableRegistry IApizrOptionalMediationRegistry"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationConcurrentRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationConcurrentRegistry.html",
    "title": "Interface IApizrOptionalMediationConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationConcurrentRegistry Inherited Members IApizrOptionalMediationEnumerableRegistry.Count IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.ContainsOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.GetOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T>(IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey>(IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrOptionalMediationEnumerableRegistry.TryGetOptionalMediatorFor<TWebApi>(IApizrOptionalMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdate(Type, Type) Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediationConcurrentRegistry : IApizrOptionalMediationRegistry, IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.html",
    "title": "Interface IApizrOptionalMediationEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationEnumerableRegistry Inherited Members System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediationEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Properties Count Optional mediators count Declaration int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudOptionalMediatorFor<T>() Check if registry contains an optional mediator for T entity type Declaration bool ContainsCrudOptionalMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudOptionalMediatorFor<T, TKey>() Check if registry contains an optional mediator for T entity type with TKey key type Declaration bool ContainsCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Check if registry contains an optional mediator for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains an optional mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsOptionalMediatorFor<TWebApi>() Check if registry contains an optional mediator for TWebApi api type Declaration bool ContainsOptionalMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudOptionalMediatorFor<T>() Get a Crud optional mediator instance for an entity type Declaration IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type GetCrudOptionalMediatorFor<T, TKey>() Get a Crud optional mediator instance for an entity type with a specific key type Declaration IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type Declaration IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetOptionalMediatorFor<TWebApi>() Get an api optional mediator instance Declaration IApizrOptionalMediator<TWebApi> GetOptionalMediatorFor<TWebApi>() Returns Type Description IApizrOptionalMediator <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type Declaration bool TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type Declaration bool TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type Declaration bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) Try to get an api optional mediator instance Declaration bool TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi> mediator) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry.html",
    "title": "Interface IApizrOptionalMediationRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationRegistry Inherited Members IApizrOptionalMediationEnumerableRegistry.Count IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.ContainsOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.GetOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T>(IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey>(IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrOptionalMediationEnumerableRegistry.TryGetOptionalMediatorFor<TWebApi>(IApizrOptionalMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediationRegistry : IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.CreateOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.CreateOptionalCommand-1.html",
    "title": "Class CreateOptionalCommand<TModelData> | Apizr",
    "keywords": "Class CreateOptionalCommand<TModelData> Inheritance System.Object RequestBase < Optional.Option <TModelData, ApizrException >> MediationCommandBase <TModelData, Optional.Option <TModelData, ApizrException >> CreateCommandBase <TModelData, Optional.Option <TModelData, ApizrException >> CreateOptionalCommand<TModelData> Implements IMediationCommand <TModelData, Optional.Option <TModelData, ApizrException >> MediatR.IRequest < Optional.Option <TModelData, ApizrException >> MediatR.IBaseRequest Inherited Members CreateCommandBase<TModelData, Option<TModelData, ApizrException>>.RequestData RequestBase<Option<TModelData, ApizrException>>.Context RequestBase<Option<TModelData, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class CreateOptionalCommand<TModelData> : CreateCommandBase<TModelData, Option<TModelData, ApizrException>>, IMediationCommand<TModelData, Option<TModelData, ApizrException>>, IRequest<Option<TModelData, ApizrException>>, IBaseRequest Type Parameters Name Description TModelData Constructors CreateOptionalCommand(TModelData) Declaration public CreateOptionalCommand(TModelData modelData) Parameters Type Name Description TModelData modelData CreateOptionalCommand(TModelData, Context) Declaration public CreateOptionalCommand(TModelData modelData, Context context) Parameters Type Name Description TModelData modelData Polly.Context context Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.DeleteOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.DeleteOptionalCommand-1.html",
    "title": "Class DeleteOptionalCommand<T> | Apizr",
    "keywords": "Class DeleteOptionalCommand<T> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> MediationCommandBase < System.Int32 , Optional.Option < MediatR.Unit , ApizrException >> DeleteCommandBase <T, System.Int32 , Optional.Option < MediatR.Unit , ApizrException >> DeleteCommandBase <T, Optional.Option < MediatR.Unit , ApizrException >> DeleteOptionalCommand<T> Implements IMediationCommand < System.Int32 , Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, Option<Unit, ApizrException>>.Key RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommand<T> : DeleteCommandBase<T, Option<Unit, ApizrException>>, IMediationCommand<int, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description T Constructors DeleteOptionalCommand(Int32) Declaration public DeleteOptionalCommand(int key) Parameters Type Name Description System.Int32 key DeleteOptionalCommand(Int32, Context) Declaration public DeleteOptionalCommand(int key, Context context) Parameters Type Name Description System.Int32 key Polly.Context context Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.DeleteOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Cruding.DeleteOptionalCommand-2.html",
    "title": "Class DeleteOptionalCommand<T, TKey> | Apizr",
    "keywords": "Class DeleteOptionalCommand<T, TKey> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> MediationCommandBase <TKey, Optional.Option < MediatR.Unit , ApizrException >> DeleteCommandBase <T, TKey, Optional.Option < MediatR.Unit , ApizrException >> DeleteOptionalCommand<T, TKey> Implements IMediationCommand <TKey, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, TKey, Option<Unit, ApizrException>>.Key RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommand<T, TKey> : DeleteCommandBase<T, TKey, Option<Unit, ApizrException>>, IMediationCommand<TKey, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description T TKey Constructors DeleteOptionalCommand(TKey) Declaration public DeleteOptionalCommand(TKey key) Parameters Type Name Description TKey key DeleteOptionalCommand(TKey, Context) Declaration public DeleteOptionalCommand(TKey key, Context context) Parameters Type Name Description TKey key Polly.Context context Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.CreateOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.CreateOptionalCommandHandler-5.html",
    "title": "Class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> CreateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand <TModelEntity>, Optional.Option <TModelEntity, ApizrException >> CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < CreateOptionalCommand <TModelEntity>, Optional.Option <TModelEntity, ApizrException >> MediatR.IRequestHandler < CreateOptionalCommand <TModelEntity>, Optional.Option <TModelEntity, ApizrException >> Inherited Members CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>>.Handle(CreateOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>>, IMediationCommandHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>>, IRequestHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors CreateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public CreateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(CreateOptionalCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Option<TModelEntity, ApizrException>> Handle(CreateOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description CreateOptionalCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.CreateOptionalCommand<TModelEntity>, Optional.Option<TModelEntity, Apizr.ApizrException>>.Handle(Apizr.Optional.Cruding.CreateOptionalCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-4.html",
    "title": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> DeleteCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < DeleteOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>.Handle(DeleteOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IMediationCommandHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams Constructors DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteOptionalCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(DeleteOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteOptionalCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity>, Optional.Option<MediatR.Unit, Apizr.ApizrException>>.Handle(Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-5.html",
    "title": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand <TModelEntity, TApiEntityKey>, Optional.Option < MediatR.Unit , ApizrException >> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteOptionalCommand <TModelEntity, TApiEntityKey>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < DeleteOptionalCommand <TModelEntity, TApiEntityKey>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>>.Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>>, IMediationCommandHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>>, IRequestHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteOptionalCommand <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Optional.Option<MediatR.Unit, Apizr.ApizrException>>.Handle(Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.html",
    "title": "Namespace Apizr.Optional.Cruding.Handling | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding.Handling Classes CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-4.html",
    "title": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery <TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Implements IMediationQueryHandler < ReadAllOptionalQuery <TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> MediatR.IRequestHandler < ReadAllOptionalQuery <TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>.Handle(ReadAllOptionalQuery<TModelEntityReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IMediationQueryHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IRequestHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TModelEntityReadAllResult TApiEntityReadAllResult Constructors ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>>>) Declaration public ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> crudApiManager Methods Handle(ReadAllOptionalQuery<TModelEntityReadAllResult>, CancellationToken) Declaration public override async Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Handle(ReadAllOptionalQuery<TModelEntityReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllOptionalQuery <TModelEntityReadAllResult> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, Apizr.Optional.Cruding.ReadAllOptionalQuery<TModelEntityReadAllResult>, Optional.Option<TModelEntityReadAllResult, Apizr.ApizrException<TModelEntityReadAllResult>>>.Handle(Apizr.Optional.Cruding.ReadAllOptionalQuery<TModelEntityReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-5.html",
    "title": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams> ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> MediatR.IRequestHandler < ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>.Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IMediationQueryHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IRequestHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TModelEntityReadAllResult TApiEntityReadAllResult TReadAllParams Constructors ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>>) Declaration public ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, CancellationToken) Declaration public override async Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, Apizr.Optional.Cruding.ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Optional.Option<TModelEntityReadAllResult, Apizr.ApizrException<TModelEntityReadAllResult>>>.Handle(Apizr.Optional.Cruding.ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-4.html",
    "title": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> ReadQueryHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery <TModelEntity>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadOptionalQuery <TModelEntity>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> MediatR.IRequestHandler < ReadOptionalQuery <TModelEntity>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>>.Handle(ReadOptionalQuery<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>>, IMediationQueryHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>>, IRequestHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>> where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams Constructors ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadOptionalQuery<TModelEntity>, CancellationToken) Declaration public override async Task<Option<TModelEntity, ApizrException<TModelEntity>>> Handle(ReadOptionalQuery<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description ReadOptionalQuery <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity>, Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>>.Handle(Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-5.html",
    "title": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadQueryHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery <TModelEntity, TApiEntityKey>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadOptionalQuery <TModelEntity, TApiEntityKey>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> MediatR.IRequestHandler < ReadOptionalQuery <TModelEntity, TApiEntityKey>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>>.Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>>, IMediationQueryHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>>, IRequestHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey>, CancellationToken) Declaration public override async Task<Option<TModelEntity, ApizrException<TModelEntity>>> Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description ReadOptionalQuery <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity, TApiEntityKey>, Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>>.Handle(Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-4.html",
    "title": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams> UpdateCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < UpdateOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>.Handle(UpdateOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IMediationCommandHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TReadAllResult TReadAllParams Constructors UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateOptionalCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(UpdateOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateOptionalCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.UpdateOptionalCommand<TModelEntity>, Optional.Option<MediatR.Unit, Apizr.ApizrException>>.Handle(Apizr.Optional.Cruding.UpdateOptionalCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-5.html",
    "title": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object RequestHandlerBase CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand <TApiEntityKey, TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateOptionalCommand <TApiEntityKey, TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < UpdateOptionalCommand <TApiEntityKey, TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>>.Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>>, IMediationCommandHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateOptionalCommand <TApiEntityKey, TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Optional.Option<MediatR.Unit, Apizr.ApizrException>>.Handle(Apizr.Optional.Cruding.UpdateOptionalCommand<TApiEntityKey, TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.html": {
    "href": "api/Apizr.Optional.Cruding.html",
    "title": "Namespace Apizr.Optional.Cruding | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding Classes CreateOptionalCommand<TModelData> DeleteOptionalCommand<T> DeleteOptionalCommand<T, TKey> ReadAllOptionalQuery<TReadAllResult> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> ReadOptionalQuery<TResultData> ReadOptionalQuery<TResultData, TKey> UpdateOptionalCommand<TRequestData> UpdateOptionalCommand<TKey, TRequestData>"
  },
  "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-1.html",
    "title": "Class ReadAllOptionalQuery<TReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQuery<TReadAllResult> Inheritance System.Object RequestBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> PrioritizedRequestBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediationQueryBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> ReadAllQueryBase < System.Collections.Generic.IDictionary < System.String , System.Object >, Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> ReadAllQueryBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> ReadAllOptionalQuery<TReadAllResult> Implements IMediationQuery < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IRequest < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<String, Object>, Option<TReadAllResult, ApizrException<TReadAllResult>>>.Parameters MediationQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.ClearCache PrioritizedRequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.Priority RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.Context RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQuery<TReadAllResult> : ReadAllQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IBaseRequest Type Parameters Name Description TReadAllResult Constructors ReadAllOptionalQuery(Context, Boolean) Declaration public ReadAllOptionalQuery(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(Boolean) Declaration public ReadAllOptionalQuery(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache ReadAllOptionalQuery(IDictionary<String, Object>, Context, Boolean) Declaration public ReadAllOptionalQuery(IDictionary<string, object> parameters, Context context, bool clearCache = false) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(IDictionary<String, Object>, Boolean) Declaration public ReadAllOptionalQuery(IDictionary<string, object> parameters, bool clearCache = false) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Boolean clearCache ReadAllOptionalQuery(IDictionary<String, Object>, Int32, Context, Boolean) Declaration public ReadAllOptionalQuery(IDictionary<string, object> parameters, int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Int32 priority Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(IDictionary<String, Object>, Int32, Boolean) Declaration public ReadAllOptionalQuery(IDictionary<string, object> parameters, int priority, bool clearCache = false) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Int32 priority System.Boolean clearCache ReadAllOptionalQuery(Int32, Context, Boolean) Declaration public ReadAllOptionalQuery(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(Int32, Boolean) Declaration public ReadAllOptionalQuery(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Boolean clearCache Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-2.html",
    "title": "Class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Inheritance System.Object RequestBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> PrioritizedRequestBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediationQueryBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> ReadAllQueryBase <TReadAllParams, Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IRequest < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<TReadAllParams, Option<TReadAllResult, ApizrException<TReadAllResult>>>.Parameters MediationQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.ClearCache PrioritizedRequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.Priority RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.Context RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : ReadAllQueryBase<TReadAllParams, Option<TReadAllResult, ApizrException<TReadAllResult>>>, IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IBaseRequest Type Parameters Name Description TReadAllParams TReadAllResult Constructors ReadAllOptionalQuery(TReadAllParams, Context, Boolean) Declaration public ReadAllOptionalQuery(TReadAllParams parameters, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams parameters Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(TReadAllParams, Boolean) Declaration public ReadAllOptionalQuery(TReadAllParams parameters, bool clearCache = false) Parameters Type Name Description TReadAllParams parameters System.Boolean clearCache ReadAllOptionalQuery(TReadAllParams, Int32, Context, Boolean) Declaration public ReadAllOptionalQuery(TReadAllParams parameters, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams parameters System.Int32 priority Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(TReadAllParams, Int32, Boolean) Declaration public ReadAllOptionalQuery(TReadAllParams parameters, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams parameters System.Int32 priority System.Boolean clearCache ReadAllOptionalQuery(Context, Boolean) Declaration public ReadAllOptionalQuery(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(Boolean) Declaration public ReadAllOptionalQuery(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache ReadAllOptionalQuery(Int32, Context, Boolean) Declaration public ReadAllOptionalQuery(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache ReadAllOptionalQuery(Int32, Boolean) Declaration public ReadAllOptionalQuery(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Boolean clearCache Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.ReadOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Cruding.ReadOptionalQuery-1.html",
    "title": "Class ReadOptionalQuery<TResultData> | Apizr",
    "keywords": "Class ReadOptionalQuery<TResultData> Inheritance System.Object RequestBase < Optional.Option <TResultData, ApizrException <TResultData>>> PrioritizedRequestBase < Optional.Option <TResultData, ApizrException <TResultData>>> MediationQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>> ReadQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>, System.Int32 > ReadQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>> ReadOptionalQuery<TResultData> Implements IMediationQuery < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IRequest < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IBaseRequest Inherited Members ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, Int32>.Key MediationQueryBase<Option<TResultData, ApizrException<TResultData>>>.ClearCache PrioritizedRequestBase<Option<TResultData, ApizrException<TResultData>>>.Priority RequestBase<Option<TResultData, ApizrException<TResultData>>>.Context RequestBase<Option<TResultData, ApizrException<TResultData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQuery<TResultData> : ReadQueryBase<Option<TResultData, ApizrException<TResultData>>>, IMediationQuery<Option<TResultData, ApizrException<TResultData>>>, IRequest<Option<TResultData, ApizrException<TResultData>>>, IBaseRequest Type Parameters Name Description TResultData Constructors ReadOptionalQuery(Int32, Context, Boolean) Declaration public ReadOptionalQuery(int key, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 key Polly.Context context System.Boolean clearCache ReadOptionalQuery(Int32, Boolean) Declaration public ReadOptionalQuery(int key, bool clearCache = false) Parameters Type Name Description System.Int32 key System.Boolean clearCache ReadOptionalQuery(Int32, Int32, Context, Boolean) Declaration public ReadOptionalQuery(int key, int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 key System.Int32 priority Polly.Context context System.Boolean clearCache ReadOptionalQuery(Int32, Int32, Boolean) Declaration public ReadOptionalQuery(int key, int priority, bool clearCache = false) Parameters Type Name Description System.Int32 key System.Int32 priority System.Boolean clearCache Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.ReadOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Cruding.ReadOptionalQuery-2.html",
    "title": "Class ReadOptionalQuery<TResultData, TKey> | Apizr",
    "keywords": "Class ReadOptionalQuery<TResultData, TKey> Inheritance System.Object RequestBase < Optional.Option <TResultData, ApizrException <TResultData>>> PrioritizedRequestBase < Optional.Option <TResultData, ApizrException <TResultData>>> MediationQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>> ReadQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>, TKey> ReadOptionalQuery<TResultData, TKey> Implements IMediationQuery < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IRequest < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IBaseRequest Inherited Members ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, TKey>.Key MediationQueryBase<Option<TResultData, ApizrException<TResultData>>>.ClearCache PrioritizedRequestBase<Option<TResultData, ApizrException<TResultData>>>.Priority RequestBase<Option<TResultData, ApizrException<TResultData>>>.Context RequestBase<Option<TResultData, ApizrException<TResultData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQuery<TResultData, TKey> : ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, TKey>, IMediationQuery<Option<TResultData, ApizrException<TResultData>>>, IRequest<Option<TResultData, ApizrException<TResultData>>>, IBaseRequest Type Parameters Name Description TResultData TKey Constructors ReadOptionalQuery(TKey, Context, Boolean) Declaration public ReadOptionalQuery(TKey key, Context context, bool clearCache = false) Parameters Type Name Description TKey key Polly.Context context System.Boolean clearCache ReadOptionalQuery(TKey, Boolean) Declaration public ReadOptionalQuery(TKey key, bool clearCache = false) Parameters Type Name Description TKey key System.Boolean clearCache ReadOptionalQuery(TKey, Int32, Context, Boolean) Declaration public ReadOptionalQuery(TKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TKey key System.Int32 priority Polly.Context context System.Boolean clearCache ReadOptionalQuery(TKey, Int32, Boolean) Declaration public ReadOptionalQuery(TKey key, int priority, bool clearCache = false) Parameters Type Name Description TKey key System.Int32 priority System.Boolean clearCache Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.html",
    "title": "Class ApizrCrudOptionalMediator | Apizr",
    "keywords": "Class ApizrCrudOptionalMediator Inheritance System.Object ApizrCrudOptionalMediator Implements IApizrCrudOptionalMediator IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrCrudOptionalMediator : IApizrCrudOptionalMediator, IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase Constructors ApizrCrudOptionalMediator(IMediator) Declaration public ApizrCrudOptionalMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendCreateOptionalCommand<TApiEntity>(TApiEntity) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity) Parameters Type Name Description TApiEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Context context) Parameters Type Name Description TApiEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context, CancellationToken) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity SendCreateOptionalCommand<TApiEntity>(TApiEntity, CancellationToken) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity) Parameters Type Name Description TModelEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity TApiEntity SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context) Parameters Type Name Description TModelEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity TApiEntity SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context, CancellationToken) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity TApiEntity SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, CancellationToken) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity TApiEntity SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key) Parameters Type Name Description TApiEntityKey key Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context) Parameters Type Name Description TApiEntityKey key Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendReadAllOptionalQuery<TReadAllResult>(Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult>(Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult>(Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult>(Int32, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult>(Int32, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult>(CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult TApiReadAllResult TReadAllParams SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity) Parameters Type Name Description TApiEntityKey key TApiEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TApiEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity TApiEntityKey SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity) Parameters Type Name Description TApiEntityKey key TModelEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TModelEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity TApiEntity TApiEntityKey Implements IApizrCrudOptionalMediator IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator-4.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator-4.html",
    "title": "Class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Inheritance System.Object ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors ApizrCrudOptionalMediator(IApizrCrudOptionalMediator) Declaration public ApizrCrudOptionalMediator(IApizrCrudOptionalMediator apizrMediator) Parameters Type Name Description IApizrCrudOptionalMediator apizrMediator Methods SendCreateOptionalCommand(TApiEntity) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity entity) Parameters Type Name Description TApiEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand(TApiEntity, Context) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity entity, Context context) Parameters Type Name Description TApiEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand(TApiEntity, Context, CancellationToken) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand(TApiEntity, CancellationToken) Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand<TModelEntity>(TModelEntity) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity entity) Parameters Type Name Description TModelEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity entity, Context context) Parameters Type Name Description TModelEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context, CancellationToken) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendCreateOptionalCommand<TModelEntity>(TModelEntity, CancellationToken) Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendDeleteOptionalCommand(TApiEntityKey) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key) Parameters Type Name Description TApiEntityKey key Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendDeleteOptionalCommand(TApiEntityKey, Context) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Context context) Parameters Type Name Description TApiEntityKey key Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendDeleteOptionalCommand(TApiEntityKey, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendDeleteOptionalCommand(TApiEntityKey, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendReadAllOptionalQuery(TReadAllParams, Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, Context, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(CancellationToken, Boolean) Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Int32, Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Int32, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Int32, Context, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Int32, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Int32, CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(CancellationToken, Boolean) Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadOptionalQuery(TApiEntityKey, Context, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Context, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, Context, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, CancellationToken, Boolean) Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Int32 priority System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean) Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key System.Threading.CancellationToken cancellationToken System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand(TApiEntityKey, TApiEntity) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity entity) Parameters Type Name Description TApiEntityKey key TApiEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity entity, Context context) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TApiEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TApiEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity) Parameters Type Name Description TApiEntityKey key TModelEntity entity Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TModelEntity entity Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key TModelEntity entity System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity Implements IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Sending.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.html",
    "title": "Namespace Apizr.Optional.Cruding.Sending | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding.Sending Classes ApizrCrudOptionalMediator ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Interfaces IApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediator but dedicated to TApiEntity cruding with optional result, getting all shorter IApizrCrudOptionalMediatorBase"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.html",
    "title": "Interface IApizrCrudOptionalMediator | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrCrudOptionalMediator : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase Methods SendCreateOptionalCommand<TApiEntity>(TApiEntity) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity) Parameters Type Name Description TApiEntity entity The entity to create Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Context context) Parameters Type Name Description TApiEntity entity The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TApiEntity>(TApiEntity, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity) Parameters Type Name Description TModelEntity entity The entity to create Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context) Parameters Type Name Description TModelEntity entity The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key) Parameters Type Name Description TApiEntityKey key The entity key Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllOptionalQuery<TReadAllResult>(Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator-4.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator-4.html",
    "title": "Interface IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediator but dedicated to TApiEntity cruding with optional result, getting all shorter Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrCrudOptionalMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Methods SendCreateOptionalCommand(TApiEntity) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload) Parameters Type Name Description TApiEntity payload The entity to create Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand(TApiEntity, Context) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, Context context) Parameters Type Name Description TApiEntity payload The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand(TApiEntity, Context, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity payload The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand(TApiEntity, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, CancellationToken cancellationToken) Parameters Type Name Description TApiEntity payload The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand<TModelEntity>(TModelEntity) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload) Parameters Type Name Description TModelEntity payload The entity to create Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, Context context) Parameters Type Name Description TModelEntity payload The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, Context context, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity payload The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendCreateOptionalCommand<TModelEntity>(TModelEntity, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, CancellationToken cancellationToken) Parameters Type Name Description TModelEntity payload The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendDeleteOptionalCommand(TApiEntityKey) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key) Parameters Type Name Description TApiEntityKey key The entity key Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendDeleteOptionalCommand(TApiEntityKey, Context) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Context context) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendDeleteOptionalCommand(TApiEntityKey, Context, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendDeleteOptionalCommand(TApiEntityKey, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendReadAllOptionalQuery(TReadAllParams, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context context, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(bool clearCache = false) Parameters Type Name Description System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, Context context, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadAllOptionalQuery<TModelEntityReadAllResult>(CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadOptionalQuery(TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery(TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendReadOptionalQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand(TApiEntityKey, TApiEntity) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity payload The entity to update Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, Context context) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity payload The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity payload The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity payload The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity payload The entity to update Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, Context context) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity payload The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, Context context, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity payload The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, CancellationToken cancellationToken) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity payload The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediatorBase.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediatorBase.html",
    "title": "Interface IApizrCrudOptionalMediatorBase | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediatorBase Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrCrudOptionalMediatorBase : IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.UpdateOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.UpdateOptionalCommand-1.html",
    "title": "Class UpdateOptionalCommand<TRequestData> | Apizr",
    "keywords": "Class UpdateOptionalCommand<TRequestData> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> MediationCommandBase <TRequestData, Optional.Option < MediatR.Unit , ApizrException >> UpdateCommandBase < System.Int32 , TRequestData, Optional.Option < MediatR.Unit , ApizrException >> UpdateCommandBase <TRequestData, Optional.Option < MediatR.Unit , ApizrException >> UpdateOptionalCommand<TRequestData> Implements IMediationCommand <TRequestData, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, Option<Unit, ApizrException>>.Key UpdateCommandBase<Int32, TRequestData, Option<Unit, ApizrException>>.RequestData RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommand<TRequestData> : UpdateCommandBase<TRequestData, Option<Unit, ApizrException>>, IMediationCommand<TRequestData, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TRequestData Constructors UpdateOptionalCommand(Int32, TRequestData) Declaration public UpdateOptionalCommand(int key, TRequestData requestData) Parameters Type Name Description System.Int32 key TRequestData requestData UpdateOptionalCommand(Int32, TRequestData, Context) Declaration public UpdateOptionalCommand(int key, TRequestData requestData, Context context) Parameters Type Name Description System.Int32 key TRequestData requestData Polly.Context context Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Cruding.UpdateOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Cruding.UpdateOptionalCommand-2.html",
    "title": "Class UpdateOptionalCommand<TKey, TRequestData> | Apizr",
    "keywords": "Class UpdateOptionalCommand<TKey, TRequestData> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> MediationCommandBase <TRequestData, Optional.Option < MediatR.Unit , ApizrException >> UpdateCommandBase <TKey, TRequestData, Optional.Option < MediatR.Unit , ApizrException >> UpdateOptionalCommand<TKey, TRequestData> Implements IMediationCommand <TRequestData, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>>.Key UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>>.RequestData RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommand<TKey, TRequestData> : UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>>, IMediationCommand<TRequestData, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TKey TRequestData Constructors UpdateOptionalCommand(TKey, TRequestData) Declaration public UpdateOptionalCommand(TKey key, TRequestData requestData) Parameters Type Name Description TKey key TRequestData requestData UpdateOptionalCommand(TKey, TRequestData, Context) Declaration public UpdateOptionalCommand(TKey key, TRequestData requestData, Context context) Parameters Type Name Description TKey key TRequestData requestData Polly.Context context Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Extending.html": {
    "href": "api/Apizr.Optional.Extending.html",
    "title": "Namespace Apizr.Optional.Extending | Apizr",
    "keywords": "Namespace Apizr.Optional.Extending Classes OptionalMediationExtensions"
  },
  "api/Apizr.Optional.Extending.OptionalMediationExtensions.html": {
    "href": "api/Apizr.Optional.Extending.OptionalMediationExtensions.html",
    "title": "Class OptionalMediationExtensions | Apizr",
    "keywords": "Class OptionalMediationExtensions Inheritance System.Object OptionalMediationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Extending Assembly : Apizr.Integrations.Optional.dll Syntax public static class OptionalMediationExtensions Methods CatchAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<Exception>, Boolean) Return TResult (from fetch or cache), no matter of exception (handled by onException ). Could throw if you ask to with letThrowOnExceptionWithEmptyCache in case of exception with empty cache ( onException won't be called), otherwise return the empty cache (have to be managed) after calling onException action. Declaration public static Task<TResult> CatchAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<Exception> onException, bool letThrowOnExceptionWithEmptyCache = false) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Action < System.Exception > onException Action to call to handle exception (like informing the user) before returning result from cache System.Boolean letThrowOnExceptionWithEmptyCache True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<TResult>) The action will be invoked just before throwing any exception that might have occurred during request execution Declaration public static Task OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<TResult> onResult) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Action <TResult> onResult The action to invoke Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, Boolean>) The function will be invoked with the returned result and potential occurred exception. You might decide to throw from the function itself, or to return the success boolean. Declaration public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, bool> onResult) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Func <TResult, ApizrException <TResult>, System.Boolean > onResult The function to invoke Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, Task<Boolean>>) The function will be invoked with the returned result and potential occurred exception. Checking exception, you might decide to throw it from the function itself, or to return the success boolean. Declaration public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, Task<bool>> onResult) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Func <TResult, ApizrException <TResult>, System.Threading.Tasks.Task < System.Boolean >> onResult The function to invoke Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed)"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-2.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-2.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TApiData> Inheritance System.Object RequestBase < Optional.Option <TApiData, ApizrException <TApiData>>> ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>> ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>> ExecuteOptionalResultRequestBase<TWebApi, TApiData> ExecuteOptionalResultRequest<TWebApi, TApiData> Implements MediatR.IRequest < Optional.Option <TApiData, ApizrException <TApiData>>> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TApiData, TApiData>.ClearCache ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData>.ModelRequestData ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>>.ExecuteApiMethod RequestBase<Option<TApiData, ApizrException<TApiData>>>.Context RequestBase<Option<TApiData, ApizrException<TApiData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestBase<TWebApi, TApiData> : ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>>, IRequest<Option<TApiData, ApizrException<TApiData>>>, IBaseRequest Type Parameters Name Description TWebApi TApiData Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-3.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-3.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase < Optional.Option <TModelData, ApizrException <TModelData>>> ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>> ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, TApiData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData> ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option <TModelData, ApizrException <TModelData>>> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TApiData, TModelData>.ClearCache ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData>.ModelRequestData ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>>.ExecuteApiMethod RequestBase<Option<TModelData, ApizrException<TModelData>>>.Context RequestBase<Option<TModelData, ApizrException<TModelData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>>, IRequest<Option<TModelData, ApizrException<TModelData>>>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-5.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-5.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TModelRequestData> ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData>.ClearCache ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData>.ModelRequestData ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>>.ExecuteApiMethod RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>>.Context RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData>, IRequest<Option<TModelResultData, ApizrException<TModelResultData>>>, IBaseRequest Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>>, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>, Context, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData System.Boolean clearCache ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>, Boolean) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-1.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-1.html",
    "title": "Class ExecuteOptionalUnitRequestBase<TWebApi> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestBase<TWebApi> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteUnitRequestBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >> ExecuteOptionalUnitRequestBase<TWebApi> ExecuteOptionalUnitRequest<TWebApi> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestBase<TWebApi> : ExecuteUnitRequestBase<TWebApi, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TWebApi Constructors ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, Task>>) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod ExecuteOptionalUnitRequestBase(Expression<Func<Context, TWebApi, Task>>, Context) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context ExecuteOptionalUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context ExecuteOptionalUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>>) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-3.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-3.html",
    "title": "Class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, TModelData> ExecuteUnitRequestBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >> ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData> ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TModelData>.ModelRequestData ExecuteRequestBase<Option<Unit, ApizrException>>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData> : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData ExecuteOptionalUnitRequestBase(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context ExecuteOptionalUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context ExecuteOptionalUnitRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData) Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Base.html": {
    "href": "api/Apizr.Optional.Requesting.Base.html",
    "title": "Namespace Apizr.Optional.Requesting.Base | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Base Classes ExecuteOptionalResultRequestBase<TWebApi, TApiData> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteOptionalUnitRequestBase<TWebApi> ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData>"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-2.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-2.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TApiData> Inheritance System.Object RequestBase < Optional.Option <TApiData, ApizrException <TApiData>>> ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>> ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, TApiData, TApiData> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>> ExecuteOptionalResultRequestBase <TWebApi, TApiData> ExecuteOptionalResultRequest<TWebApi, TApiData> Implements MediatR.IRequest < Optional.Option <TApiData, ApizrException <TApiData>>> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TApiData, TApiData>.ClearCache ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData>.ModelRequestData ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>>.ExecuteApiMethod RequestBase<Option<TApiData, ApizrException<TApiData>>>.Context RequestBase<Option<TApiData, ApizrException<TApiData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequest<TWebApi, TApiData> : ExecuteOptionalResultRequestBase<TWebApi, TApiData>, IRequest<Option<TApiData, ApizrException<TApiData>>>, IBaseRequest Type Parameters Name Description TWebApi TApiData Constructors ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-3.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-3.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase < Optional.Option <TModelData, ApizrException <TModelData>>> ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>> ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, TApiData, TModelData> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>> ExecuteOptionalResultRequestBase <TWebApi, TModelData, TApiData> ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option <TModelData, ApizrException <TModelData>>> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TApiData, TModelData>.ClearCache ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData>.ModelRequestData ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>>.ExecuteApiMethod RequestBase<Option<TModelData, ApizrException<TModelData>>>.Context RequestBase<Option<TModelData, ApizrException<TModelData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> : ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData>, IRequest<Option<TModelData, ApizrException<TModelData>>>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-5.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-5.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TModelRequestData> ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData> ExecuteOptionalResultRequestBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> MediatR.IBaseRequest Inherited Members ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData>.ClearCache ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData>.ModelRequestData ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>>.ExecuteApiMethod RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>>.Context RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IRequest<Option<TModelResultData, ApizrException<TModelResultData>>>, IBaseRequest Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Constructors ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiResultData>>>, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, Task<TApiResultData>>>, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>, Context, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod Polly.Context context System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelData System.Boolean clearCache ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>, Boolean) Declaration public ExecuteOptionalResultRequest(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Boolean clearCache Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-1.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-1.html",
    "title": "Class ExecuteOptionalUnitRequest<TWebApi> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequest<TWebApi> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteUnitRequestBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >> ExecuteOptionalUnitRequestBase <TWebApi> ExecuteOptionalUnitRequest<TWebApi> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequest<TWebApi> : ExecuteOptionalUnitRequestBase<TWebApi>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TWebApi Constructors ExecuteOptionalUnitRequest(Expression<Func<TWebApi, Task>>) Declaration public ExecuteOptionalUnitRequest(Expression<Func<TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod ExecuteOptionalUnitRequest(Expression<Func<Context, TWebApi, Task>>, Context) Declaration public ExecuteOptionalUnitRequest(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context ExecuteOptionalUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context) Declaration public ExecuteOptionalUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context ExecuteOptionalUnitRequest(Expression<Func<CancellationToken, TWebApi, Task>>) Declaration public ExecuteOptionalUnitRequest(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-3.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-3.html",
    "title": "Class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, TModelData> ExecuteUnitRequestBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >> ExecuteOptionalUnitRequestBase <TWebApi, TModelData, TApiData> ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TModelData>.ModelRequestData ExecuteRequestBase<Option<Unit, ApizrException>>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>>.Context RequestBase<Option<Unit, ApizrException>>.OnException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> : ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteOptionalUnitRequest(Expression<Func<TWebApi, TApiData, Task>>, TModelData) Declaration public ExecuteOptionalUnitRequest(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData ExecuteOptionalUnitRequest(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Declaration public ExecuteOptionalUnitRequest(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context ExecuteOptionalUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context) Declaration public ExecuteOptionalUnitRequest(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context ExecuteOptionalUnitRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData) Declaration public ExecuteOptionalUnitRequest(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-3.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-3.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest> ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler <TRequest, Optional.Option <TApiData, ApizrException <TApiData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest> : ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest>, IRequestHandler<TRequest, Option<TApiData, ApizrException<TApiData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TApiData> Type Parameters Name Description TWebApi TApiData TRequest Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-4.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-4.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, Optional.Option <TModelData, ApizrException <TModelData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> : ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest>, IRequestHandler<TRequest, Option<TModelData, ApizrException<TModelData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData> Type Parameters Name Description TWebApi TModelData TApiData TRequest Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-6.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-6.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler <TRequest, Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> : ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest>, IRequestHandler<TRequest, Option<TModelResultData, ApizrException<TModelResultData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData TRequest Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-2.html",
    "title": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest> Inheritance System.Object ExecuteUnitRequestHandlerBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >, TRequest> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest> ExecuteOptionalUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler <TRequest, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest> : ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest>, IRequestHandler<TRequest, Option<Unit, ApizrException>> where TRequest : ExecuteOptionalUnitRequestBase<TWebApi> Type Parameters Name Description TWebApi TRequest Constructors ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-4.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-4.html",
    "title": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> Inheritance System.Object ExecuteUnitRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >, TRequest> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> : ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest>, IRequestHandler<TRequest, Option<Unit, ApizrException>> where TRequest : ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData> Type Parameters Name Description TWebApi TModelData TApiData TRequest Constructors ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.html",
    "title": "Namespace Apizr.Optional.Requesting.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Handling.Base Classes ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-2.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, ExecuteOptionalResultRequest <TWebApi, TApiData>> ExecuteOptionalResultRequestHandlerBase <TWebApi, TApiData, ExecuteOptionalResultRequest <TWebApi, TApiData>> ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler < ExecuteOptionalResultRequest <TWebApi, TApiData>, Optional.Option <TApiData, ApizrException <TApiData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, ExecuteOptionalResultRequest<TWebApi, TApiData>>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, ExecuteOptionalResultRequest<TWebApi, TApiData>>.Handle(ExecuteOptionalResultRequest<TWebApi, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, ExecuteOptionalResultRequest<TWebApi, TApiData>>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TApiData>, Option<TApiData, ApizrException<TApiData>>> Type Parameters Name Description TWebApi TApiData Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalResultRequest<TWebApi, TApiData>, CancellationToken) Declaration public override async Task<Option<TApiData, ApizrException<TApiData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalResultRequest <TWebApi, TApiData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Optional.Option<TApiData, Apizr.ApizrException<TApiData>>, Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TApiData>>.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-3.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-3.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData>> ExecuteOptionalResultRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData>> ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData>, Optional.Option <TModelData, ApizrException <TModelData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>>.Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, Option<TModelData, ApizrException<TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) Declaration public override async Task<Option<TModelData, ApizrException<TModelData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Optional.Option<TModelData, Apizr.ApizrException<TModelData>>, Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>>.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-5.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-5.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Inheritance System.Object RequestHandlerBase ExecuteResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>> ExecuteOptionalResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>> ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler < ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>.Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) Declaration public override async Task<Option<TModelResultData, ApizrException<TModelResultData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Optional.Option<TModelResultData, Apizr.ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>>.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-1.html",
    "title": "Class ExecuteOptionalUnitRequestHandler<TWebApi> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandler<TWebApi> Inheritance System.Object ExecuteUnitRequestHandlerBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >, ExecuteOptionalUnitRequest <TWebApi>> ExecuteOptionalUnitRequestHandlerBase <TWebApi, ExecuteOptionalUnitRequest <TWebApi>> ExecuteOptionalUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler < ExecuteOptionalUnitRequest <TWebApi>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>>.Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequestHandler<TWebApi> : ExecuteOptionalUnitRequestHandlerBase<TWebApi, ExecuteOptionalUnitRequest<TWebApi>>, IRequestHandler<ExecuteOptionalUnitRequest<TWebApi>, Option<Unit, ApizrException>> Type Parameters Name Description TWebApi Constructors ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(ExecuteOptionalUnitRequest<TWebApi> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalUnitRequest <TWebApi> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>>.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-3.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-3.html",
    "title": "Class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Inheritance System.Object ExecuteUnitRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >, ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData>> ExecuteOptionalUnitRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData>> ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>>.Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> : ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>>, IRequestHandler<ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, Option<Unit, ApizrException>> Type Parameters Name Description TWebApi TModelData TApiData Constructors ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>>.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse> Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Handling.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.html",
    "title": "Namespace Apizr.Optional.Requesting.Handling | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Handling Classes ExecuteOptionalResultRequestHandler<TWebApi, TApiData> ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteOptionalUnitRequestHandler<TWebApi> ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData>"
  },
  "api/Apizr.Optional.Requesting.html": {
    "href": "api/Apizr.Optional.Requesting.html",
    "title": "Namespace Apizr.Optional.Requesting | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting Classes ExecuteOptionalResultRequest<TWebApi, TApiData> ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> ExecuteOptionalUnitRequest<TWebApi> ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>"
  },
  "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.html",
    "title": "Class ApizrOptionalMediator | Apizr",
    "keywords": "Class ApizrOptionalMediator Inheritance System.Object ApizrOptionalMediator Implements IApizrOptionalMediator IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrOptionalMediator : IApizrOptionalMediator, IApizrOptionalMediatorBase, IApizrMediatorBase Constructors ApizrOptionalMediator(IMediator) Declaration public ApizrOptionalMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi TModelData TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi TModelResultData TApiResultData TApiRequestData TModelRequestData Implements IApizrOptionalMediator IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator-1.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator-1.html",
    "title": "Class ApizrOptionalMediator<TWebApi> | Apizr",
    "keywords": "Class ApizrOptionalMediator<TWebApi> Inheritance System.Object ApizrOptionalMediator<TWebApi> Implements IApizrOptionalMediator <TWebApi> IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrOptionalMediator<TWebApi> : IApizrOptionalMediator<TWebApi>, IApizrOptionalMediatorBase, IApizrMediatorBase Type Parameters Name Description TWebApi Constructors ApizrOptionalMediator(IApizrOptionalMediator) Declaration public ApizrOptionalMediator(IApizrOptionalMediator apizrMediator) Parameters Type Name Description IApizrOptionalMediator apizrMediator Methods SendFor(Expression<Func<TWebApi, Task>>) Declaration public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<Context, TWebApi, Task>>, Context) Declaration public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod Polly.Context context System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData) Declaration public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Declaration public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData Polly.Context context System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) Declaration public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod TModelData modelData System.Threading.CancellationToken token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData TApiData SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData Polly.Context context System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Threading.CancellationToken token System.Boolean clearCache Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData TApiResultData TApiRequestData TModelRequestData Implements IApizrOptionalMediator<TWebApi> IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Sending.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.html",
    "title": "Namespace Apizr.Optional.Requesting.Sending | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Sending Classes ApizrOptionalMediator ApizrOptionalMediator<TWebApi> Interfaces IApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result IApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter IApizrOptionalMediatorBase"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.html",
    "title": "Interface IApizrOptionalMediator | Apizr",
    "keywords": "Interface IApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediator : IApizrOptionalMediatorBase, IApizrMediatorBase Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator-1.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator-1.html",
    "title": "Interface IApizrOptionalMediator<TWebApi> | Apizr",
    "keywords": "Interface IApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediator<TWebApi> : IApizrOptionalMediatorBase, IApizrMediatorBase Type Parameters Name Description TWebApi Methods SendFor(Expression<Func<TWebApi, Task>>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<Context, TWebApi, Task>>, Context) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api result type SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api response SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api response SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api response SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase.html",
    "title": "Interface IApizrOptionalMediatorBase | Apizr",
    "keywords": "Interface IApizrOptionalMediatorBase Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediatorBase : IApizrMediatorBase Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.OptionalOptionsBuilderExtensions.html": {
    "href": "api/Apizr.OptionalOptionsBuilderExtensions.html",
    "title": "Class OptionalOptionsBuilderExtensions | Apizr",
    "keywords": "Class OptionalOptionsBuilderExtensions Inheritance System.Object OptionalOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Optional.dll Syntax public static class OptionalOptionsBuilderExtensions Methods WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle requests execution with some mediation and optional result Declaration public static IApizrExtendedCommonOptionsBuilder WithOptionalMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedCommonOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedCommonOptionsBuilder WithOptionalMediation(IApizrExtendedOptionsBuilder) Let Apizr handle requests execution with some mediation and optional result Declaration public static IApizrExtendedOptionsBuilder WithOptionalMediation(this IApizrExtendedOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedOptionsBuilder"
  },
  "api/Apizr.Policing.ContextAttribute.html": {
    "href": "api/Apizr.Policing.ContextAttribute.html",
    "title": "Class ContextAttribute | Apizr",
    "keywords": "Class ContextAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute ContextAttribute Inherited Members Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public class ContextAttribute : PropertyAttribute Constructors ContextAttribute() Declaration public ContextAttribute() Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.CreatePolicyAttribute.html": {
    "href": "api/Apizr.Policing.CreatePolicyAttribute.html",
    "title": "Class CreatePolicyAttribute | Apizr",
    "keywords": "Class CreatePolicyAttribute Inheritance System.Object System.Attribute PolicyAttributeBase CreatePolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CreatePolicyAttribute : PolicyAttributeBase Constructors CreatePolicyAttribute(String[]) Declaration public CreatePolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.DeletePolicyAttribute.html": {
    "href": "api/Apizr.Policing.DeletePolicyAttribute.html",
    "title": "Class DeletePolicyAttribute | Apizr",
    "keywords": "Class DeletePolicyAttribute Inheritance System.Object System.Attribute PolicyAttributeBase DeletePolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class DeletePolicyAttribute : PolicyAttributeBase Constructors DeletePolicyAttribute(String[]) Declaration public DeletePolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.html": {
    "href": "api/Apizr.Policing.html",
    "title": "Namespace Apizr.Policing | Apizr",
    "keywords": "Namespace Apizr.Policing Classes ContextAttribute CreatePolicyAttribute DeletePolicyAttribute HttpRequestMessageExtensions Extension methods for System.Net.Http.HttpRequestMessage Polly integration. LoggedPolicies Policy logging helper PolicyAttribute PolicyAttributeBase Tells Apizr to apply some policies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a policy registry to Apizr to use this feature PolicyHttpMessageHandler A System.Net.Http.DelegatingHandler implementation that executes request processing surrounded by a Polly.Policy . PollyContextExtensions Polly logging extensions ReadAllPolicyAttribute ReadPolicyAttribute UpdatePolicyAttribute"
  },
  "api/Apizr.Policing.HttpRequestMessageExtensions.html": {
    "href": "api/Apizr.Policing.HttpRequestMessageExtensions.html",
    "title": "Class HttpRequestMessageExtensions | Apizr",
    "keywords": "Class HttpRequestMessageExtensions Extension methods for System.Net.Http.HttpRequestMessage Polly integration. Inheritance System.Object HttpRequestMessageExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public static class HttpRequestMessageExtensions Methods GetOrBuildPolicyExecutionContext(HttpRequestMessage) Gets the Polly.Context associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static Context GetOrBuildPolicyExecutionContext(this HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Returns Type Description Polly.Context The Polly.Context if set, otherwise null . Remarks The PolicyHttpMessageHandler will attach a context to the System.Net.Http.HttpResponseMessage prior to executing a Polly.Policy , if one does not already exist. The Polly.Context will be provided to the policy for use inside the Polly.Policy and in other message handlers. GetPolicyExecutionContext(HttpRequestMessage) Gets the Polly.Context associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static Context GetPolicyExecutionContext(this HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Returns Type Description Polly.Context The Polly.Context if set, otherwise null . Remarks The PolicyHttpMessageHandler will attach a context to the System.Net.Http.HttpResponseMessage prior to executing a Polly.Policy , if one does not already exist. The Polly.Context will be provided to the policy for use inside the Polly.Policy and in other message handlers. SetPolicyExecutionContext(HttpRequestMessage, Context) Sets the Polly.Context associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static void SetPolicyExecutionContext(this HttpRequestMessage request, Context context) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Polly.Context context The Polly.Context , may be null . Remarks The PolicyHttpMessageHandler will attach a context to the System.Net.Http.HttpResponseMessage prior to executing a Polly.Policy , if one does not already exist. The Polly.Context will be provided to the policy for use inside the Polly.Policy and in other message handlers."
  },
  "api/Apizr.Policing.LoggedPolicies.html": {
    "href": "api/Apizr.Policing.LoggedPolicies.html",
    "title": "Class LoggedPolicies | Apizr",
    "keywords": "Class LoggedPolicies Policy logging helper Inheritance System.Object LoggedPolicies Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public static class LoggedPolicies Methods OnLoggedRetry(DelegateResult<HttpResponseMessage>, TimeSpan, Int32, Context) Tells Apizr to log retries Declaration public static void OnLoggedRetry(DelegateResult<HttpResponseMessage> result, TimeSpan timeSpan, int retryCount, Context context) Parameters Type Name Description Polly.DelegateResult < System.Net.Http.HttpResponseMessage > result System.TimeSpan timeSpan System.Int32 retryCount Polly.Context context OnLoggedRetry(DelegateResult<HttpResponseMessage>, TimeSpan, Int32, Context, Action<DelegateResult<HttpResponseMessage>, TimeSpan, Int32, Context>) Tells Apizr to log retries plus some more actions Declaration public static void OnLoggedRetry(DelegateResult<HttpResponseMessage> result, TimeSpan timeSpan, int retryCount, Context context, Action<DelegateResult<HttpResponseMessage>, TimeSpan, int, Context> onRetry) Parameters Type Name Description Polly.DelegateResult < System.Net.Http.HttpResponseMessage > result System.TimeSpan timeSpan System.Int32 retryCount Polly.Context context System.Action < Polly.DelegateResult < System.Net.Http.HttpResponseMessage >, System.TimeSpan , System.Int32 , Polly.Context > onRetry"
  },
  "api/Apizr.Policing.PolicyAttribute.html": {
    "href": "api/Apizr.Policing.PolicyAttribute.html",
    "title": "Class PolicyAttribute | Apizr",
    "keywords": "Class PolicyAttribute Inheritance System.Object System.Attribute PolicyAttributeBase PolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class PolicyAttribute : PolicyAttributeBase Constructors PolicyAttribute(String[]) Declaration public PolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.PolicyAttributeBase.html": {
    "href": "api/Apizr.Policing.PolicyAttributeBase.html",
    "title": "Class PolicyAttributeBase | Apizr",
    "keywords": "Class PolicyAttributeBase Tells Apizr to apply some policies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase CreatePolicyAttribute DeletePolicyAttribute PolicyAttribute ReadAllPolicyAttribute ReadPolicyAttribute UpdatePolicyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public abstract class PolicyAttributeBase : Attribute Constructors PolicyAttributeBase(String[]) Apply policies with keys Declaration protected PolicyAttributeBase(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys Properties RegistryKeys Policy registry keys Declaration public string[] RegistryKeys { get; } Property Value Type Description System.String [] Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.PolicyHttpMessageHandler.html": {
    "href": "api/Apizr.Policing.PolicyHttpMessageHandler.html",
    "title": "Class PolicyHttpMessageHandler | Apizr",
    "keywords": "Class PolicyHttpMessageHandler A System.Net.Http.DelegatingHandler implementation that executes request processing surrounded by a Polly.Policy . Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler PolicyHttpMessageHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public class PolicyHttpMessageHandler : DelegatingHandler, IDisposable Constructors PolicyHttpMessageHandler(IAsyncPolicy<HttpResponseMessage>) Creates a new PolicyHttpMessageHandler . Declaration public PolicyHttpMessageHandler(IAsyncPolicy<HttpResponseMessage> policy) Parameters Type Name Description Polly.IAsyncPolicy < System.Net.Http.HttpResponseMessage > policy The policy. PolicyHttpMessageHandler(Func<HttpRequestMessage, IAsyncPolicy<HttpResponseMessage>>) Creates a new PolicyHttpMessageHandler . Declaration public PolicyHttpMessageHandler(Func<HttpRequestMessage, IAsyncPolicy<HttpResponseMessage>> policySelector) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , Polly.IAsyncPolicy < System.Net.Http.HttpResponseMessage >> policySelector A function which can select the desired policy for a given System.Net.Http.HttpRequestMessage . Methods SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) SendCoreAsync(HttpRequestMessage, Context, CancellationToken) Called inside the execution of the Polly.Policy to perform request processing. Declaration protected virtual Task<HttpResponseMessage> SendCoreAsync(HttpRequestMessage request, Context context, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Polly.Context context The Polly.Context . System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken . Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Returns a System.Threading.Tasks.Task<TResult> that will yield a response when completed. Implements System.IDisposable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.PollyContextExtensions.html": {
    "href": "api/Apizr.Policing.PollyContextExtensions.html",
    "title": "Class PollyContextExtensions | Apizr",
    "keywords": "Class PollyContextExtensions Polly logging extensions Inheritance System.Object PollyContextExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public static class PollyContextExtensions Methods TryGetLogger(Context, out ILogger, out LogLevel[], out HttpMessageParts, out HttpTracerMode) Trying to get your Microsoft.Extensions.Logging.ILogger mapping implementation from Polly context Declaration public static bool TryGetLogger(this Context context, out ILogger logger, out LogLevel[] logLevels, out HttpMessageParts verbosity, out HttpTracerMode tracerMode) Parameters Type Name Description Polly.Context context Polly context Microsoft.Extensions.Logging.ILogger logger Your Microsoft.Extensions.Logging.ILogger mapping implementation Microsoft.Extensions.Logging.LogLevel [] logLevels HttpMessageParts verbosity HttpTracerMode tracerMode Returns Type Description System.Boolean WithLogger(Context, ILogger, LogLevel[], HttpMessageParts, HttpTracerMode) Passing your Microsoft.Extensions.Logging.ILogger mapping implementation to Polly context Declaration public static Context WithLogger(this Context context, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity, HttpTracerMode tracerMode) Parameters Type Name Description Polly.Context context Polly context Microsoft.Extensions.Logging.ILogger logger Your Microsoft.Extensions.Logging.ILogger mapping implementation Microsoft.Extensions.Logging.LogLevel [] logLevels HttpMessageParts verbosity HttpTracerMode tracerMode Returns Type Description Polly.Context"
  },
  "api/Apizr.Policing.ReadAllPolicyAttribute.html": {
    "href": "api/Apizr.Policing.ReadAllPolicyAttribute.html",
    "title": "Class ReadAllPolicyAttribute | Apizr",
    "keywords": "Class ReadAllPolicyAttribute Inheritance System.Object System.Attribute PolicyAttributeBase ReadAllPolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ReadAllPolicyAttribute : PolicyAttributeBase Constructors ReadAllPolicyAttribute(String[]) Declaration public ReadAllPolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.ReadPolicyAttribute.html": {
    "href": "api/Apizr.Policing.ReadPolicyAttribute.html",
    "title": "Class ReadPolicyAttribute | Apizr",
    "keywords": "Class ReadPolicyAttribute Inheritance System.Object System.Attribute PolicyAttributeBase ReadPolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ReadPolicyAttribute : PolicyAttributeBase Constructors ReadPolicyAttribute(String[]) Declaration public ReadPolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Policing.UpdatePolicyAttribute.html": {
    "href": "api/Apizr.Policing.UpdatePolicyAttribute.html",
    "title": "Class UpdatePolicyAttribute | Apizr",
    "keywords": "Class UpdatePolicyAttribute Inheritance System.Object System.Attribute PolicyAttributeBase UpdatePolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class UpdatePolicyAttribute : PolicyAttributeBase Constructors UpdatePolicyAttribute(String[]) Declaration public UpdatePolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.PriorityAttribute.html": {
    "href": "api/Apizr.PriorityAttribute.html",
    "title": "Class PriorityAttribute | Apizr",
    "keywords": "Class PriorityAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute PriorityAttribute Inherited Members Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax public class PriorityAttribute : PropertyAttribute Constructors PriorityAttribute() Declaration public PriorityAttribute() Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.PriorityHttpMessageHandler.html": {
    "href": "api/Apizr.PriorityHttpMessageHandler.html",
    "title": "Class PriorityHttpMessageHandler | Apizr",
    "keywords": "Class PriorityHttpMessageHandler Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler Fusillade.LimitingHttpMessageHandler PriorityHttpMessageHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax public class PriorityHttpMessageHandler : LimitingHttpMessageHandler, IDisposable Constructors PriorityHttpMessageHandler(HttpMessageHandler, ILogger, IApizrOptionsBase, Nullable<Int64>, OperationQueue) Declaration public PriorityHttpMessageHandler(HttpMessageHandler innerHandler, ILogger logger, IApizrOptionsBase apizrOptions, long? maxBytesToRead = null, OperationQueue opQueue = null) Parameters Type Name Description System.Net.Http.HttpMessageHandler innerHandler Microsoft.Extensions.Logging.ILogger logger IApizrOptionsBase apizrOptions System.Nullable < System.Int64 > maxBytesToRead Punchclock.OperationQueue opQueue Methods ResetLimit(Nullable<Int64>) Declaration public override void ResetLimit(long? maxBytesToRead = null) Parameters Type Name Description System.Nullable < System.Int64 > maxBytesToRead Overrides Fusillade.LimitingHttpMessageHandler.ResetLimit(System.Nullable<System.Int64>) SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Requesting.CrudEntityAttribute.html": {
    "href": "api/Apizr.Requesting.CrudEntityAttribute.html",
    "title": "Class CrudEntityAttribute | Apizr",
    "keywords": "Class CrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) Inheritance System.Object System.Attribute CrudEntityAttribute MappedCrudEntityAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Requesting Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute : Attribute Constructors CrudEntityAttribute(String, Type, Type, Type, Type) Define some crud api settings from this api entity Declaration public CrudEntityAttribute(string baseUri, Type keyType = null, Type readAllResultType = null, Type readAllParamsType = null, Type modelEntityType = null) Parameters Type Name Description System.String baseUri This specific api entity's base crud uri System.Type keyType This specific api entity's crud key type (default: null = typeof(int)) System.Type readAllResultType The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) System.Type readAllParamsType ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) System.Type modelEntityType Model entity type mapped with this api entity type (default: null = decorated api entity type) Properties BaseUri This specific entity's base crud uri Declaration public string BaseUri { get; } Property Value Type Description System.String KeyType This specific object's crud key type Declaration public Type KeyType { get; } Property Value Type Description System.Type MappedEntityType Model entity type mapped with this Api entity type Declaration public Type MappedEntityType { get; set; } Property Value Type Description System.Type ReadAllParamsType \"ReadAll\" query parameters type Declaration public Type ReadAllParamsType { get; set; } Property Value Type Description System.Type ReadAllResultType \"ReadAll\" query result type Declaration public Type ReadAllResultType { get; set; } Property Value Type Description System.Type Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.Requesting.html": {
    "href": "api/Apizr.Requesting.html",
    "title": "Namespace Apizr.Requesting | Apizr",
    "keywords": "Namespace Apizr.Requesting Classes CrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) Interfaces ICrudApi<T, TKey, TReadAllResult, TReadAllParams> The crud api interface"
  },
  "api/Apizr.Requesting.ICrudApi-4.html": {
    "href": "api/Apizr.Requesting.ICrudApi-4.html",
    "title": "Interface ICrudApi<T, TKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface ICrudApi<T, TKey, TReadAllResult, TReadAllParams> The crud api interface Namespace : Apizr.Requesting Assembly : Apizr.dll Syntax public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class Type Parameters Name Description T The entity type TKey The entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type Methods Create(T) Declaration [Post(\"\")] Task<T> Create([Body] T payload) Parameters Type Name Description T payload Returns Type Description System.Threading.Tasks.Task <T> Create(T, Context) Declaration [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context) Parameters Type Name Description T payload Polly.Context context Returns Type Description System.Threading.Tasks.Task <T> Create(T, Context, CancellationToken) Declaration [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description T payload Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Create(T, CancellationToken) Declaration [Post(\"\")] Task<T> Create([Body] T payload, CancellationToken cancellationToken) Parameters Type Name Description T payload System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Delete(TKey) Declaration [Delete(\"/{key}\")] Task Delete(TKey key) Parameters Type Name Description TKey key Returns Type Description System.Threading.Tasks.Task Delete(TKey, Context) Declaration [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context) Parameters Type Name Description TKey key Polly.Context context Returns Type Description System.Threading.Tasks.Task Delete(TKey, Context, CancellationToken) Declaration [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TKey key Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Delete(TKey, CancellationToken) Declaration [Delete(\"/{key}\")] Task Delete(TKey key, CancellationToken cancellationToken) Parameters Type Name Description TKey key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Read(TKey) Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key) Parameters Type Name Description TKey key Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Context) Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Context] Context context) Parameters Type Name Description TKey key Polly.Context context Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32) Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority) Parameters Type Name Description TKey key System.Int32 priority Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32, Context) Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, [Context] Context context) Parameters Type Name Description TKey key System.Int32 priority Polly.Context context Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32, Context, CancellationToken) Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TKey key System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32, CancellationToken) Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, CancellationToken cancellationToken) Parameters Type Name Description TKey key System.Int32 priority System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, CancellationToken) Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken) Parameters Type Name Description TKey key System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <T> ReadAll() Declaration [Get(\"\")] Task<TReadAllResult> ReadAll() Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams) Parameters Type Name Description TReadAllParams readAllParams Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Context) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Context, CancellationToken) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TReadAllParams readAllParams Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32, Context) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, [Context] Context context) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32, Context, CancellationToken) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32, CancellationToken) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, CancellationToken cancellationToken) Parameters Type Name Description TReadAllParams readAllParams System.Int32 priority System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, CancellationToken) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken) Parameters Type Name Description TReadAllParams readAllParams System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Context) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context) Parameters Type Name Description Polly.Context context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Context, CancellationToken) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Int32) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority) Parameters Type Name Description System.Int32 priority Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Int32, Context) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority, [Context] Context context) Parameters Type Name Description System.Int32 priority Polly.Context context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Int32, CancellationToken) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 priority System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(CancellationToken) Declaration [Get(\"\")] Task<TReadAllResult> ReadAll(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Update(TKey, T) Declaration [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload) Parameters Type Name Description TKey key T payload Returns Type Description System.Threading.Tasks.Task Update(TKey, T, Context) Declaration [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context) Parameters Type Name Description TKey key T payload Polly.Context context Returns Type Description System.Threading.Tasks.Task Update(TKey, T, Context, CancellationToken) Declaration [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TKey key T payload Polly.Context context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Update(TKey, T, CancellationToken) Declaration [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken) Parameters Type Name Description TKey key T payload System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/Apizr.ServiceCollectionExtensions.html": {
    "href": "api/Apizr.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Apizr",
    "keywords": "Class ServiceCollectionExtensions Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public static class ServiceCollectionExtensions Methods AddApizr(IServiceCollection, Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options Declaration public static IServiceCollection AddApizr(this IServiceCollection services, Action<IApizrExtendedRegistryBuilder> registryBuilder, Action<IApizrExtendedCommonOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedRegistryBuilder > registryBuilder The registry builder with access to proper options System.Action < IApizrExtendedCommonOptionsBuilder > optionsBuilder The common options shared by all managers Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>) Register a custom IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls System.Type crudedKeyType The object key type System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor<T>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor<T>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls AddApizrCrudManagerFor<T, TKey>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls TKey The object key type (primitive) AddApizrCrudManagerFor<T, TKey, TReadAllResult>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Assembly[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Type[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type webApiType The web api interface type to manage System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type webApiType The web api interface type to manage System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor<TWebApi>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>) Register IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor<TWebApi>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TWebApi The web api interface to manage AddApizrManagerFor<TWebApi, TApizrManager>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor<TWebApi, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.WebApiAttribute.html": {
    "href": "api/Apizr.WebApiAttribute.html",
    "title": "Class WebApiAttribute | Apizr",
    "keywords": "Class WebApiAttribute Define general web api settings (could be defined with options builder) Inheritance System.Object System.Attribute WebApiAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Interface)] public class WebApiAttribute : Attribute Constructors WebApiAttribute() Define a web api without any base absolute address or relative path (has to be defined fluently) but discoverable for auto registration Declaration public WebApiAttribute() WebApiAttribute(Boolean) Define a web api without any base absolute address or relative path (has to be defined fluently) and make it discoverable for auto registration or not Declaration public WebApiAttribute(bool isAutoRegistrable) Parameters Type Name Description System.Boolean isAutoRegistrable Makes decorated interface registrable by assembly scanning WebApiAttribute(String) Define a web api with a base absolute address or relative path (if path, base address has to be defined fluently) and discoverable for auto registration Declaration public WebApiAttribute(string baseAddressOrPath) Parameters Type Name Description System.String baseAddressOrPath The web api base absolute address or relative path WebApiAttribute(String, Boolean) Define a web api with a base absolute address or relative path (if path, base address has to be defined fluently) and make it discoverable for auto registration or not Declaration public WebApiAttribute(string baseAddressOrPath, bool isAutoRegistrable) Parameters Type Name Description System.String baseAddressOrPath The web api base absolute address or relative path System.Boolean isAutoRegistrable Makes decorated interface registrable by assembly scanning Properties BaseAddressOrPath The web api base absolute address or relative path Declaration public string BaseAddressOrPath { get; } Property Value Type Description System.String IsAutoRegistrable Makes decorated interface registrable by assembly scanning Declaration public bool IsAutoRegistrable { get; } Property Value Type Description System.Boolean Extension Methods ObjectExtensions.ToString(Object, String, String)"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference | Apizr",
    "keywords": "API Reference This API reference is auto generated by DocFX based on code summaries. Things may be missing so do not hesitate to let us know so that we can complete and fix it. Happy reading :)"
  },
  "articles/config.html": {
    "href": "articles/config.html",
    "title": "Configuring | Apizr",
    "keywords": "Configuring Many options could be set by attribute decoration. It allows you to use assembly scanning auto registration feature. Much more options could be set by fluent configuration. All fluent configuration flavors offer a contextualized options builder, depending on what you're asking and where. The option types: Proper: options available at api configuration level only and applied to it exclusively (e.g. BaseAddress obviously) Common: options available at global configuration level only and applied to all registered apis (e.g. RefitSettings, PolicyRegistry) There're also some Shared options available at both api (proper) and global (common) configuration level (e.g. LogLevel) Here is what using it with a registry, the extended way, could look like: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)) .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>( options => options .WithBaseAddress(\"https://reqres.in/api/users\"))), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } And here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Apply proper logging options dedicated to IHttpBinService's manager Add a manager for User entity with CRUD api interface and custom types into the registry, to register it into the container Apply proper address option dedicated to User's manager Apply common options to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) Note that fluent configuration almost allways wins over the attribute one (if both set) and the same for proper over common. For example, if you decorated your api interface with a Log attribute, but also set some common logging options fluently plus some proper logging options, the proper logging options will be applied to the api manager. But, if you decorated the api method itself instead of the interface with this Log attribute, it will win over all others :) Actualy, the closer the option is defined from the api method, the more chance it will have to be applied over all others. Are you still following? Don't worry! Every single option is detailed through this documentation, so let's browse it!"
  },
  "articles/config_address.html": {
    "href": "articles/config_address.html",
    "title": "Configuring base address | Apizr",
    "keywords": "Configuring base address You can configure base address either by attribute decoration or by fluent configuration. You can mix the configuration providing a base path by attribute and a base address/URI fluently. Attribute Fluent Configuring the base address by attribute allows you to use assembly scanning auto registration feature. Classic api You can set api interface base address or path thanks to the WebApi attribute like so: [WebApi(\"YOUR_API_INTERFACE_BASE_ADDRESS_OR_PATH/\")] public interface IYourApiInterface { // Your api interface methods } If you provided only a path, you must set the base address/URI fluently so that Apizr could merge it all together. Optional parameters: isAutoRegistrable (default: true) tells Apizr to include or not this specific interface while scanning assemblies for auto registration. It could be usefull when you ask for auto registration but want to do it fluently some specific interfaces. CRUD api You can set CRUD entity api base address thanks to the CrudEntity attribute like so: [CrudEntity(\"YOUR_CRUD_ENTITY_API_BASE_ADDRESS_OR_PATH_\")] public class YourCrudEntity { // Your CRUD entity properties } If you provided only a path, you must set the base address/URI fluently so that Apizr could merge it all together. Optional parameters: keyType : entity key type (default: null = typeof(int)) readAllResultType : ReadAll query result type (default: null = typeof(IEnumerable{})) readAllParamsType : ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) modelEntityType : Model entity type mapped with this api entity type (default: null = decorated api entity type) Configuring the base address fluently allows you to set it dynamically (e.g. based on settings) You can set the base address or a base path thanks to these options: // Address options => options.WithBaseAddress(YourSettings.YourBaseAddress)) // Path options => options.WithBasePath(YourSettings.YourBasePath)) The extended world offers another option with a factory providing a service provider instance. It could help you to resolve the setting at runtime: // Address options => options.WithBaseAddress(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBaseAddress)) // Path options => options.WithBasePath(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBasePath)) In both cases, you can mix the configurations like providing a base path by attribute and a base address/URI fluently. WithBaseAddress and WithBasePath options are available at both common and specific configuration level, meanning that you can share a base address with several api interfaces and/or set a specific one for some others."
  },
  "articles/config_auth.html": {
    "href": "articles/config_auth.html",
    "title": "Configuring authentication | Apizr",
    "keywords": "Configuring authentication Apizr provides its own AuthenticationHandler to manage the authentication workflow . Defining As Apizr is based on Refit, you can decorate your authenticated apis like so (here with bearer authorization): namespace Apizr.Sample { [WebApi(\"https://httpbin.org/\")] public interface IHttpBinService { [Get(\"/bearer\")] [Headers(\"Authorization: Bearer\")] Task<HttpResponseMessage> AuthBearerAsync(); } } Configuring To activate this feature, you have to configure it thanks to the options builder: Static Extended options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( YourSettingsServiceInstance, settingsService => settingsService.Token, YourSignInServiceInstance, signInService => signInService.SignInAsync) YourSettingsServiceInstance should be replaced by whatever settings manager instance of your choice YourSignInServiceInstance should be replaced by your service managing your login flow. options => options.WithAuthenticationHandler<ISettingsService, ISignInService>( settingsService => settingsService.Token, signInService => signInService.SignInAsync) settingsService is your service managing settings signInService is your service managing your login flow. Both services should be container registered as it will be resolved. In details: settingsService.Token should be a public string property, saved locally on device. signInService.SignInAsync should be a method taking an HttpRequestMessage parameter and returning a refreshed access token. More You may want to deal with authentication configuration in some other ways. Here are all other authentication options: Static Extended When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide the settings service by a factory and deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide both settings service and sign in service by a factory: options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, () => YourSignInServiceInstance, signInService => signInService.SignInAsync) When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (logger, options) => new YourAuthenticationHandler(...)) When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (serviceProvider, options) => new YourAuthenticationHandler(...)) Processing There's nothing more to deal with. Protected requests will be authenticated by Apizr, otherwise it will ask user to sign in. Anyway, here is the AuthenticationHandler's SendAsync method FYI: protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { HttpRequestMessage clonedRequest = null; string token = null; var context = request.GetOrBuildPolicyExecutionContext(); if (!context.TryGetLogger(out var logger, out var logLevel, out _, out _)) { logger = _logger; logLevel = _apizrOptions.LogLevel; } // See if the request has an authorize header var auth = request.Headers.Authorization; if (auth != null) { // Authorization required! Get the token from saved settings if available logger?.Log(logLevel, $\"{context.OperationKey}: Authorization required with scheme {auth.Scheme}\"); token = GetToken(); if (!string.IsNullOrWhiteSpace(token)) { // We have one, then clone the request in case we need to re-issue it with a refreshed token logger?.Log(logLevel, $\"{context.OperationKey}: Saved token will be used\"); clonedRequest = await this.CloneHttpRequestMessageAsync(request); } else { // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: No token saved yet. Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); } // Set the authentication header request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set\"); } // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request with authorization header...\"); var response = await base.SendAsync(request, cancellationToken).ConfigureAwait(false); // Check if we get an Unauthorized response with token from settings if (response.StatusCode == HttpStatusCode.Unauthorized && auth != null && clonedRequest != null) { logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized !\"); // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); // Set the authentication header with refreshed token clonedRequest.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set with refreshed token\"); // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request again but with refreshed authorization header...\"); response = await base.SendAsync(clonedRequest, cancellationToken).ConfigureAwait(false); } // Clear the token if unauthorized if (response.StatusCode == HttpStatusCode.Unauthorized) { token = null; logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized ! Token has been cleared\"); } // Save the refreshed token if succeed or clear it if not this.SetToken(token); logger?.Log(logLevel, $\"{context.OperationKey}: Token saved\"); return response; } The workflow: We check if the request needs to be authenticated If so, we try to load a previously saved token If there’s one, we clone the request in case we need to re-issue it with a refreshed token (as token could be rejected server side) If there’s not, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header with the token We finally send the request We check if we get an Unauthorized response If so and if it was sent with a saved token, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header of the cloned request with the refreshed token We send the cloned request We save the token if succeed or clear it if not We return the response"
  },
  "articles/config_connectivity.html": {
    "href": "articles/config_connectivity.html",
    "title": "Configuring Connectivity | Apizr",
    "keywords": "Configuring Connectivity Apizr can check network connectivity for you, right before sending any request. It will throw an ApizrException with an IOException as InnerException in case of network failure, which you can handle globally by showing a snack bar info or whatever. This way, your viewmodels are kept light and clear of it. With boolean factory You may want to provide just a simple boolean value to check connectivity. Here is the right option: Static Extended options => options.WithConnectivityHandler(() => YourConnectivityBoolean) // Boolean factory options => options.WithConnectivityHandler(serviceProvider => YourConnectivityBoolean) // Boolean expression factory options => options.WithConnectivityHandler<IYourRegisteredConnectivityService>(service => service.YourConnectivityBoolean) With Connectivity Handler You could also implement the IConnectivityHandler interface: public class YourConnectivityHandler : IConnectivityHandler { public bool IsConnected() { // Check connectivity here } } Then just register it with this option: Static Extended // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(() => YourConnectivityHandler) // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(serviceProvider => YourConnectivityHandler) // OR closed generic configuration options => options.WithConnectivityHandler<YourConnectivityHandler>() // OR type configuration options => options.WithConnectivityHandler(typeof(YourConnectivityHandler))"
  },
  "articles/config_datacaching.html": {
    "href": "articles/config_datacaching.html",
    "title": "Configuring data caching | Apizr",
    "keywords": "Configuring data caching You may want to cache data returned from your API. Apizr could handle it for you by providing an ICachingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install the integration package of your choice: Project Current V-Next Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Where: Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler implementation for MonkeyCache Warning Apizr.Extensions.Microsoft.Caching This integration package offers you to work with any of MS Extension Caching compatible caching engines. It means that you still have to install the one of your choice right after Apizr.Extensions.Microsoft.Caching. Defining Apizr comes with a Cache attribute which activate result data caching at any level (all Assembly apis, interface apis or specific api method). Here is classic api an example: namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\"), Cache(CacheMode.GetAndFetch, \"01:00:00\")] Task<UserList> GetUsersAsync(); [Get(\"/users/{userId}\"), Cache(CacheMode.GetOrFetch, \"1.00:00:00\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); } } You’ll find also cache attributes dedicated to CRUD apis like CacheRead and CacheReadAll , so you could define cache settings at any level (all Assembly apis, interface apis or specific CRUD method). Here is CRUD api an example: namespace Apizr.Sample.Models { [CrudEntity(\"https://reqres.in/api/users\", typeof(int), typeof(PagedResult<>))] [CacheReadAll(CacheMode.GetAndFetch, \"01:00:00\")] [CacheRead(CacheMode.GetOrFetch, \"1.00:00:00\")] public class User { [JsonProperty(\"id\")] public int Id { get; set; } [JsonProperty(\"first_name\")] public string FirstName { get; set; } [JsonProperty(\"last_name\")] public string LastName { get; set; } [JsonProperty(\"avatar\")] public string Avatar { get; set; } [JsonProperty(\"email\")] public string Email { get; set; } } } Both (classic and CRUD) define the same thing about cache life time and cache mode. Life time is actually a TimeSpan string representation which is parsed then. Its optional and if you don’t provide it, the default cache provider settings will be applyed. Cache mode could be set to: GetAndFetch (default): the result is returned from request if it succeed, otherwise from cache if there’s some data already cached. In this specific case of request failing, cached data will be wrapped with the original exception into an ApizrException thrown by Apizr, so don’t forget to catch it. GetOrFetch : the result is returned from cache if there’s some data already cached, otherwise from the request. In both cases, cached data is updated after each successful request call. You also can define global caching settings by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the lowest level settings it could find. Back to the example, we are saying: When getting all users, let’s admit we could have many new users registered each hour, so: Try to fetch it from web first if fetch failed, try to load it from previous cached result if fetch succeed, update cached data but make it expire after 1 hour When getting a specific user, let’s admit its details won’t change so much each day, so: Try to load it from cache first if no previous cached data or cache expired after 1 day, fetch it and update cached data but make it expire after 1 day Registering Please register the one corresponding to the package you just installed MS Extensions Caching As you can guess, MS Extensions Caching is available only with extended registration flavor. That said, you'll be able to register with one of the folowing options In-Memory Distributed // direct short configuration options => options.WithInMemoryCacheHandler() // OR closed type configuration options => options.WithCacheHandler<InMemoryCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(InMemoryCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new InMemoryCacheHandler(new YOUR_INMEMORY_CACHING_ENGINE())) // OR factory configuration with the service provider instance options => options.WithCacheHandler(serviceProvider => new InMemoryCacheHandler(serviceProvider.GetRequiredService<IMemoryCache>())) // direct short configuration options => options.WithDistributedCacheHandler<TCacheType>() // OR closed type configuration options => options.WithCacheHandler<DistributedCacheHandler<TCacheType>>() // OR type configuration options => options.WithCacheHandler(typeof(DistributedCacheHandler<TCacheType>)) // OR direct configuration options => options.WithCacheHandler(new DistributedCacheHandler<TCacheType>(new YOUR_DISTRIBUTED_CACHING_ENGINE())) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new DistributedCacheHandler<TCacheType>( serviceProvider.GetRequiredService<IDistributedCache>(), serviceProvider.GetRequiredService<IHttpContentSerializer>())) Where TCacheType could be either string or byte[] , conforming to MS Extensions Distributed Cache definition. Warning Distributed cache Registering MS Extension Distributed Cache means that you have to install the distributed cache of your choice and register it too. Akavache You'll be able to register with one of the folowing options: Static Extended // direct short configuration options => options.WithAkavacheCacheHandler() // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(() => new AkavacheCacheHandler()) // direct short configuration options => options.WithAkavacheCacheHandler() // OR closed type configuration options => options.WithCacheHandler<AkavacheCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(AkavacheCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new AkavacheCacheHandler()) Where most of it get overloads so you could set: blobCacheFactory : The factory to init the blob cache of your choice (default: LocalMachine) applicationName : The application name used by Akavache (default: ApizrAkavacheCacheHandler) MonkeyCache Start by initializing Barrel.ApplicationId as you used to do with MonkeyCache: Barrel.ApplicationId = \"YOUR_APPLICATION_NAME\"; Then you'll be able to register with one of the folowing options: Static Extended // direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) // closed type configuration options => options.WithCacheHandler<MonkeyCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(MonkeyCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new MonkeyCacheHandler(Barrel.Current)) Warning Barrel.Current If you don't provide Barrel.Current to the MonkeyCacheHandler, don't forget to register it into your DI container. Using Reading Using Apizr caching feature is just about catching exceptions like for example: IList<User>? users = null; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList?.Data; } catch (ApizrException<UserList> e) { users = e.CachedResult?.Data; } finally { if (users != null && users.Any()) Users = new ObservableCollection<User>(users); } Here we catch an ApizrException<UserList> meaning that in case of exception, it will bring a typed object to you loaded from cache. Clearing You may need to clear cache. Remeber that cache will be cleared when it will expire, thanks to what you set within the Cache attribute. Anyway, sometime we need to clear it explicitly, like in a Refresh scenario. Here are different ways to clear cache: // Clear on call to force fetch and update cache var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync(), true); // Clear a specific request cache var succeed = await _reqResManager.ClearCacheAsync(api => api.GetUsersAsync()); // Clear all cache var succeed = await _reqResManager.ClearCacheAsync(); Clearing all cache of all managers of entire app could also be done thanks to your cache engine api."
  },
  "articles/config_datamapping.html": {
    "href": "articles/config_datamapping.html",
    "title": "Configuring data mapping | Apizr",
    "keywords": "Configuring data mapping You may need to map data between some API types and Model types, known as DTO design pattern. Apizr could handle it for you by providing an IMappingHandler interface implementation to it. Fortunately, there's an integration Nuget package called Apizr.Integration.AutoMapper to integrate... AutoMapper obviously. Of course, you can implement your own integration, but here we'll talk about the provided AutoMapper one. Please first install this integration package: Project Current V-Next Apizr.Integrations.AutoMapper Defining As usually with AutoMapper, define your mapping profiles, like for example: public class UserMinUserProfile : Profile { public UserMinUserProfile() { CreateMap<User, MinUser>() .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.FirstName)); CreateMap<MinUser, User>() .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.Name)); } } Warning Data Mapping with MediatR and/or Optional If you plan to use MediatR and/or Optional integrations, one more defining step need to be done. Only for those of you planning to use data mapping with MediatR and/or Optional , Apizr provide a MappedWith attribute telling it to map api object with model object. You’ll find another MappedCrudEntity attribute dedicated to CRUD apis, coming with auto-registration capabilities, in case of access restricted to only local client model. We could get a model class mapped to an api one like: [MappedWith(typeof(User))] public class MinUser { public int Id { get; set; } public string Name { get; set; } } Registering Static Extended First create a MapperConfiguration with your profiles: var mapperConfig = new MapperConfiguration(config => { config.AddProfile<UserMinUserProfile>(); config.AddProfile<WhateverProfile>(); }); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler(mapperConfig) // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(mapperConfig.CreateMapper())) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(mapperConfig.CreateMapper())) First register AutoMapper as you used to do: services.AddAutoMapper(ASSEMBLIES_CONTAINING_PROFILES); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler() // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration with the service provider instance options => options.WithMappingHandler(serviceProvider => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR closed type configuration options => options.WithMappingHandler<AutoMapperMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(AutoMapperMappingHandler)) Using You can tell Apizr to map data just by providing types when executing a request. Something like: var result = await reqResManager.ExecuteAsync<MinUser, User>((api, user) => api.CreateUser(user, CancellationToken.None), minUser); Here we give a MinUser typed object to Apizr, which will be mapped to User type just before sending it. Then Apizr will map the User typed result back to MinUser type just before returning it. There are much more overloads so you can map objects the way you need. The same while using MediatR and/or Optional ."
  },
  "articles/config_delegatinghandler.html": {
    "href": "articles/config_delegatinghandler.html",
    "title": "Configuring DelegatingHandlers | Apizr",
    "keywords": "Configuring DelegatingHandlers You can add DelegatingHandlers thanks to this option: Static Extended // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.AddDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.AddDelegatingHandler((logger, options) => YourDelegatingHandler) // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the service provider instance options => options.AddDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.AddDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) Warning Inner DelegatingHandler Don't manage delegating handlers hierarchy by yourself, providing any inner handlers. Instead, just add your handlers thanks to the AddDelegatingHandler option the order you want and Apizr will do it for you."
  },
  "articles/config_exceptions.html": {
    "href": "articles/config_exceptions.html",
    "title": "Configuring Exception handling | Apizr",
    "keywords": "Configuring Exception handling Using Try/Catch Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request. Using Action<Exception> onException Instead of trycatching all the things, you may want to provide an exception handling action on call, thanks to Action<Exception> onException optional parameter. Something like: reqResManager.ExecuteAsync(api => api.GetUsersAsync(), clearCache: false, onException: OnGetUsersException); ... private void OnGetUsersException(Exception ex) { ... } Using Optional.Async Here is how we could handle exceptions using Optional.Async: var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Optional is pretty cool when trying to handle nullables and exceptions, but what if we still want to write it shorter to get our request done and managed with as less code as possible. Even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result matching boilerplate. Fortunately, Apizr provides some dedicated extensions to help getting things as short as we can with exceptions handled. With OnResultAsync OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult : this action will be invoked just before throwing any exception that might have occurred during request execution csharp await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync(userList => { users = userList?.Data; }); Func<TResult, ApizrException<TResult>, bool> onResult : this function will be invoked with the returned result and potential occurred exception await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Func<TResult, ApizrException<TResult>, Task<bool>> onResult : this function will be invoked async with the returned result and potential occurred exception var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); All give you a result returned from fetch if succeed, or cache if failed (if configured). The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Of course, remember to catch throwing exceptions. With CatchAsync CatchAsync let you provide these parameters: Action<Exception> onException : this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache : True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one returns result from fetch or cache (if configured), no matter of potential exception handled on the other side by an action callback var userList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There’s some cached data? AsyncErrorHandler will handle the exception like to inform the user that call just failed Apizr will return the previous result from cache There’s no cached data yet! letThrowOnExceptionWithEmptyCache is True? (witch is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal behavior) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled then One line of code to get all the thing done safely and shorter than ever!"
  },
  "articles/config_httpclientbuilder.html": {
    "href": "articles/config_httpclientbuilder.html",
    "title": "Configuring HttpClientBuilder | Apizr",
    "keywords": "Configuring HttpClientBuilder With the extended approach only, you can configure HttpClientBuilder thanks to this option: options => options.ConfigureHttpClientBuilder(httpClientBuilder => httpClientBuilder.WhateverOption()) Warning HttpClientBuilder Apizr makes use of HttpClientBuilder so keep in mind that you may override some of its features depending of what you're trying to do with HttpClientBuilder. Use with caution."
  },
  "articles/config_httpclienthandler.html": {
    "href": "articles/config_httpclienthandler.html",
    "title": "Configuring HttpClientHandler | Apizr",
    "keywords": "Configuring HttpClientHandler You can provide your own HttpClientHandler thanks to this option: Static Extended // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(() => YourOwnHttpClientHandler) // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(serviceProvider => YourOwnHttpClientHandler)"
  },
  "articles/config_logger.html": {
    "href": "articles/config_logger.html",
    "title": "Configuring logger | Apizr",
    "keywords": "Configuring logger Apizr v4+ relies on Microsoft.Extensions.Logging, which relies on any compatible logger of your choice. Apizr comes with a quite simple built-in Debug logger by default, but you'd better provide your own obviously. You can configure logger only by fluent configuration. Static Extended You can set logger configuration thanks to this option: options => options.WithLoggerFactory(LoggerFactory.Create(loggingBuilder => { loggingBuilder.AddConsole(); loggingBuilder.AddDebug(); })) LoggerFactory.Create method is provided by Microsoft.Extensions.Logging which lets you add any compatible logger. There's nothing specific to do with Apizr about logger when using the extended approach. Just don't forget to configure it like you usualy do: loggingBuilder.AddConsole() wherever in your app you get access to ILoggingBuilder ."
  },
  "articles/config_logging.html": {
    "href": "articles/config_logging.html",
    "title": "Configuring logging | Apizr",
    "keywords": "Configuring logging You can adjust logging configuration with: httpTracerMode (default: Everything ) Http traffic tracing mode: ExceptionsOnly logs only when an exception occurs ErrorsAndExceptionsOnly logs only when an exception or any error occurs Everything logs all, anytime trafficVerbosity (default: All ) Http traffic tracing verbosity (see HttpTracer), with: None RequestBody RequestHeaders RequestCookies RequestAll = RequestBody | RequestHeaders | RequestCookies ResponseBody ResponseHeaders ResponseAll = ResponseBody | ResponseHeaders All = ResponseAll | RequestAll logLevels (default: [Low] Trace , [Medium] Information and [High] Critical ) Log levels to apply while writing logs (see Microsoft.Enxtension.Logging), with: Trace Debug Information Warning Error Critical None You can configure logging either by attribute decoration or by fluent configuration. In both cases, logLevels is a parameter array. It lets you provide from 0 to 3 different levels, as Apizr needs to get corresponding log level to each internal severity: Low: logs any internal and normal execution step Medium: logs all missconfigured things, like asking for cache without providing any cache provider High: logs errors and exceptions Obviously, providing more than 3 log levels would be pointlees. It means that: if you don't provide any log level at all, default levels will be applied ([Low] Trace , [Medium] Information and [High] Critical ) if you provide only 1 log level like Information , it will be applied to all log entries ([Low] Information , [Medium] Information and [High] Information ). Up to you to catch exceptions and to log it at any level of your choice. if you provide only 2 log levels like Debug and Error , the lowest will be applied to both Low and Medium ([Low] Debug , [Medium] Debug and [High] Error ) if you provide 3 log levels like Debug , Warning and Critical , it will be applied like you said ([Low] Debug , [Medium] Warning and [High] Critical ) if you provide more than 3 log levels, the lowest goes to Low, the highest to High and it will take the middle one for Medium if you provide a None at some point, it will disable logging for corresponding severity Attribute Fluent You can set logging configuration thanks to Log attribute. Configuring logging with attribute allows you to use assembly scanning auto registration feature. The Log attribute could decorate: Assembly: to set logging configuration to all assembly api interfaces/entities Interface/Class: to set logging configuration to all request methods of the decorated api interface/entity Method: to set logging configuration to a specific request method of an api interface or entity (with dedicated attribtes) You also can mix decoration levels to set a common logging configuration to all assembly api interfaces, and/or a specific to all api interface methods, and/or a specific to an api interface method. [assembly:Log] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\")] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } In this example, we decided to apply the default logging configuration ([Low] Trace , [Medium] Information and [High] Critical ) to all assembly api interfaces/entities. But you can adjust logging configuration thanks to attribute parameters. Configuring the logging fluently allows you to set it dynamically (e.g. based on settings) You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) // OR static factory configuration options => options.WithLogging(() => Settings.HttpTracerMode, () => Settings.TrafficVerbosity, () => Settings.LogLevels) // OR extended factory configuration options => options.WithLogging( serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().HttpTracerMode, serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().TrafficVerbosity serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().LogLevels) All logging fluent options are available with and without using registry. It means that you can share logging configuration, setting it at registry level and/or set some specific one at api level."
  },
  "articles/config_mediatr.html": {
    "href": "articles/config_mediatr.html",
    "title": "Configuring MediatR | Apizr",
    "keywords": "Configuring MediatR Apizr offers an integration with MediatR , following the Mediator pattern , available only with the extended approach. Mediator pattern ensures to keep all the thing as loosely coupled as we can between our ViewModel/ViewControler and our Data Access Layer. As everything should be loosely coupled between Views and ViewModels (MVVM) or ViewControlers (MVC) thanks to data binding, MediatR offers you to keep it all loosely coupled between your VM/VC and your DAL too. Please read the official documentation to know more about MediatR. The main benefit in using it with Apizr is to offer you a very simple and unified way to send your request, no matter from where or about what. Simple and unified because instead of injecting/resolving each api interface you need to get your data, you just have to use the IMediator interface, everywhere, every time. Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.MediatR Then you'll be able to register with this option: options => options.WithMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrMediator IApizrMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator , in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteUnitRequest<TWebApi> : execute any method from TWebApi ExecuteUnitRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteResultRequest<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data ExecuteResultRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadQuery<TResultData> : get the TResultData entity matching an int key ReadQuery<TResultData, TKey> : get the TResultData entity matching a TKey ReadAll: ReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters Create: CreateCommand<TModelData> : create a TModelData entity Update: UpdateCommand<TRequestData> : update the TRequestData entity matching an int key UpdateCommand<TKey, TRequestData> : update the TRequestData entity matching a TKey Delete: DeleteCommand<T> : delete the T entity matching an int key DeleteCommand<T, TKey> : delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator , you could do it with IApizrMediator or IApizrCrudMediator . Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic mediator methods: No result: SendFor<TWebApi> : execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey> : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams> : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity> : create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey> : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey> : delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator , IApizrMediator or IApizrCrudMediator , you could do it with IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> . Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrMediationRegistry instead and then just get an IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its Get methods. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery(); Classic typed mediator methods: No result: SendFor : execute any method from TWebApi SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand : create a TApiEntity SendCreateCommand<TModelEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand : delete the TApiEntity matching a TApiEntityKey"
  },
  "articles/config_optional.html": {
    "href": "articles/config_optional.html",
    "title": "Configuring Optional.Async | Apizr",
    "keywords": "Configuring Optional.Async Apizr offers an integration with Optional.Async , following the Optional pattern , available only with the extended approach with MediatR integration activated. Optional.Async offers a strongly typed alternative to null values that lets you: Avoid those pesky null-reference exceptions Signal intent and model your data more explicitly Cut down on manual null checks and focus on your domain It allows you to chain Task<Option<T>> and Task<Option<T, TException>> without having to use await Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.Optional Then you'll be able to register with this option: options => options.WithOptionalMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrOptionalMediator IApizrOptionalMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator , in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var optionalResult = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteOptionalUnitRequest<TWebApi> : execute any method from TWebApi ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteOptionalResultRequest<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadOptionalQuery<TResultData> : get the TResultData entity matching an int key ReadOptionalQuery<TResultData, TKey> : get the TResultData entity matching a TKey ReadAll: ReadAllOptionalQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters Create: CreateOptionalCommand<TModelData> : create a TModelData entity Update: UpdateOptionalCommand<TRequestData> : update the TRequestData entity matching an int key UpdateOptionalCommand<TKey, TRequestData> : update the TRequestData entity matching a TKey Delete: DeleteOptionalCommand<T> : delete the T entity matching an int key DeleteOptionalCommand<T, TKey> : delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator , you could do it with IApizrMediator or IApizrCrudMediator . Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrOptionalCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic Optional mediator methods: No result: SendFor<TWebApi> : execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD Optional mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey> : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams> : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity> : create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey> : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey> : delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator , IApizrOptionalMediator or IApizrCrudOptionalMediator , you could do it with IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> . Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrOptionalMediationRegistry instead and then just get an IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its GetFor and GetCrudFor methods. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrCrudOptionalMediator.SendReadAllQuery(); Classic Optional typed mediator methods: No result: SendFor : execute any method from TWebApi SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand : create a TApiEntity SendCreateCommand<TModelEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand : delete the TApiEntity matching a TApiEntityKey You should finaly end with something like: optionalResult.Match(result => { // Oh yeah, you get a result! }, e => { // Oh no, something went wrong! });"
  },
  "articles/config_policies.html": {
    "href": "articles/config_policies.html",
    "title": "Configuring Policies | Apizr",
    "keywords": "Configuring Policies Apizr comes with a Policy attribute to apply some policies on apis, handled by Polly . You’ll find also policy attributes dedicated to CRUD apis like CreatePolicy , ReadPolicy and so on… Polly will help you to manage some retry scenarios but can do more. Please refer to its official documentation if you’d like to know more about it. Registering Here is how to define a policy, adding it to a policy registry. var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; TransiantHttpError policy is actually provided by Polly itself, so we jsut call its HttpPolicyExtensions.HandleTransientHttpError() method. We're also giving here an OnLoggedRetry method provided by Apizr, so we coud get some logging outputs when Polly comes in the party in case of handled failures. PolicyRegistry is where you register all your named policies to be used by Polly thanks to attribute decoration, TransiantHttpError is just an example. Now we have to register our policy registry: Static Extended You'll be able to register your policy registry with this option: // direct configuration options => options.WithPolicyRegistry(registry) // OR factory configuration options => options.WithPolicyRegistry(() => registry) There's nothing specific to do with Apizr about Polly when using the extended approach. Just don't forget to register it like you usualy do: services.AddPolicyRegistry(registry); Defining Now we can use it thanks to attribute decoration: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } Here we are using it at assembly level, telling Apizr to apply TransiantHttpError policy to all apis. You can mix levels and mix policies as all will be wrapped. Using Apizr will automatically tell Polly to handle request of any decorated api method."
  },
  "articles/config_priority.html": {
    "href": "articles/config_priority.html",
    "title": "Configuring Priority | Apizr",
    "keywords": "Configuring Priority Apizr could use Fusillade to offer some api priority management on calls. To be short, Fusillade is about: Auto-deduplication of relevant requests Request Limiting Request Prioritization Speculative requests Please refer to its official documentation if you’d like to know more about it. Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.Fusillade Then you'll be able to register with this option: options => options.WithPriorityManagement() Defining While defining your api interfaces using Apizr to send a request, you can add an int property param decorated with the provided Property attribute to your methods like: [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync([Priority] int priority); } Using Just call your api with your priority: var result = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync((int)Priority.Background));"
  },
  "articles/config_refitsettings.html": {
    "href": "articles/config_refitsettings.html",
    "title": "Configuring RefitSettings | Apizr",
    "keywords": "Configuring RefitSettings You can set RefitSettings thanks to this option: Static Extended // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(() => YourOwnRefitSettings) // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(serviceProvider => YourOwnRefitSettings) Warning AuthorizationHeaderValue Apizr provides its own AuthenticationHandler to manage authorization (see Configuring > Authentication). There's no need to use AuthorizationHeaderValue properties."
  },
  "articles/gettingstarted_classic.html": {
    "href": "articles/gettingstarted_classic.html",
    "title": "Defining | Apizr",
    "keywords": "Defining We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Registering It's not required to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of an api interface: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.RegistrationMethodFactory(() => ApizrBuilder.CreateManagerFor<IReqResService>(options => options .WithPolicyRegistry(registry) .WithAkavacheCacheHandler()) ); We provided a policy registry and a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed api interface: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor<IReqResService>(options => options.WithAkavacheCacheHandler()); } We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Static Extended // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry Add a manager for IHttpBinService api interface into the registry Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could resolve it to get its managers, instead of resolving each managers. Here is how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Static Extended // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging(HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (users) Add a manager for IReqResResourceService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (resources) Add a manager for IHttpBinService api interface into the registry with a speific base address ( https://httpbin.org ) Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (users), to register it into the container Add a manager for IReqResResourceService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (resources), to register it into the container Add a manager for IHttpBinService api interface into the registry with a speific base address ( https://httpbin.org ), to register it into the container Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: var reqResUserManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var reqResResourceManager = apizrRegistry.GetManagerFor<IReqResResourceService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Registering all scanned interfaces Static Extended Not available. Here is an example of how to auto register all scanned interfaces: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_INTERFACES); } Apizr will scan assemblies to auto register managers for decorated api interfaces. We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; public YouViewModel(IApizrManager<IReqResService> reqResManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _reqResManager = reqResManager; // Or registry injection //_reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request."
  },
  "articles/gettingstarted_crud.html": {
    "href": "articles/gettingstarted_crud.html",
    "title": "Defining | Apizr",
    "keywords": "Defining As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what the provided interface looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { #region Create [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context); [Post(\"\")] Task<T> Create([Body] T payload, CancellationToken cancellationToken); [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context, CancellationToken cancellationToken); #endregion #region ReadAll [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll(CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, [Context] Context context, CancellationToken cancellationToken); #endregion #region Read [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Context] Context context); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, [Context] Context context, CancellationToken cancellationToken); #endregion #region Update [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context, CancellationToken cancellationToken); #endregion #region Delete [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context); [Delete(\"/{key}\")] Task Delete(TKey key, CancellationToken cancellationToken); [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context, CancellationToken cancellationToken); #endregion } We can see that it comes with many parameter combinations, but it won't do anything until you ask Apizr to. Caching, Logging, Policing, Prioritizing... everything is activable fluently with the options builder. About generic types: T and TKey (optional - default: int ) meanings are obvious TReadAllResult (optional - default: IEnumerable<T> ) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object> ) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering It's not mandatory to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of the CRUD api interface: // Apizr registration myContainer.RegistrationMethod(() => ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")) ); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed CRUD api interface: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Static Extended // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Static Extended // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a common base address ( https://crud.io/api ) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a common base address ( https://crud.io/api ) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry Set a specific base address ( https://crud.com/api ) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a common base address ( https://crud.io/api ) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a common base address ( https://crud.io/api ) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific base address ( https://crud.com/api ) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); // T3 with default registered types var t3Manager = apizrRegistry.GetCrudManagerFor<T3>(); Registering all scanned interfaces Static Extended Not available. You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://mybaseuri.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (no more fluent declaration) (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T> ) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object> ) Then, here is a registration example: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_ENTITIES); } Apizr will scan assemblies to auto register managers for decorated entities. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _userCrudManager = userCrudManager; // Or registry injection //_userCrudManager = apizrRegistry.GetCrudManagerFor<User, int, PagedResult<User>, ReadAllUsersParams>>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync(api => api.ReadAll()); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Intro | Apizr",
    "keywords": "Intro The goal of Apizr is to get all ready to use for web api requesting, with the more resiliency we can, but without the boilerplate. Examples through this doc are mainly based on a Xamarin.Forms app working with Shiny. Exploring the GitHub repository, you'll find a full Xamarin.Forms sample app, implementing Apizr with Shiny, Prism and MS DI all together. You'll find another mobile sample app with MAUI in preview. There's also a .Net Core console sample app, implementing Apizr without anything else (static) and also with MS DI (extensions). Feel free to take a look at the sample and test projects. Documentation structure is quite simple. There is first a Getting started for both classic and CRUD apis. Then, there is almost everything we can configure and use with Apizr. Happy coding Warning Breaking changes Apizr v4.1 brings some renaming breaking changes: Apizr static class renamed to ApizrBuilder to match its purpose and doesn't conflict with its namespace anymore ApizrBuilder's methods renamed to match their return type so that we know what we're about to build (e.g. CreateRegistry, AddManagerFor, CreateManagerFor) ApizrRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor)"
  },
  "articles/legacy_v3_readme.html": {
    "href": "articles/legacy_v3_readme.html",
    "title": "Apizr V3 Readme | Apizr",
    "keywords": "Apizr V3 Readme This readme is all about v3 Libraries Install the NuGet package of your choice: Apizr package comes with the For and CrudFor static instantiation approach (which you can register in your DI container then) Apizr.Extensions.Microsoft.DependencyInjection package extends your IServiceCollection with AddApizrFor and AddApizrCrudFor registration methods (ASP.Net Core, etc) Apizr.Integrations.Shiny package brings ICacheHandler, ILogHandler and IConnectivityHandler method mapping implementations for Shiny , extending your IServiceCollection with a UseApizr and UseApizrCrudFor registration methods Apizr.Integrations.Fusillade package enables request priority management using Fusillade Apizr.Integrations.Akavache package brings an ICacheHandler method mapping implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler method mapping implementation for MonkeyCache Apizr.Integrations.MediatR package enables request auto handling with mediation using MediatR Apizr.Integrations.Optional package enables Optional result from mediation requests (requires MediatR integration) using Optional.Async Apizr.Integrations.AutoMapper package enables auto mapping for mediation requests (requires MediatR integration and could work with Optional integration) using AutoMapper Apizr core package make use of well known nuget packages to make the magic appear: Package Features Refit Auto-implement web api interface and deal with HttpClient Polly Apply some policies like Retry, CircuitBreaker, etc... HttpTracer Trace Http(s) request/response traffic to log it It also comes with some handling interfaces to let you provide your own services for: Caching with ICacheHandler, which comes with its default VoidCacheHandler (no cache), but also with: AkavacheCacheHandler: Akavache method mapping interface (Integration package referenced above) MonkeyCacheHandler: MonkeyCache method mapping interface (Integration package referenced above) ShinyCacheHandler: Shiny chaching method mapping interface (Integration package referenced above) Logging with ILogHandler, which comes with its default DefaultLogHandler (Console and Debug), but also with: ShinyLogHandler: Shiny logging method mapping interface (Integration package referenced above) Connectivity with IConnectivityHandler, which comes with its default VoidConnectivityHandler (no connectivity check), but also with: ShinyConnectivityHandler: Shiny connectivity method mapping interface (Integration package referenced above) Mapping with IMappingHandler, which comes with its default VoidMappingHandler (no mapping conversion), but also with: AutoMapperMappingHandler: AutoMapper mapping method mapping interface (Integration package referenced above) How to: Classic APIs Defining Registering Static approach Extensions approach Manually Automatically Using CRUD APIs Defining Registering Static approach Extensions approach Manually Automatically Using Advanced configurations Service handlers Authentication DelegatingHandler Custom DelegatingHandler Refit settings Policy registry HttpClient External integrations Shiny MonkeyCache Akavache Fusillade MediatR OptionalAsync Optional helper extentions OnResultAsync CatchAsync AutoMapper AutoMapper with Crud apis Manually Automatically Using AutoMapper with classic apis Using Classic APIs: Defining: We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample.Api { [WebApi(\"https://reqres.in/\"), CacheIt, LogIt] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(CancellationToken cancellationToken); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); [Post(\"/api/users\")] Task<User> CreateUser(User user, CancellationToken cancellationToken); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Registering: As it's not mandatory to register anything in a container for DI purpose (you can use a static instance directly), I'll describe here how to use it with DI. Static approach: Somewhere where you can add services to your container, add the following: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.SomeInstanceRegistrationMethod(Apizr.For<IReqResService>(optionsBuilder => optionsBuilder.WithPolicyRegistry(registry) .WithCacheHandler(new AkavacheCacheHandler()))); I provided a policy registry and a cache handler here as I asked for it with cache and policy attributes in my web api example. Extensions approach: For this one, two options : Manually: register calling AddApizrFor<TWebApi> service collection extension method or overloads for each service you want to manage Automatically: decorate your services with WebApiAttribute and let Apizr auto register it all for you Manually: Here is an example: public override void ConfigureServices(IServiceCollection services) { var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrFor<IReqResService>(optionsBuilder => optionsBuilder.WithCacheHandler<AkavacheCacheHandler>()); // Or if you use Shiny //services.UseApizrFor<IReqResService>(); } Automatically: Decorate your api services like we did before (but with your own settings): [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample.Api { [WebApi(\"https://reqres.in/\"), CacheIt, LogIt] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(CancellationToken cancellationToken); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); [Post(\"/api/users\")] Task<User> CreateUser(User user, CancellationToken cancellationToken); } } Then, register in your Startup class like so: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrFor(typeof(AnyClassFromServicesAssembly)); // Or if you use Shiny //services.UseApizrFor(typeof(AnyClassFromServicesAssembly)); } There are 4 AddApizrFor/UseApizrFor flavors for classic automatic registration, depending on what you want to do and provide. This one is the simplest. Using: Sending web request from your app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<YourWebApiInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; public YouViewModel(IApizrManager<IReqResService> reqResManager) { _reqResManager = reqResManager; } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync((ct, api) => api.GetUsersAsync(ct), CancellationToken.None); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } I catch execution into an ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request. CRUD APIs: When playing with RESTful CRUD api, you've got a couple of options: Define a web api interface like we just did before with each crud method (each entity into one interface or one interface for each entity) Use the built-in ICrudApi As the first option is described already, here we'll talk about the ICrudApi option Defining: As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what it looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll(CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken); [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, CancellationToken cancellationToken); } We can see that it comes with some CacheKey and Priority attribute decorations, but it won't do anything until you ask Apizr to. Caching, Logging, Policing, Prioritizing... everything is activable fluently with the options builder. About generic types: T and TKey (optional - default: int ) meanings are obvious TReadAllResult (optional - default: IEnumerable<T> ) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object> ) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering: Static approach: Somewhere where you can add services to your container, add the following: // Apizr registration myContainer.SomeInstanceRegistrationMethod(Apizr.CrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\"))); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder. There are 5 CrudFor flavors, depending on what you want to do and provide. One of it is the simple Apizr.CrudFor<T>() , which as you can expect, define TKey as int , TReadAllResult as IEnumerable<T> and TReadAllParams as IDictionary<string, object> . Extensions approach: Ok, for this one, two options again: Manually: register calling AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams> service collection extension method or overloads for each entity you want to manage Automatically: decorate your entities with CrudEntityAttribute and let Apizr auto register it all for you Manually: In your Startup class, add the following: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\")); // Or if you use Shiny //services.UseApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder. There are 10 AddApizrCrudFor/UseApizrCrudFor flavors for crud manual registration, depending on what you want to do and provide. One of it is the simple services.AddApizrCrudFor<T>() or services.UseApizrCrudFor<T>() , which as you can expect, define TKey as int , TReadAllResult as IEnumerable<T> and TReadAllParams as IDictionary<string, object> . Automatically: You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://myapi.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T> ) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object> ) Then, register in your Startup class like so: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudFor(typeof(MyEntity)); // Or if you use Shiny //services.UseApizrCrudFor(typeof(MyEntity)); } There are 4 AddApizrCrudFor/UseApizrCrudFor flavors for crud automatic registration, depending on what you want to do and provide. This is the simplest. Using: Sending web request from your app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) { _userCrudManager = userCrudManager; } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync((ct, api) => api.ReadAll(ct), CancellationToken.None); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } I catch execution into an ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request. Advanced configurations: There're some advanced scenarios where you want to adjust some settings and behaviors. This is where the options builder comes in. Each registration approach comes with its optionsBuilder optional parameter: optionsBuilder => optionsBuilder.SomeOptionsHere(someParametersThere) Service handlers: The options builder let you provide your own method mapping implementations for: ICacheHandler (thanks to WithCacheHandler) ILogHandler (thanks to WithLogHandler) IConnectivityHandler (thanks to WithConnectivityHandler) IMappingHandler (thanks to WithMappingHandler). Authentication DelegatingHandler: For autorized request calls, you can provide some properties and/or methods (thanks to WithAuthenticationHandler) to help Apizr to authenticate user when needed. Custom DelegatingHandler: The options builder let you add any custom delegating handler thanks to AddDelegatingHandler method Refit settings: You can adjust some specific Refit settings providing an instance of RefitSettings (thanks to WithRefitSettings). Note that for this one, only constructor parameters will be used (IContentSerializer, IUrlParameterFormatter and IFormUrlEncodedParameterFormatter). Please don't use AuthorizationHeaderValueGetter, AuthorizationHeaderValueWithParamGetter and HttpMessageHandlerFactory, as they'll be ignored. Prefer using WithAuthenticationHandler builder method to manage request authorization and AddDelegatingHandler builder method to add some other custom delegating handlers. Policy registry: If you plan to use the PoliciesAttribute, Apizr needs to know where to find your policy registry: With static instantiation, you have to provide it thanks to WithPolicyRegistry builder method. With extensions registration, you have to register it thanks to AddPolicyRegistry service collection extension method. In any case, you may want to log what's going on during policies excecution. To do so, there's an OnRetry helper action which provide your ILogHandler method mapping implementation to Polly. Here's how to use it: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; LoggedPolicies.OnLoggedRetry could also execute your own specific action if needed. HttpClient: With extensions registration, you can adjust some more HttpClient settings thanks to ConfigureHttpClientBuilder builder method. This one could interfere with all Apizr http client auto configuration, so please use it with caution. External integrations: Shiny: If you're a Shiny user, with the right extension package installed, just register Apizr calling UseApizr instead of AddApizr . Then, everything will be in place, ready to use, relying on Shiny features (Logging, Caching, Connectivity). MonkeyCache: If you're a MonkeyCache user, with the right extension package installed: Set the Barrel's ApplicationId: Barrel.ApplicationId = \"YOUR_APPLICATION_ID\"; Then tell Apizr you want to use MonkeyCache as caching layer: optionsBuilder => optionsBuilder.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) Akavache: If you're an Akavache user, with the right extension package installed: Just tell Apizr you want to use Akavahe as caching layer: optionsBuilder => optionsBuilder.WithCacheHandler(() => new AkavacheCacheHandler()) Fusillade: Starting Apizr v3, Fusillade has been moved from core project to its dedicated integration package. If you plan to use it, you now have to install this package. Once installed, you should be able to activate it fluently with the provided extension: optionsBuilder => optionsBuilder.WithPriorityManagement() From there, everything will be user initiated. When you need to specify another priority, what you need to do is just adding the priority parameter into your api interface method definition: [Get(\"/api/users\")] Task<UserList> GetUsersAsync([Priority] int priority, CancellationToken cancellationToken); Mediation: In extensions registration approach and with the dedicated integration nuget package referenced, the options builder let you enable mediation by calling: optionsBuilder => optionsBuilder.WithMediation() Don't forget to register MediatR itself as usual: services.AddMediatR(typeof(Startup)); When activated, you don't have to inject/resolve anything else than an IMediator instance, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be, with classic api interfaces: ExecuteRequest<TWebApi> : execute any method from TWebApi defined by an expression parameter ExecuteRequest<TWebApi, TApiResponse> : execute any method from TWebApi with a TApiResponse result and defined by an expression parameter ExecuteRequest<TWebApi, TModelResponse, TApiResponse> : execute any method from TWebApi with a TApiResponse mapped to a TModelResponse result and defined by an expression parameter NOTE - Mapping : When I say \"mapped\", I talk about the mapping integration feature Please refer to AutoMapper section for more info Or with crud api interfaces: ReadQuery<T> : get the T entity with int ReadQuery<T, TKey> : get the T entity with TKey ReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters CreateCommand<T> : create a T entity UpdateCommand<T> : update the T entity with int UpdateCommand<TKey, T> : update the T entity with TKey DeleteCommand<T> : delete the T entity with int DeleteCommand<T, TKey> : delete the T entity with TKey There's also a typed mediator available for each api interface (classic or crud), to help you write things shorter. With classic api interfaces, resolving IMediator<TWebApi> give you access to: SendFor(YOUR_API_METHOD_EXPRESSION) : send an ExecuteRequest<TWebApi> for you SendFor<TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteRequest<TWebApi, TApiResponse> for you SendFor<TModelResponse, TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteRequest<TWebApi, TModelResponse, TApiResponse> for you With crud api interfaces, resolving ICrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> give you access to: SendReadQuery(TApiEntityKey key) : send a ReadQuery<TApiEntity, TApiEntityKey> for you SendReadQuery<TModelEntity>(TApiEntityKey key) : send a ReadQuery<TModelEntity, TApiEntityKey> for you, with TModelEntity mapped with TApiEntity SendReadAllQuery() : send a ReadAllQuery<TReadAllResult> for you SendReadAllQuery<TModelEntityReadAllResult>() : send a ReadAllQuery<TModelEntityReadAllResult> for you, with TModelEntityReadAllResult mapped with TReadAllResult SendCreateCommand(TApiEntity payload) : send a CreateCommand<TApiEntity> for you SendCreateCommand<TModelEntity>(TModelEntity payload) : send a CreateCommand<TModelEntity> for you, with TModelEntity mapped with TApiEntity SendUpdateCommand(TApiEntityKey key, TApiEntity payload) : send an UpdateCommand<TApiEntityKey, TApiEntity> for you SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload) : send an UpdateCommand<TApiEntityKey, TModelEntity> for you, with TModelEntity mapped with TApiEntity SendDeleteCommand(TApiEntityKey key) : send a DeleteCommand<TApiEntity, TApiEntityKey> for you Most of all requests get some overloads to provide some more parameters. Apizr will intercept your request and handle it to send the result back to you, thanks to MediatR. From there, our ViewModel can look like (only one interface necessary in real world): public class YourViewModel { private readonly IMediator _mediator; private readonly IMediator<IReqResService> _reqResMediator; private readonly ICrudMediator<User, int, PagedResult<User>, IDictionary<string, object>> _userMediator; public YouViewModel(IMediator mediator, IMediator<IReqResService> reqResMediator, ICrudMediator<User, int, PagedResult<User>, IDictionary<string, object>> userMediator) { _mediator = mediator; _reqResMediator = reqResMediator; _userMediator = userMediator; } public ObservableCollection<User>? Users { get; set; } // This won't compile obviously // It's an example presenting all ways to play with MediatR // You should choose one of these ways private async Task GetUsersAsync() { IList<User>? users; try { // The classic api interface way var userList = await _mediator.Send(new ExecuteRequest<IReqResService, UserList>((ct, api) => api.GetUsersAsync(ct)), CancellationToken.None); users = userList.Data; // The classic api interface way with typed mediator var userList = await _reqResMediator.SendFor(api => api.GetUsersAsync()); users = userList.Data; // The crud api interface way var pagedUsers = await _mediator.Send(new ReadAllQuery<PagedResult<User>>(), CancellationToken.None); users = pagedUsers.Data?.ToList(); // The crud api interface way with typed mediator var pagedUsers = await _userMediator.SendReadAllQuery(); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } Optional: In extensions registration approach and with the dedicated integration nuget package referenced, the options builder let you enable mediation with Optional result by calling: optionsBuilder => optionsBuilder.WithOptionalMediation() Again, don't forget to register MediatR itself as usual : services.AddMediatR(typeof(Startup)); When activated, you don't have to inject/resolve anything else than an IMediator instance, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be, with classic api interfaces: ExecuteOptionalRequest<TWebApi> : execute any method from TWebApi defined by an expression parameter which returns Option<Unit, ApizrException> ExecuteOptionalRequest<TWebApi, TApiResponse> : execute any method from TWebApi defined by an expression parameter which returns Option<TApiResponse, ApizrException<TApiResponse>> ExecuteOptionalRequest<TWebApi, TModelResponse, TApiResponse> : execute any method from TWebApi defined by an expression parameter which returns Option<TModelResponse, ApizrException<TModelResponse>> where TModelResponse mapped from TApiResponse NOTE - Mapping : When I say \"mapped\", I talk about the mapping integration feature Please refer to AutoMapper section for more info Or with crud api interfaces: ReadOptionalQuery<T> : get the T entity with int and returns Option<T, ApizrException<T>> ReadOptionalQuery<T, TKey> : get the T entity with TKey and returns Option<T, ApizrException<T>> ReadAllOptionalQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters and returns Option<TReadAllResult, ApizrException<TReadAllResult>> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters and returns Option<TReadAllResult, ApizrException<TReadAllResult>> CreateOptionalCommand<T> : create a T entity and returns Option<Unit, ApizrException> UpdateOptionalCommand<T> : update the T entity with int and returns Option<Unit, ApizrException> UpdateOptionalCommand<TKey, T> : update the T entity with TKey and returns Option<Unit, ApizrException> DeleteOptionalCommand<T> : delete the T entity with int and returns Option<Unit, ApizrException> DeleteOptionalCommand<T, TKey> : delete the T entity with TKey and returns Option<Unit, ApizrException> There's also a typed optional mediator available for each api interface (classic or crud), to help you write things shorter. With classic api interfaces, resolving IOptionalMediator<TWebApi> give you access to: SendFor(YOUR_API_METHOD_EXPRESSION) : send an ExecuteOptionalRequest<TWebApi> for you SendFor<TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteOptionalRequest<TWebApi, TApiResponse> for you SendFor<TModelResponse, TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteOptionalRequest<TWebApi, TModelResponse, TApiResponse> for you With crud api interfaces, resolving ICrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> give you access to: SendReadOptionalQuery(TApiEntityKey key) : send a ReadOptionalQuery<TApiEntity, TApiEntityKey> for you SendReadOptionalQuery<TModelEntity>(TApiEntityKey key) : send a ReadOptionalQuery<TModelEntity, TApiEntityKey> for you, with TModelEntity mapped with TApiEntity SendReadAllOptionalQuery() : send a ReadAllOptionalQuery<TReadAllResult> for you SendReadAllOptionalQuery<TModelEntityReadAllResult>() : send a ReadAllOptionalQuery<TModelEntityReadAllResult> for you, with TModelEntityReadAllResult mapped with TReadAllResult SendCreateOptionalCommand(TApiEntity payload) : send a CreateOptionalCommand<TApiEntity> for you SendCreateOptionalCommand<TModelEntity>(TModelEntity payload) : send a CreateOptionalCommand<TModelEntity> for you, with TModelEntity mapped with TApiEntity SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload) : send an UpdateOptionalCommand<TApiEntityKey, TApiEntity> for you SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload) : send an UpdateOptionalCommand<TApiEntityKey, TModelEntity> for you, with TModelEntity mapped with TApiEntity SendDeleteOptionalCommand(TApiEntityKey key) : send a DeleteOptionalCommand<TApiEntity, TApiEntityKey> for you Apizr will intercept it and handle it to send the result back to you, thanks to MediatR and Optional. From there, our ViewModel can look like (only one interface necessary in real world): public class YourViewModel { private readonly IMediator _mediator; private readonly IOptionalMediator<IReqResService> _reqResOptionalMediator; private readonly ICrudOptionalMediator<User, int, PagedResult<User>, IDictionary<string, object>> _userOptionalMediator; public YouViewModel(IMediator mediator, IOptionalMediator<IReqResService> reqResOptionalMediator, ICrudOptionalMediator<User, int, PagedResult<User>, IDictionary<string, object>> userOptionalMediator) { _mediator = mediator; _reqResOptionalMediator = reqResOptionalMediator; _userOptionalMediator = userOptionalMediator; } public ObservableCollection<User>? Users { get; set; } // This won't compile obviously // It's an example presenting all ways to play with Optional // You should choose one of these ways private async Task GetUsersAsync() { // The classic api interface way with mediator and optional request var optionalUserList = await _mediator.Send(new ExecuteOptionalRequest<IReqResService, UserList>((ct, api) => api.GetUsersAsync(ct)), CancellationToken.None); // The classic api interface way with typed optional mediator (the same but shorter) var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); // Handling the optional result for both previous ways optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); // The crud api interface way with mediator and optional request var optionalPagedResult = await _mediator.Send(new ReadAllOptionalQuery<PagedResult<User>>(), CancellationToken.None); // The crud api interface way with typed crud optional mediator var optionalPagedResult = await _userOptionalMediator.SendReadAllOptionalQuery(); // Handling the optional result for both previous ways optionalPagedResult.Match(pagedUsers => { if (pagedUsers.Data != null && pagedUsers.Data.Any()) Users = new ObservableCollection<User>(pagedUsers.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); } } Same advantages than classic mediation but with exception handling. Both \"classic\" and \"optional\" mediation are compatibles with each other. It means that if you call both methods during registration, both request collection will be available, so you can decide which one suits to you when you need it. Optional helper extentions: Optional and MediatR are pretty cool. But even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result boilerplate: // The classic api interface way with typed optional mediator (the same but shorter) var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); // Handling the optional result for both previous ways optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Let's cut down the optional result handling thing, to get something as short as we can. OnResultAsync and CatchAsync are extension methods to handle optional result fluently. OnResultAsync: OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult : this action will be invoked just before throwing any exception that might have occurred during request execution Func<TResult, ApizrException<TResult>, bool> onResult : this function will be invoked with the returned result and potential occurred exception Func<TResult, ApizrException<TResult>, Task<bool>> onResult : this function will be invoked async with the returned result and potential occurred exception All give you a result returned from fetch if succeed, or cache if failed. The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Here is what our final request looks like with Action (auto throwing after invocation on excpetion): await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync(userList => { users = userList?.Data; }); Or with Func and throw: await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Or with Func and success flag: var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); We could combine the first two with AsyncErrorHandler , to catch them all globally and show any information dialog to the user, like: public static class AsyncErrorHandler { public static void HandleException(Exception exception) { var message = exception is IOException || exception.InnerException is IOException ? \"No network\" : (exception.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); Log.Write(exception); } } CatchAsync: CatchAsync let you provide these parameters: Action<Exception> onException : this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache : True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one is to return result from fetch or cache, no matter of execption handled on the other side by an action callback to inform the user var users = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There's some cached data? AsyncErrorHandler will handle the exception to inform the user call just failed Apizr will return the previous result from cache There's no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal Fody usage) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled further Safe and shorter than ever! AutoMapper: You can define your own model entities and then, your AutoMapper mapping profiles between api entities and model entities. Then, you have to tell Apizr which entities must use the mapping feature. AutoMapper with Crud apis: Manually: services.AddApizrCrudFor<MappedEntity<TModelEntity, TApiEntity>>(optionsBuilder => optionsBuilder.WithBaseAddress(\"https://myapi.com/api/myentity\") .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>()); Manual registration makes use of MappedEntity<TModelEntity, TApiEntity> just in place of our usual T. You'll have to enable one or both mediation feature to handle requests (classic and/or optional) and provide a mapping handler. You'll have to repeat this registration for each crud mapping. Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Automatically: Why not let Apizr do it for you? To do so, you have do decorate one of those two entities (api vs model) with corresponding attribute: CrudEntityAttribute above the api entity, with modelEntityType parameter set to the mapped model entity type MappedCrudEntityAttribute above the model entity, with apiEntityType parameter set to the mapped api entity type If you get access to both entities, it doesn't matter which one you decorate, just do it for one of it (if you decorate both, it will take the first found). If you don't get any access to the api entities, just decorate your model one with the MappedCrudEntityAttribute From here, let's write: services.AddApizrCrudFor(optionsBuilder => optionsBuilder .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>(), typeof(AnyTApiEntity), typeof(AnyTModelEntity)); In this example, I provided both api entity and model entity assemblies to the attribute scanner, but actually you just have to provide the one containing your attribute decorated entities (api or model, depending of your scenario/access rights). Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Using: Nothing different here but direct using of your model entities when sending mediation requests, like: var createdModelEntity = await _mediator.Send(new CreateCommand<TModelEntity>(myModelEntity), CancellationToken.None); Apizr will map myModelEntity to TApiEntity, send it to the server, map the result to TModelEntity and send it back to you. And yes, it works also with Optional. AutoMapper with classic apis: You have do decorate one among the api method, the model entity or the api entity with MappedWithAttribute , with mappedWithType set to the other mapped entity. From here, let's write: services.AddApizrFor(optionsBuilder => optionsBuilder .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>(), typeof(AnyTApiEntity), typeof(AnyTModelEntity), typeof(AnyTWebApi)); Actually, the number of typeof depends on where your attribute decorations are defined. Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Using: Nothing different here but direct using of your model entities when sending mediation requests, like: // Classic auto mapped result only var userInfos = await _mediator.Send(new ExecuteRequest<IReqResService, UserInfos, UserDetails>((ct, api) => api.GetUserAsync(userChoice, ct)), CancellationToken.None); Apizr will send the request to the server, map the api result from UserDetails to UserInfos and send it back to you. You can also map the request before being sent, like so: // Classic auto mapped request and result var minUser = new MinUser {Name = \"John\"}; var createdMinUser = await _mediator.Send( new ExecuteRequest<IReqResService, MinUser, User>((ct, api, mapper) => api.CreateUser(mapper.Map<MinUser, User>(minUser), ct)), CancellationToken.None); minUser will be mapped from MinUser to User just before being sent, then Apizr will map the api result back from User to MinUser and send it back to you. And yes, all the mapping feature works also with Optional."
  },
  "articles/tools.html": {
    "href": "articles/tools.html",
    "title": "Tools | Apizr",
    "keywords": "Tools You'll find here some tools around Apizr helping to get things up and runing, the quick and easy way"
  },
  "articles/tools_nswag.html": {
    "href": "articles/tools_nswag.html",
    "title": "NSwag | Apizr",
    "keywords": "NSwag Apizr comes with a tool called Apizr.Tools.NSwag that offers to get all files generated by a couple of command lines. It relies on the well known NSwag CLI, letting define all we need in a json configuration file, and generating models, services and a registration helper class. Installing The first time you plan to use the tool, start by installing it: Project Current V-Next Apizr.Tools.NSwag > dotnet tool install --global Apizr.Tools.NSwag --version 5.0.0-preview.1 Configuring With Apizr.Tools.NSwag installed, navigate to the directory of your choice (the one where you want to generate files). Create a configuration file The first time you plan to use the tool for an api, you need to create a configuration file by running the new command: > apizr new From here, you'll get your apizr.json default configuration file into your current directory, witch should look like: { \"codeGenerators\": { \"openApiToApizrClient\": { \"registrationType\": \"Both\", \"withPriority\": false, \"withContext\": false, \"withCancellationToken\": false, \"withRetry\": false, \"withLogs\": false, \"withCacheProvider\": \"None\", \"withMediation\": false, \"withOptionalMediation\": false, \"withMapping\": false, \"className\": \"{controller}\", \"operationGenerationMode\": \"MultipleClientsFromOperationId\", \"additionalNamespaceUsages\": [], \"additionalContractNamespaceUsages\": [], \"generateOptionalParameters\": false, \"generateJsonMethods\": false, \"enforceFlagEnums\": false, \"parameterArrayType\": \"System.Collections.Generic.IEnumerable\", \"parameterDictionaryType\": \"System.Collections.Generic.IDictionary\", \"responseArrayType\": \"System.Collections.Generic.ICollection\", \"responseDictionaryType\": \"System.Collections.Generic.IDictionary\", \"wrapResponses\": false, \"wrapResponseMethods\": [], \"generateResponseClasses\": true, \"responseClass\": \"SwaggerResponse\", \"namespace\": \"MyNamespace\", \"requiredPropertiesMustBeDefined\": true, \"dateType\": \"System.DateTimeOffset\", \"jsonConverters\": null, \"anyType\": \"object\", \"dateTimeType\": \"System.DateTimeOffset\", \"timeType\": \"System.TimeSpan\", \"timeSpanType\": \"System.TimeSpan\", \"arrayType\": \"System.Collections.Generic.List\", \"arrayInstanceType\": \"System.Collections.Generic.List\", \"dictionaryType\": \"System.Collections.Generic.IDictionary\", \"dictionaryInstanceType\": \"System.Collections.Generic.Dictionary\", \"arrayBaseType\": \"System.Collections.ObjectModel.Collection\", \"dictionaryBaseType\": \"System.Collections.Generic.Dictionary\", \"classStyle\": \"Poco\", \"jsonLibrary\": \"NewtonsoftJson\", \"generateDefaultValues\": true, \"generateDataAnnotations\": true, \"excludedTypeNames\": [], \"excludedParameterNames\": [], \"handleReferences\": false, \"generateImmutableArrayProperties\": false, \"generateImmutableDictionaryProperties\": false, \"jsonSerializerSettingsTransformationMethod\": null, \"inlineNamedArrays\": false, \"inlineNamedDictionaries\": false, \"inlineNamedTuples\": true, \"inlineNamedAny\": false, \"generateDtoTypes\": true, \"generateOptionalPropertiesAsNullable\": false, \"generateNullableReferenceTypes\": false, \"templateDirectory\": null, \"typeNameGeneratorType\": null, \"propertyNameGeneratorType\": null, \"enumNameGeneratorType\": null, \"serviceHost\": null, \"serviceSchemes\": null, \"output\": null, \"newLineBehavior\": \"Auto\" } }, \"runtime\": \"Net60\", \"defaultVariables\": null, \"documentGenerator\": { \"fromDocument\": { \"url\": \"http://redocly.github.io/redoc/openapi.yaml\", \"output\": null, \"newLineBehavior\": \"Auto\" } } } Adjust configuration in file Open your apizr.json file to edit the configuration. Most of its settings are coming from NSwag configuration document definition as OpenApiToApizrClient comes from OpenApiToCSharpClient. It means that you can adjust everything you used to with classic NSwag generation. Some of it must be adjusted: into the openApiToApizrClient section: namespace : the namespace used into generated files output : a sub directory where to put generated files into the fromDocument section: url : the openapi json or yaml definition url Warning Minimal adjustments Like for classic NSwag generation, you must at least complete these 3 settings. If not, nothing wil be generated. That said, let's focus on Apizr dedicated settings into the openApiToApizrClient section: registrationType (default: Both ): generate a fluent registration helper class or not None : do not generate Static : generate with the static builder method Extended : generate with the service collection extending method Both : generate both methods (could be interesting to read but not relevant for production) withPriority (default: false ): include a priority parameter into GET api methods and add priority management into registration process withContext (default: false ): include a context parameter into all api methods withCancellationToken (default: false ): include a cancellation token parameter into all api methods withRetry (default: false ): add a Policy assembly attribute handling transient http error and a policy registry into registration process withLogs (default: false ): add a Log assembly attribute and a logger factory into static only registration process withCacheProvider (default: None ): None : do not cache Akavache : use Akavache MonkeyCache : use MonkeyCache InMemory : use Microsoft.Extensions.Caching.Memory (extended registration only) Distributed : use any caching engine compatible with Microsoft.Extensions.Caching.Distributed.IDistributedCache (extended registration only) Custom : use your own ICachingHandler implementation withMediation (default: false ): add mediation into extended registration process (extended registration only) withOptionalMediation (default: false ): add optional mediation into extended registration process (extended registration only) withMapping (default: false ): add AutoMapper into registration process Generating Once configuration file has been adjusted to your needs, execute the run command from the same directory where your apizr.json stands: > apizr run Note Optional arguments You can provide optional arguments: Input argument if you'd like to set a specific json configuration file path to run with. Ignore it as long as your directory contains only one of it. Variables argument if you need to set some dynamic values. Ignore it if you don't know what you're doing or read the NSwag doc about it . You should now get all your generated files right in place in your configured output folder. While you'll be including these files in your project, don't forget to install Nuget package dependencies as listed into the generated comments."
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "5.0 | Apizr",
    "keywords": "5.0 Apizr [New] [Core] Now we can group registry common configurations at any level to share configurations without any limit [New] [Core] Now we can set a base path with the brand new WithBasePath fluent option or using attribute Apizr.Tools.NSwag [New] [Generator] Apizr files can now be generated by command line (Models, Services and Registration) from an OpenApi definition using NSwag 4.1 Apizr [Breaking] [Naming] Apizr static class renamed to ApizrBuilder to match its purpose and doesn't conflict with its namespace anymore [Breaking] [Naming] ApizrBuilder's methods renamed to match their return type so that we know what we're about to build (e.g. CreateRegistry, AddManagerFor, CreateManagerFor) [Breaking] [Naming] ApizrRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) [Fix] [Connectivity] No more exception while using Apizr the extended way but without providing any IConnectivityHandler implementation with Fusillade priority management enabled [Improvement] [Address] Now we can set base address at both common and proper levels so we can define a base address shared by all apis, but also a specific one if needed Apizr.Extensions.Microsoft.DependencyInjection [Breaking] [Naming] Extension methods renamed to match their return type so that we know what we're about to build (e.g. AddManagerFor, AddCrudManagerFor) [Breaking] [Naming] ApizrExtendedRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) Apizr.Integrations.MediatR [Breaking] [Naming] ApizrMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetMediatorFor, GetCrudMediatorFor, ContainsMediatorFor) Apizr.Integrations.Optional [Breaking] [Naming] ApizrOptionalMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetOptionalMediatorFor, GetCrudOptionalMediatorFor, ContainsOptionalMediatorFor) 4.0 Apizr [New] [Logging] Now fully relies on MS Logging extensions [New] [Logging] Static fluent configuration now offers a WithLoggerFactory option to provide a custom logger factory [Breaking] [Logging] TraceAttribute has been renamed back to LogAttribute [Breaking] [Logging] Now we can set a LogLevel value for each Low, Medium and High severity by attribute or fluent configuration [New] [Logging] Now we can set logging settings within LogAttribute at method level [New] [Logging] Now we can set http tracing mode within LogAttribute to ajust log writting conditions (ExceptionsOnly, ErrorsAndExceptionsOnly or Everything) [New] [Logging] No more HttpTracer NuGet package dependency as source code has been integrated and largely adjusted to Apizr needs [New] [Configuring] Both static and extended fluent configuration now offers a Registry to set common options once for all registered apis, while keeping proper options applied to selected apis [New] [Configuring] Static fluent configuration could return the registry that expose a Populate method to register each generated Apizr manager in a container [New] [Configuring] Generated registry exposes GetFor, TryGetFor, GetCrudFor and TryGetCrudFor methods so that it could be used everywhere to get managers, instead of direct access [New] [Policing] Now we can provide a custom PollyContext if defined into the called api interface method, it will carry all logging settings for DelegatingHandler use. [New] [Mapping] Now we can enjoy data mapping with both static and extended configurations [Improvement] [Mapping] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on ExecuteAsync call [New] [Caching] Now we can ask for clearing request cache before executing [New] [Exceptions] Brand new onException Action parameter to handle it globally (e.g. user dialog/toast) and let potential cached data return to caller as expected (e.g. refreshing UI) Apizr.Extensions.Microsoft.DependencyInjection [New] We can now auto register crud managers for all scanned classes decorated by crud attributes Apizr.Extensions.Microsoft.Caching [New] Brand new integration project to set MS Caching extensions as caching handler Apizr.Integrations.Akavache [Improvement] Now we can ajust Akavache settings while configuring [New] Now we can register Akavache directly with the brand new WithAkavacheCacheHandler option Apizr.Integrations.MediatR [Breaking] Now Apizr.Integrations.MediatR targets .Net Standard 2.1 as MediatR v10+ does [New] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on Apizr mediators Send call [New] Brand new IApizrMediator & IApizrCrudMediator interfaces to get things shorter than IMediator [New] Now we can ask for clearing request cache before executing [New] Brand new onException Action parameter to handle it globally (e.g. user dialog/toast) and let potential cached data return to caller as expected (e.g. refreshing UI) Apizr.Integrations.Optional [Breaking] Now Apizr.Integrations.Optional targets .Net Standard 2.1 as Apizr.Integrations.MediatR v4+ does [New] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on Apizr optional mediators Send call [New] Brand new IApizrOptionalMediator & IApizrCrudOptionalMediator interfaces to get things shorter than IMediator [New] Now we can ask for clearing request cache before executing Apizr.Integrations.AutoMapper [Breaking] Now Apizr.Integrations.AutoMapper targets .Net Standard 2.1 as AutoMapper v11+ does [New] Now we can register AutoMapper directly with the brand new WithAutoMapperMappingHandler option [Improvement] No more extended package dependency to enjoy data mapping with both static and extended configurations Warning Apizr.Integrations.Shiny has been discontinued This integration project has been dropped out as Shiny no longer provide built-in caching and logging feature anymore. Apizr now either relies on MS Caching extensions, Akavache or MonkeyCache for caching feature and MS Logging extensions for logging feature. You'll have to provide a connectivity handler if you want Apizr to check it. 3.0 Apizr [New] Now based on Refit v6+ which introduce properties parameter provided to DelegateHandlers by the Http message. This is used by the new Fusillade priority management package. [New] Now based on Refit v6+ which introduce dynamic headers dictionary parameter allowing adding multiple dynamic headers in a single parameter thanks to [HeaderCollection] IDictionary<string, string> headers [New] Now based on Refit v6+ which now relies on System.Text.Json instead of Newtonsoft.Json. If you'd like to continue to use Newtonsoft.Json, add the Refit.Newtonsoft.Json NuGet package and follow the new Readme instructions [New] Now AuthenticationHandler is log level sensitive so we could tell it to keep quiet while using it heavily [New] Now caching could be disabled with CacheIt attribute thanks to CacheMode.None parameter to compose with assembly, interface and method level cache rules all together (e.g. you could now enable Cache globaly at assembly level but turn it off for a specific method like the login one) [New] Now you can initialize parameters directly from the managed method . No more pitfalls [Improvement] Cache key generator has been deeply reshaped to support all scenarios, including path parameters [Improvement] Nuget references have been updated to latest versions [BreakingChange] Fusillade has been moved to an integration package . If you used to play with it, just install it from its brand new dedicated integration package and follow the new Readme instructions [Fix] No more exception while using Apizr with Prism.Magician with Fusillade priority management enabled Apizr.Integrations.Fusillade [New] Brand new integration package to use Apizr with Fusillade, only if you need it (no more core references and NuGet dependencies) 2.0 Apizr [New] Now initialization options are typed to be dedicated to each api interface manager. It means you can now get a specific configuration for each Apizr manager instance, like for caching, logging, and so on... [New] Now caching could be defined at method level for CRUD api to. It means you can define specific cache settings for each Read and ReadAll request for each your CRUD model class [New] Now caching could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific cache settings for both Read and ReadAll requests for each your CRUD model class [New] Now caching could be defined at assembly level for global cache settings. It means you can define global cache settings for all your apis in one place, and then define specific settings at sub-levels to override this behavior when needed [New] Now policy keys could be defined at method level for CRUD api to. It means you can define specific policy keys for each request of each CRUD model class [New] Now policy keys could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific policy keys for all requests of each CRUD model class [New] Now logging could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific logging settings for all requests of each CRUD model class [New] Now logging could be defined at assembly level for global logging settings. It means you can define global logging settings for all your apis in one place, and then define specific settings at sub-levels to override this behavior when needed [BreakingChange] TraceAttribute renamed to LogItAttribute to suits its tracing and logging both features activation [BreakingChange] CacheAttribute renamed to CacheItAttribute to keep things consistent [BreakingChange] No more cache and policy attribute decorating CRUD api by default. You can activate it fluently with the options builder. 1.9 Apizr [New] Handling complex type as CacheKey [New] Now we can set Apizr log level within TraceAttribute to manage execution tracing verbosity Apizr.Integrations.MediatR [Change] Mediation's ICommand interface renamed to IMediationCommand, avoiding conflict with System.Windows.Input.ICommand 1.8.1 Apizr [Fix] Parsing life span representation as TimeSpan from CacheAttribute 1.8 Apizr.Integrations.Optional [New] Introducing CatchAsync optional extension method to return result from fetch or cache, no matter of execption handled on the other side by an action callback to inform the user 1.7 Apizr [New] Now we can toggle Fusillade priority management activation [New] Now we can provide a base uri factory (e.g. depending on config) Apizr.Extensions.Microsoft.DependencyInjection [New] Now we can toggle Fusillade priority management activation [New] Now we can provide a base uri factory (e.g. depending on DI resovled settings) 1.6 [Fix] Preserve attribute added Apizr [New] Now we can provide a custom HttpClientHandler instance Apizr.Extensions.Microsoft.DependencyInjection [New] Now we can provide a custom HttpClientHandler instance 1.5 Apizr [Fix] Now the manager waits for task with no result to handle exceptions properly Apizr.Integrations.MediatR [New] Introducing typed mediator and typed crud mediator for shorter request [Fix] Now MediatR handlers are registered correctly when asked from a manual registration context [Fix] Mapping null object now works correctly [Fix] Now MediatR handlers wait for its handling task to handle exceptions properly Apizr.Integrations.Optional [New] Introducing typed optional mediator and typed crud optional mediator for shorter request [New] Introducing OnResultAsync optional extension method to make all the thing shorter than ever [Fix] Now Optional handlers are registered correctly when asked from a manual registration context [Fix] Optional request handlers now handle exceptions as expected [Fix] Now Optional handlers wait for its handling task to handle exceptions properly 1.4.2 Apizr.Integrations.MediatR [Fix] Now nuget package as library both reference MediatR.Extensions.Microsoft.DependencyInjection nuget package for assembly version compatibility 1.4.1 Apizr.Extensions.Microsoft.DependencyInjection [Fix] Now Apizr works with DryIoc and Unity containers, returning a single UserInitiated instance, while waiting for external issues beeing fixed Apizr.Integrations.MediatR [Workaround] Doc updated to work with MediatR alongside DryIoc or Unity container, while waiting for external issues beeing fixed [Fix] No more WithCrudMediation method available but only WithMediation 1.4.0 Apizr.Extensions.Microsoft.DependencyInjection [New] We can now auto register both crud and classic api interfaces Apizr.Integrations.MediatR [New] We can now use mediation with both crud and classic api interfaces [New] We can now use execution priority with both crud and classic api mediation [BreakingChange] WithCrudMediation renamed to WithMediation Apizr.Integrations.Optional [New] We can now use optional mediation with both crud and classic api interfaces [New] We can now use execution priority with both crud and classic api optional mediation [BreakingChange] WithCrudOptionalMediation renamed to WithOptionalMediation Apizr.Integrations.Shiny [New] Shiny integration now offers all the same registration extensions methods Apizr.Integrations.AutoMapper [New] We can now use auto mapping with both crud and classic api mediation and optional mediation 1.3.0 Apizr [New] We can now define mapped model entity type from the CrudEntityAttribute above api entities for automatic crud registration Apizr.Extensions.Microsoft.DependencyInjection [New] We can now provide an IMappingHandler implementation to the options builder for auto mapping [New] We can now decorate model entities with MappedCrudEntityAttribute to define mapped crud settings for automatic crud registration [New] We can now associate api and model entities with MappedEntity<TModelEntity, TApiEntity> during manual crud registration Apizr.Integrations.MediatR [Fix] Cacheable ReadQuery now use the key value when defining cache key [Fix] Auto handling now works as expected with manual crud registration Apizr.Integrations.Optional [Fix] Cacheable ReadOptionalQuery now use the key value when defining cache key Apizr.Integrations.AutoMapper [New] Brand new integration with AutoMapper, to let Apizr handle crud entity mapping during mediation handling 1.2.0 Apizr [BreakingChange] Apizr instantiation/registration methods names standardized to Apizr.For and Apizr.CrudFor [New] Introducing ICrudApi service to manage standard CRUD api calls built-in Apizr.Extensions.Microsoft.DependencyInjection [BreakingChange] Apizr instantiation/registration methods names standardized to services.AddApizrFor and services.AddApizrCrudFor [New] Enabling ICrudApi auto registration feature with CrudEntityAttribute and assembly scanning Apizr.Integrations.Shiny [BreakingChange] Apizr instantiation/registration methods names standardized to services.UseApizrFor and services.UseApizrCrudFor [New] Enabling ICrudApi auto registration feature with CrudEntityAttribute and assembly scanning Apizr.Integrations.MediatR [New] Brand new integration with MediatR, to let Apizr handle crud requests execution with mediation Apizr.Integrations.Optional [New] Brand new integration with Optional, to let Apizr handle crud requests execution with mediation and optional result 1.1.0 Apizr [New] Aibility to manage generic web apis by setting base address with the options builder Apizr.Extensions.Microsoft.DependencyInjection [New] Same as Apizr Apizr.Integrations.Shiny [New] Same as Apizr 1.0.0 Initial Release for Apizr Apizr.Extensions.Microsoft.DependencyInjection Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Apizr.Integrations.Shiny"
  },
  "index.html": {
    "href": "index.html",
    "title": "Apizr | Apizr",
    "keywords": "Apizr Refit based web api client management, but resilient (retry, connectivity, cache, auth, log, priority, etc...) History The Apizr project was motivated by this 2015 famous blog post about resilient networking. Its main focus was to address at least everything explained into this article, meanning: Easy access to restful services Work offline with cache management Handle errors with retry pattern and global catching Handle request priority Check connectivity Fast development time Easy maintenance Reuse existing libraries But also, some more core features like: Trace http traffic Handle authentication And more integration/extension independent optional features like: Choose cache, log and connectivity providers Register it as an MS DI extension Integrate with Shiny Map model with DTO Use Mediator pattern Use Optional pattern The list is not exhaustive, there’s more, but what we wanted was playing with all of it with as less code as we could, not worrying about plumbing things and being sure everything is wired and handled by design or almost. Inspired by Refit.Insane.PowerPack , we wanted to make it simple to use, mixing attribute decorations and fluent configuration. Also, we built this lib to make it work with any .Net Standard 2.0 compliant platform, so we could use it seamlessly from any kind of app, with or without DI goodness. Libraries Change Log Project Current Upcoming Apizr Apizr.Extensions.Microsoft.DependencyInjection Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Apizr.Integrations.Fusillade Apizr.Integrations.MediatR Apizr.Integrations.Optional Apizr.Integrations.AutoMapper Apizr.Tools.NSwag Install the NuGet package of your choice: Apizr package comes with the For and CrudFor static instantiation approach (which you can register in your DI container then) Apizr.Extensions.Microsoft.DependencyInjection package extends your IServiceCollection with AddApizr, AddApizrFor and AddApizrCrudFor registration methods Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler method mapping implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler method mapping implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler method mapping implementation for MonkeyCache Apizr.Integrations.Fusillade package enables request priority management using Fusillade Apizr.Integrations.MediatR package enables request auto handling with mediation using MediatR Apizr.Integrations.Optional package enables Optional result from mediation requests (requires MediatR integration) using Optional.Async Apizr.Integrations.AutoMapper package enables auto mapping for mediation requests (requires MediatR integration and could work with Optional integration) using AutoMapper Install the NuGet .NET Tool if needed: Apizr.Tools.NSwag package enables Apizr files generation by command line (Models, Services and Registration) from an OpenApi definition using NSwag Apizr core package make use of well known nuget packages to make the magic appear: Package Features Refit Auto-implement web api interface and deal with HttpClient Polly Apply some policies like Retry, CircuitBreaker, etc... Microsoft.Extensions.Logging.Abstractions Delegate logging layer to MS Extensions Logging It also comes with some handling interfaces to let you provide your own services for: Caching with ICacheHandler, which comes with its default VoidCacheHandler (no cache), but also with: InMemoryCacheHandler & DistributedCacheHandler: MS Extensions Caching methods mapping interface (Integration package referenced above), meaning you can provide any compatible caching engine AkavacheCacheHandler: Akavache methods mapping interface (Integration package referenced above) MonkeyCacheHandler: MonkeyCache methods mapping interface (Integration package referenced above) Logging As Apizr relies on official MS ILogger interface , you may want to provide any compatible logging engine (built-in DebugLogger activated by default) Connectivity with IConnectivityHandler, which comes with its default VoidConnectivityHandler (no connectivity check) Mapping with IMappingHandler, which comes with its default VoidMappingHandler (no mapping conversion), but also with: AutoMapperMappingHandler: AutoMapper mapping methods mapping interface (Integration package referenced above)"
  }
}